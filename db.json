{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":0,"renderable":1},{"_id":"source/images/ceph/ceph.png","path":"images/ceph/ceph.png","modified":0,"renderable":0},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","path":"img/butterfly-icon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","path":"img/error-page.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"source/images/ubuntu/ubuntu.png","path":"images/ubuntu/ubuntu.png","modified":0,"renderable":0},{"_id":"source/images/ceph/ceph.jpg","path":"images/ceph/ceph.jpg","modified":0,"renderable":0},{"_id":"source/images/ceph/ceph2.png","path":"images/ceph/ceph2.png","modified":0,"renderable":0},{"_id":"source/images/ceph/iscsi.jpg","path":"images/ceph/iscsi.jpg","modified":0,"renderable":0},{"_id":"source/images/index/index.jpg","path":"images/index/index.jpg","modified":0,"renderable":0},{"_id":"source/images/index/wechat.png","path":"images/index/wechat.png","modified":1,"renderable":0}],"Cache":[{"_id":"source/images/ceph/ceph.jpg","hash":"b16788a2cf4531a64ac8ca20a211317b1d82db0d","modified":1735902943596},{"_id":"source/about/index.md","hash":"56e7c146bdf253829d86f439aa1551087655d468","modified":1736078437876},{"_id":"source/archives/index.md","hash":"e42b5f7db4f7e95637eb5d21a280ed85f6fd3cc0","modified":1723883313151},{"_id":"source/links/index.md","hash":"34b279637ffa7db35ae6507cf834fddc37118fc1","modified":1736078443012},{"_id":"source/message-board/index.md","hash":"58e34b3d298804e0d2ea8d55ae74d00d388c7633","modified":1722856044398},{"_id":"source/tags/index.md","hash":"4fa8417602e02f636636de98ebbfb7e94e18f101","modified":1723884347637},{"_id":"source/categories/index.md","hash":"ba08b6223ebbebfb0683147c217e7e983a9f3c2f","modified":1723883343701},{"_id":"source/_posts/2023/docker-springboot-config.md","hash":"49fb99ddee14cb3133eeaf24082b7c692bc53a31","modified":1722856044333},{"_id":"source/_posts/2023/docker-springboot.md","hash":"c48895b418a762e99c5e8db7921dc36ad978ef08","modified":1736069977898},{"_id":"source/_posts/2023/dockerfile.md","hash":"46a3902fb639d5dc960e99736f30eb3fc51a767b","modified":1722856044333},{"_id":"source/_posts/2023/docker.md","hash":"914ae68e7db304981cb60f4060a3585dd7af6fe1","modified":1722856044333},{"_id":"source/_posts/2023/https.md","hash":"f95e963e31870a6d51e32315a611ff1ebfe8d023","modified":1722856044339},{"_id":"source/_posts/2023/Hadoop.md","hash":"62ea2073e8b89de4e3314553e94d5728068b4b79","modified":1722856044314},{"_id":"source/_posts/2023/kotlin-springboot.md","hash":"da8089c3b71a21d76c5cbca30103e16f9978eeb2","modified":1723873490804},{"_id":"source/_posts/2023/localdate-springboot.md","hash":"017c4b6952170bef2a8539cd72e9c25a5f7ab9d3","modified":1723873490825},{"_id":"source/_posts/2023/gitlab.md","hash":"1da7c2da4eff1a7caa98d047f0b6c28e8c54138b","modified":1722856044336},{"_id":"source/_posts/2023/gitlab-ci-springboot.md","hash":"d1c340d8a8fb0325d089964a03bdce19dfafd18a","modified":1722856044333},{"_id":"source/_posts/2023/jvm.md","hash":"3720e5fb8be4dcfbb4bfb8e97576260207a7476a","modified":1722856044339},{"_id":"source/_posts/2023/thread-pool.md","hash":"8d1fc199ed4c8d77d9cab206231e0dcb46552a51","modified":1722856044366},{"_id":"source/_posts/2023/Hadoop/image-20200822090905199.png","hash":"25e8cd21aa5779e9f47fa546c247e867a84015e0","modified":1722856044319},{"_id":"source/_posts/2023/Hadoop/image-20200822090658863.png","hash":"d7fc3ffd118a9de3fd8ef2b5b6d558dc867902d5","modified":1722856044319},{"_id":"source/_posts/2023/Hadoop/image-20200822091216510.png","hash":"b8785e417cf113d5a83e4d71dc3226639d3f5431","modified":1722856044319},{"_id":"source/_posts/2023/Hadoop/image-20200822092048172.png","hash":"a67e04af7dbe1dc1778501f3220965b6f43b3eba","modified":1722856044320},{"_id":"source/_posts/2023/Hadoop/image-20200822093255847.png","hash":"eacb1a96d01d3ae079893859cde70b1f2989a978","modified":1722856044320},{"_id":"source/_posts/2023/Hadoop/image-20200822100056038.png","hash":"141d5c19c489fea0a62003641aefca5d74eb5e31","modified":1722856044322},{"_id":"source/_posts/2023/Hadoop/image-20200822091809558.png","hash":"7432d46f5c12e36dbd633f4b47c82c20f36c35e6","modified":1722856044320},{"_id":"source/_posts/2023/Hadoop/image-20200822102108817.png","hash":"03b11682abdcc18022e0fcb120d428f1f0f7148b","modified":1722856044322},{"_id":"source/_posts/2023/Hadoop/image-20200822102024933.png","hash":"d7124e486338ff4331137f38b1b4c1c6979f0a56","modified":1722856044322},{"_id":"source/_posts/2023/Hadoop/image-20200827081247672.png","hash":"aa0635adbf8548c108d58ef07adefaa21f929f7b","modified":1722856044330},{"_id":"source/_posts/2023/Hadoop/image-20200827081213048.png","hash":"1cbc3780302c1f4d525e55c446e7221db10221c6","modified":1722856044330},{"_id":"source/_posts/2023/Hadoop/image-20200830083752748.png","hash":"4d48d443e2fbf67f237bc3e91dd03d448101b5b1","modified":1722856044333},{"_id":"source/_posts/2023/docker/img.png","hash":"b143488994153ef0d6f7e54496b1032224d384a4","modified":1722856044333},{"_id":"source/_posts/2023/gitlab/img_0.png","hash":"d7f77d4af50b9c1ea9899716abf7d0c63617e28e","modified":1722856044336},{"_id":"source/_posts/2023/gitlab/img_1.png","hash":"96c624fe29a8788e745da8fa598815e09158a992","modified":1722856044337},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_10.png","hash":"995ab2fb28aeb05e4760c4e141dc10729c842961","modified":1722856044334},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_11.png","hash":"f41f8ea13677c8c36bf2e497ef6d1f98de9287f7","modified":1722856044334},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_7.png","hash":"ffafc6509bc1a548005e8668d090bed46cee458d","modified":1722856044336},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_8.png","hash":"a1a30dcd7dd81059add8dcb1c1b3c7583892cbb3","modified":1722856044336},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_9.png","hash":"32571f27b92a774d43d33cd6a32859ec58cac8ab","modified":1722856044336},{"_id":"source/_posts/2023/jvm/3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png","hash":"8e776b0b7ee3c45619f140503c9c27bdf20037ee","modified":1722856044340},{"_id":"source/_posts/2023/jvm/4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png","hash":"dfffd7906b9a69d21cb644b15b5ddb3932ee65f4","modified":1722856044343},{"_id":"source/_posts/2023/jvm/5f12c1e3-2e47-4997-a887-b395b511490b.png","hash":"da1effd9381c2231ae7fc51fda2210f532aecae8","modified":1722856044344},{"_id":"source/_posts/2023/jvm/626353d2-1f73-46e9-858d-732ed7bee94a.png","hash":"856df1b182f85194738502a882aece1f48dfdaed","modified":1722856044345},{"_id":"source/_posts/2023/kotlin-springboot/kotlin.png","hash":"fe1dbb0685411cb1e07231201162d28f18a6f03c","modified":1723873490824},{"_id":"source/_posts/2023/thread/0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png","hash":"663ac36db166b7f0f0be74799bf9f9e2badcc1f5","modified":1722856044369},{"_id":"source/_posts/2023/thread/210feb5c-150a-43c3-8b3d-440f53e343d1.png","hash":"316de16f4669bb9cd7933ac9052afec6640f33ef","modified":1722856044369},{"_id":"source/_posts/2023/thread/2feee3db-6b39-4e1a-9098-1a5f966742f7.png","hash":"5bd0d306e3fa5201b97dbea2754c913cb02d16f8","modified":1722856044370},{"_id":"source/_posts/2023/thread/3a071edf-6ded-487b-abbb-d016a9fe6864.png","hash":"07e81d464bfbed0cce4b25d8f75264b4365f455b","modified":1722856044370},{"_id":"source/_posts/2023/thread/3ce55a24-aeb0-4055-9925-c69a63ec9053.png","hash":"6fee86ac4ba8fb76dac7b65467ba6282f69e781c","modified":1722856044370},{"_id":"source/_posts/2023/thread/4b22adcb-879c-493e-a6dc-7a50426a6db7.png","hash":"0ee5d65ef5f85aeca6ce4e45e96d8731d4f4cfb1","modified":1722856044372},{"_id":"source/_posts/2023/thread/4f22eeff-a017-46f6-bf49-5359e570fe22.png","hash":"f58a2c6ca682fc86a56d4e5c11d14c0092d7fbd5","modified":1722856044372},{"_id":"source/_posts/2023/thread/51e456b2-69ca-4039-8ec3-137a74a3e57d.png","hash":"ee61890765721cbd674687298584e6094d6203b5","modified":1722856044373},{"_id":"source/_posts/2023/thread/52ebada9-ad0c-45fc-9482-40b961c20bbf.png","hash":"c70ea807c2b5bc2c7c3e1ec5e7b2a5247ce05e59","modified":1722856044373},{"_id":"source/_posts/2023/thread/5cce206b-f24c-4489-afda-57b5a3102172.png","hash":"b767fe80aa4b611bacf1bcd3f9fd43d3a30c9f5d","modified":1722856044373},{"_id":"source/_posts/2023/thread/683dd209-d862-46f9-878f-b9e8f4c2db3b.png","hash":"b6e8d9ad8d6023695c28d85cc9984a8e3a311cd1","modified":1722856044373},{"_id":"source/_posts/2023/thread/6d0f8427-4068-4a15-a933-cd3f74e28dbf.png","hash":"2f093ea67352ffa5206724c6a0a74973bea851b8","modified":1722856044374},{"_id":"source/_posts/2023/thread/70691192-ef7e-43b6-b365-d139f036e188.png","hash":"f2a08244782535b2da540ced9432a97469feeb0b","modified":1722856044374},{"_id":"source/_posts/2023/thread/7bf73e18-7259-45da-93c5-a4183062572e.png","hash":"71b171d00227e1db64ee9cc852edd95a4f42f8ac","modified":1722856044375},{"_id":"source/_posts/2023/thread/7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png","hash":"588d6599688192f7cd1bbc9a3b7660e3bb4fabb0","modified":1722856044375},{"_id":"source/_posts/2023/thread/815e324a-777f-4b34-b590-acbb4c624cb0.png","hash":"b2cafbf904b30d436cff0f586b8cf7509a53fbe8","modified":1722856044375},{"_id":"source/_posts/2023/thread/75442144-d101-4e7a-97ca-c833a2b827fe.png","hash":"7424b987b22a83d9b74a04cfeac3107ccd268592","modified":1722856044374},{"_id":"source/_posts/2023/thread/86d6badd-f76b-4152-8044-bef85f333017.png","hash":"9738c63f3b469c594cda5cfc94c1647890a05940","modified":1722856044376},{"_id":"source/_posts/2023/thread/a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png","hash":"9ad36c024752065b597cc3dad8b05be6a023e531","modified":1722856044377},{"_id":"source/_posts/2023/thread/bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png","hash":"3cec796993b6ee3fadb1c4aac935527701226d0e","modified":1722856044378},{"_id":"source/_posts/2023/thread/ca324ec8-b1a0-419a-a962-640dae424e10.png","hash":"c42c3d3dcc1c8ca4d9ff81253d88b1b73dfd6360","modified":1722856044379},{"_id":"source/_posts/2023/thread/c2203c1e-3091-4832-8061-8ba8bc3b24d1.png","hash":"9f26f95685b8c6c38bb857cb27756a6f12e2edc6","modified":1722856044379},{"_id":"source/_posts/2023/thread/cb65fed7-57dd-404b-b4f1-e365dbe83379.png","hash":"290852347a4d3d810007dc01b9db3bec494d1d9c","modified":1722856044379},{"_id":"source/_posts/2023/thread/d05f71ef-bbbb-4b19-a804-6444a74de835.png","hash":"f7feac9d118a9ceeae453270fbe57f346405a776","modified":1722856044379},{"_id":"source/_posts/2023/thread/d37e0c1b-1e69-4360-937a-edf5296f47ce.png","hash":"2b111d57e4382379c3da9dfcc65b7fdb2737edaa","modified":1722856044381},{"_id":"source/_posts/2023/thread/f5e5190c-2ca0-4467-8618-c9084b18b26f.png","hash":"1a84944ce5afcf74a3a1bcc5afa2b4042167df6f","modified":1722856044384},{"_id":"source/_posts/2023/thread/ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png","hash":"551d3b922458221f252abe7f88ba3f5aed400408","modified":1722856044383},{"_id":"source/_posts/2023/thread/f78c9ec4-6379-48de-b2e6-f529bb063540.png","hash":"028bb29d17c1c8eed636a0756db0690fa03ff83b","modified":1722856044384},{"_id":"source/_posts/2023/thread/feed6992-8dff-450c-9010-e2f46caf6243.png","hash":"f6e1257845d5914ac68f56dc052dc39afbc82115","modified":1722856044384},{"_id":"source/_posts/2023/thread/image-20200806070323056.png","hash":"6796a4feb0fc360f4c82e6290c77af0d33780b47","modified":1722856044385},{"_id":"source/_posts/2023/thread/image-20200806070304756.png","hash":"f9dfca825356fc1e2c30432b35d0648b9d549b50","modified":1722856044385},{"_id":"source/_posts/2023/thread/image-20200806080136510.png","hash":"9103f2678ec0cefb33cb191e5009341d9d698eda","modified":1722856044386},{"_id":"source/_posts/2023/thread/image-20200806081215362.png","hash":"492631ff5318a7e8b9349f632d6529a868d93061","modified":1722856044388},{"_id":"source/_posts/2023/thread/image-20200806081339039.png","hash":"cffbdb84a9a9e35e010bfd44e2e34858af7d5637","modified":1722856044388},{"_id":"source/_posts/2023/thread/image-20200806081409317.png","hash":"ba278464bf35d6052fa89ae01d9974c4ddaf1884","modified":1722856044389},{"_id":"source/_posts/2023/thread/image-20200806093605366.png","hash":"694cfbe498d562957601afae761fd13dd40be691","modified":1722856044389},{"_id":"source/_posts/2023/thread/image-20200806112353892.png","hash":"b7dcaaad87ecfb99fc562e9ec042695b2d51a797","modified":1722856044390},{"_id":"source/_posts/2023/thread/image-20200818213438504.png","hash":"f1c421e1781dcfba8098b39151285e6ab320cd64","modified":1722856044393},{"_id":"source/_posts/2023/thread/image-20200819064936628.png","hash":"a49e6013c091b78f269d1301ce98ef221282af35","modified":1722856044393},{"_id":"source/_posts/2023/thread/image-20200819065601188.png","hash":"0640011d4ca03ca90746874dee5f40e4e32dd905","modified":1722856044394},{"_id":"source/_posts/2023/thread/image-20200819065515918.png","hash":"582e986b0b79cbc6ed7365ca61e336eb595e0998","modified":1722856044393},{"_id":"source/_posts/2023/thread/image-20200819065708766.png","hash":"72b90495ef9382ebd6c505e6a5d6f36ad1e318ca","modified":1722856044394},{"_id":"source/_posts/2023/thread/image-20200819065931928.png","hash":"15aa55530c3c335c250ab871610b8df489c9d860","modified":1722856044396},{"_id":"source/_posts/2023/thread/image-20200819071139042.png","hash":"2a6dcba9c5f8e427624744e43b9ad722bbc49739","modified":1722856044396},{"_id":"source/_posts/2023/thread/image-20200819071006301.png","hash":"1f153e2698d1babc2be26e7fa9782c55cc4ef072","modified":1722856044396},{"_id":"source/_posts/2023/thread/image-20200822234416578.png","hash":"9ec2f0afd72eae56ce6d748bfa689ddc78e9d70e","modified":1722856044398},{"_id":"source/_posts/2024/ceph/ceph-start-iscsi-daemo.md","hash":"1d22245105b8070046d90ae40ddf38d895239648","modified":1735902943080},{"_id":"source/_posts/2024/ceph/ceph-osd-type.md","hash":"b744639659eb303590e751da45ec46f390c50a9e","modified":1735902943096},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages.md","hash":"8559ae9bb4333447c1adf5d3ff5ac207adf5fc72","modified":1723886827276},{"_id":"source/_posts/2024/jsch/jsch.md","hash":"fb1a1aec2921701bf666e78fa17b43a5c815af31","modified":1723883919661},{"_id":"source/_posts/2023/thread/image-20200819072504262.png","hash":"bbaee27959b4ef444eff941b385c266ab43b3699","modified":1722856044397},{"_id":"source/_posts/2024/ceph/ubuntu-install-ceph-iscsi.md","hash":"adb86b38a737cb84ad7597d7a049db19678c91e8","modified":1735902943080},{"_id":"source/_posts/2023/thread-pool/e0733727-92bd-4438-a628-3b3989d8e838.png","hash":"c2291fdef94fd0aa6a714767358a290ea33eccc2","modified":1722856044367},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240808144842305.png","hash":"da965568b5f4488c1011ef098bfaa9f2a454b8a3","modified":1723885493000},{"_id":"node_modules/hexo-theme-butterfly/LICENSE","hash":"1128f8f91104ba9ef98d37eea6523a888dcfa5de","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/README_CN.md","hash":"6e79be6f188bd671eb6ef1084ea7dd757fa2b3e9","modified":1736302311340},{"_id":"node_modules/hexo-theme-butterfly/README.md","hash":"310bf423097f1cefb6121ce3f115b2ef68aacc44","modified":1736302311344},{"_id":"node_modules/hexo-theme-butterfly/package.json","hash":"b3cf4b89826d6b6b1810c5498049d004c8de3ce9","modified":1736302311340},{"_id":"node_modules/hexo-theme-butterfly/plugins.yml","hash":"a244af3b578de079666bd87c3055917220e63c25","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/.github/FUNDING.yml","hash":"da5e77f5e0cdb7e11b36546fb6796d10e3dfbe5d","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/languages/default.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/languages/en.yml","hash":"f46a8e362641f7a7c432d68e3984e739d5fe6b44","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-CN.yml","hash":"e91ac1a94e1fc84cd75bc6b0a8b7a62acfb2a516","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-TW.yml","hash":"9fecee5467e9c5034515fea73f1901c3c67e8ef9","modified":1736302311760},{"_id":"node_modules/hexo-theme-butterfly/layout/archive.pug","hash":"bb32c9c476372de747dfa563b83f77d7a917a77d","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/category.pug","hash":"bf07d9624ac7285214c7f1d505da3a813c164c8c","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/_config.yml","hash":"30b0e274e266a2c4566bd5122681b41f7a7affea","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/layout/index.pug","hash":"6aba5fd01aba75fd38ef2e2c1d406d951b8c5560","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/post.pug","hash":"d000b6a16418c1d95d4ce49ff9346416bbb151d3","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/tag.pug","hash":"98c0084a4c62415775ca9e261e3d4eeb7668f35b","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/page.pug","hash":"a59b90dd3f845ef6bac18091c55e8e019f4fe7a3","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"7b4831ae8f8f8c55dd1b856781210c517c63e6dd","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"df07add8fca55a7a12173af53201d306000fd9e0","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/publish.yml","hash":"05857c2f265246d8de00e31037f2720709540c09","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"996640605ed1e8e35182f0fd9a60a88783b24b03","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/404.pug","hash":"cb49f737aca272ccfeb62880bd651eccee72a129","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/.github/workflows/stale.yml","hash":"ac62b989b5550c756e1986fcc68f243170705383","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/additional-js.pug","hash":"cd2e0141d7bbd2bd348703ead52c8060904ab338","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head.pug","hash":"82548510310fb44587371fcc9afd7f0bbdb673b1","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/layout.pug","hash":"345cb07213cdf66cfef7d9699c60f5f3297e9585","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/footer.pug","hash":"78cd51877c72a66de13ad88af6687627d4743b03","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/pagination.pug","hash":"eb31f49a826c1f95890078745e55c9a2ccb319f9","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/rightside.pug","hash":"7d3581a446285b0cd9362266d54b59fe8768af9e","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/sidebar.pug","hash":"d4f3a798cdded0c0744efab3b1397b00cdb0c6e5","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/404.js","hash":"a196e0d2eb40d1643bcf53a467ad37104f877ca5","modified":1736302311148},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/cdn.js","hash":"21fb5aabe043486d095c4c8cce361ed85ba88a26","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/comment.js","hash":"0e59424100fc3138b9096b38a0a2384a6411f8d9","modified":1736302311248},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/init.js","hash":"428b94c7b9e83f7ea36227dee66bfe3c23aee4a8","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/stylus.js","hash":"1ac9527c510ca757724f15dec84b0ead032411b2","modified":1736302311304},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/welcome.js","hash":"8ad9911b755cba13dde2cc055c3f857a6b0dd20e","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/post_lazyload.js","hash":"860f967ecf3c6a6ea785b560a7aae4d0757cd18a","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/filters/random_cover.js","hash":"a8eef3f37428436554f58a2b6bac7c255fbdf38d","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/events/merge_config.js","hash":"072f042e069e7a0523fa439569c0c672f389b5c4","modified":1736302311268},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_archives.js","hash":"24a88d138ccabf29698a6cfe399b2e10f126367f","modified":1736302311148},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/aside_categories.js","hash":"5edf400514843e28b329c3fd3f12f66ed5faca66","modified":1736302311244},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/findArchiveLength.js","hash":"7caf549810f971c34196fb9deac2d992545bdff9","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/inject_head_js.js","hash":"7397db8012c27a4a1da75dd659745676654a0c65","modified":1736302311252},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/page.js","hash":"39325366b622cfd2089cb1c9344d89f2edd79816","modified":1736302311272},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/related_post.js","hash":"9c2ee5868879529f7cef7d93edca5b755f45e7e9","modified":1736302311304},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/series.js","hash":"806e2e5843df23e7eb94709056676f5ce6bfefa7","modified":1736302311304},{"_id":"node_modules/hexo-theme-butterfly/source/css/index.styl","hash":"755490867fd8afe47d5cce24faea2ca172b0c4dd","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/button.js","hash":"132d1e7757d0dac42d6b0957a25484613d7ed873","modified":1736302311248},{"_id":"node_modules/hexo-theme-butterfly/source/css/var.styl","hash":"8cc7b245da61e35cfcc80cafb4e553b5fa968111","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/flink.js","hash":"555f7e4a2a7d8c4420ca467e87625bf96db11a70","modified":1736302311252},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/hide.js","hash":"365db87ddfc582bf8c15cb440c48bed95106e4b1","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/gallery.js","hash":"e0abf9f0ec51a78258bbf0101632e7dd2c54db25","modified":1736302311252},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/note.js","hash":"1acefc59ead75ebd8cafee36efc7da4fa426d088","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/mermaid.js","hash":"5c2a07df5874b5377540884e4da14dd21489378f","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/score.js","hash":"5cb273e95846874e3a58074074c501df23c5e912","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/tabs.js","hash":"3a9a28f6833e9cea60761e52ab8990fcb597444f","modified":1736302311308},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/series.js","hash":"f4507d1527cc0d5fe9fdd89eb769e15814a18fec","modified":1736302311304},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/timeline.js","hash":"67c1aad5ddfe56deae672146c2774379aa65af95","modified":1736302311308},{"_id":"node_modules/hexo-theme-butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/js/main.js","hash":"9fb88eb196f9368768aaa554c679129e4969f069","modified":1736302311264},{"_id":"node_modules/hexo-theme-butterfly/source/js/tw_cn.js","hash":"7ef59df188ea523da89f4caf69c5c0f14e78da69","modified":1736302311340},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/label.js","hash":"22bc3a24c3610b5a3c3a2043b7d10e26d00018b8","modified":1736302311256},{"_id":"node_modules/hexo-theme-butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/js/utils.js","hash":"fd3c26366c78dd82bc87d4ddebe76c582122e1b7","modified":1736302311340},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/Open_Graph.pug","hash":"2beb68bdd43b09a539c8f4ed0cb7c0838c03409a","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config.pug","hash":"fbe602e22ee4a60d711485ad925dfe06b92a4c76","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/analytics.pug","hash":"e5a26d2e2ca789dffc6bd9cfc13ff9e530c9911c","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/google_adsense.pug","hash":"95a37e92b39c44bcbea4be7e29ddb3921c5b8220","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/preconnect.pug","hash":"5208fe1e75d97a05fd9bdd6cc53c59d8b741b94b","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/config_site.pug","hash":"c681697eac3657c2c3e921c2774d67bb93d47331","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/pwa.pug","hash":"0e301fe266b3260257b5a619dc8eedf2c1955e7e","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/head/site_verification.pug","hash":"e2e8d681f183f00ce5ee239c42d2e36b3744daad","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/index.pug","hash":"f4f590102c1937d63da5edf35f2ff37f5932ccc1","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/menu_item.pug","hash":"95316827e12ec1a2cee18b7d5f49971e9a88b138","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/nav.pug","hash":"cd507e58852dc59a72e624fc1b22dc9b138c2575","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/inlineImg.js","hash":"512c68a22ae4a58d6a6b24b368a0c00c2ccb4fcb","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/social.pug","hash":"b7608dca3d361001d661779fe8be03c370231c41","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/header/post-info.pug","hash":"605809f97b2f0da0e2e84dd2365fc8ccee1de6bd","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/fullpage-loading.pug","hash":"55090eee8076af761be7741b4e330ceea07c27d7","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/pace.pug","hash":"38b85f46c8e1bcbc43d2a4875d94ea201518eeeb","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/loading/index.pug","hash":"8b12fa52bd522dded8b7f1ae3f580f339d75aecf","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/article-sort.pug","hash":"10aa44e0216dbde863e2bd41267b613dc220e517","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/post-ui.pug","hash":"6f310ca7b392021632b987557607d5b6d18052bb","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/flink.pug","hash":"a6c3a4a608f540d05105a7ae19e2f5719c2a3f71","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/tags.pug","hash":"38c0781ac7544d2010d5bfe7ae521125f3672975","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/default-page.pug","hash":"4912beecdef7af33f0704ef4d6605e1ac69fbb11","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/reward.pug","hash":"2dca79799c566ffa68b21ecefa9c63432b5088e1","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/aplayer.pug","hash":"0595d60dbf701e2ffa92181923861b1457a02112","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/post-copyright.pug","hash":"2bef558fa87986805b3397319b4c088564ba7c44","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pangu.pug","hash":"0c1affa498b28e79e5a465f3f8f18035993bcb88","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/effect.pug","hash":"1d39670ee6225f85f5c53bf5c84f3fd6e19290e8","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/pjax.pug","hash":"5c7605a0353ef2709f75bad27794f985c7c78907","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/prismjs.pug","hash":"512111475060798925eb1a7bc7617c34b8bd32ab","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/subtitle.pug","hash":"21d42f43f26a2075abf2e6d13d35fb1aaf53a8b4","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_archives.pug","hash":"86897010fe71503e239887fd8f6a4f5851737be9","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_announcement.pug","hash":"ae392459ad401a083ca51ee0b27526b3c1e1faed","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_ad.pug","hash":"60dc48a7b5d89c2a49123c3fc5893ab9c57dd225","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_author.pug","hash":"4ae59a48f8984ce8316cfc82756180dc496774eb","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_bottom_self.pug","hash":"13dc8ce922e2e2332fe6ad5856ebb5dbf9ea4444","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_categories.pug","hash":"d1a416d0a8a7916d0b1a41d73adc66f8c811e493","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_series.pug","hash":"bd5ad01277f8c6ddf8a3a29af1518e5fe6eed23f","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_newest_comment.pug","hash":"ba95646b78688bcdcf77166407c4799e5e3c3e6d","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_recent_post.pug","hash":"e5aac7b28ed4123d75797263c64e74ac547945bc","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_tags.pug","hash":"eceb4420a64c720f0d2741e89d6229bbb3d87353","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_post_toc.pug","hash":"a658a274c5f7896ee5122725bee45548693bdd66","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_top_self.pug","hash":"ae67c6d4130a6c075058a9c1faea1648bcc6f83e","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/card_webinfo.pug","hash":"5da5f11a0f7f0fc06732df412bb77a7dddc41429","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/widget/index.pug","hash":"66f7a8b0cebc05c575ec3cb70b08d6854029d87a","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/function.styl","hash":"15f321aee7876f2366677914a7cd2ab8b071b162","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/theme.styl","hash":"4765d72ab300910437d64991d3f70a82b41d4e3a","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight.styl","hash":"79e95511d8d51e8944092b9596994d9779c1f4e4","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/aside.styl","hash":"3312e3bc1076ac8ba9dd902a671602c78a5e1479","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/source/css/_global/index.styl","hash":"506bbff9c954d5f92a6d97145be2d732571fae39","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/comments.styl","hash":"134811b2d696f9ed2c0cd578f3886f1c60770c0a","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/chat.styl","hash":"1a864887fb1bc9d24caa6b8b63a9bfc251762ffd","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/footer.styl","hash":"4382ecffdb778de9fa05edf24765b68ae6da1220","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/head.styl","hash":"dbd4af28bbf2fe9a7d75a75fdf460dfb3317311a","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/loading.styl","hash":"ac2aeee9926f75b2a0098efe1c114126987430f2","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/pagination.styl","hash":"316447b94933af2cc580cc9c2b8b42e3875b8c08","modified":1736302311748},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/post.styl","hash":"0ba6e4f5252d1a95e9dfa20b4a17207b6713947d","modified":1736302311748},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/rightside.styl","hash":"743f9dd5585ecac812f3aa908eede4093d84fbd7","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/reward.styl","hash":"0d0ef8a9260b494e50ef545e5f395d649418f0a9","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/sidebar.styl","hash":"be7ee2c63cedbc6b7f03cb3993ec533d9ae9d8bb","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/third-party.styl","hash":"a96513acd7f51ffa01531ef3a24fdf5391ae93ae","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_layout/relatedposts.styl","hash":"517361bf999e41fdea2c57e0af6e82d310f76edd","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/darkmode.styl","hash":"11a0fde4e784b0af5bb813c9e9ca9e480e5db99a","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_mode/readmode.styl","hash":"e2761a2515b34d2d41dea00551abc44d4ce72aeb","modified":1736302311748},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/404.styl","hash":"354902d03f13068cf8a3617fb0ea92669e6b2a86","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/categories.styl","hash":"643ff8c79d033947da312b70847b1b45850d7b29","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/flink.styl","hash":"b02e88bb5dafcef11be4669da6cd9cddbf9a852a","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/common.styl","hash":"8aa755a3f588e6e598e4fb6510faa6e766d59a94","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/archives.styl","hash":"c08432ecceaa187005c55144cf6f2b092ca50820","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/tags.styl","hash":"e765323537d174c7dcb88614100ccdc3e2d020e1","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/homepage.styl","hash":"3fa5aa012c62da3b5220654426c0708cab24e9af","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/index.styl","hash":"e2046eed9503ac506d5ca120b60203dd2cd968af","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/algolia.styl","hash":"44d6b9fa9f0cb9026722f7dda15368d41d3fed20","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/source/css/_search/local-search.styl","hash":"1ce084ed240d0e998bcdf1416ada598637878398","modified":1736302311744},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/button.styl","hash":"2c71b5bfb873d57eb6532144f66e86183dd0dcf6","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/gallery.styl","hash":"5ded9ddc66777e93cc4f0e1e4349540c0249346d","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hexo.styl","hash":"d76c38adf1d9c1279ef4241835667789f5b736e0","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/inlineImg.styl","hash":"f7415acfee7adb5ba01fd278b1e16b636a6b20a1","modified":1736302311744},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/note.styl","hash":"909bb5079b26b6ee68177919f522566503654058","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/hide.styl","hash":"7e5ca6a899c66b26cebc027db530d54018e2c5c0","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/label.styl","hash":"4a651e47d658340443bb63b7d15a1e9e34f76aca","modified":1736302311744},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/tabs.styl","hash":"e76655e699154c3d39043c1a5bb8400dc1658399","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/timeline.styl","hash":"62d03f6c429c2de256a204399610a041cab23b04","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/algolia.js","hash":"e5821f78381af9f0f646952a7dd118daab2a79a6","modified":1736302311148},{"_id":"node_modules/hexo-theme-butterfly/source/js/search/local-search.js","hash":"4e11d033fb58563f5e1b497f1a6f1c62d3501ee6","modified":1736302311256},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"cb77a73a2b47156d18afb9f2376b3d502d0d12d7","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/source/css/_third-party/normalize.min.css","hash":"2c18a1c9604af475b4749def8f1959df88d8b276","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"71af0b679e00290b0854384368b3c7e9b3e5f26a","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/abcjs/index.pug","hash":"cabb3a06f8ef297a1ea3d91ced8abeaa0831aa14","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"a35c21e9ec2bef465c945408da515bfb5d848d6d","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"b2d274db84ef22fbd6d5ea8f4404821898934209","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"007bb96fd84f38852b7ab5f761e6867b6058422f","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"001e8be47854b891efe04013c240c38fed4185eb","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"c5f7081ca29db8cc80f808dfc29e36d5fa22fd7e","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"5715fc2dc75808af0a434fe66b81d0f651d03ed3","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"3a5ccfc69bd8ccb4b8f3ce3502023f7914f2a022","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/chatra.pug","hash":"8b21906b1b3f3faa19bdc16f4167b0b5d487c9ac","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"9b57a8e13de8fc51a5f550854e47164fd8ac1be8","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/index.pug","hash":"5aaef147ae31e1ffc49152acd43dabc5f15b39ba","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/messenger.pug","hash":"e39a9c37adf4cb15a2ba3b2cc65542ffea88650d","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/tidio.pug","hash":"9ed621742714de6de6593490e3d4aaa3f30a4791","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/chat/crisp.pug","hash":"2c6eb1b0b3586ce6a92228f809be37642a2010b0","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/artalk.pug","hash":"f71d8acf5b0f3ece91ae1e018962c73b50941a45","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqus.pug","hash":"be40f20273c31e8b37353d9705ad9b9c693e16a2","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"8f3d4c33ec3d1be4bd203ba2461db9ccfad63f23","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/giscus.pug","hash":"966ef931a9545cdde8c270322e8650b54b965935","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/index.pug","hash":"a9709905593d960954e2dd572f09f48a6c2b1ef7","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"d040c00332e83c985dbc0e76e3242336edbcd764","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/livere.pug","hash":"6ddd9dce1a553a0d24509d7f9c78b9f6742be030","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/js.pug","hash":"00ed91c52939b9675b316137f854d13684c895a6","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/remark42.pug","hash":"830bafcf50180fed4fcf76f0da277d702e66a5b3","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/utterances.pug","hash":"46c177643a8e65f036cb08c29387d4ab29485859","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"dd5c7e808654aefeb3fcc81c7b0911cff1ee8776","modified":1736302311716},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/valine.pug","hash":"5227663ccbe86c830447e4dcc594202b1582595d","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"8869bac6ec822a70dfe432d7bd5e599750441ddb","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/comments/waline.pug","hash":"bfc6e6690e70c5bd646bdff354b750ebd782f4ad","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mathjax.pug","hash":"49aece5be2a0a8e414257ecbfc2abd7d0d5f8c64","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/katex.pug","hash":"1c2190c9bac26992de8d52be4f8522309d566750","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/mermaid.pug","hash":"2e82651607326e7f999fc7891480c74a06cbb416","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/index.pug","hash":"bd87dc207f1cab66e48496548b18f0dd9021eb91","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"86cf7ba9cae6eb8bee0ca792df7a82f58c8451ff","modified":1736302311708},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"b82c936cb73c325fcac69832a3e475ed732e06f9","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"619c41729691a54871b49da54ea27657d1b58e7e","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"16796729df739a47508999b5467a57037ee6e9df","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"eee2c6b5c73ea280c7b683a1d117cab5a2ea5f66","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"393a327a7f41de070abd53cd95149d3e7e1bbf61","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"988f75833dcb18d4a02c34cdea51e39434ea5723","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/algolia.pug","hash":"9c3c109a12d2b6916e8b4965cca12f521510ead9","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/docsearch.pug","hash":"18b492731f67d449bb32d7fac321deb57a92e75f","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/index.pug","hash":"11a4e7decb634fbd6af454aa5ec230945837b6a9","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/search/local-search.pug","hash":"f11c6db285f57a475db638e74920efb2d0e5a4d0","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/addtoany.pug","hash":"85c92f8a7e44d7cd1c86f089a05be438535e5362","modified":1723873501618},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/index.pug","hash":"8a7d5cdca6a87897d435fc88ebcb7ec0b7ec8591","modified":1736302311720},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/share/share-js.pug","hash":"393c94702fd65c585e37bcf9a4f33c638d8bac72","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/diff.styl","hash":"fdcc5a88505fcbf0593aa04ecb4ac0c8ad4f8fa3","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/diff.styl","hash":"dcd3af96d8be1a6358a88daf2c66165cc9b792d9","modified":1736302311736},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/highlight/index.styl","hash":"cc272f7d612a52f4f1d2a95456cc89bc709fe0e5","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/index.styl","hash":"1997713a8722391c8b5c8c1598ec19adee993fa5","modified":1736302311740},{"_id":"node_modules/hexo-theme-butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"ed77729c26cf815c75efd3a6889b6ac805471765","modified":1736302311744},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"4ec0642f2d5444acfab570a6f8c7868e7ff43fde","modified":1723873501618},{"_id":"source/_posts/2023/Hadoop/image-20200822091335115.png","hash":"e08813cdce7071540bff67fbb0cbd07af5bd85a7","modified":1722856044320},{"_id":"source/_posts/2023/gitlab/img_3.png","hash":"3a260c5afd1cebacc9cbb42b49dcc3a52399edf5","modified":1722856044338},{"_id":"source/_posts/2023/gitlab/img_4.png","hash":"6091a762b81a9854e08360e39d39b2de42b378e4","modified":1722856044338},{"_id":"source/_posts/2023/gitlab/img_2.png","hash":"7b0a07bc04b004d74d47754411a5825e0ab03062","modified":1722856044337},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_12.png","hash":"6b2f4e69a0850b3bebbb59e9ad5b0a68cd76d4d0","modified":1722856044334},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_5.png","hash":"aa538d95ed2d8361ab43f6b5d677264350503542","modified":1722856044335},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_6.png","hash":"b968b33971b7dcbb31679803d1cd7c729eeb02e4","modified":1722856044335},{"_id":"source/_posts/2023/jvm/0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png","hash":"5d4398baa866a6b1bbfb9f1d9026d57bf52e87f7","modified":1722856044340},{"_id":"source/_posts/2023/https/https.png","hash":"62ee9c6405db5bc8c20553be16706d684b2800ab","modified":1722856044339},{"_id":"source/_posts/2023/jvm/3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png","hash":"57e32b13dc4acddd9f89aa60af0df1d5c6a22684","modified":1722856044342},{"_id":"source/_posts/2023/jvm/787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png","hash":"513ad7700fa9783cde27d59842375cb3530c41aa","modified":1722856044348},{"_id":"source/_posts/2023/jvm/9111c342-79fb-4def-aef6-d266daea6078.png","hash":"0197a97dc0443916f3c5878684be02142dc662be","modified":1722856044354},{"_id":"source/_posts/2023/jvm/a670f078-2260-4276-8db9-79112eb9e979.png","hash":"a366309db43e3f406c0b0c19a0878927f6393d14","modified":1722856044355},{"_id":"source/_posts/2023/jvm/d215e636-ea46-4b84-a861-4aff3dbdbf0e.png","hash":"222caaea6f4182e6f2cf625341d57c4ef50757fd","modified":1722856044360},{"_id":"source/_posts/2023/jvm/f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png","hash":"467301f9b42b8054230b7a53a9c5c2386a2d3ab1","modified":1722856044366},{"_id":"source/_posts/2023/thread/44fc6f61-2e64-414e-be76-0486d270b52b.png","hash":"73031b5bab90a9f861e5c2048a06896e1c068d24","modified":1722856044371},{"_id":"source/_posts/2023/thread/81a4db1a-c8d1-47f7-a955-39db726f5173.png","hash":"385a28b5e0f34702a41dd2041a5369c7f4771ba1","modified":1722856044376},{"_id":"source/_posts/2023/thread/9372a527-1cf5-4699-9271-f9724c815f24.png","hash":"c36cde5b2b7444dec832d2d89216de12b18f337f","modified":1722856044377},{"_id":"source/_posts/2023/thread/b94de8b0-5933-49dc-b0ff-a29a03280074.png","hash":"3eb0f33baa51a9d471413bfa13e0be3273f5fd11","modified":1722856044378},{"_id":"source/_posts/2023/thread/d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png","hash":"6e393cf40a3127c3b264b5c3b9f43bd57df1bc76","modified":1722856044380},{"_id":"source/_posts/2023/thread/d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png","hash":"074cbb6b221f5649703ccb248fa39eba78a01800","modified":1722856044380},{"_id":"source/_posts/2023/thread/d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png","hash":"a0b67dcf2acae58a56fa219df0693d17b8c03e4c","modified":1722856044381},{"_id":"source/_posts/2023/thread/d9550ede-fad3-4675-8791-3a1237fab0de.png","hash":"a392ef2a1ec3f75da751cb47d742f8f6527c448e","modified":1722856044382},{"_id":"source/_posts/2023/thread/e1c2fc78-6f75-4049-8631-1e2bf400e92b.png","hash":"df1459dc58074f9d28da5b520628f0bcb0a36742","modified":1722856044382},{"_id":"source/_posts/2023/thread/image-20200806072602725.png","hash":"3f5236edb47f8fc9c8ad7fc10a04fa7e327d6468","modified":1722856044385},{"_id":"source/_posts/2023/thread/image-20200806080218070.png","hash":"a74b746c12ca67031ce2b19da9a1407a85425fb5","modified":1722856044386},{"_id":"source/_posts/2023/thread/image-20200806080425078.png","hash":"9d4080b53d58141084834173b5b9c02be9e47a4e","modified":1722856044387},{"_id":"source/_posts/2023/thread/image-20200806080338819.png","hash":"6300a2c7f65c40beeb2bbc3084401fbf87e4ddc1","modified":1722856044387},{"_id":"source/_posts/2023/thread/image-20200806081309415.png","hash":"29bd021c0d14e30a0d4133a9f73ad0b03d0dc048","modified":1722856044388},{"_id":"source/_posts/2023/thread/image-20200806093649652.png","hash":"de3e5ea75f2909cb9e9bb6d5628cadc22f82512c","modified":1722856044390},{"_id":"source/_posts/2023/thread/image-20200806113017975.png","hash":"81c550995075bf03c29518f6f31e64ac5e6c3773","modified":1722856044391},{"_id":"source/_posts/2023/thread/image-20200806113212737.png","hash":"c4d5e47497e3d4cefc40a6f4f14350d5a7e8456e","modified":1722856044391},{"_id":"source/_posts/2023/thread/image-20200806115634318.png","hash":"c7d9fbd613fe6f3738a3a75011fa2e93a48477a4","modified":1722856044393},{"_id":"source/_posts/2023/thread/image-20200806113622053.png","hash":"83e346987a6ccba16456e8d84c60b43f9b238390","modified":1722856044392},{"_id":"source/_posts/2023/thread/image-20200819065820151.png","hash":"5b7a2c8899ed1fabcc811e64067ca27776dc2034","modified":1722856044395},{"_id":"source/_posts/2023/thread/image-20200819065835524.png","hash":"5b7a2c8899ed1fabcc811e64067ca27776dc2034","modified":1722856044395},{"_id":"source/_posts/2023/thread/image-20200819072452480.png","hash":"1b4721d50279ed36c46bc90adbce4868de21b27d","modified":1722856044397},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240808144747026.png","hash":"2ab77e6fb608a58fce858dc42de0be6b729a75f7","modified":1723885493000},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091717603.png","hash":"a71743b363063b59482892134ff4fac5e310ed06","modified":1723885493000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105145553.png","hash":"f373e6a779654e54d540cbc87f26fff78cb10af4","modified":1723885495000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105703217.png","hash":"7c132866bcf637dde490558b4d123ab93eccaa6e","modified":1723885494000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105145553(1).png","hash":"f373e6a779654e54d540cbc87f26fff78cb10af4","modified":1723885496000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110058958.png","hash":"1eff8158a84e5a7f4caa18733e4175ff4c41548f","modified":1723885495000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110226945.png","hash":"ab4fa119bfaa58cf63ac8129c6a573b2a3da1ef7","modified":1723885495000},{"_id":"source/_posts/2024/jsch/jsch/img.png","hash":"e8c81d0a422fb72a51ef333221a3cfee781d704c","modified":1723883761850},{"_id":"source/_posts/2024/jsch/jsch/ssh.png","hash":"474b4038f43ed41c7ea35e34454c5197c9245ed5","modified":1723883878688},{"_id":"source/_posts/2023/thread.md","hash":"0dd5209d6b3d9f97a27bdd53c16d4a489ec0fcd7","modified":1722856044367},{"_id":"source/_posts/2023/Hadoop/image-20200820213620752.png","hash":"6ff3914cb67d22fb3ee7c65b88bb912172a084a1","modified":1722856044315},{"_id":"source/_posts/2023/Hadoop/image-20200822111645219.png","hash":"79c46499ae6ee259da2b962e462770b008deaae3","modified":1722856044323},{"_id":"source/_posts/2023/Hadoop/image-20200822140954237.png","hash":"562b657e326eda688f3cf149f31f5e255382d2a3","modified":1722856044326},{"_id":"source/_posts/2023/Hadoop/image-20200822140728454.png","hash":"0dafa732c02dd1164da799d79fd8ed4f10214708","modified":1722856044325},{"_id":"source/_posts/2023/Hadoop/image-20200822141013068.png","hash":"7f550e064b8f379cdcd3c2b5d6c873922eef06e5","modified":1722856044327},{"_id":"source/_posts/2023/Hadoop/image-20200822141028970.png","hash":"462eda7f4bd379fd6302f7eea768a0c60de16e0d","modified":1722856044328},{"_id":"source/_posts/2023/jvm/3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png","hash":"19510a86dea995a003b196e007d9702c2564bf3f","modified":1722856044341},{"_id":"source/_posts/2023/jvm/5066a220-0f28-4b94-8934-f54c722697a9.png","hash":"758887c04eb0024e99e93a74a496f69c65eeb878","modified":1722856044344},{"_id":"source/_posts/2023/jvm/6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png","hash":"a8c602dd69cc9de4cb07a635675414a758f0fabf","modified":1722856044346},{"_id":"source/_posts/2023/jvm/bece6bf1-f9a8-475d-9911-6293e225d84e.png","hash":"7046744e505c65a8229917fde6669c77182ab9e0","modified":1722856044356},{"_id":"source/_posts/2023/jvm/db1f5266-c920-4379-a82d-f0dadbe1a1c3.png","hash":"8b64187079fbcd3c1faf9c0e032d0ac7521b824b","modified":1722856044364},{"_id":"source/_posts/2023/thread/0827c261-3195-4bdc-9b78-e0c664037749.png","hash":"13bb80c66b9f0e57e295ec8f93fe53b503846052","modified":1722856044368},{"_id":"source/_posts/2023/jvm/d5649d47-ed1b-4797-8a8f-73634873cd9d.png","hash":"7bfd7ed3686995e7069a29538ce44bc00c1a4ded","modified":1722856044362},{"_id":"source/_posts/2023/thread/e5b813b7-361c-42ec-9326-53b01a2872da.png","hash":"bac3d9f8a5a6afddde782b86053a069206eb4829","modified":1722856044383},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091451537.png","hash":"7f4df14f261d89f043915e08f3f1e738decd42b5","modified":1723885494000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110014734.png","hash":"90f6f853c261dbcaefb90c9178450c14d40d2a80","modified":1723885494000},{"_id":"source/_posts/2023/Hadoop/image-20200823180537869.png","hash":"4cdaedbdaafd3733e2918c8eff9aa03e051ae3f1","modified":1722856044329},{"_id":"source/_posts/2023/jvm/5fb46273-081b-4271-b94c-e2ba6eea5f69.png","hash":"595d174b456d02addd4fd3912f1ed87889873558","modified":1722856044345},{"_id":"source/_posts/2023/localdate-springboot/kotlin.jpg","hash":"82ab99e263d90ddcfc6ba2163268633b41a7335f","modified":1723873490845},{"_id":"source/_posts/2023/jvm/8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png","hash":"f40d032d1cf2d1df63c498d630fbbb9515a1963c","modified":1722856044349},{"_id":"source/_posts/2023/jvm/95c89389-d9e7-42e1-9d80-4886d458a48b.png","hash":"be467b0262b096ab0709740edc8da3620e26a6aa","modified":1722856044355},{"_id":"source/_posts/2023/jvm/ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png","hash":"81df4f3d9d06cadc1cbd1910aa81d378af1adecb","modified":1722856044366},{"_id":"source/_posts/2023/thread/2ed065be-3fb7-4e67-b04e-b8e08980405d.png","hash":"28b7ee69c494328e2f47fd16cf1acedf73dcfcce","modified":1722856044370},{"_id":"source/_posts/2023/thread/453affe8-17db-40b3-940f-162e7597336e.png","hash":"426fcd121eebccfbf2a84af93e2bb87d9cc9a987","modified":1722856044372},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091554465.png","hash":"885cc4099e79a00a0543743c4b640bb9cb89921b","modified":1723885493000},{"_id":"source/_posts/2023/Hadoop/image-20200822094801817.png","hash":"ac576617320853778bd3f6e0686bb6277ab2cc1f","modified":1722856044322},{"_id":"source/_posts/2023/jvm/745b992d-fcff-46df-8a33-150b65bf47ca.png","hash":"aa447e7b6dbad59928fcd1ffeb81fabf850103d3","modified":1722856044348},{"_id":"source/_posts/2023/jvm/d404438c-1def-4366-90a5-3f304dd1ddf2.png","hash":"e286e478e23e9e0cf9f15b08020eb24b43f993e3","modified":1722856044361},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091353090.png","hash":"b036d67c9713a5d35246fb49d0730527839220ff","modified":1723885494000},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105023675.png","hash":"8d28ea4ca7aa37ccb58fa39328a35b830a07f89d","modified":1723885496000},{"_id":"source/_posts/2023/Hadoop/image-20200829223326519.png","hash":"77bbdcca8b8e37e8659554c328b95cda2b971dd5","modified":1722856044332},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105552583.png","hash":"02aa1f4804abac4e552cb06a989c0081ec4a7598","modified":1723885495000},{"_id":"source/_posts/2023/jvm/3e60331e-2742-4047-8383-e107945f85c4.png","hash":"8633fd7a38783439a2ea55a9028e85e1bc3161c6","modified":1722856044343},{"_id":"source/_posts/2023/jvm/bedb0d3f-90d8-4867-84c2-cea52a58412f.png","hash":"d6bf5d0b19c2e9f663bb89cd35a85fc7b729b8be","modified":1722856044357},{"_id":"source/_posts/2023/jvm/d9b58c91-421c-4afe-b359-2cde68c12eca.png","hash":"1d8c8d048b3f884c3a06196a8e3e81274a05ee38","modified":1722856044363},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810104915542.png","hash":"e4b6b0917c2e6541c9435700cf7e3475bd36f606","modified":1723885496000},{"_id":"source/_posts/2023/Hadoop/image-20200820224123902.png","hash":"953caf8c2c1e8ae0899417fb41646e92b9e0b9ff","modified":1722856044318},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110427960.png","hash":"19bc35350ae43d279f2cf297da1b5cefe56e916d","modified":1723885496000},{"_id":"source/_posts/2023/jvm/90434413-5431-408e-878f-3b76d5118d64.png","hash":"7633ac5e2e68639b7df78eee4f000feb2db62131","modified":1722856044353},{"_id":"source/_posts/2023/jvm/befee5fe-233e-4ca1-8a63-1b8908311845.png","hash":"6b76efc79c2d99fd57e08657e2b7015ae85bcb83","modified":1722856044359},{"_id":"source/images/ceph/ceph.png","hash":"4050a11ff4cb007730b0ec118159a62c36a5b751","modified":1723887635000},{"_id":"source/images/ceph/ceph2.png","hash":"a46f2d820d32caec993e08a889d4d9b08d1bbcf6","modified":1735902943592},{"_id":"source/_posts/2024/docker/nginx.md","hash":"68e36eac87108bb198075e2635db3dce595b2d07","modified":1736069239281},{"_id":"source/images/ceph/iscsi.jpg","hash":"eeeb7ca6ee0fa730133c653c2cb2d1398a18cb7a","modified":1735902943596},{"_id":"source/_posts/2024/iso/Cubic.md","hash":"8fa70afba9b18c7b8597a69229a7ed6560130353","modified":1736069239281},{"_id":"source/_posts/2024/linux/make-linux-service.md","hash":"642c4c3a7a831b337768e5a6958baeea404cecfa","modified":1736069239281},{"_id":"source/_posts/2024/iso/custom-ubuntu-iso.md","hash":"eef71cdbd8fbe3d2ef519674bb59330966d6fdd5","modified":1736070582472},{"_id":"source/_posts/2024/network/linux-setting-proxy.md","hash":"cd178a0ab1bf1110b455d8d3d7452d3bb8b307ba","modified":1735902943140},{"_id":"source/_posts/2025/wireguard/wireguard.md","hash":"86747ae4e63ae1fd95e858cc0e3e85b3e4c64eef","modified":1736069377580},{"_id":"source/_posts/2024/network/tap-windows.md","hash":"ab0f5b9cd42dc0bacd751aa1acd4bf024525a714","modified":1736069239281},{"_id":"source/_posts/2025/golang/go-serialize.md","hash":"cbbe447618b4949d06a32076488629fa0c1122eb","modified":1736301595639},{"_id":"source/_posts/2024/docker/nginx/logo.jpg","hash":"af92124d457ce834bb1add5ee1130b3ccc6f91a3","modified":1735902943076},{"_id":"source/_posts/2024/iso/Cubic/CubicExtractPage.png","hash":"3971ba41d0b9b42ee7d906f293741cfae7b1199f","modified":1735902943192},{"_id":"source/_posts/2024/iso/Cubic/CubicFinishPage.png","hash":"380781ad8b9cf8811f2b468b493a48ad8a3acc7f","modified":1735902943208},{"_id":"source/_posts/2024/iso/Cubic/CubicGeneratePage.png","hash":"baa6cd379ba0dfe7c5cc3d9d873c54d7f0ebc16f","modified":1735902943200},{"_id":"source/_posts/2024/iso/Cubic/CubicCompressionPage.png","hash":"46a492874c6a57a95112d99afcea0fd5593749b8","modified":1735902943204},{"_id":"source/_posts/2024/iso/Cubic/CubicOptionsPagePreseedTab.png","hash":"04234a153474c3bd51209f49223db4cf83628d19","modified":1735902943204},{"_id":"source/_posts/2024/iso/Cubic/CubicTerminalPageNano.png","hash":"c7d118acfa491a033bed2520dd36aa5e0238e071","modified":1735902943196},{"_id":"source/_posts/2024/iso/Cubic/CubicPreparePage.png","hash":"776fec840e396be075c90022a69122ce97373746","modified":1735902943200},{"_id":"source/_posts/2024/iso/Cubic/Home.png","hash":"2c5520ab962f21e625fd82e381fe7348cec8c56a","modified":1735902943196},{"_id":"source/_posts/2024/iso/Cubic/logo.png","hash":"dd34e502d40c9d6cf4eb1e6d9a25694727567404","modified":1735902943180},{"_id":"source/_posts/2024/network/linux-setting-proxy/logo.jpg","hash":"2cecf80db73875e823b627e6e961847aa1385934","modified":1735902943172},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105164352429.png","hash":"a3256debcfb688dc17c5f0ee10910536a2a71ed0","modified":1736066632000},{"_id":"source/images/ubuntu/ubuntu.png","hash":"aa92bd86867086e4a2a189a28f37e98711289b2a","modified":1736070091000},{"_id":"source/_posts/2024/iso/Cubic/CubicProjectPage.png","hash":"6675c1ea7ccc4121247c93ec023b8f77370ad506","modified":1735902943184},{"_id":"source/_posts/2024/iso/Cubic/CubicProjectPageExistingProject.png","hash":"354a7ddee36938bdd46aca79b0e6de00f955c6fb","modified":1735902943188},{"_id":"source/_posts/2024/iso/Cubic/CubicOptionsPageKernelTab.png","hash":"92f793c82b3974e5d998a5505294622f67c72887","modified":1735902943188},{"_id":"source/_posts/2024/iso/Cubic/CubicTerminalPage.png","hash":"0db81ae9d734093338e614b5590f76d78e6d48f9","modified":1735902943192},{"_id":"source/_posts/2024/iso/Cubic/CubicOptionsPageBootTab2.png","hash":"4bb566f6c0321b5af533439044b0ddd4340da330","modified":1735902943184},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155227838.png","hash":"86d87dd1cbb048228654f980120af34b9f2ddeb5","modified":1735902943144},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155703014.png","hash":"a4541854bf14692130136de405ee0ab116d80016","modified":1735902943148},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105170115079.png","hash":"b71b5eaabbc624d6e4ee2246a3d0367938acc02b","modified":1736067675000},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105165412539.png","hash":"597e6bba04d4f863e1cefdfdb40abcd7f6705232","modified":1736067252000},{"_id":"node_modules/hexo-theme-butterfly/scripts/common/postDesc.js","hash":"b69c137c06791db58e347474b88803e112d100dd","modified":1736302311304},{"_id":"node_modules/hexo-theme-butterfly/scripts/helpers/getArchiveLength.js","hash":"1b37a484cbcc81f51953ea093644b70499c26314","modified":1736302311252},{"_id":"node_modules/hexo-theme-butterfly/scripts/tag/chartjs.js","hash":"a26402edc63cbe8faa6a99647f039ffd9616e1f6","modified":1736302311248},{"_id":"node_modules/hexo-theme-butterfly/languages/ja.yml","hash":"c978fbf9421af4d96978161cef828ea88ae06037","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/languages/ko.yml","hash":"ca8d31350e60b5849bb609a4d33f90d3dd8905a2","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/languages/zh-HK.yml","hash":"c3e863ad5b5aa618873ad4370cf0335a9cc67b39","modified":1736302311756},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/404.pug","hash":"ca9cc03a51561413728d7211f0a544654c5d4e36","modified":1736302311704},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/post/outdate-notice.pug","hash":"1661f8a53334789099efffa92246158cb3d933b3","modified":1736302311724},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/page/shuoshuo.pug","hash":"7e7cd9dfd832c8f3e829ad445eccf5cb5dc8ff18","modified":1736302311728},{"_id":"node_modules/hexo-theme-butterfly/source/css/_page/shuoshuo.styl","hash":"855af8f97daad51b0161d96d50abd71edec87142","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/umami_analytics.pug","hash":"e2fa3804c0fef70bb6fa884f1055c978725ccef2","modified":1736302311732},{"_id":"node_modules/hexo-theme-butterfly/source/css/_tags/series.styl","hash":"cf24d72ea16ef253a438efe95b9a0a8fdfbb6d01","modified":1736302311752},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/math/chartjs.pug","hash":"a3f409a0c1ed3df8c920f7d32b86c3832459f3bf","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/third-party/newest-comments/common.pug","hash":"7e3b4e1124c9917b820e96bd0c915c08da68aecd","modified":1736302311712},{"_id":"node_modules/hexo-theme-butterfly/source/img/error-page.png","hash":"d2519710498a871ca3e913c57e2ba20a805b6430","modified":1736302311696},{"_id":"node_modules/hexo-theme-butterfly/source/img/favicon.ico","hash":"455ac256580bf31a45813dbbdb87219bfc8bfb04","modified":1736302311100},{"_id":"node_modules/hexo-theme-butterfly/layout/includes/mixins/indexPostUI.pug","hash":"77eca4f5dbf38c2c805b732ff8d7d9c1560b6f16","modified":1736302311720},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155905892.png","hash":"4ae6998d566c82b9b9cc69d7d8747fd412f0fc6f","modified":1735902943160},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155901773.png","hash":"4ae6998d566c82b9b9cc69d7d8747fd412f0fc6f","modified":1735902943148},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105164822526.png","hash":"7c4f3a32d1eae7ea45a60bb340395ec0b635a4d5","modified":1736066902000},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105164800108.png","hash":"6c59a7f7ac068606d37d0c3a010fc0601cbda9d3","modified":1736066880000},{"_id":"source/images/index.jpg","hash":"84a86ba35bccf1f22518ffeacac9bd530ac59372","modified":1736302762326},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823160035448.png","hash":"b0e1eec22090cd4c5b251035e777aa87d40c318e","modified":1735902943164},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105170821376.png","hash":"07585dd32cbd1190e1989ae405ea57412e0c284f","modified":1736068101000},{"_id":"source/_posts/2025/wireguard/wireguard/logo.png","hash":"7eda9bdccfd4cb02519c27dd2c756db98688d3cc","modified":1736068786000},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823160000756.png","hash":"a365a73e69a823a4a0d2912abe77bf7f928d1f4b","modified":1735902943168},{"_id":"source/_posts/2024/network/tap-windows/logo.png","hash":"f2745487cd2e505a3c3e167bc9c3fa45d29609c1","modified":1735902943176},{"_id":"node_modules/hexo-theme-butterfly/source/img/butterfly-icon.png","hash":"f5dd732fed5c3bcd4aa76bac3441bac8485fb432","modified":1736302311688},{"_id":"source/_posts/2025/golang/go-serialize/logo.png","hash":"ccba3606adbb9eba88c68e15acab7a939666b06b","modified":1736301526599},{"_id":"source/_posts/2024/linux/make-linux-service/logo.jpg","hash":"625b4f131e6b7739080a916c9a5d9e78fbb1d7d3","modified":1735902943220},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823160633739.png","hash":"a76bf229ec3a96a46f79524f98241613b1367d15","modified":1735902943156},{"_id":"source/images/index/index.jpg","hash":"84a86ba35bccf1f22518ffeacac9bd530ac59372","modified":1736302762326}],"Category":[{"name":"Hadoop","_id":"clzxxiuxw00040aib27ee230s"},{"name":"JAVA","_id":"clzxxiuy2000c0aib2iinavca"},{"name":"Docker","_id":"clzxxiuy5000j0aib19fv6i5t"},{"name":"Docker","parent":"clzxxiuy2000c0aib2iinavca","_id":"clzxxiuyc000z0aibhe54b0he"},{"name":"SpringBoot","_id":"clzxxiuyg001e0aib9uhr8t8k"},{"name":"分布式存储","_id":"clzxxiuyi001o0aib4jmefb5t"},{"name":"Nginx","_id":"cm5na1mz900037zpn38wzad0m"},{"name":"Ubuntu","_id":"cm5na1mzg00087zpnawi7c90c"},{"name":"Linux","_id":"cm5na1mzk000i7zpn1l7q7x0o"},{"name":"网络","_id":"cm5na1mzl000n7zpn9f8k5c1e"},{"name":"golang","_id":"cm5na1mzm000t7zpn71qq07vq"},{"name":"VPN","_id":"cm5na1mzt00147zpnbwlb7kpu"}],"Data":[],"Page":[{"title":"about","date":"2024-05-28T11:18:09.000Z","_content":"\n欢迎来到我的博客！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.\n\n---\n\n## 社交媒体\n\n- 📁 **GitHub** - [查看](https://github.com/BadKid90s)\n\n\n---\n\n## 博客推荐\n\n### 开源项目\n\n---\n\n- 📚 **Knife**\n    - **简介**：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!\n    - **访问链接**：[访问](https://github.com/BadKid90s/knife)\n---\n\n- 💻 **Shell Command**\n    - **简介**：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。\n    - **访问链接**：[访问](https://github.com/BadKid90s/shell-command)\n\n---\n- 📟 **Pseudo WeChat**\n    - **简介**：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色/深色） 支持对接后台进行真实接口.\n    - **访问链接**：[访问](https://github.com/BadKid90s/pseudo_we_chat)\n---\n\n\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2024-05-28 19:18:09\n---\n\n欢迎来到我的博客！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.\n\n---\n\n## 社交媒体\n\n- 📁 **GitHub** - [查看](https://github.com/BadKid90s)\n\n\n---\n\n## 博客推荐\n\n### 开源项目\n\n---\n\n- 📚 **Knife**\n    - **简介**：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!\n    - **访问链接**：[访问](https://github.com/BadKid90s/knife)\n---\n\n- 💻 **Shell Command**\n    - **简介**：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。\n    - **访问链接**：[访问](https://github.com/BadKid90s/shell-command)\n\n---\n- 📟 **Pseudo WeChat**\n    - **简介**：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色/深色） 支持对接后台进行真实接口.\n    - **访问链接**：[访问](https://github.com/BadKid90s/pseudo_we_chat)\n---\n\n\n","updated":"2025-01-05T12:00:37.876Z","path":"about/index.html","_id":"clzxxiuxo00000aibegbf8f4y","comments":1,"layout":"page","content":"<p>欢迎来到我的博客！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.</p>\n<hr>\n<h2 id=\"社交媒体\"><a href=\"#社交媒体\" class=\"headerlink\" title=\"社交媒体\"></a>社交媒体</h2><ul>\n<li>📁 <strong>GitHub</strong> - <a href=\"https://github.com/BadKid90s\">查看</a></li>\n</ul>\n<hr>\n<h2 id=\"博客推荐\"><a href=\"#博客推荐\" class=\"headerlink\" title=\"博客推荐\"></a>博客推荐</h2><h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><hr>\n<ul>\n<li>📚 <strong>Knife</strong><ul>\n<li><strong>简介</strong>：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/knife\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>💻 <strong>Shell Command</strong><ul>\n<li><strong>简介</strong>：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/shell-command\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>📟 <strong>Pseudo WeChat</strong><ul>\n<li><strong>简介</strong>：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色&#x2F;深色） 支持对接后台进行真实接口.</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/pseudo_we_chat\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n","cover":false,"excerpt":"","more":"<p>欢迎来到我的博客！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.</p>\n<hr>\n<h2 id=\"社交媒体\"><a href=\"#社交媒体\" class=\"headerlink\" title=\"社交媒体\"></a>社交媒体</h2><ul>\n<li>📁 <strong>GitHub</strong> - <a href=\"https://github.com/BadKid90s\">查看</a></li>\n</ul>\n<hr>\n<h2 id=\"博客推荐\"><a href=\"#博客推荐\" class=\"headerlink\" title=\"博客推荐\"></a>博客推荐</h2><h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><hr>\n<ul>\n<li>📚 <strong>Knife</strong><ul>\n<li><strong>简介</strong>：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/knife\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>💻 <strong>Shell Command</strong><ul>\n<li><strong>简介</strong>：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/shell-command\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>📟 <strong>Pseudo WeChat</strong><ul>\n<li><strong>简介</strong>：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色&#x2F;深色） 支持对接后台进行真实接口.</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/pseudo_we_chat\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n"},{"title":"archives","date":"2024-08-17T08:05:44.000Z","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2024-08-17 16:05:44\n---\n","updated":"2024-08-17T08:28:33.151Z","path":"archives/index.html","comments":1,"layout":"page","_id":"clzxxiuxu00020aibcmtt0not","content":"","cover":false,"excerpt":"","more":""},{"title":"分类","date":"2022-02-05T10:30:37.000Z","type":"categories","layout":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2022-02-05 18:30:37\ntype: \"categories\"\nlayout: \"categories\"\n---","updated":"2024-08-17T08:29:03.701Z","path":"categories/index.html","comments":1,"_id":"clzxxiuxy00060aibg6kcb79y","content":"","cover":false,"excerpt":"","more":""},{"title":"链接","date":"2022-02-05T10:29:52.000Z","_content":"\n欢迎来到我的博客页面！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.\n\n---\n\n## 社交媒体\n\n- 📁 **GitHub** - [查看](https://github.com/BadKid90s)\n\n\n---\n\n## 博客推荐\n\n### 开源项目\n\n---\n\n- 📚 **Knife** \n    - **简介**：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!\n    - **访问链接**：[访问](https://github.com/BadKid90s/knife)\n---\n\n- 💻 **Shell Command** \n    - **简介**：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。\n    - **访问链接**：[访问](https://github.com/BadKid90s/shell-command)\n\n---\n- 📟 **Pseudo WeChat** \n    - **简介**：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色/深色） 支持对接后台进行真实接口.\n    - **访问链接**：[访问](https://github.com/BadKid90s/pseudo_we_chat)\n---\n\n## 资源网站\n\n\n### 工具网站\n\n---\n- 🛠️ **清华大学开源软件镜像站**\n  - **简介**：一个国内的开源镜像站，多快好省.\n  - **访问链接**：[访问](https://mirrors.tuna.tsinghua.edu.cn/)\n\n---\n- 🛠️ **Packages for Linux and Unix**  \n    - **简介**：一个在线查询Linux和Unix包的工具网站.\n    - **访问链接**：[访问](https://pkgs.org/)\n---\n\n- 🛠️ **Greasy Fork**\n    - **简介**： Greasy Fork，一个专注于用户脚本的网站.\n    - **访问链接**：[访问](https://greasyfork.org/zh-CN/scripts)\n\n---\n\n- 🛠️ **Docker Hub**\n    - **简介**： 一个全球最大的Docker镜像网站.\n    - **访问链接**：[访问](https://hub.docker.com/)\n\n---\n\n## 开源镜像站\n- 阿里开源镜像站：https://opsx.alibaba.com/mirror\n- 网易开源镜像站：http://mirrors.163.com/\n- 搜狐开源镜像站：http://mirrors.sohu.com/\n- 北京交通大学开源镜像站：http://mirror.bjtu.edu.cn\n- 兰州大学开源软件镜像站：http://mirror.lzu.edu.cn/\n- 厦门大学开源软件镜像站：http://mirrors.xmu.edu.cn/\n- 上海交通大学开源软件镜像站：http://ftp.sjtu.edu.cn/\n- 清华大学开源软件镜像站：http://mirrors.tuna.tsinghua.edu.cn/\n- 天津大学开源软件镜像站：http://mirror.tju.edu.cn/\n- 中国科学技术大学开源软件镜像站：http://mirrors.ustc.edu.cn/\n- 东北大学开源软件镜像站：http://mirror.neu.edu.cn/\n- 东软信息学院开源软件镜像站：http://mirrors.neusoft.edu.cn/\n- 浙江大学开源软件镜像站：http://mirrors.zju.edu.cn\n- 北京理工大学开源软件镜像站：http://mirror.bit.edu.cn\n- 华中科技大学开源软件镜像站：http://mirrors.hust.edu.cn/\n- 中山大学开源软件镜像站：http://mirror.sysu.edu.cn/\n- 大连理工大学开源软件镜像站：http://mirror.dlut.edu.cn/\n\n---\n希望这些链接能为你带来帮助！如果你有任何推荐的链接，欢迎在评论区分享.\n","source":"links/index.md","raw":"---\ntitle: 链接\ndate: 2022-02-05 18:29:52\n---\n\n欢迎来到我的博客页面！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.\n\n---\n\n## 社交媒体\n\n- 📁 **GitHub** - [查看](https://github.com/BadKid90s)\n\n\n---\n\n## 博客推荐\n\n### 开源项目\n\n---\n\n- 📚 **Knife** \n    - **简介**：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!\n    - **访问链接**：[访问](https://github.com/BadKid90s/knife)\n---\n\n- 💻 **Shell Command** \n    - **简介**：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。\n    - **访问链接**：[访问](https://github.com/BadKid90s/shell-command)\n\n---\n- 📟 **Pseudo WeChat** \n    - **简介**：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色/深色） 支持对接后台进行真实接口.\n    - **访问链接**：[访问](https://github.com/BadKid90s/pseudo_we_chat)\n---\n\n## 资源网站\n\n\n### 工具网站\n\n---\n- 🛠️ **清华大学开源软件镜像站**\n  - **简介**：一个国内的开源镜像站，多快好省.\n  - **访问链接**：[访问](https://mirrors.tuna.tsinghua.edu.cn/)\n\n---\n- 🛠️ **Packages for Linux and Unix**  \n    - **简介**：一个在线查询Linux和Unix包的工具网站.\n    - **访问链接**：[访问](https://pkgs.org/)\n---\n\n- 🛠️ **Greasy Fork**\n    - **简介**： Greasy Fork，一个专注于用户脚本的网站.\n    - **访问链接**：[访问](https://greasyfork.org/zh-CN/scripts)\n\n---\n\n- 🛠️ **Docker Hub**\n    - **简介**： 一个全球最大的Docker镜像网站.\n    - **访问链接**：[访问](https://hub.docker.com/)\n\n---\n\n## 开源镜像站\n- 阿里开源镜像站：https://opsx.alibaba.com/mirror\n- 网易开源镜像站：http://mirrors.163.com/\n- 搜狐开源镜像站：http://mirrors.sohu.com/\n- 北京交通大学开源镜像站：http://mirror.bjtu.edu.cn\n- 兰州大学开源软件镜像站：http://mirror.lzu.edu.cn/\n- 厦门大学开源软件镜像站：http://mirrors.xmu.edu.cn/\n- 上海交通大学开源软件镜像站：http://ftp.sjtu.edu.cn/\n- 清华大学开源软件镜像站：http://mirrors.tuna.tsinghua.edu.cn/\n- 天津大学开源软件镜像站：http://mirror.tju.edu.cn/\n- 中国科学技术大学开源软件镜像站：http://mirrors.ustc.edu.cn/\n- 东北大学开源软件镜像站：http://mirror.neu.edu.cn/\n- 东软信息学院开源软件镜像站：http://mirrors.neusoft.edu.cn/\n- 浙江大学开源软件镜像站：http://mirrors.zju.edu.cn\n- 北京理工大学开源软件镜像站：http://mirror.bit.edu.cn\n- 华中科技大学开源软件镜像站：http://mirrors.hust.edu.cn/\n- 中山大学开源软件镜像站：http://mirror.sysu.edu.cn/\n- 大连理工大学开源软件镜像站：http://mirror.dlut.edu.cn/\n\n---\n希望这些链接能为你带来帮助！如果你有任何推荐的链接，欢迎在评论区分享.\n","updated":"2025-01-05T12:00:43.012Z","path":"links/index.html","_id":"clzxxiuy000080aib74hkgq27","comments":1,"layout":"page","content":"<p>欢迎来到我的博客页面！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.</p>\n<hr>\n<h2 id=\"社交媒体\"><a href=\"#社交媒体\" class=\"headerlink\" title=\"社交媒体\"></a>社交媒体</h2><ul>\n<li>📁 <strong>GitHub</strong> - <a href=\"https://github.com/BadKid90s\">查看</a></li>\n</ul>\n<hr>\n<h2 id=\"博客推荐\"><a href=\"#博客推荐\" class=\"headerlink\" title=\"博客推荐\"></a>博客推荐</h2><h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><hr>\n<ul>\n<li>📚 <strong>Knife</strong> <ul>\n<li><strong>简介</strong>：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/knife\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>💻 <strong>Shell Command</strong> <ul>\n<li><strong>简介</strong>：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/shell-command\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>📟 <strong>Pseudo WeChat</strong> <ul>\n<li><strong>简介</strong>：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色&#x2F;深色） 支持对接后台进行真实接口.</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/pseudo_we_chat\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"资源网站\"><a href=\"#资源网站\" class=\"headerlink\" title=\"资源网站\"></a>资源网站</h2><h3 id=\"工具网站\"><a href=\"#工具网站\" class=\"headerlink\" title=\"工具网站\"></a>工具网站</h3><hr>\n<ul>\n<li>🛠️ <strong>清华大学开源软件镜像站</strong><ul>\n<li><strong>简介</strong>：一个国内的开源镜像站，多快好省.</li>\n<li><strong>访问链接</strong>：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>🛠️ <strong>Packages for Linux and Unix</strong>  <ul>\n<li><strong>简介</strong>：一个在线查询Linux和Unix包的工具网站.</li>\n<li><strong>访问链接</strong>：<a href=\"https://pkgs.org/\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>🛠️ <strong>Greasy Fork</strong><ul>\n<li><strong>简介</strong>： Greasy Fork，一个专注于用户脚本的网站.</li>\n<li><strong>访问链接</strong>：<a href=\"https://greasyfork.org/zh-CN/scripts\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>🛠️ <strong>Docker Hub</strong><ul>\n<li><strong>简介</strong>： 一个全球最大的Docker镜像网站.</li>\n<li><strong>访问链接</strong>：<a href=\"https://hub.docker.com/\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"开源镜像站\"><a href=\"#开源镜像站\" class=\"headerlink\" title=\"开源镜像站\"></a>开源镜像站</h2><ul>\n<li>阿里开源镜像站：<a href=\"https://opsx.alibaba.com/mirror\">https://opsx.alibaba.com/mirror</a></li>\n<li>网易开源镜像站：<a href=\"http://mirrors.163.com/\">http://mirrors.163.com/</a></li>\n<li>搜狐开源镜像站：<a href=\"http://mirrors.sohu.com/\">http://mirrors.sohu.com/</a></li>\n<li>北京交通大学开源镜像站：<a href=\"http://mirror.bjtu.edu.cn/\">http://mirror.bjtu.edu.cn</a></li>\n<li>兰州大学开源软件镜像站：<a href=\"http://mirror.lzu.edu.cn/\">http://mirror.lzu.edu.cn/</a></li>\n<li>厦门大学开源软件镜像站：<a href=\"http://mirrors.xmu.edu.cn/\">http://mirrors.xmu.edu.cn/</a></li>\n<li>上海交通大学开源软件镜像站：<a href=\"http://ftp.sjtu.edu.cn/\">http://ftp.sjtu.edu.cn/</a></li>\n<li>清华大学开源软件镜像站：<a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">http://mirrors.tuna.tsinghua.edu.cn/</a></li>\n<li>天津大学开源软件镜像站：<a href=\"http://mirror.tju.edu.cn/\">http://mirror.tju.edu.cn/</a></li>\n<li>中国科学技术大学开源软件镜像站：<a href=\"http://mirrors.ustc.edu.cn/\">http://mirrors.ustc.edu.cn/</a></li>\n<li>东北大学开源软件镜像站：<a href=\"http://mirror.neu.edu.cn/\">http://mirror.neu.edu.cn/</a></li>\n<li>东软信息学院开源软件镜像站：<a href=\"http://mirrors.neusoft.edu.cn/\">http://mirrors.neusoft.edu.cn/</a></li>\n<li>浙江大学开源软件镜像站：<a href=\"http://mirrors.zju.edu.cn/\">http://mirrors.zju.edu.cn</a></li>\n<li>北京理工大学开源软件镜像站：<a href=\"http://mirror.bit.edu.cn/\">http://mirror.bit.edu.cn</a></li>\n<li>华中科技大学开源软件镜像站：<a href=\"http://mirrors.hust.edu.cn/\">http://mirrors.hust.edu.cn/</a></li>\n<li>中山大学开源软件镜像站：<a href=\"http://mirror.sysu.edu.cn/\">http://mirror.sysu.edu.cn/</a></li>\n<li>大连理工大学开源软件镜像站：<a href=\"http://mirror.dlut.edu.cn/\">http://mirror.dlut.edu.cn/</a></li>\n</ul>\n<hr>\n<p>希望这些链接能为你带来帮助！如果你有任何推荐的链接，欢迎在评论区分享.</p>\n","cover":false,"excerpt":"","more":"<p>欢迎来到我的博客页面！这里汇集了我推荐的一些资源和链接，希望能为你带来帮助和启发.</p>\n<hr>\n<h2 id=\"社交媒体\"><a href=\"#社交媒体\" class=\"headerlink\" title=\"社交媒体\"></a>社交媒体</h2><ul>\n<li>📁 <strong>GitHub</strong> - <a href=\"https://github.com/BadKid90s\">查看</a></li>\n</ul>\n<hr>\n<h2 id=\"博客推荐\"><a href=\"#博客推荐\" class=\"headerlink\" title=\"博客推荐\"></a>博客推荐</h2><h3 id=\"开源项目\"><a href=\"#开源项目\" class=\"headerlink\" title=\"开源项目\"></a>开源项目</h3><hr>\n<ul>\n<li>📚 <strong>Knife</strong> <ul>\n<li><strong>简介</strong>：Knife Is The Lightweight Middleware For Golang ! Low memory usage,High performance,Developed in Go ,Embrace the cloud native era!</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/knife\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>💻 <strong>Shell Command</strong> <ul>\n<li><strong>简介</strong>：通过HTTP方式调用SSH执行Shell命令的线程安全的JAVA客户端。具有安全性、可移植、可扩展、跨平台等特性。</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/shell-command\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>📟 <strong>Pseudo WeChat</strong> <ul>\n<li><strong>简介</strong>：使用Flutter开发的仿照微信的静态App。支持国际化（中文、英文），支持主题自适应（浅色&#x2F;深色） 支持对接后台进行真实接口.</li>\n<li><strong>访问链接</strong>：<a href=\"https://github.com/BadKid90s/pseudo_we_chat\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"资源网站\"><a href=\"#资源网站\" class=\"headerlink\" title=\"资源网站\"></a>资源网站</h2><h3 id=\"工具网站\"><a href=\"#工具网站\" class=\"headerlink\" title=\"工具网站\"></a>工具网站</h3><hr>\n<ul>\n<li>🛠️ <strong>清华大学开源软件镜像站</strong><ul>\n<li><strong>简介</strong>：一个国内的开源镜像站，多快好省.</li>\n<li><strong>访问链接</strong>：<a href=\"https://mirrors.tuna.tsinghua.edu.cn/\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>🛠️ <strong>Packages for Linux and Unix</strong>  <ul>\n<li><strong>简介</strong>：一个在线查询Linux和Unix包的工具网站.</li>\n<li><strong>访问链接</strong>：<a href=\"https://pkgs.org/\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>🛠️ <strong>Greasy Fork</strong><ul>\n<li><strong>简介</strong>： Greasy Fork，一个专注于用户脚本的网站.</li>\n<li><strong>访问链接</strong>：<a href=\"https://greasyfork.org/zh-CN/scripts\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<ul>\n<li>🛠️ <strong>Docker Hub</strong><ul>\n<li><strong>简介</strong>： 一个全球最大的Docker镜像网站.</li>\n<li><strong>访问链接</strong>：<a href=\"https://hub.docker.com/\">访问</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2 id=\"开源镜像站\"><a href=\"#开源镜像站\" class=\"headerlink\" title=\"开源镜像站\"></a>开源镜像站</h2><ul>\n<li>阿里开源镜像站：<a href=\"https://opsx.alibaba.com/mirror\">https://opsx.alibaba.com/mirror</a></li>\n<li>网易开源镜像站：<a href=\"http://mirrors.163.com/\">http://mirrors.163.com/</a></li>\n<li>搜狐开源镜像站：<a href=\"http://mirrors.sohu.com/\">http://mirrors.sohu.com/</a></li>\n<li>北京交通大学开源镜像站：<a href=\"http://mirror.bjtu.edu.cn/\">http://mirror.bjtu.edu.cn</a></li>\n<li>兰州大学开源软件镜像站：<a href=\"http://mirror.lzu.edu.cn/\">http://mirror.lzu.edu.cn/</a></li>\n<li>厦门大学开源软件镜像站：<a href=\"http://mirrors.xmu.edu.cn/\">http://mirrors.xmu.edu.cn/</a></li>\n<li>上海交通大学开源软件镜像站：<a href=\"http://ftp.sjtu.edu.cn/\">http://ftp.sjtu.edu.cn/</a></li>\n<li>清华大学开源软件镜像站：<a href=\"http://mirrors.tuna.tsinghua.edu.cn/\">http://mirrors.tuna.tsinghua.edu.cn/</a></li>\n<li>天津大学开源软件镜像站：<a href=\"http://mirror.tju.edu.cn/\">http://mirror.tju.edu.cn/</a></li>\n<li>中国科学技术大学开源软件镜像站：<a href=\"http://mirrors.ustc.edu.cn/\">http://mirrors.ustc.edu.cn/</a></li>\n<li>东北大学开源软件镜像站：<a href=\"http://mirror.neu.edu.cn/\">http://mirror.neu.edu.cn/</a></li>\n<li>东软信息学院开源软件镜像站：<a href=\"http://mirrors.neusoft.edu.cn/\">http://mirrors.neusoft.edu.cn/</a></li>\n<li>浙江大学开源软件镜像站：<a href=\"http://mirrors.zju.edu.cn/\">http://mirrors.zju.edu.cn</a></li>\n<li>北京理工大学开源软件镜像站：<a href=\"http://mirror.bit.edu.cn/\">http://mirror.bit.edu.cn</a></li>\n<li>华中科技大学开源软件镜像站：<a href=\"http://mirrors.hust.edu.cn/\">http://mirrors.hust.edu.cn/</a></li>\n<li>中山大学开源软件镜像站：<a href=\"http://mirror.sysu.edu.cn/\">http://mirror.sysu.edu.cn/</a></li>\n<li>大连理工大学开源软件镜像站：<a href=\"http://mirror.dlut.edu.cn/\">http://mirror.dlut.edu.cn/</a></li>\n</ul>\n<hr>\n<p>希望这些链接能为你带来帮助！如果你有任何推荐的链接，欢迎在评论区分享.</p>\n"},{"title":"标签","date":"2022-02-05T10:29:52.000Z","type":"tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2022-02-05 18:29:52\ntype: \"tags\"\nlayout: \"tags\"\n---","updated":"2024-08-17T08:45:47.637Z","path":"tags/index.html","comments":1,"_id":"clzxxiuy1000a0aib2qe5292g","content":"","cover":false,"excerpt":"","more":""},{"title":"message-board","date":"2024-05-28T12:24:44.000Z","_content":"\n# 留下","source":"message-board/index.md","raw":"---\ntitle: message-board\ndate: 2024-05-28 20:24:44\n---\n\n# 留下","updated":"2024-08-05T11:07:24.398Z","path":"message-board/index.html","comments":1,"layout":"page","_id":"clzxxiuy3000f0aibh76x0xzw","content":"<h1 id=\"留下\"><a href=\"#留下\" class=\"headerlink\" title=\"留下\"></a>留下</h1>","cover":false,"excerpt":"","more":"<h1 id=\"留下\"><a href=\"#留下\" class=\"headerlink\" title=\"留下\"></a>留下</h1>"}],"Post":[{"title":"Hadoop","date":"2023-02-20T16:00:00.000Z","_content":"\n## Hadoop是什么\n\n1. hadoop是一个Aoache基金会所开发的分布式系统基础架构 。\n2. 主要解决，海量数据的存储和海量数据的分析计算问题。\n3. 广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。\n\n## Hadoop发展史\n\n### Lucene\n\n### 论文\n\n#### GFS-->HDFS\n\n#### Map-Reduce-->MR\n\n#### BigTable-->HBase\n\n\n\n## Hadoop三大发行版本\n\n### Apache\n\n最原始，最基本的版本，对于入门学习较好\n\n### Cloudera\n\n在大型互联网企业中用的较多\n\n### Hortonworks\n\n文档较好\n\n## Hadoop的优势（4高）\n\n1. 高可靠：Hadoop底层维护了多个数据副本，所以即使Hadoop某个计算或存储出现故障，也不会导致数据丢失。\n2. 高扩展性：在集群建分配任务数据，可方便的扩展数以千计的节点。\n3. 高效性：在Mao-Reduce 的思想下，Hadoop是并行工作的，以加快任务处理速度。\n4. 高容错性：能够自动将失败的任务重新分配。\n\n## Hadoop组成\n\n###  1.x 与2.x\n\n![image-20200820213620752](image-20200820213620752.png)\n\n\n\n### HDFS架构概念\n\n#### 1.NameNode (nn)\n\n存储额文件的元数据，如文件名，文件目录结构，文件属性（生成时间，副本数，文件权限），以及每个文件的块列表和块所在的DataNode 等。\n\n#### 2.DataNode (dn)\n\n在本地文件系统存储文件块数据，以及块数据的校验和。\n\n#### 3.Secondary NameNode (2nn)\n\n用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。\n\n\n\n### YARN 架构概念\n\n#### ResourceManage(RM)主要作用\n\n- 处理客户请求\n- 监控NodeManage\n- 启动或监控ApplicationMaster\n- 资源的调度与分配\n\n#### NodeManage(NM)主要作用\n\n- 管理单个节点上的资源\n- 处理来自ResourceManage的命令\n- 处理来自ApplicationMaster的命令 \n\n#### ApplicationMaster(AM)主要作用\n\n- 负责数据的切分\n- 为应用程序申请资源并分配给内部的任务\n- 任务的监控与容错\n\n#### Container\n\n- Container是YARN中的资源抽象，他封装了某个节点上的多维资源，如内存，CPU,磁盘，网络等。\n\n### MapReduce架构概述\n\nMapReduce 将计算过程分为两个阶段：map 和 Reduce\n\n1. Map 阶段并行处理输入数据\n2. Reduce阶段对Map结果进行汇总\n\n \n\n## 大数据计数生态体系\n\n![image-20200820224123902](image-20200820224123902.png)\n\n\n\n## 环境搭建\n\n### 1.准备虚拟机\n\n### 2.安装JDK\n\n### 3.安装Hadoop\n\n- 解压\n\n- 配置环境变量\n\n  在 `/etc/profile`文件的最后加\n\n  ``` bash\n  export HADOOP_HOME=/usr/local/hadoop-3.2.1\n  export PATH=$PATH:$HADOOP_HOME/bin\n  export PATH=$PATH:$HADOOP_HOME/sbin\n  ``` \n\n  使用配置生效\n\n  ``` bash\n  $ source /ect/profile\n  ``` \n\n### 4.Hadoop目录结构\n\n- **bin**\n\n  存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本\n\n- **etc** \n\n  Hadoop的配置文件目录\n\n- **lib**\n\n  存放Hadoop的本地库（对数据进行压缩解压的功能）\n\n- **sbin**\n\n  存放启动或停止Hadoop相关服务的脚本\n\n- **share**\n\n  存放Hadoop的依赖jar包，文档，和官方案例。\n\n### 5.Hadoop官网手册\n\nHadoop官方网站：https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html\n\n## Hadoop运行模式\n\nHadoop运行模式包括：\n\n本地模式、伪分布式模式以及完全分布式模式。\n\n\n\n### 本地运行模式\n\n#### 官方Grep案例\n\n1.创建在hadoop-3.2.1文件下面创建一个input文件夹\n\n``` bash\n$ mkdir input\n``` \n\n2.将Hadoop的xml配置文件复制到input\n\n``` bash\n$ cp  etc/hadoop/*.xml  input\n``` \n\n3.执行share目录下的MapReduce程序\n\n``` bash\n$ bin/hadoop\tjar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep input  output  'dfs[a-z.]+'\n``` \n\n4.查看输出结果\n\n``` bash\ncat  output/*\n``` \n\n#### 官方WordCount案例\n\n1.创建在hadoop-3.2.1文件下面创建一个wcinput文件夹\n\n``` bash\nmkdir wcinput\n``` \n\n2.在wcinput文件下创建一个wc.input文件\n\n``` bash\n$ cd wcinput\n\n$ touchwc.input\n``` \n\n3.编辑wc.input文件\n\n``` bash\n$ vim  wc.input\n``` \n\n在文件中输入如下内容\n\n``` \nhadoopyarn\nhadoopmapreduce\natguigu\natguigu\n``` \n\n保存退出：：wq\n\n4.回到Hadoop目录\n\n5.执行程序\n\n``` bash\n$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount wcinput wcoutput\n``` \n\n6.查看结果\n\n``` bash\n$ cat wcoutput /part-r-00000\n``` \n\n``` \natguigu2\nhadoop2\nmapreduce1\nyarn1\n``` \n\n\n\n### 伪分布式运行模式\n\n#### 启动HDFS并运行MapReduce程序\n\n##### 1.分析\n\n（1）配置集群\n（2）启动、测试集群增、删、查\n（3）执行WordCount案例\n\n##### 2.执行步骤\n\n###### （1）配置集群\n\n进入Hadoop的etc目录\n\n``` bash\n$ cd ./etc\n``` \n\n- 配置：hadoop-env.sh\n\n  Linux系统中获取JDK的安装路径：\n\n  ``` bash\n  $ echo $JAVA_HOME\n  ``` \n\n  ``` bash\n  /usr/local/jdk1.8.0_121\n  ``` \n\n  修改JAVA_HOME路径：\n\n  ``` bash\n  export JAVA_HOME=/usr/local/jdk1.8.0_121\n  ``` \n\n- 配置：core-site.xml\n\n  ``` xml\n  <!--指定HDFS中NameNode的地址-->\n  <property>\n  \t<name>fs.defaultFS</name>\n  \t<value>hdfs://localhost:9000</value>\n  </property>\n  <!--指定Hadoop运行时产生文件的存储目录-->\n  <property>\n  \t<name>hadoop.tmp.dir</name>\n  \t<value>/usr/local/hadoop-3.2.1/data/tmp</value>\n  </property>\n  ``` \n\n- 配置：hdfs-site.xml\n\n  ``` xml\n  <!--指定HDFS副本的数量-->\n  <property>\n  \t<name>dfs.replication</name>\n  \t<value>1</value>\n  </property>\n  ``` \n\n###### （2）设置无密码SSH\n\n- 现在检查您是否可以在不使用密码的情况下SSH到本地主机：\n\n  ``` bash\n   $ ssh  localhost\n  ``` \n\n  如果没有密码就无法SSH到本地主机\n\n- 请执行以下命令\n\n  ``` bash\n  $ ssh-keygen -t rsa -P''-f〜/ .ssh / id_rsa \n  $ cat〜/ .ssh / id_rsa.pub >>〜/ .ssh / authorized_keys \n  $ chmod 0600〜/ .ssh / authorized_keys\n  ``` \n\n###### （3）执行\n\n- 格式化文件系统\n\n  ``` bash\n  $ bin/hdfs namenode -format\n  ``` \n\n- 启动NameNode守护程序和DataNode守护程序：\n\n  ``` bash\n  $ ./sbin/start-dfs.sh\n  ``` \n\n- 启动报错\n\n  ``` bash\n  [root@iZ2zednzb8iugz3kgudq9bZ hadoop-3.2.1]# ./sbin/stop-dfs.sh\n  Stopping namenodes on [localhost]\n  ERROR: Attempting to operate on hdfs namenode as root\n  ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.\n  Stopping datanodes\n  ERROR: Attempting to operate on hdfs datanode as root\n  ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.\n  Stopping secondary namenodes [iZ2zednzb8iugz3kgudq9bZ]\n  ERROR: Attempting to operate on hdfs secondarynamenode as root\n  ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.\n  ``` \n\n  添加以下配置到 `hadoop-env.sh`\n\n  ``` bash\n  HDFS_DATANODE_USER=root  \n  HDFS_NAMENODE_USER=root  \n  HDFS_SECONDARYNAMENODE_USER=root \n  ``` \n\n- 浏览Web界面以查找NameNode；默认情况下，它在以下位置可用：\n\n  ``` http\n  http://localhost:9870/\n  ``` \n\n- 设置执行MapReduce作业所需的HDFS目录：\n\n  ``` bash\n  $ bin/hdfs dfs -mkdir /user/root\n  $ bin/hdfs dfs -mkdir /user/<用户名>\n  ``` \n\n  - 创建多层目录\n\n  ``` bash\n  $ bin/hdfs dfs -mkdir -p  /user/wry\n  ``` \n\n  ![image-20200822090658863](image-20200822090658863.png)\n\n  - 查看多级目录\n\n  ``` bash\n  $ bin/hdfs dfs -ls -R /\n\t``` \n\n  ![image-20200822090905199](image-20200822090905199.png)\n  \n- 将本地输入文件复制到分布式文件系统中：\n\n  ``` bash\n  $ bin/hdfs dfs -mkdir -p /user/wry/input\n  $ bin/hdfs dfs -put etc/hadoop/*.xml /user/wry/input\n  ``` \n\n  ![image-20200822091216510](image-20200822091216510.png)\n\n  ![image-20200822091335115](image-20200822091335115.png)\n\n- 运行提供的一些示例：\n\n  ``` bash\n  $ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep /user/wry/input /user/wry/output 'dfs[a-z.]+'\n  ``` \n\n  ![image-20200822091809558](image-20200822091809558.png)\n\n  - 查看文件\n\n    ``` bash\n    $ bin/hdfs dfs -ls -r /user/wry/output\n    ``` \n\n  - 查看分布式文件系统上的输出文件：\n\n    ``` bash\n    $ bin/hdfs dfs -cat /user/wry/output/<文件名>\n    ``` \n\n    ![image-20200822092048172](image-20200822092048172.png)\n\n    or\n\n  - 检查输出文件：将输出文件从分布式文件系统复制到本地文件系统并检查它们：\n\n    ``` bash\n    $ bin/hdfs dfs -get /user/wry/output /usr/local/wryoutput \n    $ cat /usr/local/wryoutput/*\n    ``` \n\n    ![image-20200822093255847](image-20200822093255847.png)\n\n- 完成后，使用以下命令停止守护进程：\n\n  ``` bash\n  $ sbin/stop-dfs.sh\n  ``` \n\n>**格式化NameNode 时要注意**\n>\n>1.先停止进程\n>\n>2.删除data 、log文件\n>\n>3.执行格式化命令\n\n>**为什么不能一直 格式化NameNode**\n>\n>格式化NameNode，会产生新的集群Id,导致NameNode和DataNode的集群Id不一致，集群找不到以往的数据，所以，，格式化NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。\n\n![image-20200822094801817](image-20200822094801817.png)\n\n\n\n#### 启动YARN并运行MapReduce程序\n\n##### 1.分析\n\n（1）配置集群在YARN上运行MR\n（2）启动、测试集群增、删、查\n（3）在YARN上执行WordCount案例\n\n##### 2.执行步骤\n\n###### （1）配置集群\n\n配置`etc/hadoop/mapred-site.xml`:\n\n``` xml\n<configuration>\n    <!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 -->\n    <property>\n  \t<name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n    \n    <!-- MR应用程序的类路径 -->\n    <property>\n        <name>mapreduce.application.classpath</name>\n        <value>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*</value>\n    </property>\n</configuration>\n``` \n\n\n\n配置`etc/hadoop/yarn-site.xml`:\n\n``` xml\n<configuration>\n    <!--指Reduce 获取数据的方式-->\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n    \n    <!--yarn运行的环境-->\n    <property>\n        <name>yarn.nodemanager.env-whitelist</name> \t\t<value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME</value>\n    </property>\n    \n    <!--指定YARN的ResourceManager的地址-->\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>0.0.0.0</value>\n</property>\n</configuration>\n``` \n\n启动\n\n``` bash\n$ sbin/start-yarn.sh\n``` \n\n启动报错\n\n![image-20200822100056038](image-20200822100056038.png)\n\n配置`etc/hadoop/hadoop-env.sh`\n\n``` bash\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n``` \n\n![image-20200822102024933](image-20200822102024933.png)\n\n![image-20200822102108817](image-20200822102108817.png)\n\n浏览ResourceManager的web界面；默认情况下，它位于：\n\nResourceManager - `http://localhost:8088/`\n\n![image-20200822111645219](image-20200822111645219.png)\n\n运行一个job\n\n- 拷贝文件到hadoop 目录\n\n``` bash\n$ bin/hdfs dfs -put wcinput/wc.input  /user/wry/wcinput\n``` \n\n- 运行\n\n``` bash\n$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput\n``` \n\n- 查看\n\n``` bash\n$ bin/hadoop dfs -ls -r /user/wry/wcoutput\n``` \n\n\n\n\n\n#### 配置历史服务器\n\n为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：\n\n- 配置`etc/hadoop/mapred-site.xml`\n\n``` xml\n<!--历史服务器端地址-->\n<property>\n\t<name>mapreduce.jobhistory.address</name>\n\t<value>0.0.0.0:10020</value>\n</property>\n<!--历史服务器web端地址-->\n<property>\n\t<name>mapreduce.jobhistory.webapp.address</name>\n\t<value>0.0.0.0:19888</value>\n</property>\n``` \n\n- 启动历史服务器\n\n  ``` bash\n  $ sbin/mr-jobhistory-daemon.sh starthistoryserver\n  ``` \n\n- 查看历史服务器是否启动\n\n  ``` bash\n  $ jps\n  ``` \n\n- 查看JobHistory\n\n  JobHistory -   http://hadoop101:19888/jobhistory\n\n#### 配置日志的聚集\n\n日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。\n日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。\n\n注意：开启日志聚集功能，需要重新启动NodeManager、ResourceManager和\nHistoryManager。\n\n开启日志聚集功能具体步骤如下：\n\n- 配置 `etc/hadoop/yarn-site.xml`\n\n  ``` xml\n  <!--日志聚集功能使能-->\n  <property>\n  \t<name>yarn.log-aggregation-enable</name>\n  \t<value>true</value>\n  </property>\n  <!--日志保留时间设置7天-->\n  <property>\n  \t<name>yarn.log-aggregation.retain-seconds</name>\n  \t<value>604800</value>\n  </property>\n  ``` \n\n- 关闭NodeManager、ResourceManager和HistoryManager\n\n  - 关闭所有 包括 NodeManager、ResourceManager、Name Node、DataNode\n\n  ``` bash\n   $ sbin/stop-all.sh\n  ``` \n\n  - 关闭  NodeManager、ResourceManager\n\n  ``` bash\n  $ sbin/stop-yarn.sh\n  ``` \n\n  - 关闭  Name Node、DataNode\n\n  ``` bash\n  $ sbin/stop-dfs.sh\n  ``` \n\n  - 关闭  HistoryManager\n\n  ``` bash\n  $ sbin/mr-jobhistory-daemon.sh stop historyserver \n  ``` \n\n- 启动NodeManager、ResourceManager和HistoryManager\n\n- 删除HDFS上已经存在的输出文件\n\n  ``` bash\n  $ bin/hadoop dfs -rm -f -r /user/wry/wcoutput\n  ``` \n\n- 执行WordCount程序\n\n  ``` bash\n  $ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput\n  ``` \n\n- 查看日志，如图所示\n\n  ![image-20200822140954237](image-20200822140954237.png)\n\n  ![image-20200822141013068](image-20200822141013068.png)\n\n  ![image-20200822141028970](image-20200822141028970.png)\n\n#### 配置文件说明\n\nHadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认\n配置值时，才需要修改自定义配置文件，更改相应属性值。\n\n##### （1）默认配置文件：\n\n要获取的默认文件文件存放在Hadoop的jar包中的位置\n\n| 配置文件名称       | 默认配置所在的文件路径                                    |\n| :----------------- | --------------------------------------------------------- |\n| core-default.xml   | hadoop-common-2.7.2.jar/core-default.xml                  |\n| hdfs-default.xml   | hadoop-hdfs-2.7.2.jar/hdfs-default.xml                    |\n| yarn-default.xml   | hadoop-yarn-common-2.7.2.jar/yarn-default.xml             |\n| mapred-default.xml | hadoop-mapreduce-client-core-2.7.2.jar/mapred-default.xml |\n\n##### （2）自定义配置文件：\n\ncore-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在\n$HADOOP_HOME/etc/hadoop这个路径上，用户可以根据项目需求重新进行修改配置。\n\n\n\n### 完全分布式运行模式（开发重点）\n\n#### 分析\n\n1）准备3台客户机（关闭防火墙、静态ip、主机名称）\n2）安装JDK\n3）配置环境变量\n4）安装Hadoop\n5）配置环境变量\n6）配置集群\n7）单点启动\n8）配置ssh\n9）群起并测试集群\n\n#### 虚拟机准备\n\n##### （1）改IP地址\n\n``` bash\n$ vim /etc/sysconfig/network-scripts/ifcfg-ens33 \n``` \n\n``` bash\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\t\t#改为static静态\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=67b4d72d-1ff5-4e3e-a089-e1579700eba8\nDEVICE=ens33\nONBOOT=yes\t\t\t\t#改为yes\n\nIPADDR=192.168.100.102  # ip地址\nNETMASK=255.255.255.0   #子网掩码\nGATEWAY=192.168.100.1\t#网关\nDNS1=8.8.8.8\t\t\t#DNS\nDNS2=223.6.6.6\n\nPREFIX=24\n\n``` \n\n##### （2）改主机名\n\n不配置后期的数据节点可能会找不到。\n\n``` bash\n$ vim /etc/hotos\n``` \n\n``` bash\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.100.102 hadoop102\n192.168.100.103 hadoop103\n192.168.100.104 hadoop104\n``` \n\n\n\n#### 编写集群分发脚本xsync\n\n##### 1.scp（securecopy）安全拷贝\n\n###### （1）scp定义：\n\n`scp`可以实现服务器与服务器之间的数据拷贝。（fromserver1toserver2）\n\n###### （2）基本语法\n\n``` bash\nscp\t\t-r  \t$pdir/$fname\t\t$user@hadoop$host:$pdir/$fname\n命令\t  递归\t 要拷贝的文件路径\t   名称目的用户@主机:目的路径/名称\n``` \n\n###### （3）案例实操\n\n（a）在`192.168.100.101`上，将`192.168.100.101`中`/usr/local/software`目录下的软件拷贝到`192.168.100.102`上。\n\n``` bash\n$ scp -r /usr/local/software/*  root@192.168.100.102:/usr/local/software\n``` \n\n（b）在`192.168.100.103`上，将`192.168.100.101`服务器上的`/usr/local/software`目录下的软件拷贝到\n`192.168.100.103`上。\n\n``` bash\n$ scp -r root@192.168.100.101:/usr/local/software/*  /usr/local/software/\n``` \n\n（c）在`192.168.100.103`上操作将`192.168.100.101`中`/usr/local/software`目录下的软件拷贝到\n`192.168.100.104`上。\n\n``` bash\n$ scp -r root@192.168.100.101:/usr/local/software/*  root@192.168.100.104:/usr/local/software/\n``` \n\n##### 2.rsync远程同步工具\n\n`rsync`主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。\n\n**`rsync`和`scp`区别：**\n\n用`rsync`做文件的复制要比`scp`的速度快，`rsync`只对差异文件做更新。`scp`是把所有文件都复制过去。\n\n###### （1）基本语法\n\n``` bash\nrsync\t-rvl\t\t$pdir/$fname\t\t\t$user@hadoop$host:$pdir/$fname\n命令\t  选项参数\t\t要拷贝的文件路径/名称\t\t目的用户@主机:目的路径/名称\n``` \n\n选项参数说明\n\n| 选项 | 功能         |\n| ---- | ------------ |\n| -r   | 递归         |\n| -v   | 显示复制过程 |\n| -l   | 拷贝符号连接 |\n\n###### （2）案例实操\n\n（a）把`192.168.100.101`机器上的`/usr/local/software`目录同步到`192.168.100.102`服务器的root用户\n下的`/usr/local/software`目录\n\n``` bash\n$ rsync  -rvl /usr/local/software/*  root@192.168.100.102:/usr/local/software/\n``` \n\n##### 3.xsync集群分发脚本\n\n###### （1）需求\n\n循环复制文件到所有节点的相同目录下\n\n###### （2）需求分析\n\n（a）rsync命令原始拷贝：\n\n``` bash\nrsync -rvl  /usr/local/program/*  root@192.168.100.103:/usr/local/program/\n``` \n\n（b）期望脚本：\nxsync要同步的文件名称\n（c）说明：在`/home/<用户名>/bin`这个目录下存放的脚本，root用户可以在系统任何地方直接执行。\n\n###### （3）脚本实现\n\n（a）在`/home/<用户名>/bin`目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：\n\n``` bash\n$ cd /home/<用户名>\n$ mkdir bin\n$ cd bin\n$ vim xsync\n``` \n\n\n\n``` bash\n#!/bin/bash\n#1获取输入参数个数，如果没有参数，直接退出\npcount=$#\nif((pcount==0));then\necho noargs;\nexit;\nfi\n#2获取文件名称\np1=$1\nfname=`basename $p1`\necho  fname=$fname\n#3获取上级目录到绝对路径\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n#4获取当前用户名称\nuser=`whoami`\n#5循环\nfor((host=103;host<105;host++));do\necho -------------------192.168.100.$host--------------\nrsync -rvl $pdir/$fname  $user@192.168.100.$host:$pdir\ndone\n``` \n\n（b）修改脚本xsync具有执行权限\n\n``` bash\n$ chmod 777 xsync\n``` \n\n（c）调用脚本形式：xsync文件名称\n\n``` bash\n$ xsync  /home/<用户名>/bin\n``` \n\n\n\n\n>**注意**：\n>\n>如果将`xsync`放到`/home/<用户名>/bin`目录下仍然不能实现全局使用，\n>\n>可以将`xsync`移动到`/usr/local/bin`目录下。\n\n#### 集群配置\n\n##### 1.集群部署规化\n\n|      | 192.168.100.102 -hadoop102 | 192.168.100.103-hadoop103        | 192.168.100.104-hadoop104        |\n| ---- | :------------------------- | -------------------------------- | -------------------------------- |\n| HDFS | NameNode <br /> DataNode   | <br />DataNode                   | SecondaryNameNode <br />DataNode |\n| YARN | <br />NodeManage           | ResourceManage  <br />NodeManage | <br />NodeManage                 |\n\n机器改IP \n\n##### 2.配置集群\n\n###### （1）核心配置文件\n\n在`192.168.100.102` 上\n\n配置`etc/hadoop/core-site.xml`\n\n``` bash\n$ cd /usr/local/program/hadoop3.2.1\n$ vim etc/hadoop/core-site.xml\n``` \n\n在该文件中编写如下配置\n\n``` xml\n<!--指定HDFS中NameNode的地址-->\n<property>\n\t<name>fs.defaultFS</name>\n\t<value>hdfs://192.168.100.102:9000</value>\n</property>\n<!--指定Hadoop运行时产生文件的存储目录-->\n<property>\n\t<name>hadoop.tmp.dir</name>\n\t<value>/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-${user.name}</value>\n</property>\n``` \n\n###### （2）HDFS配置文件\n\n配置`etc/hadoop/hadoop-env.sh`\n\n``` bash\nexport JAVA_HOME=/usr/local/program/jdk1.8 \n\nexport HDFS_DATANODE_USER=root  \nexport HDFS_NAMENODE_USER=root  \nexport HDFS_SECONDARYNAMENODE_USER=root \n``` \n\n配置`etc/hadoop/hdfs-site.xml`\n\n```  xml\n<property>\n\t<name>dfs.replication</name>\n    <value>3</value>\n</property>\n<!--指定Hadoop辅助名称节点主机配置-->\n<property>\n\t<name>dfs.namenode.secondary.http-address</name>\n    <value>192.168.100.104:50090</value>\n</property>\n<!--指定HadoopNameNode的地址-->\n<property>\n  <name>dfs.http.address</name>\n  <value>192.168.100.102:9870</value>\n</property>\n\n\n``` \n\n###### （3）YARN配置文件\n\n一般在 shell中输入\n\n``` bash\n$ hadoop  classpath\n``` \n\n然后 这些输出 直接 粘贴到 yarn 的配置文件里 yarn-site.xml的属性 <name>yarn.application.classpath</name>赋值\n\n配置`etc/hadoop/hadoop-env.sh`\n\n``` bash\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n``` \n\n配置`etc/hadoop/yarn-site.xml`\n\n``` xml\n<!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 -->\n<property>\n\t<name>mapreduce.framework.name</name>\n    <value>yarn</value>\n</property>\n    \n<!-- MR应用程序的类路径 -->\n<property>\n\t<name>mapreduce.application.classpath</name>\n    <value>/usr/local/program/hadoop-3.2.1/etc/hadoop:/usr/local/program/hadoop-3.2.1/share/hadoop/common/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/common/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/*</value>\n</property>\n<!--指定YARN的ResourceManager的地址-->\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>192.168.100.103</value>\n</property>\n\n<property>\n    <name>yarn.nodemanager.aux-services</name>\n    <value>mapreduce_shuffle</value>\n</property>\n<property>\n    <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>\n    <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n</property>\n\n``` \n\n###### （4）MapReduce配置文件\n\n配置`etc/hadoop/mapred-site.xml`\n\n``` xml\n<!--指定MR运行在Yarn上-->\n<property>\n\t<name>mapreduce.framework.name</name>\n\t<value>yarn</value>\n</property>\n<!-- MR应用程序的类路径 -->\n<property>\n\t<name>mapreduce.application.classpath</name>     <value>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*</value>\n</property>\n``` \n\n##### 3.在集群上分发配置好的Hadoop配置文件\n\n``` bash\n$ xsync ./etc/hadoop/\n``` \n\n##### 4.查看文件分发情况\n\n#### 集群单点启动\n\n（1）如果集群是第一次启动，需要格式化`NameNode`\n\n``` bash\n$  bin/hdfs namenode -formart\n``` \n\n（2）在`192.168.100.102`上启动`NameNode`\n\n``` bash\n$ sbin/hadoop-daemon.sh  start namenode\n``` \n\n（3）在`192.168.100.102`,`192.168.100.103`以及`192.168.100.104`上分别启动`DataNode`\n\n``` bash\n$ sbin/hadoop-daemon.sh  start datanode\n``` \n\n（4）思考：每次都一个一个节点启动，如果节点数增加到1000个怎么办？\n\t\t\t早上来了开始一个一个节点启动，到晚上下班刚好完成，下班？\n\n#### SSH无密登录配置\n\n##### 1.配置ssh\n\n（1）基本语法\n\t\t\tssh另一台电脑的ip地址\n（2）ssh连接时出现Hostkeyverificationfailed的解决方法\n\n``` bash\n$ ssh  192.168.1.103\nTheauthenticityofhost'192.168.1.103(192.168.1.103)'can't\nbeestablished.\nRSAkeyfingerprintis\ncf:1e:de:d7:d0:4c:2d:98:60:b4:fd:ae:b1:2d:ad:06.\nAreyousureyouwanttocontinueconnecting(yes/no)?\nHostkeyverificationfailed.\n``` \n\n（3）解决方案如下：直接输入yes\n\n##### 2.无密钥配置\n\n（1）免密登录原理\n\n![image-20200823180537869](image-20200823180537869.png)\n\n（2）`192.168.100.102`生成公钥和私钥：\n\n``` bash\n$ cd /root/.ssh\n$ ssh-keygen -t rsa\n``` \n\n然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）\n\n（3）将公钥拷贝到要免密登录的目标机器上\n\n``` bash\n$ ssh-copy-id 192.168.100.102\n$ ssh-copy-id 192.168.100.103\n$ ssh-copy-id 192.168.100.104\n``` \n\n（4）`192.168.100.103`生成公钥和私钥,进行公钥拷贝到要免密登录的目标机器上\n\n\n\n##### 3.`.ssh`文件夹下（~/.ssh）的文件功能解释\n\n| known_hosts     | 记录ssh访问过计算机的公钥(publickey) |\n| --------------- | ------------------------------------ |\n| id_rsa          | 生成的私钥                           |\n| id_rsa.pub      | 生成的公钥                           |\n| authorized_keys | 存放授权过得无密登录服务器公钥       |\n\n#### 群起集群\n\n##### 1.配置`etc/hadoop/workers`\n\n``` bash\n$ vim etc/hadoop/workers \n``` \n\n添加以下节点\n\n``` bash\n192.168.100.102\n192.168.100.103\n192.168.100.104\n``` \n\n>#### 注意：\n>\n>千万不要有多余的空格\n\n##### 2.启动集群\n\n###### （1）如果集群是第一次启动\n\n需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）\n\n``` bash\n$ bin/hdfs namenode -format\n``` \n\n###### （2）启动HDFS\n\n``` bash\n$ sbin/start-dfs.sh\n``` \n\n`jps`查看是否启动\n\n###### （3）启动`YARN`\n\n``` bash\n$ sbin/start-yarn.sh\n``` \n\n###### （3）Web端查看`SecondaryNameNode`\n\n``` http\nhttp://192.168.100.102:9870/\n``` \n\n###### （4）查看文件系统的基本数据\n\n ``` bash\n$ bin/hdfs dfsadmin -report\n ``` \n\n\n\n> 注意：\n>\n> NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动YARN，应该在ResouceManager所在的机器上启动YARN。\n\n##### 3.集群基本测试\n\n###### （1）上传文件到集群\n\n``` bash\n$ bin/hdfs dfs -put  ./wcinput/wc.input  /user/wry/input\n``` \n\n###### （2）上传文件后查看文件存放在什么位置\n\n``` bash\n$ pwd\n``` \n\n``` bash\n/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-root/dfs/data/current/BP-719430212-127.0.0.1-1598525636602/current/finalized/subdir0/subdir0\n``` \n\n\n\n#### 集群启动/停止方式总结\n\n##### 1.各个服务组件逐一启动/停止\n\n###### （1）分别启动/停止HDFS组件\n\n``` bash\n$ sbin/hadoop-daemon.sh start/stop  namenode/datanode/secondarynamenode\n``` \n\n###### （2）启动/停止YARN\n\n``` bash\n$ sbin/yarn-daemon.sh  start/stop  resourcemanager/nodemanager\n``` \n\n##### 2.各个模块分开启动/停止（配置ssh是前提）常用\n\n###### （1）整体启动/停止HDFS\n\n``` bash\n$ sbin/start-dfs.sh/stop-dfs.sh\n``` \n\n###### （2）整体启动/停止YARN\n\n``` bash\n$ sbin/start-yarn.sh/stop-yarn.sh\n``` \n\n### crontab定时任务设置\n\n#### 基本语法\n\ncrontab [选项]\n\n#### 选项说明\n\n| 选项 | 功能                           |\n| ---- | ------------------------------ |\n| -e   | 编辑crontab 定时任务           |\n| -l   | 查询crontab任务                |\n| -r   | 删除当前用户所有的crontab 任务 |\n\n#### 参数说明\n\n``` bash\n$ crontab -e\n``` \n\n##### （1）进入crontab编辑界面。会打开vim 编辑你的工作\n\n``` \n* * * * *  执行的任务\n``` \n\n| 项目      | 含义                 | 范围                    |\n| --------- | -------------------- | ----------------------- |\n| 第一个“*” | 一小时当中的第几分钟 | 0-59                    |\n| 第二个“*” | 一天当中的第几小时   | 0-23                    |\n| 第三个“*” | 一月当中的第几天     | 1-31                    |\n| 第四个“*” | 一年当中的第几月     | 1-12                    |\n| 第五个“*” | 一周当中的星期几     | 0-7（0和7都代表星期日） |\n\n##### （2）特殊符合\n\n| 特殊符合 | 含义                                                         |\n| -------- | ------------------------------------------------------------ |\n| *        | 代表任何时间。比如第一个“*”，就代表一小时中的每分钟都有执行一次 |\n| ，       | 代表不连需的时间。比如\"0 8,12,16 * * *\" 命令，就代表在每天的8点0分，12点0分，16点0分都执行一次 |\n| -        | 代表连续的时间范围。比如\"0 5 * * 1-6\" ,就代表在周一到周六的凌晨5点0分执行命令 |\n| */n      | 代表每个多久执行一次。比如\"*/10 * * * *\",就代表没10分钟执行一次命令 |\n\n##### （3）特殊特定时间执行命令\n\n| 时间         | 含义                                                         |\n| ------------ | ------------------------------------------------------------ |\n| 45 22 * * *  | 在22点45 分执行命令                                          |\n| 0 17 * * 1   | 每周一的17点0分执行命令                                      |\n| 0 5 1,15 * * | 每月1号和15号的凌晨5点0分执行命令                            |\n| 40 4 * * 1-5 | 每周一到周五的凌晨4点40 分执行命令                           |\n| */10 4 * * * | 每天的凌晨4点，没隔10分钟执行一次命令                        |\n| 0 0 1,15 * 1 | 每月1号和15号，每周一的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。 |\n\n##### （4）案例实操\n\n- 每隔1分钟，向`/root/bailongma.txt`文件中添加一个11 的数字。\n\n  ``` bash\n  */1 * * * * /bin/echo \"11\" >>/root/bailongma.txt\n  ``` \n\n\n\n### 集群时间同步\n\n时间同步的方式：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，比如，每隔十分钟，同步一次时间。\n\n![image-20200829223326519](image-20200829223326519.png)\n\n\n\n## Linux\n\n### 配置静态IP\n\n#### 第一步：修改VMnet配置\n\n在VMware里，依次点击”编辑“ - ”虚拟网络编辑器“，如下图，我选择的是NAT模式： 以下VMnet2为配置\n\n![在这里插入图片描述](https://img.jbzj.com/file_images/article/202001/2020011513342421.png)\n\n其中子网ip随便写,子网掩码自己计算,如果不太熟悉就完全配置和我一样就行\n\nA类默认的子网掩码：255.0.0.0\nB类默认的子网掩码：255.255.0.0\nC类默认的子网掩码：255.255.255.0\n\n为了使用静态IP将: 使用本地DHCP服务将IP地址分配给虚拟机 取消(默认是选择状态)\n\n点击NAT设置\n\n将网关ip记住如下图,最后配置虚拟机ip文件所用\n\n![Alt](https://img.jbzj.com/file_images/article/202001/2020011513342422.png)\n\n#### 第二步：进入虚拟机\n\n 以root权限登陆centos8并编辑vi /etc/sysconfig/network-scripts/ifcfg-ens33这个文件，效果如下：\n\n``` bash\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static #注意设置为static静态\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=aa18fb34-fea8-4fff-83a4-1ebed631beff\nDEVICE=ens33\nONBOOT=yes #这里如果为no的话就改为yes，表示网卡设备自动启动\nGATEWAY=192.168.0.2 #这里的网关地址就是上一步获取到的那个网关地址\nIPADDR=192.168.0.150 #再网关的范围内随意写\nNETMASK=255.255.255.0 #子网掩码\nDNS1=8.8.8.8 #DNS1这里用谷歌,\nDNS2=223.6.6.6 #DNS2用阿里\n``` \n\n然后 :wq保存退出\n\n#### 第三步: 刷新网卡配置\n\nCentOS 8 使用 : nmcli c reload\n\nCentOS7 使用 /etc/init.d/network restart\n\n如果不能上网直接使用`reboot` 命令重启\n\n\n\n### 关闭防火墙\n\ncentos8\n\n#### 永久关闭防火墙\n\n``` bash\n$ systemctl disable firewalld\n``` \n\n#### 查看防火墙\n\n``` bash\n$ systemctl status firewalld.service\n``` \n\n#### 停止防火墙\n\n``` bash\n$ systemctl stop firewalld.service\n``` \n\n#### 启用防火墙\n\n``` bash\n$ systemctl start firewalld.service\n``` \n\n### 配置JDK\n\n#### 第一步：解压\n\n``` bash\n$ tar -zxvf /usr/local/software/jdk1.8.231 -C /usr/local/program/\n``` \n\n#### 第二步：配置环境变量\n\n``` bash\n$ vim /etc/profile\n``` \n\n在最后添加java 环境配置\n\n``` bash\nexport JAVA_HOME=/usr/local/program/jdk1.8.231\nexport CLASS_PATH=.:$JAVA_HOME/lib.tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n``` \n\n#### 第三步：使配置生效\n\n``` bash\n$ source /etc/profile\n``` \n\n### 配置SSH连接\n\n#### 第一步：修改配置\n\n``` bash\n$ vim /etc/ssh/sshd_config\n``` \n\n打开 注释修改以下配置\n\nClientAliveInterval 60\n\n表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了\n\nClientAliveCountMax 3 \n\nClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开\n\n#### 第二步：重启服务\n\n``` bash\n$ service sshd restart\n``` \n\n\n\n``` bash\ntar -zxvf /usr/local/software/hadoop-3.2.1.tar.gz  -C /usr/local/program/\n\nvim /etc/profile\n\n#hadoop 环境\nexport HADOOP_HOME=/usr/local/program/hadoop-3.2.1\nexport PATH=$PATH:$HADOOP_HOME/bin\nexport PATH=$PATH:$HADOOP_HOME/sbin\n\nsource /etc/profile\n\nhadoop version\n``` \n\n","source":"_posts/2023/Hadoop.md","raw":"---\ntitle: Hadoop\ndate: 2023-02-21\ntags:\n- Hadoop\ncategories:\n- Hadoop\n---\n\n## Hadoop是什么\n\n1. hadoop是一个Aoache基金会所开发的分布式系统基础架构 。\n2. 主要解决，海量数据的存储和海量数据的分析计算问题。\n3. 广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。\n\n## Hadoop发展史\n\n### Lucene\n\n### 论文\n\n#### GFS-->HDFS\n\n#### Map-Reduce-->MR\n\n#### BigTable-->HBase\n\n\n\n## Hadoop三大发行版本\n\n### Apache\n\n最原始，最基本的版本，对于入门学习较好\n\n### Cloudera\n\n在大型互联网企业中用的较多\n\n### Hortonworks\n\n文档较好\n\n## Hadoop的优势（4高）\n\n1. 高可靠：Hadoop底层维护了多个数据副本，所以即使Hadoop某个计算或存储出现故障，也不会导致数据丢失。\n2. 高扩展性：在集群建分配任务数据，可方便的扩展数以千计的节点。\n3. 高效性：在Mao-Reduce 的思想下，Hadoop是并行工作的，以加快任务处理速度。\n4. 高容错性：能够自动将失败的任务重新分配。\n\n## Hadoop组成\n\n###  1.x 与2.x\n\n![image-20200820213620752](image-20200820213620752.png)\n\n\n\n### HDFS架构概念\n\n#### 1.NameNode (nn)\n\n存储额文件的元数据，如文件名，文件目录结构，文件属性（生成时间，副本数，文件权限），以及每个文件的块列表和块所在的DataNode 等。\n\n#### 2.DataNode (dn)\n\n在本地文件系统存储文件块数据，以及块数据的校验和。\n\n#### 3.Secondary NameNode (2nn)\n\n用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。\n\n\n\n### YARN 架构概念\n\n#### ResourceManage(RM)主要作用\n\n- 处理客户请求\n- 监控NodeManage\n- 启动或监控ApplicationMaster\n- 资源的调度与分配\n\n#### NodeManage(NM)主要作用\n\n- 管理单个节点上的资源\n- 处理来自ResourceManage的命令\n- 处理来自ApplicationMaster的命令 \n\n#### ApplicationMaster(AM)主要作用\n\n- 负责数据的切分\n- 为应用程序申请资源并分配给内部的任务\n- 任务的监控与容错\n\n#### Container\n\n- Container是YARN中的资源抽象，他封装了某个节点上的多维资源，如内存，CPU,磁盘，网络等。\n\n### MapReduce架构概述\n\nMapReduce 将计算过程分为两个阶段：map 和 Reduce\n\n1. Map 阶段并行处理输入数据\n2. Reduce阶段对Map结果进行汇总\n\n \n\n## 大数据计数生态体系\n\n![image-20200820224123902](image-20200820224123902.png)\n\n\n\n## 环境搭建\n\n### 1.准备虚拟机\n\n### 2.安装JDK\n\n### 3.安装Hadoop\n\n- 解压\n\n- 配置环境变量\n\n  在 `/etc/profile`文件的最后加\n\n  ``` bash\n  export HADOOP_HOME=/usr/local/hadoop-3.2.1\n  export PATH=$PATH:$HADOOP_HOME/bin\n  export PATH=$PATH:$HADOOP_HOME/sbin\n  ``` \n\n  使用配置生效\n\n  ``` bash\n  $ source /ect/profile\n  ``` \n\n### 4.Hadoop目录结构\n\n- **bin**\n\n  存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本\n\n- **etc** \n\n  Hadoop的配置文件目录\n\n- **lib**\n\n  存放Hadoop的本地库（对数据进行压缩解压的功能）\n\n- **sbin**\n\n  存放启动或停止Hadoop相关服务的脚本\n\n- **share**\n\n  存放Hadoop的依赖jar包，文档，和官方案例。\n\n### 5.Hadoop官网手册\n\nHadoop官方网站：https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html\n\n## Hadoop运行模式\n\nHadoop运行模式包括：\n\n本地模式、伪分布式模式以及完全分布式模式。\n\n\n\n### 本地运行模式\n\n#### 官方Grep案例\n\n1.创建在hadoop-3.2.1文件下面创建一个input文件夹\n\n``` bash\n$ mkdir input\n``` \n\n2.将Hadoop的xml配置文件复制到input\n\n``` bash\n$ cp  etc/hadoop/*.xml  input\n``` \n\n3.执行share目录下的MapReduce程序\n\n``` bash\n$ bin/hadoop\tjar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep input  output  'dfs[a-z.]+'\n``` \n\n4.查看输出结果\n\n``` bash\ncat  output/*\n``` \n\n#### 官方WordCount案例\n\n1.创建在hadoop-3.2.1文件下面创建一个wcinput文件夹\n\n``` bash\nmkdir wcinput\n``` \n\n2.在wcinput文件下创建一个wc.input文件\n\n``` bash\n$ cd wcinput\n\n$ touchwc.input\n``` \n\n3.编辑wc.input文件\n\n``` bash\n$ vim  wc.input\n``` \n\n在文件中输入如下内容\n\n``` \nhadoopyarn\nhadoopmapreduce\natguigu\natguigu\n``` \n\n保存退出：：wq\n\n4.回到Hadoop目录\n\n5.执行程序\n\n``` bash\n$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount wcinput wcoutput\n``` \n\n6.查看结果\n\n``` bash\n$ cat wcoutput /part-r-00000\n``` \n\n``` \natguigu2\nhadoop2\nmapreduce1\nyarn1\n``` \n\n\n\n### 伪分布式运行模式\n\n#### 启动HDFS并运行MapReduce程序\n\n##### 1.分析\n\n（1）配置集群\n（2）启动、测试集群增、删、查\n（3）执行WordCount案例\n\n##### 2.执行步骤\n\n###### （1）配置集群\n\n进入Hadoop的etc目录\n\n``` bash\n$ cd ./etc\n``` \n\n- 配置：hadoop-env.sh\n\n  Linux系统中获取JDK的安装路径：\n\n  ``` bash\n  $ echo $JAVA_HOME\n  ``` \n\n  ``` bash\n  /usr/local/jdk1.8.0_121\n  ``` \n\n  修改JAVA_HOME路径：\n\n  ``` bash\n  export JAVA_HOME=/usr/local/jdk1.8.0_121\n  ``` \n\n- 配置：core-site.xml\n\n  ``` xml\n  <!--指定HDFS中NameNode的地址-->\n  <property>\n  \t<name>fs.defaultFS</name>\n  \t<value>hdfs://localhost:9000</value>\n  </property>\n  <!--指定Hadoop运行时产生文件的存储目录-->\n  <property>\n  \t<name>hadoop.tmp.dir</name>\n  \t<value>/usr/local/hadoop-3.2.1/data/tmp</value>\n  </property>\n  ``` \n\n- 配置：hdfs-site.xml\n\n  ``` xml\n  <!--指定HDFS副本的数量-->\n  <property>\n  \t<name>dfs.replication</name>\n  \t<value>1</value>\n  </property>\n  ``` \n\n###### （2）设置无密码SSH\n\n- 现在检查您是否可以在不使用密码的情况下SSH到本地主机：\n\n  ``` bash\n   $ ssh  localhost\n  ``` \n\n  如果没有密码就无法SSH到本地主机\n\n- 请执行以下命令\n\n  ``` bash\n  $ ssh-keygen -t rsa -P''-f〜/ .ssh / id_rsa \n  $ cat〜/ .ssh / id_rsa.pub >>〜/ .ssh / authorized_keys \n  $ chmod 0600〜/ .ssh / authorized_keys\n  ``` \n\n###### （3）执行\n\n- 格式化文件系统\n\n  ``` bash\n  $ bin/hdfs namenode -format\n  ``` \n\n- 启动NameNode守护程序和DataNode守护程序：\n\n  ``` bash\n  $ ./sbin/start-dfs.sh\n  ``` \n\n- 启动报错\n\n  ``` bash\n  [root@iZ2zednzb8iugz3kgudq9bZ hadoop-3.2.1]# ./sbin/stop-dfs.sh\n  Stopping namenodes on [localhost]\n  ERROR: Attempting to operate on hdfs namenode as root\n  ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.\n  Stopping datanodes\n  ERROR: Attempting to operate on hdfs datanode as root\n  ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.\n  Stopping secondary namenodes [iZ2zednzb8iugz3kgudq9bZ]\n  ERROR: Attempting to operate on hdfs secondarynamenode as root\n  ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.\n  ``` \n\n  添加以下配置到 `hadoop-env.sh`\n\n  ``` bash\n  HDFS_DATANODE_USER=root  \n  HDFS_NAMENODE_USER=root  \n  HDFS_SECONDARYNAMENODE_USER=root \n  ``` \n\n- 浏览Web界面以查找NameNode；默认情况下，它在以下位置可用：\n\n  ``` http\n  http://localhost:9870/\n  ``` \n\n- 设置执行MapReduce作业所需的HDFS目录：\n\n  ``` bash\n  $ bin/hdfs dfs -mkdir /user/root\n  $ bin/hdfs dfs -mkdir /user/<用户名>\n  ``` \n\n  - 创建多层目录\n\n  ``` bash\n  $ bin/hdfs dfs -mkdir -p  /user/wry\n  ``` \n\n  ![image-20200822090658863](image-20200822090658863.png)\n\n  - 查看多级目录\n\n  ``` bash\n  $ bin/hdfs dfs -ls -R /\n\t``` \n\n  ![image-20200822090905199](image-20200822090905199.png)\n  \n- 将本地输入文件复制到分布式文件系统中：\n\n  ``` bash\n  $ bin/hdfs dfs -mkdir -p /user/wry/input\n  $ bin/hdfs dfs -put etc/hadoop/*.xml /user/wry/input\n  ``` \n\n  ![image-20200822091216510](image-20200822091216510.png)\n\n  ![image-20200822091335115](image-20200822091335115.png)\n\n- 运行提供的一些示例：\n\n  ``` bash\n  $ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep /user/wry/input /user/wry/output 'dfs[a-z.]+'\n  ``` \n\n  ![image-20200822091809558](image-20200822091809558.png)\n\n  - 查看文件\n\n    ``` bash\n    $ bin/hdfs dfs -ls -r /user/wry/output\n    ``` \n\n  - 查看分布式文件系统上的输出文件：\n\n    ``` bash\n    $ bin/hdfs dfs -cat /user/wry/output/<文件名>\n    ``` \n\n    ![image-20200822092048172](image-20200822092048172.png)\n\n    or\n\n  - 检查输出文件：将输出文件从分布式文件系统复制到本地文件系统并检查它们：\n\n    ``` bash\n    $ bin/hdfs dfs -get /user/wry/output /usr/local/wryoutput \n    $ cat /usr/local/wryoutput/*\n    ``` \n\n    ![image-20200822093255847](image-20200822093255847.png)\n\n- 完成后，使用以下命令停止守护进程：\n\n  ``` bash\n  $ sbin/stop-dfs.sh\n  ``` \n\n>**格式化NameNode 时要注意**\n>\n>1.先停止进程\n>\n>2.删除data 、log文件\n>\n>3.执行格式化命令\n\n>**为什么不能一直 格式化NameNode**\n>\n>格式化NameNode，会产生新的集群Id,导致NameNode和DataNode的集群Id不一致，集群找不到以往的数据，所以，，格式化NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。\n\n![image-20200822094801817](image-20200822094801817.png)\n\n\n\n#### 启动YARN并运行MapReduce程序\n\n##### 1.分析\n\n（1）配置集群在YARN上运行MR\n（2）启动、测试集群增、删、查\n（3）在YARN上执行WordCount案例\n\n##### 2.执行步骤\n\n###### （1）配置集群\n\n配置`etc/hadoop/mapred-site.xml`:\n\n``` xml\n<configuration>\n    <!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 -->\n    <property>\n  \t<name>mapreduce.framework.name</name>\n        <value>yarn</value>\n    </property>\n    \n    <!-- MR应用程序的类路径 -->\n    <property>\n        <name>mapreduce.application.classpath</name>\n        <value>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*</value>\n    </property>\n</configuration>\n``` \n\n\n\n配置`etc/hadoop/yarn-site.xml`:\n\n``` xml\n<configuration>\n    <!--指Reduce 获取数据的方式-->\n    <property>\n        <name>yarn.nodemanager.aux-services</name>\n        <value>mapreduce_shuffle</value>\n    </property>\n    \n    <!--yarn运行的环境-->\n    <property>\n        <name>yarn.nodemanager.env-whitelist</name> \t\t<value>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME</value>\n    </property>\n    \n    <!--指定YARN的ResourceManager的地址-->\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>0.0.0.0</value>\n</property>\n</configuration>\n``` \n\n启动\n\n``` bash\n$ sbin/start-yarn.sh\n``` \n\n启动报错\n\n![image-20200822100056038](image-20200822100056038.png)\n\n配置`etc/hadoop/hadoop-env.sh`\n\n``` bash\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n``` \n\n![image-20200822102024933](image-20200822102024933.png)\n\n![image-20200822102108817](image-20200822102108817.png)\n\n浏览ResourceManager的web界面；默认情况下，它位于：\n\nResourceManager - `http://localhost:8088/`\n\n![image-20200822111645219](image-20200822111645219.png)\n\n运行一个job\n\n- 拷贝文件到hadoop 目录\n\n``` bash\n$ bin/hdfs dfs -put wcinput/wc.input  /user/wry/wcinput\n``` \n\n- 运行\n\n``` bash\n$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput\n``` \n\n- 查看\n\n``` bash\n$ bin/hadoop dfs -ls -r /user/wry/wcoutput\n``` \n\n\n\n\n\n#### 配置历史服务器\n\n为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：\n\n- 配置`etc/hadoop/mapred-site.xml`\n\n``` xml\n<!--历史服务器端地址-->\n<property>\n\t<name>mapreduce.jobhistory.address</name>\n\t<value>0.0.0.0:10020</value>\n</property>\n<!--历史服务器web端地址-->\n<property>\n\t<name>mapreduce.jobhistory.webapp.address</name>\n\t<value>0.0.0.0:19888</value>\n</property>\n``` \n\n- 启动历史服务器\n\n  ``` bash\n  $ sbin/mr-jobhistory-daemon.sh starthistoryserver\n  ``` \n\n- 查看历史服务器是否启动\n\n  ``` bash\n  $ jps\n  ``` \n\n- 查看JobHistory\n\n  JobHistory -   http://hadoop101:19888/jobhistory\n\n#### 配置日志的聚集\n\n日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。\n日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。\n\n注意：开启日志聚集功能，需要重新启动NodeManager、ResourceManager和\nHistoryManager。\n\n开启日志聚集功能具体步骤如下：\n\n- 配置 `etc/hadoop/yarn-site.xml`\n\n  ``` xml\n  <!--日志聚集功能使能-->\n  <property>\n  \t<name>yarn.log-aggregation-enable</name>\n  \t<value>true</value>\n  </property>\n  <!--日志保留时间设置7天-->\n  <property>\n  \t<name>yarn.log-aggregation.retain-seconds</name>\n  \t<value>604800</value>\n  </property>\n  ``` \n\n- 关闭NodeManager、ResourceManager和HistoryManager\n\n  - 关闭所有 包括 NodeManager、ResourceManager、Name Node、DataNode\n\n  ``` bash\n   $ sbin/stop-all.sh\n  ``` \n\n  - 关闭  NodeManager、ResourceManager\n\n  ``` bash\n  $ sbin/stop-yarn.sh\n  ``` \n\n  - 关闭  Name Node、DataNode\n\n  ``` bash\n  $ sbin/stop-dfs.sh\n  ``` \n\n  - 关闭  HistoryManager\n\n  ``` bash\n  $ sbin/mr-jobhistory-daemon.sh stop historyserver \n  ``` \n\n- 启动NodeManager、ResourceManager和HistoryManager\n\n- 删除HDFS上已经存在的输出文件\n\n  ``` bash\n  $ bin/hadoop dfs -rm -f -r /user/wry/wcoutput\n  ``` \n\n- 执行WordCount程序\n\n  ``` bash\n  $ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput\n  ``` \n\n- 查看日志，如图所示\n\n  ![image-20200822140954237](image-20200822140954237.png)\n\n  ![image-20200822141013068](image-20200822141013068.png)\n\n  ![image-20200822141028970](image-20200822141028970.png)\n\n#### 配置文件说明\n\nHadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认\n配置值时，才需要修改自定义配置文件，更改相应属性值。\n\n##### （1）默认配置文件：\n\n要获取的默认文件文件存放在Hadoop的jar包中的位置\n\n| 配置文件名称       | 默认配置所在的文件路径                                    |\n| :----------------- | --------------------------------------------------------- |\n| core-default.xml   | hadoop-common-2.7.2.jar/core-default.xml                  |\n| hdfs-default.xml   | hadoop-hdfs-2.7.2.jar/hdfs-default.xml                    |\n| yarn-default.xml   | hadoop-yarn-common-2.7.2.jar/yarn-default.xml             |\n| mapred-default.xml | hadoop-mapreduce-client-core-2.7.2.jar/mapred-default.xml |\n\n##### （2）自定义配置文件：\n\ncore-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在\n$HADOOP_HOME/etc/hadoop这个路径上，用户可以根据项目需求重新进行修改配置。\n\n\n\n### 完全分布式运行模式（开发重点）\n\n#### 分析\n\n1）准备3台客户机（关闭防火墙、静态ip、主机名称）\n2）安装JDK\n3）配置环境变量\n4）安装Hadoop\n5）配置环境变量\n6）配置集群\n7）单点启动\n8）配置ssh\n9）群起并测试集群\n\n#### 虚拟机准备\n\n##### （1）改IP地址\n\n``` bash\n$ vim /etc/sysconfig/network-scripts/ifcfg-ens33 \n``` \n\n``` bash\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static\t\t#改为static静态\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=67b4d72d-1ff5-4e3e-a089-e1579700eba8\nDEVICE=ens33\nONBOOT=yes\t\t\t\t#改为yes\n\nIPADDR=192.168.100.102  # ip地址\nNETMASK=255.255.255.0   #子网掩码\nGATEWAY=192.168.100.1\t#网关\nDNS1=8.8.8.8\t\t\t#DNS\nDNS2=223.6.6.6\n\nPREFIX=24\n\n``` \n\n##### （2）改主机名\n\n不配置后期的数据节点可能会找不到。\n\n``` bash\n$ vim /etc/hotos\n``` \n\n``` bash\n127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4\n::1         localhost localhost.localdomain localhost6 localhost6.localdomain6\n192.168.100.102 hadoop102\n192.168.100.103 hadoop103\n192.168.100.104 hadoop104\n``` \n\n\n\n#### 编写集群分发脚本xsync\n\n##### 1.scp（securecopy）安全拷贝\n\n###### （1）scp定义：\n\n`scp`可以实现服务器与服务器之间的数据拷贝。（fromserver1toserver2）\n\n###### （2）基本语法\n\n``` bash\nscp\t\t-r  \t$pdir/$fname\t\t$user@hadoop$host:$pdir/$fname\n命令\t  递归\t 要拷贝的文件路径\t   名称目的用户@主机:目的路径/名称\n``` \n\n###### （3）案例实操\n\n（a）在`192.168.100.101`上，将`192.168.100.101`中`/usr/local/software`目录下的软件拷贝到`192.168.100.102`上。\n\n``` bash\n$ scp -r /usr/local/software/*  root@192.168.100.102:/usr/local/software\n``` \n\n（b）在`192.168.100.103`上，将`192.168.100.101`服务器上的`/usr/local/software`目录下的软件拷贝到\n`192.168.100.103`上。\n\n``` bash\n$ scp -r root@192.168.100.101:/usr/local/software/*  /usr/local/software/\n``` \n\n（c）在`192.168.100.103`上操作将`192.168.100.101`中`/usr/local/software`目录下的软件拷贝到\n`192.168.100.104`上。\n\n``` bash\n$ scp -r root@192.168.100.101:/usr/local/software/*  root@192.168.100.104:/usr/local/software/\n``` \n\n##### 2.rsync远程同步工具\n\n`rsync`主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。\n\n**`rsync`和`scp`区别：**\n\n用`rsync`做文件的复制要比`scp`的速度快，`rsync`只对差异文件做更新。`scp`是把所有文件都复制过去。\n\n###### （1）基本语法\n\n``` bash\nrsync\t-rvl\t\t$pdir/$fname\t\t\t$user@hadoop$host:$pdir/$fname\n命令\t  选项参数\t\t要拷贝的文件路径/名称\t\t目的用户@主机:目的路径/名称\n``` \n\n选项参数说明\n\n| 选项 | 功能         |\n| ---- | ------------ |\n| -r   | 递归         |\n| -v   | 显示复制过程 |\n| -l   | 拷贝符号连接 |\n\n###### （2）案例实操\n\n（a）把`192.168.100.101`机器上的`/usr/local/software`目录同步到`192.168.100.102`服务器的root用户\n下的`/usr/local/software`目录\n\n``` bash\n$ rsync  -rvl /usr/local/software/*  root@192.168.100.102:/usr/local/software/\n``` \n\n##### 3.xsync集群分发脚本\n\n###### （1）需求\n\n循环复制文件到所有节点的相同目录下\n\n###### （2）需求分析\n\n（a）rsync命令原始拷贝：\n\n``` bash\nrsync -rvl  /usr/local/program/*  root@192.168.100.103:/usr/local/program/\n``` \n\n（b）期望脚本：\nxsync要同步的文件名称\n（c）说明：在`/home/<用户名>/bin`这个目录下存放的脚本，root用户可以在系统任何地方直接执行。\n\n###### （3）脚本实现\n\n（a）在`/home/<用户名>/bin`目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：\n\n``` bash\n$ cd /home/<用户名>\n$ mkdir bin\n$ cd bin\n$ vim xsync\n``` \n\n\n\n``` bash\n#!/bin/bash\n#1获取输入参数个数，如果没有参数，直接退出\npcount=$#\nif((pcount==0));then\necho noargs;\nexit;\nfi\n#2获取文件名称\np1=$1\nfname=`basename $p1`\necho  fname=$fname\n#3获取上级目录到绝对路径\npdir=`cd -P $(dirname $p1);pwd`\necho pdir=$pdir\n#4获取当前用户名称\nuser=`whoami`\n#5循环\nfor((host=103;host<105;host++));do\necho -------------------192.168.100.$host--------------\nrsync -rvl $pdir/$fname  $user@192.168.100.$host:$pdir\ndone\n``` \n\n（b）修改脚本xsync具有执行权限\n\n``` bash\n$ chmod 777 xsync\n``` \n\n（c）调用脚本形式：xsync文件名称\n\n``` bash\n$ xsync  /home/<用户名>/bin\n``` \n\n\n\n\n>**注意**：\n>\n>如果将`xsync`放到`/home/<用户名>/bin`目录下仍然不能实现全局使用，\n>\n>可以将`xsync`移动到`/usr/local/bin`目录下。\n\n#### 集群配置\n\n##### 1.集群部署规化\n\n|      | 192.168.100.102 -hadoop102 | 192.168.100.103-hadoop103        | 192.168.100.104-hadoop104        |\n| ---- | :------------------------- | -------------------------------- | -------------------------------- |\n| HDFS | NameNode <br /> DataNode   | <br />DataNode                   | SecondaryNameNode <br />DataNode |\n| YARN | <br />NodeManage           | ResourceManage  <br />NodeManage | <br />NodeManage                 |\n\n机器改IP \n\n##### 2.配置集群\n\n###### （1）核心配置文件\n\n在`192.168.100.102` 上\n\n配置`etc/hadoop/core-site.xml`\n\n``` bash\n$ cd /usr/local/program/hadoop3.2.1\n$ vim etc/hadoop/core-site.xml\n``` \n\n在该文件中编写如下配置\n\n``` xml\n<!--指定HDFS中NameNode的地址-->\n<property>\n\t<name>fs.defaultFS</name>\n\t<value>hdfs://192.168.100.102:9000</value>\n</property>\n<!--指定Hadoop运行时产生文件的存储目录-->\n<property>\n\t<name>hadoop.tmp.dir</name>\n\t<value>/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-${user.name}</value>\n</property>\n``` \n\n###### （2）HDFS配置文件\n\n配置`etc/hadoop/hadoop-env.sh`\n\n``` bash\nexport JAVA_HOME=/usr/local/program/jdk1.8 \n\nexport HDFS_DATANODE_USER=root  \nexport HDFS_NAMENODE_USER=root  \nexport HDFS_SECONDARYNAMENODE_USER=root \n``` \n\n配置`etc/hadoop/hdfs-site.xml`\n\n```  xml\n<property>\n\t<name>dfs.replication</name>\n    <value>3</value>\n</property>\n<!--指定Hadoop辅助名称节点主机配置-->\n<property>\n\t<name>dfs.namenode.secondary.http-address</name>\n    <value>192.168.100.104:50090</value>\n</property>\n<!--指定HadoopNameNode的地址-->\n<property>\n  <name>dfs.http.address</name>\n  <value>192.168.100.102:9870</value>\n</property>\n\n\n``` \n\n###### （3）YARN配置文件\n\n一般在 shell中输入\n\n``` bash\n$ hadoop  classpath\n``` \n\n然后 这些输出 直接 粘贴到 yarn 的配置文件里 yarn-site.xml的属性 <name>yarn.application.classpath</name>赋值\n\n配置`etc/hadoop/hadoop-env.sh`\n\n``` bash\nexport YARN_RESOURCEMANAGER_USER=root\nexport YARN_NODEMANAGER_USER=root\n``` \n\n配置`etc/hadoop/yarn-site.xml`\n\n``` xml\n<!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 -->\n<property>\n\t<name>mapreduce.framework.name</name>\n    <value>yarn</value>\n</property>\n    \n<!-- MR应用程序的类路径 -->\n<property>\n\t<name>mapreduce.application.classpath</name>\n    <value>/usr/local/program/hadoop-3.2.1/etc/hadoop:/usr/local/program/hadoop-3.2.1/share/hadoop/common/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/common/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/*</value>\n</property>\n<!--指定YARN的ResourceManager的地址-->\n<property>\n\t<name>yarn.resourcemanager.hostname</name>\n\t<value>192.168.100.103</value>\n</property>\n\n<property>\n    <name>yarn.nodemanager.aux-services</name>\n    <value>mapreduce_shuffle</value>\n</property>\n<property>\n    <name>yarn.nodemanager.aux-services.mapreduce.shuffle.class</name>\n    <value>org.apache.hadoop.mapred.ShuffleHandler</value>\n</property>\n\n``` \n\n###### （4）MapReduce配置文件\n\n配置`etc/hadoop/mapred-site.xml`\n\n``` xml\n<!--指定MR运行在Yarn上-->\n<property>\n\t<name>mapreduce.framework.name</name>\n\t<value>yarn</value>\n</property>\n<!-- MR应用程序的类路径 -->\n<property>\n\t<name>mapreduce.application.classpath</name>     <value>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*</value>\n</property>\n``` \n\n##### 3.在集群上分发配置好的Hadoop配置文件\n\n``` bash\n$ xsync ./etc/hadoop/\n``` \n\n##### 4.查看文件分发情况\n\n#### 集群单点启动\n\n（1）如果集群是第一次启动，需要格式化`NameNode`\n\n``` bash\n$  bin/hdfs namenode -formart\n``` \n\n（2）在`192.168.100.102`上启动`NameNode`\n\n``` bash\n$ sbin/hadoop-daemon.sh  start namenode\n``` \n\n（3）在`192.168.100.102`,`192.168.100.103`以及`192.168.100.104`上分别启动`DataNode`\n\n``` bash\n$ sbin/hadoop-daemon.sh  start datanode\n``` \n\n（4）思考：每次都一个一个节点启动，如果节点数增加到1000个怎么办？\n\t\t\t早上来了开始一个一个节点启动，到晚上下班刚好完成，下班？\n\n#### SSH无密登录配置\n\n##### 1.配置ssh\n\n（1）基本语法\n\t\t\tssh另一台电脑的ip地址\n（2）ssh连接时出现Hostkeyverificationfailed的解决方法\n\n``` bash\n$ ssh  192.168.1.103\nTheauthenticityofhost'192.168.1.103(192.168.1.103)'can't\nbeestablished.\nRSAkeyfingerprintis\ncf:1e:de:d7:d0:4c:2d:98:60:b4:fd:ae:b1:2d:ad:06.\nAreyousureyouwanttocontinueconnecting(yes/no)?\nHostkeyverificationfailed.\n``` \n\n（3）解决方案如下：直接输入yes\n\n##### 2.无密钥配置\n\n（1）免密登录原理\n\n![image-20200823180537869](image-20200823180537869.png)\n\n（2）`192.168.100.102`生成公钥和私钥：\n\n``` bash\n$ cd /root/.ssh\n$ ssh-keygen -t rsa\n``` \n\n然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）\n\n（3）将公钥拷贝到要免密登录的目标机器上\n\n``` bash\n$ ssh-copy-id 192.168.100.102\n$ ssh-copy-id 192.168.100.103\n$ ssh-copy-id 192.168.100.104\n``` \n\n（4）`192.168.100.103`生成公钥和私钥,进行公钥拷贝到要免密登录的目标机器上\n\n\n\n##### 3.`.ssh`文件夹下（~/.ssh）的文件功能解释\n\n| known_hosts     | 记录ssh访问过计算机的公钥(publickey) |\n| --------------- | ------------------------------------ |\n| id_rsa          | 生成的私钥                           |\n| id_rsa.pub      | 生成的公钥                           |\n| authorized_keys | 存放授权过得无密登录服务器公钥       |\n\n#### 群起集群\n\n##### 1.配置`etc/hadoop/workers`\n\n``` bash\n$ vim etc/hadoop/workers \n``` \n\n添加以下节点\n\n``` bash\n192.168.100.102\n192.168.100.103\n192.168.100.104\n``` \n\n>#### 注意：\n>\n>千万不要有多余的空格\n\n##### 2.启动集群\n\n###### （1）如果集群是第一次启动\n\n需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）\n\n``` bash\n$ bin/hdfs namenode -format\n``` \n\n###### （2）启动HDFS\n\n``` bash\n$ sbin/start-dfs.sh\n``` \n\n`jps`查看是否启动\n\n###### （3）启动`YARN`\n\n``` bash\n$ sbin/start-yarn.sh\n``` \n\n###### （3）Web端查看`SecondaryNameNode`\n\n``` http\nhttp://192.168.100.102:9870/\n``` \n\n###### （4）查看文件系统的基本数据\n\n ``` bash\n$ bin/hdfs dfsadmin -report\n ``` \n\n\n\n> 注意：\n>\n> NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动YARN，应该在ResouceManager所在的机器上启动YARN。\n\n##### 3.集群基本测试\n\n###### （1）上传文件到集群\n\n``` bash\n$ bin/hdfs dfs -put  ./wcinput/wc.input  /user/wry/input\n``` \n\n###### （2）上传文件后查看文件存放在什么位置\n\n``` bash\n$ pwd\n``` \n\n``` bash\n/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-root/dfs/data/current/BP-719430212-127.0.0.1-1598525636602/current/finalized/subdir0/subdir0\n``` \n\n\n\n#### 集群启动/停止方式总结\n\n##### 1.各个服务组件逐一启动/停止\n\n###### （1）分别启动/停止HDFS组件\n\n``` bash\n$ sbin/hadoop-daemon.sh start/stop  namenode/datanode/secondarynamenode\n``` \n\n###### （2）启动/停止YARN\n\n``` bash\n$ sbin/yarn-daemon.sh  start/stop  resourcemanager/nodemanager\n``` \n\n##### 2.各个模块分开启动/停止（配置ssh是前提）常用\n\n###### （1）整体启动/停止HDFS\n\n``` bash\n$ sbin/start-dfs.sh/stop-dfs.sh\n``` \n\n###### （2）整体启动/停止YARN\n\n``` bash\n$ sbin/start-yarn.sh/stop-yarn.sh\n``` \n\n### crontab定时任务设置\n\n#### 基本语法\n\ncrontab [选项]\n\n#### 选项说明\n\n| 选项 | 功能                           |\n| ---- | ------------------------------ |\n| -e   | 编辑crontab 定时任务           |\n| -l   | 查询crontab任务                |\n| -r   | 删除当前用户所有的crontab 任务 |\n\n#### 参数说明\n\n``` bash\n$ crontab -e\n``` \n\n##### （1）进入crontab编辑界面。会打开vim 编辑你的工作\n\n``` \n* * * * *  执行的任务\n``` \n\n| 项目      | 含义                 | 范围                    |\n| --------- | -------------------- | ----------------------- |\n| 第一个“*” | 一小时当中的第几分钟 | 0-59                    |\n| 第二个“*” | 一天当中的第几小时   | 0-23                    |\n| 第三个“*” | 一月当中的第几天     | 1-31                    |\n| 第四个“*” | 一年当中的第几月     | 1-12                    |\n| 第五个“*” | 一周当中的星期几     | 0-7（0和7都代表星期日） |\n\n##### （2）特殊符合\n\n| 特殊符合 | 含义                                                         |\n| -------- | ------------------------------------------------------------ |\n| *        | 代表任何时间。比如第一个“*”，就代表一小时中的每分钟都有执行一次 |\n| ，       | 代表不连需的时间。比如\"0 8,12,16 * * *\" 命令，就代表在每天的8点0分，12点0分，16点0分都执行一次 |\n| -        | 代表连续的时间范围。比如\"0 5 * * 1-6\" ,就代表在周一到周六的凌晨5点0分执行命令 |\n| */n      | 代表每个多久执行一次。比如\"*/10 * * * *\",就代表没10分钟执行一次命令 |\n\n##### （3）特殊特定时间执行命令\n\n| 时间         | 含义                                                         |\n| ------------ | ------------------------------------------------------------ |\n| 45 22 * * *  | 在22点45 分执行命令                                          |\n| 0 17 * * 1   | 每周一的17点0分执行命令                                      |\n| 0 5 1,15 * * | 每月1号和15号的凌晨5点0分执行命令                            |\n| 40 4 * * 1-5 | 每周一到周五的凌晨4点40 分执行命令                           |\n| */10 4 * * * | 每天的凌晨4点，没隔10分钟执行一次命令                        |\n| 0 0 1,15 * 1 | 每月1号和15号，每周一的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。 |\n\n##### （4）案例实操\n\n- 每隔1分钟，向`/root/bailongma.txt`文件中添加一个11 的数字。\n\n  ``` bash\n  */1 * * * * /bin/echo \"11\" >>/root/bailongma.txt\n  ``` \n\n\n\n### 集群时间同步\n\n时间同步的方式：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，比如，每隔十分钟，同步一次时间。\n\n![image-20200829223326519](image-20200829223326519.png)\n\n\n\n## Linux\n\n### 配置静态IP\n\n#### 第一步：修改VMnet配置\n\n在VMware里，依次点击”编辑“ - ”虚拟网络编辑器“，如下图，我选择的是NAT模式： 以下VMnet2为配置\n\n![在这里插入图片描述](https://img.jbzj.com/file_images/article/202001/2020011513342421.png)\n\n其中子网ip随便写,子网掩码自己计算,如果不太熟悉就完全配置和我一样就行\n\nA类默认的子网掩码：255.0.0.0\nB类默认的子网掩码：255.255.0.0\nC类默认的子网掩码：255.255.255.0\n\n为了使用静态IP将: 使用本地DHCP服务将IP地址分配给虚拟机 取消(默认是选择状态)\n\n点击NAT设置\n\n将网关ip记住如下图,最后配置虚拟机ip文件所用\n\n![Alt](https://img.jbzj.com/file_images/article/202001/2020011513342422.png)\n\n#### 第二步：进入虚拟机\n\n 以root权限登陆centos8并编辑vi /etc/sysconfig/network-scripts/ifcfg-ens33这个文件，效果如下：\n\n``` bash\nTYPE=Ethernet\nPROXY_METHOD=none\nBROWSER_ONLY=no\nBOOTPROTO=static #注意设置为static静态\nDEFROUTE=yes\nIPV4_FAILURE_FATAL=no\nIPV6INIT=yes\nIPV6_AUTOCONF=yes\nIPV6_DEFROUTE=yes\nIPV6_FAILURE_FATAL=no\nIPV6_ADDR_GEN_MODE=stable-privacy\nNAME=ens33\nUUID=aa18fb34-fea8-4fff-83a4-1ebed631beff\nDEVICE=ens33\nONBOOT=yes #这里如果为no的话就改为yes，表示网卡设备自动启动\nGATEWAY=192.168.0.2 #这里的网关地址就是上一步获取到的那个网关地址\nIPADDR=192.168.0.150 #再网关的范围内随意写\nNETMASK=255.255.255.0 #子网掩码\nDNS1=8.8.8.8 #DNS1这里用谷歌,\nDNS2=223.6.6.6 #DNS2用阿里\n``` \n\n然后 :wq保存退出\n\n#### 第三步: 刷新网卡配置\n\nCentOS 8 使用 : nmcli c reload\n\nCentOS7 使用 /etc/init.d/network restart\n\n如果不能上网直接使用`reboot` 命令重启\n\n\n\n### 关闭防火墙\n\ncentos8\n\n#### 永久关闭防火墙\n\n``` bash\n$ systemctl disable firewalld\n``` \n\n#### 查看防火墙\n\n``` bash\n$ systemctl status firewalld.service\n``` \n\n#### 停止防火墙\n\n``` bash\n$ systemctl stop firewalld.service\n``` \n\n#### 启用防火墙\n\n``` bash\n$ systemctl start firewalld.service\n``` \n\n### 配置JDK\n\n#### 第一步：解压\n\n``` bash\n$ tar -zxvf /usr/local/software/jdk1.8.231 -C /usr/local/program/\n``` \n\n#### 第二步：配置环境变量\n\n``` bash\n$ vim /etc/profile\n``` \n\n在最后添加java 环境配置\n\n``` bash\nexport JAVA_HOME=/usr/local/program/jdk1.8.231\nexport CLASS_PATH=.:$JAVA_HOME/lib.tools.jar\nexport PATH=$PATH:$JAVA_HOME/bin\n``` \n\n#### 第三步：使配置生效\n\n``` bash\n$ source /etc/profile\n``` \n\n### 配置SSH连接\n\n#### 第一步：修改配置\n\n``` bash\n$ vim /etc/ssh/sshd_config\n``` \n\n打开 注释修改以下配置\n\nClientAliveInterval 60\n\n表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了\n\nClientAliveCountMax 3 \n\nClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开\n\n#### 第二步：重启服务\n\n``` bash\n$ service sshd restart\n``` \n\n\n\n``` bash\ntar -zxvf /usr/local/software/hadoop-3.2.1.tar.gz  -C /usr/local/program/\n\nvim /etc/profile\n\n#hadoop 环境\nexport HADOOP_HOME=/usr/local/program/hadoop-3.2.1\nexport PATH=$PATH:$HADOOP_HOME/bin\nexport PATH=$PATH:$HADOOP_HOME/sbin\n\nsource /etc/profile\n\nhadoop version\n``` \n\n","slug":"2023/Hadoop","published":1,"updated":"2024-08-05T11:07:24.314Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuxr00010aibav5g5m1e","content":"<h2 id=\"Hadoop是什么\"><a href=\"#Hadoop是什么\" class=\"headerlink\" title=\"Hadoop是什么\"></a>Hadoop是什么</h2><ol>\n<li>hadoop是一个Aoache基金会所开发的分布式系统基础架构 。</li>\n<li>主要解决，海量数据的存储和海量数据的分析计算问题。</li>\n<li>广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。</li>\n</ol>\n<h2 id=\"Hadoop发展史\"><a href=\"#Hadoop发展史\" class=\"headerlink\" title=\"Hadoop发展史\"></a>Hadoop发展史</h2><h3 id=\"Lucene\"><a href=\"#Lucene\" class=\"headerlink\" title=\"Lucene\"></a>Lucene</h3><h3 id=\"论文\"><a href=\"#论文\" class=\"headerlink\" title=\"论文\"></a>论文</h3><h4 id=\"GFS–-HDFS\"><a href=\"#GFS–-HDFS\" class=\"headerlink\" title=\"GFS–&gt;HDFS\"></a>GFS–&gt;HDFS</h4><h4 id=\"Map-Reduce–-MR\"><a href=\"#Map-Reduce–-MR\" class=\"headerlink\" title=\"Map-Reduce–&gt;MR\"></a>Map-Reduce–&gt;MR</h4><h4 id=\"BigTable–-HBase\"><a href=\"#BigTable–-HBase\" class=\"headerlink\" title=\"BigTable–&gt;HBase\"></a>BigTable–&gt;HBase</h4><h2 id=\"Hadoop三大发行版本\"><a href=\"#Hadoop三大发行版本\" class=\"headerlink\" title=\"Hadoop三大发行版本\"></a>Hadoop三大发行版本</h2><h3 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h3><p>最原始，最基本的版本，对于入门学习较好</p>\n<h3 id=\"Cloudera\"><a href=\"#Cloudera\" class=\"headerlink\" title=\"Cloudera\"></a>Cloudera</h3><p>在大型互联网企业中用的较多</p>\n<h3 id=\"Hortonworks\"><a href=\"#Hortonworks\" class=\"headerlink\" title=\"Hortonworks\"></a>Hortonworks</h3><p>文档较好</p>\n<h2 id=\"Hadoop的优势（4高）\"><a href=\"#Hadoop的优势（4高）\" class=\"headerlink\" title=\"Hadoop的优势（4高）\"></a>Hadoop的优势（4高）</h2><ol>\n<li>高可靠：Hadoop底层维护了多个数据副本，所以即使Hadoop某个计算或存储出现故障，也不会导致数据丢失。</li>\n<li>高扩展性：在集群建分配任务数据，可方便的扩展数以千计的节点。</li>\n<li>高效性：在Mao-Reduce 的思想下，Hadoop是并行工作的，以加快任务处理速度。</li>\n<li>高容错性：能够自动将失败的任务重新分配。</li>\n</ol>\n<h2 id=\"Hadoop组成\"><a href=\"#Hadoop组成\" class=\"headerlink\" title=\"Hadoop组成\"></a>Hadoop组成</h2><h3 id=\"1-x-与2-x\"><a href=\"#1-x-与2-x\" class=\"headerlink\" title=\"1.x 与2.x\"></a>1.x 与2.x</h3><p><img src=\"/post/2023/Hadoop/image-20200820213620752.png\" alt=\"image-20200820213620752\"></p>\n<h3 id=\"HDFS架构概念\"><a href=\"#HDFS架构概念\" class=\"headerlink\" title=\"HDFS架构概念\"></a>HDFS架构概念</h3><h4 id=\"1-NameNode-nn\"><a href=\"#1-NameNode-nn\" class=\"headerlink\" title=\"1.NameNode (nn)\"></a>1.NameNode (nn)</h4><p>存储额文件的元数据，如文件名，文件目录结构，文件属性（生成时间，副本数，文件权限），以及每个文件的块列表和块所在的DataNode 等。</p>\n<h4 id=\"2-DataNode-dn\"><a href=\"#2-DataNode-dn\" class=\"headerlink\" title=\"2.DataNode (dn)\"></a>2.DataNode (dn)</h4><p>在本地文件系统存储文件块数据，以及块数据的校验和。</p>\n<h4 id=\"3-Secondary-NameNode-2nn\"><a href=\"#3-Secondary-NameNode-2nn\" class=\"headerlink\" title=\"3.Secondary NameNode (2nn)\"></a>3.Secondary NameNode (2nn)</h4><p>用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。</p>\n<h3 id=\"YARN-架构概念\"><a href=\"#YARN-架构概念\" class=\"headerlink\" title=\"YARN 架构概念\"></a>YARN 架构概念</h3><h4 id=\"ResourceManage-RM-主要作用\"><a href=\"#ResourceManage-RM-主要作用\" class=\"headerlink\" title=\"ResourceManage(RM)主要作用\"></a>ResourceManage(RM)主要作用</h4><ul>\n<li>处理客户请求</li>\n<li>监控NodeManage</li>\n<li>启动或监控ApplicationMaster</li>\n<li>资源的调度与分配</li>\n</ul>\n<h4 id=\"NodeManage-NM-主要作用\"><a href=\"#NodeManage-NM-主要作用\" class=\"headerlink\" title=\"NodeManage(NM)主要作用\"></a>NodeManage(NM)主要作用</h4><ul>\n<li>管理单个节点上的资源</li>\n<li>处理来自ResourceManage的命令</li>\n<li>处理来自ApplicationMaster的命令</li>\n</ul>\n<h4 id=\"ApplicationMaster-AM-主要作用\"><a href=\"#ApplicationMaster-AM-主要作用\" class=\"headerlink\" title=\"ApplicationMaster(AM)主要作用\"></a>ApplicationMaster(AM)主要作用</h4><ul>\n<li>负责数据的切分</li>\n<li>为应用程序申请资源并分配给内部的任务</li>\n<li>任务的监控与容错</li>\n</ul>\n<h4 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h4><ul>\n<li>Container是YARN中的资源抽象，他封装了某个节点上的多维资源，如内存，CPU,磁盘，网络等。</li>\n</ul>\n<h3 id=\"MapReduce架构概述\"><a href=\"#MapReduce架构概述\" class=\"headerlink\" title=\"MapReduce架构概述\"></a>MapReduce架构概述</h3><p>MapReduce 将计算过程分为两个阶段：map 和 Reduce</p>\n<ol>\n<li>Map 阶段并行处理输入数据</li>\n<li>Reduce阶段对Map结果进行汇总</li>\n</ol>\n<h2 id=\"大数据计数生态体系\"><a href=\"#大数据计数生态体系\" class=\"headerlink\" title=\"大数据计数生态体系\"></a>大数据计数生态体系</h2><p><img src=\"/post/2023/Hadoop/image-20200820224123902.png\" alt=\"image-20200820224123902\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"1-准备虚拟机\"><a href=\"#1-准备虚拟机\" class=\"headerlink\" title=\"1.准备虚拟机\"></a>1.准备虚拟机</h3><h3 id=\"2-安装JDK\"><a href=\"#2-安装JDK\" class=\"headerlink\" title=\"2.安装JDK\"></a>2.安装JDK</h3><h3 id=\"3-安装Hadoop\"><a href=\"#3-安装Hadoop\" class=\"headerlink\" title=\"3.安装Hadoop\"></a>3.安装Hadoop</h3><ul>\n<li><p>解压</p>\n</li>\n<li><p>配置环境变量</p>\n<p>在 <code>/etc/profile</code>文件的最后加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/local/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure>\n\n<p>使用配置生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /ect/profile</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-Hadoop目录结构\"><a href=\"#4-Hadoop目录结构\" class=\"headerlink\" title=\"4.Hadoop目录结构\"></a>4.Hadoop目录结构</h3><ul>\n<li><p><strong>bin</strong></p>\n<p>存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本</p>\n</li>\n<li><p><strong>etc</strong> </p>\n<p>Hadoop的配置文件目录</p>\n</li>\n<li><p><strong>lib</strong></p>\n<p>存放Hadoop的本地库（对数据进行压缩解压的功能）</p>\n</li>\n<li><p><strong>sbin</strong></p>\n<p>存放启动或停止Hadoop相关服务的脚本</p>\n</li>\n<li><p><strong>share</strong></p>\n<p>存放Hadoop的依赖jar包，文档，和官方案例。</p>\n</li>\n</ul>\n<h3 id=\"5-Hadoop官网手册\"><a href=\"#5-Hadoop官网手册\" class=\"headerlink\" title=\"5.Hadoop官网手册\"></a>5.Hadoop官网手册</h3><p>Hadoop官方网站：<a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html\">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html</a></p>\n<h2 id=\"Hadoop运行模式\"><a href=\"#Hadoop运行模式\" class=\"headerlink\" title=\"Hadoop运行模式\"></a>Hadoop运行模式</h2><p>Hadoop运行模式包括：</p>\n<p>本地模式、伪分布式模式以及完全分布式模式。</p>\n<h3 id=\"本地运行模式\"><a href=\"#本地运行模式\" class=\"headerlink\" title=\"本地运行模式\"></a>本地运行模式</h3><h4 id=\"官方Grep案例\"><a href=\"#官方Grep案例\" class=\"headerlink\" title=\"官方Grep案例\"></a>官方Grep案例</h4><p>1.创建在hadoop-3.2.1文件下面创建一个input文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> input</span><br></pre></td></tr></table></figure>\n\n<p>2.将Hadoop的xml配置文件复制到input</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span>  etc/hadoop/*.xml  input</span><br></pre></td></tr></table></figure>\n\n<p>3.执行share目录下的MapReduce程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop\tjar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep input  output  <span class=\"string\">&#x27;dfs[a-z.]+&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>4.查看输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span>  output/*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"官方WordCount案例\"><a href=\"#官方WordCount案例\" class=\"headerlink\" title=\"官方WordCount案例\"></a>官方WordCount案例</h4><p>1.创建在hadoop-3.2.1文件下面创建一个wcinput文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> wcinput</span><br></pre></td></tr></table></figure>\n\n<p>2.在wcinput文件下创建一个wc.input文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> wcinput</span><br><span class=\"line\"></span><br><span class=\"line\">$ touchwc.input</span><br></pre></td></tr></table></figure>\n\n<p>3.编辑wc.input文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim  wc.input</span><br></pre></td></tr></table></figure>\n\n<p>在文件中输入如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoopyarn</span><br><span class=\"line\">hadoopmapreduce</span><br><span class=\"line\">atguigu</span><br><span class=\"line\">atguigu</span><br></pre></td></tr></table></figure>\n\n<p>保存退出：：wq</p>\n<p>4.回到Hadoop目录</p>\n<p>5.执行程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount wcinput wcoutput</span><br></pre></td></tr></table></figure>\n\n<p>6.查看结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> wcoutput /part-r-00000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">atguigu2</span><br><span class=\"line\">hadoop2</span><br><span class=\"line\">mapreduce1</span><br><span class=\"line\">yarn1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"伪分布式运行模式\"><a href=\"#伪分布式运行模式\" class=\"headerlink\" title=\"伪分布式运行模式\"></a>伪分布式运行模式</h3><h4 id=\"启动HDFS并运行MapReduce程序\"><a href=\"#启动HDFS并运行MapReduce程序\" class=\"headerlink\" title=\"启动HDFS并运行MapReduce程序\"></a>启动HDFS并运行MapReduce程序</h4><h5 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h5><p>（1）配置集群<br>（2）启动、测试集群增、删、查<br>（3）执行WordCount案例</p>\n<h5 id=\"2-执行步骤\"><a href=\"#2-执行步骤\" class=\"headerlink\" title=\"2.执行步骤\"></a>2.执行步骤</h5><h6 id=\"（1）配置集群\"><a href=\"#（1）配置集群\" class=\"headerlink\" title=\"（1）配置集群\"></a>（1）配置集群</h6><p>进入Hadoop的etc目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ./etc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置：hadoop-env.sh</p>\n<p>Linux系统中获取JDK的安装路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/jdk1.8.0_121</span><br></pre></td></tr></table></figure>\n\n<p>修改JAVA_HOME路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk1.8.0_121</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置：core-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定HDFS中NameNode的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定Hadoop运行时产生文件的存储目录--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/data/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置：hdfs-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定HDFS副本的数量--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"（2）设置无密码SSH\"><a href=\"#（2）设置无密码SSH\" class=\"headerlink\" title=\"（2）设置无密码SSH\"></a>（2）设置无密码SSH</h6><ul>\n<li><p>现在检查您是否可以在不使用密码的情况下SSH到本地主机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh  localhost</span><br></pre></td></tr></table></figure>\n\n<p>如果没有密码就无法SSH到本地主机</p>\n</li>\n<li><p>请执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -P<span class=\"string\">&#x27;&#x27;</span>-f〜/ .ssh / id_rsa </span><br><span class=\"line\">$ <span class=\"built_in\">cat</span>〜/ .ssh / id_rsa.pub &gt;&gt;〜/ .ssh / authorized_keys </span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> 0600〜/ .ssh / authorized_keys</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"（3）执行\"><a href=\"#（3）执行\" class=\"headerlink\" title=\"（3）执行\"></a>（3）执行</h6><ul>\n<li><p>格式化文件系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动NameNode守护程序和DataNode守护程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ2zednzb8iugz3kgudq9bZ hadoop-3.2.1]<span class=\"comment\"># ./sbin/stop-dfs.sh</span></span><br><span class=\"line\">Stopping namenodes on [localhost]</span><br><span class=\"line\">ERROR: Attempting to operate on hdfs namenode as root</span><br><span class=\"line\">ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.</span><br><span class=\"line\">Stopping datanodes</span><br><span class=\"line\">ERROR: Attempting to operate on hdfs datanode as root</span><br><span class=\"line\">ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.</span><br><span class=\"line\">Stopping secondary namenodes [iZ2zednzb8iugz3kgudq9bZ]</span><br><span class=\"line\">ERROR: Attempting to operate on hdfs secondarynamenode as root</span><br><span class=\"line\">ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置到 <code>hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HDFS_DATANODE_USER=root  </span><br><span class=\"line\">HDFS_NAMENODE_USER=root  </span><br><span class=\"line\">HDFS_SECONDARYNAMENODE_USER=root </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览Web界面以查找NameNode；默认情况下，它在以下位置可用：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:9870/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置执行MapReduce作业所需的HDFS目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> /user/root</span><br><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> /user/&lt;用户名&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建多层目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> -p  /user/wry</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822090658863.png\" alt=\"image-20200822090658863\"></p>\n<ul>\n<li>查看多级目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">ls</span> -R /</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822090905199.png\" alt=\"image-20200822090905199\"></p>\n</li>\n<li><p>将本地输入文件复制到分布式文件系统中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> -p /user/wry/input</span><br><span class=\"line\">$ bin/hdfs dfs -put etc/hadoop/*.xml /user/wry/input</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822091216510.png\" alt=\"image-20200822091216510\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822091335115.png\" alt=\"image-20200822091335115\"></p>\n</li>\n<li><p>运行提供的一些示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep /user/wry/input /user/wry/output <span class=\"string\">&#x27;dfs[a-z.]+&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822091809558.png\" alt=\"image-20200822091809558\"></p>\n<ul>\n<li><p>查看文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">ls</span> -r /user/wry/output</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看分布式文件系统上的输出文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">cat</span> /user/wry/output/&lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822092048172.png\" alt=\"image-20200822092048172\"></p>\n<p>or</p>\n</li>\n<li><p>检查输出文件：将输出文件从分布式文件系统复制到本地文件系统并检查它们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -get /user/wry/output /usr/local/wryoutput </span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> /usr/local/wryoutput/*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822093255847.png\" alt=\"image-20200822093255847\"></p>\n</li>\n</ul>\n</li>\n<li><p>完成后，使用以下命令停止守护进程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><strong>格式化NameNode 时要注意</strong></p>\n<p>1.先停止进程</p>\n<p>2.删除data 、log文件</p>\n<p>3.执行格式化命令</p>\n</blockquote>\n<blockquote>\n<p><strong>为什么不能一直 格式化NameNode</strong></p>\n<p>格式化NameNode，会产生新的集群Id,导致NameNode和DataNode的集群Id不一致，集群找不到以往的数据，所以，，格式化NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。</p>\n</blockquote>\n<p><img src=\"/post/2023/Hadoop/image-20200822094801817.png\" alt=\"image-20200822094801817\"></p>\n<h4 id=\"启动YARN并运行MapReduce程序\"><a href=\"#启动YARN并运行MapReduce程序\" class=\"headerlink\" title=\"启动YARN并运行MapReduce程序\"></a>启动YARN并运行MapReduce程序</h4><h5 id=\"1-分析-1\"><a href=\"#1-分析-1\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h5><p>（1）配置集群在YARN上运行MR<br>（2）启动、测试集群增、删、查<br>（3）在YARN上执行WordCount案例</p>\n<h5 id=\"2-执行步骤-1\"><a href=\"#2-执行步骤-1\" class=\"headerlink\" title=\"2.执行步骤\"></a>2.执行步骤</h5><h6 id=\"（1）配置集群-1\"><a href=\"#（1）配置集群-1\" class=\"headerlink\" title=\"（1）配置集群\"></a>（1）配置集群</h6><p>配置<code>etc/hadoop/mapred-site.xml</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MR应用程序的类路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.application.classpath<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置<code>etc/hadoop/yarn-site.xml</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指Reduce 获取数据的方式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--yarn运行的环境--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span> \t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指定YARN的ResourceManager的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<p>启动报错</p>\n<p><img src=\"/post/2023/Hadoop/image-20200822100056038.png\" alt=\"image-20200822100056038\"></p>\n<p>配置<code>etc/hadoop/hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822102024933.png\" alt=\"image-20200822102024933\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822102108817.png\" alt=\"image-20200822102108817\"></p>\n<p>浏览ResourceManager的web界面；默认情况下，它位于：</p>\n<p>ResourceManager - <code>http://localhost:8088/</code></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822111645219.png\" alt=\"image-20200822111645219\"></p>\n<p>运行一个job</p>\n<ul>\n<li>拷贝文件到hadoop 目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -put wcinput/wc.input  /user/wry/wcinput</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop dfs -<span class=\"built_in\">ls</span> -r /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"配置历史服务器\"><a href=\"#配置历史服务器\" class=\"headerlink\" title=\"配置历史服务器\"></a>配置历史服务器</h4><p>为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：</p>\n<ul>\n<li>配置<code>etc/hadoop/mapred-site.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--历史服务器端地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:10020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--历史服务器web端地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:19888<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>启动历史服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/mr-jobhistory-daemon.sh starthistoryserver</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看历史服务器是否启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看JobHistory</p>\n<p>JobHistory -   <a href=\"http://hadoop101:19888/jobhistory\">http://hadoop101:19888/jobhistory</a></p>\n</li>\n</ul>\n<h4 id=\"配置日志的聚集\"><a href=\"#配置日志的聚集\" class=\"headerlink\" title=\"配置日志的聚集\"></a>配置日志的聚集</h4><p>日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。<br>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。</p>\n<p>注意：开启日志聚集功能，需要重新启动NodeManager、ResourceManager和<br>HistoryManager。</p>\n<p>开启日志聚集功能具体步骤如下：</p>\n<ul>\n<li><p>配置 <code>etc/hadoop/yarn-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--日志聚集功能使能--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.log-aggregation-enable<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--日志保留时间设置7天--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>604800<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭NodeManager、ResourceManager和HistoryManager</p>\n<ul>\n<li>关闭所有 包括 NodeManager、ResourceManager、Name Node、DataNode</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-all.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭  NodeManager、ResourceManager</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭  Name Node、DataNode</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭  HistoryManager</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/mr-jobhistory-daemon.sh stop historyserver </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动NodeManager、ResourceManager和HistoryManager</p>\n</li>\n<li><p>删除HDFS上已经存在的输出文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop dfs -<span class=\"built_in\">rm</span> -f -r /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行WordCount程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志，如图所示</p>\n<p><img src=\"/post/2023/Hadoop/image-20200822140954237.png\" alt=\"image-20200822140954237\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822141013068.png\" alt=\"image-20200822141013068\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822141028970.png\" alt=\"image-20200822141028970\"></p>\n</li>\n</ul>\n<h4 id=\"配置文件说明\"><a href=\"#配置文件说明\" class=\"headerlink\" title=\"配置文件说明\"></a>配置文件说明</h4><p>Hadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认<br>配置值时，才需要修改自定义配置文件，更改相应属性值。</p>\n<h5 id=\"（1）默认配置文件：\"><a href=\"#（1）默认配置文件：\" class=\"headerlink\" title=\"（1）默认配置文件：\"></a>（1）默认配置文件：</h5><p>要获取的默认文件文件存放在Hadoop的jar包中的位置</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">配置文件名称</th>\n<th>默认配置所在的文件路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">core-default.xml</td>\n<td>hadoop-common-2.7.2.jar&#x2F;core-default.xml</td>\n</tr>\n<tr>\n<td align=\"left\">hdfs-default.xml</td>\n<td>hadoop-hdfs-2.7.2.jar&#x2F;hdfs-default.xml</td>\n</tr>\n<tr>\n<td align=\"left\">yarn-default.xml</td>\n<td>hadoop-yarn-common-2.7.2.jar&#x2F;yarn-default.xml</td>\n</tr>\n<tr>\n<td align=\"left\">mapred-default.xml</td>\n<td>hadoop-mapreduce-client-core-2.7.2.jar&#x2F;mapred-default.xml</td>\n</tr>\n</tbody></table>\n<h5 id=\"（2）自定义配置文件：\"><a href=\"#（2）自定义配置文件：\" class=\"headerlink\" title=\"（2）自定义配置文件：\"></a>（2）自定义配置文件：</h5><p>core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在<br>$HADOOP_HOME&#x2F;etc&#x2F;hadoop这个路径上，用户可以根据项目需求重新进行修改配置。</p>\n<h3 id=\"完全分布式运行模式（开发重点）\"><a href=\"#完全分布式运行模式（开发重点）\" class=\"headerlink\" title=\"完全分布式运行模式（开发重点）\"></a>完全分布式运行模式（开发重点）</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>1）准备3台客户机（关闭防火墙、静态ip、主机名称）<br>2）安装JDK<br>3）配置环境变量<br>4）安装Hadoop<br>5）配置环境变量<br>6）配置集群<br>7）单点启动<br>8）配置ssh<br>9）群起并测试集群</p>\n<h4 id=\"虚拟机准备\"><a href=\"#虚拟机准备\" class=\"headerlink\" title=\"虚拟机准备\"></a>虚拟机准备</h4><h5 id=\"（1）改IP地址\"><a href=\"#（1）改IP地址\" class=\"headerlink\" title=\"（1）改IP地址\"></a>（1）改IP地址</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static\t\t<span class=\"comment\">#改为static静态</span></span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=67b4d72d-1ff5-4e3e-a089-e1579700eba8</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span>\t\t\t\t<span class=\"comment\">#改为yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">IPADDR=192.168.100.102  <span class=\"comment\"># ip地址</span></span><br><span class=\"line\">NETMASK=255.255.255.0   <span class=\"comment\">#子网掩码</span></span><br><span class=\"line\">GATEWAY=192.168.100.1\t<span class=\"comment\">#网关</span></span><br><span class=\"line\">DNS1=8.8.8.8\t\t\t<span class=\"comment\">#DNS</span></span><br><span class=\"line\">DNS2=223.6.6.6</span><br><span class=\"line\"></span><br><span class=\"line\">PREFIX=24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）改主机名\"><a href=\"#（2）改主机名\" class=\"headerlink\" title=\"（2）改主机名\"></a>（2）改主机名</h5><p>不配置后期的数据节点可能会找不到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/hotos</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">192.168.100.102 hadoop102</span><br><span class=\"line\">192.168.100.103 hadoop103</span><br><span class=\"line\">192.168.100.104 hadoop104</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"编写集群分发脚本xsync\"><a href=\"#编写集群分发脚本xsync\" class=\"headerlink\" title=\"编写集群分发脚本xsync\"></a>编写集群分发脚本xsync</h4><h5 id=\"1-scp（securecopy）安全拷贝\"><a href=\"#1-scp（securecopy）安全拷贝\" class=\"headerlink\" title=\"1.scp（securecopy）安全拷贝\"></a>1.scp（securecopy）安全拷贝</h5><h6 id=\"（1）scp定义：\"><a href=\"#（1）scp定义：\" class=\"headerlink\" title=\"（1）scp定义：\"></a>（1）scp定义：</h6><p><code>scp</code>可以实现服务器与服务器之间的数据拷贝。（fromserver1toserver2）</p>\n<h6 id=\"（2）基本语法\"><a href=\"#（2）基本语法\" class=\"headerlink\" title=\"（2）基本语法\"></a>（2）基本语法</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp\t\t-r  \t<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span>\t\t<span class=\"variable\">$user</span>@hadoop<span class=\"variable\">$host</span>:<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span></span><br><span class=\"line\">命令\t  递归\t 要拷贝的文件路径\t   名称目的用户@主机:目的路径/名称</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（3）案例实操\"><a href=\"#（3）案例实操\" class=\"headerlink\" title=\"（3）案例实操\"></a>（3）案例实操</h6><p>（a）在<code>192.168.100.101</code>上，将<code>192.168.100.101</code>中<code>/usr/local/software</code>目录下的软件拷贝到<code>192.168.100.102</code>上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp -r /usr/local/software/*  root@192.168.100.102:/usr/local/software</span><br></pre></td></tr></table></figure>\n\n<p>（b）在<code>192.168.100.103</code>上，将<code>192.168.100.101</code>服务器上的<code>/usr/local/software</code>目录下的软件拷贝到<br><code>192.168.100.103</code>上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp -r root@192.168.100.101:/usr/local/software/*  /usr/local/software/</span><br></pre></td></tr></table></figure>\n\n<p>（c）在<code>192.168.100.103</code>上操作将<code>192.168.100.101</code>中<code>/usr/local/software</code>目录下的软件拷贝到<br><code>192.168.100.104</code>上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp -r root@192.168.100.101:/usr/local/software/*  root@192.168.100.104:/usr/local/software/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-rsync远程同步工具\"><a href=\"#2-rsync远程同步工具\" class=\"headerlink\" title=\"2.rsync远程同步工具\"></a>2.rsync远程同步工具</h5><p><code>rsync</code>主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p>\n<p><strong><code>rsync</code>和<code>scp</code>区别：</strong></p>\n<p>用<code>rsync</code>做文件的复制要比<code>scp</code>的速度快，<code>rsync</code>只对差异文件做更新。<code>scp</code>是把所有文件都复制过去。</p>\n<h6 id=\"（1）基本语法\"><a href=\"#（1）基本语法\" class=\"headerlink\" title=\"（1）基本语法\"></a>（1）基本语法</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync\t-rvl\t\t<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span>\t\t\t<span class=\"variable\">$user</span>@hadoop<span class=\"variable\">$host</span>:<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span></span><br><span class=\"line\">命令\t  选项参数\t\t要拷贝的文件路径/名称\t\t目的用户@主机:目的路径/名称</span><br></pre></td></tr></table></figure>\n\n<p>选项参数说明</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-r</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示复制过程</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>拷贝符号连接</td>\n</tr>\n</tbody></table>\n<h6 id=\"（2）案例实操\"><a href=\"#（2）案例实操\" class=\"headerlink\" title=\"（2）案例实操\"></a>（2）案例实操</h6><p>（a）把<code>192.168.100.101</code>机器上的<code>/usr/local/software</code>目录同步到<code>192.168.100.102</code>服务器的root用户<br>下的<code>/usr/local/software</code>目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rsync  -rvl /usr/local/software/*  root@192.168.100.102:/usr/local/software/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-xsync集群分发脚本\"><a href=\"#3-xsync集群分发脚本\" class=\"headerlink\" title=\"3.xsync集群分发脚本\"></a>3.xsync集群分发脚本</h5><h6 id=\"（1）需求\"><a href=\"#（1）需求\" class=\"headerlink\" title=\"（1）需求\"></a>（1）需求</h6><p>循环复制文件到所有节点的相同目录下</p>\n<h6 id=\"（2）需求分析\"><a href=\"#（2）需求分析\" class=\"headerlink\" title=\"（2）需求分析\"></a>（2）需求分析</h6><p>（a）rsync命令原始拷贝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -rvl  /usr/local/program/*  root@192.168.100.103:/usr/local/program/</span><br></pre></td></tr></table></figure>\n\n<p>（b）期望脚本：<br>xsync要同步的文件名称<br>（c）说明：在<code>/home/&lt;用户名&gt;/bin</code>这个目录下存放的脚本，root用户可以在系统任何地方直接执行。</p>\n<h6 id=\"（3）脚本实现\"><a href=\"#（3）脚本实现\" class=\"headerlink\" title=\"（3）脚本实现\"></a>（3）脚本实现</h6><p>（a）在<code>/home/&lt;用户名&gt;/bin</code>目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /home/&lt;用户名&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> bin</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> bin</span><br><span class=\"line\">$ vim xsync</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#1获取输入参数个数，如果没有参数，直接退出</span></span><br><span class=\"line\">pcount=<span class=\"variable\">$#</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>((pcount==<span class=\"number\">0</span>));<span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> noargs;</span><br><span class=\"line\"><span class=\"built_in\">exit</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#2获取文件名称</span></span><br><span class=\"line\">p1=<span class=\"variable\">$1</span></span><br><span class=\"line\">fname=`<span class=\"built_in\">basename</span> <span class=\"variable\">$p1</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span>  fname=<span class=\"variable\">$fname</span></span><br><span class=\"line\"><span class=\"comment\">#3获取上级目录到绝对路径</span></span><br><span class=\"line\">pdir=`<span class=\"built_in\">cd</span> -P $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$p1</span>);<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> pdir=<span class=\"variable\">$pdir</span></span><br><span class=\"line\"><span class=\"comment\">#4获取当前用户名称</span></span><br><span class=\"line\">user=`<span class=\"built_in\">whoami</span>`</span><br><span class=\"line\"><span class=\"comment\">#5循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((host=<span class=\"number\">103</span>;host&lt;<span class=\"number\">105</span>;host++));<span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -------------------192.168.100.<span class=\"variable\">$host</span>--------------</span><br><span class=\"line\">rsync -rvl <span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span>  <span class=\"variable\">$user</span>@192.168.100.<span class=\"variable\">$host</span>:<span class=\"variable\">$pdir</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>（b）修改脚本xsync具有执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">chmod</span> 777 xsync</span><br></pre></td></tr></table></figure>\n\n<p>（c）调用脚本形式：xsync文件名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xsync  /home/&lt;用户名&gt;/bin</span><br></pre></td></tr></table></figure>\n\n\n\n\n<blockquote>\n<p><strong>注意</strong>：</p>\n<p>如果将<code>xsync</code>放到<code>/home/&lt;用户名&gt;/bin</code>目录下仍然不能实现全局使用，</p>\n<p>可以将<code>xsync</code>移动到<code>/usr/local/bin</code>目录下。</p>\n</blockquote>\n<h4 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h4><h5 id=\"1-集群部署规化\"><a href=\"#1-集群部署规化\" class=\"headerlink\" title=\"1.集群部署规化\"></a>1.集群部署规化</h5><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">192.168.100.102 -hadoop102</th>\n<th>192.168.100.103-hadoop103</th>\n<th>192.168.100.104-hadoop104</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HDFS</td>\n<td align=\"left\">NameNode <br /> DataNode</td>\n<td><br />DataNode</td>\n<td>SecondaryNameNode <br />DataNode</td>\n</tr>\n<tr>\n<td>YARN</td>\n<td align=\"left\"><br />NodeManage</td>\n<td>ResourceManage  <br />NodeManage</td>\n<td><br />NodeManage</td>\n</tr>\n</tbody></table>\n<p>机器改IP </p>\n<h5 id=\"2-配置集群\"><a href=\"#2-配置集群\" class=\"headerlink\" title=\"2.配置集群\"></a>2.配置集群</h5><h6 id=\"（1）核心配置文件\"><a href=\"#（1）核心配置文件\" class=\"headerlink\" title=\"（1）核心配置文件\"></a>（1）核心配置文件</h6><p>在<code>192.168.100.102</code> 上</p>\n<p>配置<code>etc/hadoop/core-site.xml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/local/program/hadoop3.2.1</span><br><span class=\"line\">$ vim etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中编写如下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定HDFS中NameNode的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://192.168.100.102:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定Hadoop运行时产生文件的存储目录--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-$&#123;user.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）HDFS配置文件\"><a href=\"#（2）HDFS配置文件\" class=\"headerlink\" title=\"（2）HDFS配置文件\"></a>（2）HDFS配置文件</h6><p>配置<code>etc/hadoop/hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/program/jdk1.8 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_DATANODE_USER=root  </span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_NAMENODE_USER=root  </span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_SECONDARYNAMENODE_USER=root </span><br></pre></td></tr></table></figure>\n\n<p>配置<code>etc/hadoop/hdfs-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定Hadoop辅助名称节点主机配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>192.168.100.104:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定HadoopNameNode的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>192.168.100.102:9870<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（3）YARN配置文件\"><a href=\"#（3）YARN配置文件\" class=\"headerlink\" title=\"（3）YARN配置文件\"></a>（3）YARN配置文件</h6><p>一般在 shell中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop  classpath</span><br></pre></td></tr></table></figure>\n\n<p>然后 这些输出 直接 粘贴到 yarn 的配置文件里 yarn-site.xml的属性 <name>yarn.application.classpath</name>赋值</p>\n<p>配置<code>etc/hadoop/hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>\n\n<p>配置<code>etc/hadoop/yarn-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- MR应用程序的类路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.application.classpath<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/program/hadoop-3.2.1/etc/hadoop:/usr/local/program/hadoop-3.2.1/share/hadoop/common/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/common/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定YARN的ResourceManager的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>192.168.100.103<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（4）MapReduce配置文件\"><a href=\"#（4）MapReduce配置文件\" class=\"headerlink\" title=\"（4）MapReduce配置文件\"></a>（4）MapReduce配置文件</h6><p>配置<code>etc/hadoop/mapred-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定MR运行在Yarn上--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- MR应用程序的类路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.application.classpath<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>     <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-在集群上分发配置好的Hadoop配置文件\"><a href=\"#3-在集群上分发配置好的Hadoop配置文件\" class=\"headerlink\" title=\"3.在集群上分发配置好的Hadoop配置文件\"></a>3.在集群上分发配置好的Hadoop配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xsync ./etc/hadoop/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-查看文件分发情况\"><a href=\"#4-查看文件分发情况\" class=\"headerlink\" title=\"4.查看文件分发情况\"></a>4.查看文件分发情况</h5><h4 id=\"集群单点启动\"><a href=\"#集群单点启动\" class=\"headerlink\" title=\"集群单点启动\"></a>集群单点启动</h4><p>（1）如果集群是第一次启动，需要格式化<code>NameNode</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  bin/hdfs namenode -formart</span><br></pre></td></tr></table></figure>\n\n<p>（2）在<code>192.168.100.102</code>上启动<code>NameNode</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/hadoop-daemon.sh  start namenode</span><br></pre></td></tr></table></figure>\n\n<p>（3）在<code>192.168.100.102</code>,<code>192.168.100.103</code>以及<code>192.168.100.104</code>上分别启动<code>DataNode</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/hadoop-daemon.sh  start datanode</span><br></pre></td></tr></table></figure>\n\n<p>（4）思考：每次都一个一个节点启动，如果节点数增加到1000个怎么办？<br>            早上来了开始一个一个节点启动，到晚上下班刚好完成，下班？</p>\n<h4 id=\"SSH无密登录配置\"><a href=\"#SSH无密登录配置\" class=\"headerlink\" title=\"SSH无密登录配置\"></a>SSH无密登录配置</h4><h5 id=\"1-配置ssh\"><a href=\"#1-配置ssh\" class=\"headerlink\" title=\"1.配置ssh\"></a>1.配置ssh</h5><p>（1）基本语法<br>            ssh另一台电脑的ip地址<br>（2）ssh连接时出现Hostkeyverificationfailed的解决方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh  192.168.1.103</span><br><span class=\"line\">Theauthenticityofhost<span class=\"string\">&#x27;192.168.1.103(192.168.1.103)&#x27;</span>can<span class=\"string\">&#x27;t</span></span><br><span class=\"line\"><span class=\"string\">beestablished.</span></span><br><span class=\"line\"><span class=\"string\">RSAkeyfingerprintis</span></span><br><span class=\"line\"><span class=\"string\">cf:1e:de:d7:d0:4c:2d:98:60:b4:fd:ae:b1:2d:ad:06.</span></span><br><span class=\"line\"><span class=\"string\">Areyousureyouwanttocontinueconnecting(yes/no)?</span></span><br><span class=\"line\"><span class=\"string\">Hostkeyverificationfailed.</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）解决方案如下：直接输入yes</p>\n<h5 id=\"2-无密钥配置\"><a href=\"#2-无密钥配置\" class=\"headerlink\" title=\"2.无密钥配置\"></a>2.无密钥配置</h5><p>（1）免密登录原理</p>\n<p><img src=\"/post/2023/Hadoop/image-20200823180537869.png\" alt=\"image-20200823180537869\"></p>\n<p>（2）<code>192.168.100.102</code>生成公钥和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /root/.ssh</span><br><span class=\"line\">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</p>\n<p>（3）将公钥拷贝到要免密登录的目标机器上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-copy-id 192.168.100.102</span><br><span class=\"line\">$ ssh-copy-id 192.168.100.103</span><br><span class=\"line\">$ ssh-copy-id 192.168.100.104</span><br></pre></td></tr></table></figure>\n\n<p>（4）<code>192.168.100.103</code>生成公钥和私钥,进行公钥拷贝到要免密登录的目标机器上</p>\n<h5 id=\"3-ssh文件夹下（-ssh）的文件功能解释\"><a href=\"#3-ssh文件夹下（-ssh）的文件功能解释\" class=\"headerlink\" title=\"3..ssh文件夹下（~&#x2F;.ssh）的文件功能解释\"></a>3.<code>.ssh</code>文件夹下（~&#x2F;.ssh）的文件功能解释</h5><table>\n<thead>\n<tr>\n<th>known_hosts</th>\n<th>记录ssh访问过计算机的公钥(publickey)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id_rsa</td>\n<td>生成的私钥</td>\n</tr>\n<tr>\n<td>id_rsa.pub</td>\n<td>生成的公钥</td>\n</tr>\n<tr>\n<td>authorized_keys</td>\n<td>存放授权过得无密登录服务器公钥</td>\n</tr>\n</tbody></table>\n<h4 id=\"群起集群\"><a href=\"#群起集群\" class=\"headerlink\" title=\"群起集群\"></a>群起集群</h4><h5 id=\"1-配置etc-hadoop-workers\"><a href=\"#1-配置etc-hadoop-workers\" class=\"headerlink\" title=\"1.配置etc/hadoop/workers\"></a>1.配置<code>etc/hadoop/workers</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim etc/hadoop/workers </span><br></pre></td></tr></table></figure>\n\n<p>添加以下节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.100.102</span><br><span class=\"line\">192.168.100.103</span><br><span class=\"line\">192.168.100.104</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>千万不要有多余的空格</p>\n</blockquote>\n<h5 id=\"2-启动集群\"><a href=\"#2-启动集群\" class=\"headerlink\" title=\"2.启动集群\"></a>2.启动集群</h5><h6 id=\"（1）如果集群是第一次启动\"><a href=\"#（1）如果集群是第一次启动\" class=\"headerlink\" title=\"（1）如果集群是第一次启动\"></a>（1）如果集群是第一次启动</h6><p>需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）启动HDFS\"><a href=\"#（2）启动HDFS\" class=\"headerlink\" title=\"（2）启动HDFS\"></a>（2）启动HDFS</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>\n\n<p><code>jps</code>查看是否启动</p>\n<h6 id=\"（3）启动YARN\"><a href=\"#（3）启动YARN\" class=\"headerlink\" title=\"（3）启动YARN\"></a>（3）启动<code>YARN</code></h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（3）Web端查看SecondaryNameNode\"><a href=\"#（3）Web端查看SecondaryNameNode\" class=\"headerlink\" title=\"（3）Web端查看SecondaryNameNode\"></a>（3）Web端查看<code>SecondaryNameNode</code></h6><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.102:9870/</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（4）查看文件系统的基本数据\"><a href=\"#（4）查看文件系统的基本数据\" class=\"headerlink\" title=\"（4）查看文件系统的基本数据\"></a>（4）查看文件系统的基本数据</h6> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfsadmin -report</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：</p>\n<p>NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动YARN，应该在ResouceManager所在的机器上启动YARN。</p>\n</blockquote>\n<h5 id=\"3-集群基本测试\"><a href=\"#3-集群基本测试\" class=\"headerlink\" title=\"3.集群基本测试\"></a>3.集群基本测试</h5><h6 id=\"（1）上传文件到集群\"><a href=\"#（1）上传文件到集群\" class=\"headerlink\" title=\"（1）上传文件到集群\"></a>（1）上传文件到集群</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -put  ./wcinput/wc.input  /user/wry/input</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）上传文件后查看文件存放在什么位置\"><a href=\"#（2）上传文件后查看文件存放在什么位置\" class=\"headerlink\" title=\"（2）上传文件后查看文件存放在什么位置\"></a>（2）上传文件后查看文件存放在什么位置</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-root/dfs/data/current/BP-719430212-127.0.0.1-1598525636602/current/finalized/subdir0/subdir0</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"集群启动-停止方式总结\"><a href=\"#集群启动-停止方式总结\" class=\"headerlink\" title=\"集群启动&#x2F;停止方式总结\"></a>集群启动&#x2F;停止方式总结</h4><h5 id=\"1-各个服务组件逐一启动-停止\"><a href=\"#1-各个服务组件逐一启动-停止\" class=\"headerlink\" title=\"1.各个服务组件逐一启动&#x2F;停止\"></a>1.各个服务组件逐一启动&#x2F;停止</h5><h6 id=\"（1）分别启动-停止HDFS组件\"><a href=\"#（1）分别启动-停止HDFS组件\" class=\"headerlink\" title=\"（1）分别启动&#x2F;停止HDFS组件\"></a>（1）分别启动&#x2F;停止HDFS组件</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/hadoop-daemon.sh start/stop  namenode/datanode/secondarynamenode</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）启动-停止YARN\"><a href=\"#（2）启动-停止YARN\" class=\"headerlink\" title=\"（2）启动&#x2F;停止YARN\"></a>（2）启动&#x2F;停止YARN</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/yarn-daemon.sh  start/stop  resourcemanager/nodemanager</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-各个模块分开启动-停止（配置ssh是前提）常用\"><a href=\"#2-各个模块分开启动-停止（配置ssh是前提）常用\" class=\"headerlink\" title=\"2.各个模块分开启动&#x2F;停止（配置ssh是前提）常用\"></a>2.各个模块分开启动&#x2F;停止（配置ssh是前提）常用</h5><h6 id=\"（1）整体启动-停止HDFS\"><a href=\"#（1）整体启动-停止HDFS\" class=\"headerlink\" title=\"（1）整体启动&#x2F;停止HDFS\"></a>（1）整体启动&#x2F;停止HDFS</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-dfs.sh/stop-dfs.sh</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）整体启动-停止YARN\"><a href=\"#（2）整体启动-停止YARN\" class=\"headerlink\" title=\"（2）整体启动&#x2F;停止YARN\"></a>（2）整体启动&#x2F;停止YARN</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh/stop-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"crontab定时任务设置\"><a href=\"#crontab定时任务设置\" class=\"headerlink\" title=\"crontab定时任务设置\"></a>crontab定时任务设置</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>crontab [选项]</p>\n<h4 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h4><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-e</td>\n<td>编辑crontab 定时任务</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>查询crontab任务</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>删除当前用户所有的crontab 任务</td>\n</tr>\n</tbody></table>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ crontab -e</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（1）进入crontab编辑界面。会打开vim-编辑你的工作\"><a href=\"#（1）进入crontab编辑界面。会打开vim-编辑你的工作\" class=\"headerlink\" title=\"（1）进入crontab编辑界面。会打开vim 编辑你的工作\"></a>（1）进入crontab编辑界面。会打开vim 编辑你的工作</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *  执行的任务</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>含义</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>第一个“*”</td>\n<td>一小时当中的第几分钟</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>第二个“*”</td>\n<td>一天当中的第几小时</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>第三个“*”</td>\n<td>一月当中的第几天</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>第四个“*”</td>\n<td>一年当中的第几月</td>\n<td>1-12</td>\n</tr>\n<tr>\n<td>第五个“*”</td>\n<td>一周当中的星期几</td>\n<td>0-7（0和7都代表星期日）</td>\n</tr>\n</tbody></table>\n<h5 id=\"（2）特殊符合\"><a href=\"#（2）特殊符合\" class=\"headerlink\" title=\"（2）特殊符合\"></a>（2）特殊符合</h5><table>\n<thead>\n<tr>\n<th>特殊符合</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>代表任何时间。比如第一个“*”，就代表一小时中的每分钟都有执行一次</td>\n</tr>\n<tr>\n<td>，</td>\n<td>代表不连需的时间。比如”0 8,12,16 * * *” 命令，就代表在每天的8点0分，12点0分，16点0分都执行一次</td>\n</tr>\n<tr>\n<td>-</td>\n<td>代表连续的时间范围。比如”0 5 * * 1-6” ,就代表在周一到周六的凌晨5点0分执行命令</td>\n</tr>\n<tr>\n<td>*&#x2F;n</td>\n<td>代表每个多久执行一次。比如”*&#x2F;10 * * * *”,就代表没10分钟执行一次命令</td>\n</tr>\n</tbody></table>\n<h5 id=\"（3）特殊特定时间执行命令\"><a href=\"#（3）特殊特定时间执行命令\" class=\"headerlink\" title=\"（3）特殊特定时间执行命令\"></a>（3）特殊特定时间执行命令</h5><table>\n<thead>\n<tr>\n<th>时间</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>45 22 * * *</td>\n<td>在22点45 分执行命令</td>\n</tr>\n<tr>\n<td>0 17 * * 1</td>\n<td>每周一的17点0分执行命令</td>\n</tr>\n<tr>\n<td>0 5 1,15 * *</td>\n<td>每月1号和15号的凌晨5点0分执行命令</td>\n</tr>\n<tr>\n<td>40 4 * * 1-5</td>\n<td>每周一到周五的凌晨4点40 分执行命令</td>\n</tr>\n<tr>\n<td>*&#x2F;10 4 * * *</td>\n<td>每天的凌晨4点，没隔10分钟执行一次命令</td>\n</tr>\n<tr>\n<td>0 0 1,15 * 1</td>\n<td>每月1号和15号，每周一的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。</td>\n</tr>\n</tbody></table>\n<h5 id=\"（4）案例实操\"><a href=\"#（4）案例实操\" class=\"headerlink\" title=\"（4）案例实操\"></a>（4）案例实操</h5><ul>\n<li><p>每隔1分钟，向<code>/root/bailongma.txt</code>文件中添加一个11 的数字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /bin/echo <span class=\"string\">&quot;11&quot;</span> &gt;&gt;/root/bailongma.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"集群时间同步\"><a href=\"#集群时间同步\" class=\"headerlink\" title=\"集群时间同步\"></a>集群时间同步</h3><p>时间同步的方式：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，比如，每隔十分钟，同步一次时间。</p>\n<p><img src=\"/post/2023/Hadoop/image-20200829223326519.png\" alt=\"image-20200829223326519\"></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h3><h4 id=\"第一步：修改VMnet配置\"><a href=\"#第一步：修改VMnet配置\" class=\"headerlink\" title=\"第一步：修改VMnet配置\"></a>第一步：修改VMnet配置</h4><p>在VMware里，依次点击”编辑“ - ”虚拟网络编辑器“，如下图，我选择的是NAT模式： 以下VMnet2为配置</p>\n<p><img src=\"https://img.jbzj.com/file_images/article/202001/2020011513342421.png\" alt=\"在这里插入图片描述\"></p>\n<p>其中子网ip随便写,子网掩码自己计算,如果不太熟悉就完全配置和我一样就行</p>\n<p>A类默认的子网掩码：255.0.0.0<br>B类默认的子网掩码：255.255.0.0<br>C类默认的子网掩码：255.255.255.0</p>\n<p>为了使用静态IP将: 使用本地DHCP服务将IP地址分配给虚拟机 取消(默认是选择状态)</p>\n<p>点击NAT设置</p>\n<p>将网关ip记住如下图,最后配置虚拟机ip文件所用</p>\n<p><img src=\"https://img.jbzj.com/file_images/article/202001/2020011513342422.png\" alt=\"Alt\"></p>\n<h4 id=\"第二步：进入虚拟机\"><a href=\"#第二步：进入虚拟机\" class=\"headerlink\" title=\"第二步：进入虚拟机\"></a>第二步：进入虚拟机</h4><p> 以root权限登陆centos8并编辑vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33这个文件，效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static <span class=\"comment\">#注意设置为static静态</span></span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=aa18fb34-fea8-4fff-83a4-1ebed631beff</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span> <span class=\"comment\">#这里如果为no的话就改为yes，表示网卡设备自动启动</span></span><br><span class=\"line\">GATEWAY=192.168.0.2 <span class=\"comment\">#这里的网关地址就是上一步获取到的那个网关地址</span></span><br><span class=\"line\">IPADDR=192.168.0.150 <span class=\"comment\">#再网关的范围内随意写</span></span><br><span class=\"line\">NETMASK=255.255.255.0 <span class=\"comment\">#子网掩码</span></span><br><span class=\"line\">DNS1=8.8.8.8 <span class=\"comment\">#DNS1这里用谷歌,</span></span><br><span class=\"line\">DNS2=223.6.6.6 <span class=\"comment\">#DNS2用阿里</span></span><br></pre></td></tr></table></figure>\n\n<p>然后 :wq保存退出</p>\n<h4 id=\"第三步-刷新网卡配置\"><a href=\"#第三步-刷新网卡配置\" class=\"headerlink\" title=\"第三步: 刷新网卡配置\"></a>第三步: 刷新网卡配置</h4><p>CentOS 8 使用 : nmcli c reload</p>\n<p>CentOS7 使用 &#x2F;etc&#x2F;init.d&#x2F;network restart</p>\n<p>如果不能上网直接使用<code>reboot</code> 命令重启</p>\n<h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><p>centos8</p>\n<h4 id=\"永久关闭防火墙\"><a href=\"#永久关闭防火墙\" class=\"headerlink\" title=\"永久关闭防火墙\"></a>永久关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看防火墙\"><a href=\"#查看防火墙\" class=\"headerlink\" title=\"查看防火墙\"></a>查看防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止防火墙\"><a href=\"#停止防火墙\" class=\"headerlink\" title=\"停止防火墙\"></a>停止防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用防火墙\"><a href=\"#启用防火墙\" class=\"headerlink\" title=\"启用防火墙\"></a>启用防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置JDK\"><a href=\"#配置JDK\" class=\"headerlink\" title=\"配置JDK\"></a>配置JDK</h3><h4 id=\"第一步：解压\"><a href=\"#第一步：解压\" class=\"headerlink\" title=\"第一步：解压\"></a>第一步：解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -zxvf /usr/local/software/jdk1.8.231 -C /usr/local/program/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二步：配置环境变量\"><a href=\"#第二步：配置环境变量\" class=\"headerlink\" title=\"第二步：配置环境变量\"></a>第二步：配置环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在最后添加java 环境配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/program/jdk1.8.231</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASS_PATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib.tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：使配置生效\"><a href=\"#第三步：使配置生效\" class=\"headerlink\" title=\"第三步：使配置生效\"></a>第三步：使配置生效</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置SSH连接\"><a href=\"#配置SSH连接\" class=\"headerlink\" title=\"配置SSH连接\"></a>配置SSH连接</h3><h4 id=\"第一步：修改配置\"><a href=\"#第一步：修改配置\" class=\"headerlink\" title=\"第一步：修改配置\"></a>第一步：修改配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>打开 注释修改以下配置</p>\n<p>ClientAliveInterval 60</p>\n<p>表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了</p>\n<p>ClientAliveCountMax 3 </p>\n<p>ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开</p>\n<h4 id=\"第二步：重启服务\"><a href=\"#第二步：重启服务\" class=\"headerlink\" title=\"第二步：重启服务\"></a>第二步：重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service sshd restart</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf /usr/local/software/hadoop-3.2.1.tar.gz  -C /usr/local/program/</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#hadoop 环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/local/program/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop version</span><br></pre></td></tr></table></figure>\n\n","cover":false,"excerpt":"","more":"<h2 id=\"Hadoop是什么\"><a href=\"#Hadoop是什么\" class=\"headerlink\" title=\"Hadoop是什么\"></a>Hadoop是什么</h2><ol>\n<li>hadoop是一个Aoache基金会所开发的分布式系统基础架构 。</li>\n<li>主要解决，海量数据的存储和海量数据的分析计算问题。</li>\n<li>广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。</li>\n</ol>\n<h2 id=\"Hadoop发展史\"><a href=\"#Hadoop发展史\" class=\"headerlink\" title=\"Hadoop发展史\"></a>Hadoop发展史</h2><h3 id=\"Lucene\"><a href=\"#Lucene\" class=\"headerlink\" title=\"Lucene\"></a>Lucene</h3><h3 id=\"论文\"><a href=\"#论文\" class=\"headerlink\" title=\"论文\"></a>论文</h3><h4 id=\"GFS–-HDFS\"><a href=\"#GFS–-HDFS\" class=\"headerlink\" title=\"GFS–&gt;HDFS\"></a>GFS–&gt;HDFS</h4><h4 id=\"Map-Reduce–-MR\"><a href=\"#Map-Reduce–-MR\" class=\"headerlink\" title=\"Map-Reduce–&gt;MR\"></a>Map-Reduce–&gt;MR</h4><h4 id=\"BigTable–-HBase\"><a href=\"#BigTable–-HBase\" class=\"headerlink\" title=\"BigTable–&gt;HBase\"></a>BigTable–&gt;HBase</h4><h2 id=\"Hadoop三大发行版本\"><a href=\"#Hadoop三大发行版本\" class=\"headerlink\" title=\"Hadoop三大发行版本\"></a>Hadoop三大发行版本</h2><h3 id=\"Apache\"><a href=\"#Apache\" class=\"headerlink\" title=\"Apache\"></a>Apache</h3><p>最原始，最基本的版本，对于入门学习较好</p>\n<h3 id=\"Cloudera\"><a href=\"#Cloudera\" class=\"headerlink\" title=\"Cloudera\"></a>Cloudera</h3><p>在大型互联网企业中用的较多</p>\n<h3 id=\"Hortonworks\"><a href=\"#Hortonworks\" class=\"headerlink\" title=\"Hortonworks\"></a>Hortonworks</h3><p>文档较好</p>\n<h2 id=\"Hadoop的优势（4高）\"><a href=\"#Hadoop的优势（4高）\" class=\"headerlink\" title=\"Hadoop的优势（4高）\"></a>Hadoop的优势（4高）</h2><ol>\n<li>高可靠：Hadoop底层维护了多个数据副本，所以即使Hadoop某个计算或存储出现故障，也不会导致数据丢失。</li>\n<li>高扩展性：在集群建分配任务数据，可方便的扩展数以千计的节点。</li>\n<li>高效性：在Mao-Reduce 的思想下，Hadoop是并行工作的，以加快任务处理速度。</li>\n<li>高容错性：能够自动将失败的任务重新分配。</li>\n</ol>\n<h2 id=\"Hadoop组成\"><a href=\"#Hadoop组成\" class=\"headerlink\" title=\"Hadoop组成\"></a>Hadoop组成</h2><h3 id=\"1-x-与2-x\"><a href=\"#1-x-与2-x\" class=\"headerlink\" title=\"1.x 与2.x\"></a>1.x 与2.x</h3><p><img src=\"/post/2023/Hadoop/image-20200820213620752.png\" alt=\"image-20200820213620752\"></p>\n<h3 id=\"HDFS架构概念\"><a href=\"#HDFS架构概念\" class=\"headerlink\" title=\"HDFS架构概念\"></a>HDFS架构概念</h3><h4 id=\"1-NameNode-nn\"><a href=\"#1-NameNode-nn\" class=\"headerlink\" title=\"1.NameNode (nn)\"></a>1.NameNode (nn)</h4><p>存储额文件的元数据，如文件名，文件目录结构，文件属性（生成时间，副本数，文件权限），以及每个文件的块列表和块所在的DataNode 等。</p>\n<h4 id=\"2-DataNode-dn\"><a href=\"#2-DataNode-dn\" class=\"headerlink\" title=\"2.DataNode (dn)\"></a>2.DataNode (dn)</h4><p>在本地文件系统存储文件块数据，以及块数据的校验和。</p>\n<h4 id=\"3-Secondary-NameNode-2nn\"><a href=\"#3-Secondary-NameNode-2nn\" class=\"headerlink\" title=\"3.Secondary NameNode (2nn)\"></a>3.Secondary NameNode (2nn)</h4><p>用来监控HDFS状态的辅助后台程序，每隔一段时间获取HDFS元数据的快照。</p>\n<h3 id=\"YARN-架构概念\"><a href=\"#YARN-架构概念\" class=\"headerlink\" title=\"YARN 架构概念\"></a>YARN 架构概念</h3><h4 id=\"ResourceManage-RM-主要作用\"><a href=\"#ResourceManage-RM-主要作用\" class=\"headerlink\" title=\"ResourceManage(RM)主要作用\"></a>ResourceManage(RM)主要作用</h4><ul>\n<li>处理客户请求</li>\n<li>监控NodeManage</li>\n<li>启动或监控ApplicationMaster</li>\n<li>资源的调度与分配</li>\n</ul>\n<h4 id=\"NodeManage-NM-主要作用\"><a href=\"#NodeManage-NM-主要作用\" class=\"headerlink\" title=\"NodeManage(NM)主要作用\"></a>NodeManage(NM)主要作用</h4><ul>\n<li>管理单个节点上的资源</li>\n<li>处理来自ResourceManage的命令</li>\n<li>处理来自ApplicationMaster的命令</li>\n</ul>\n<h4 id=\"ApplicationMaster-AM-主要作用\"><a href=\"#ApplicationMaster-AM-主要作用\" class=\"headerlink\" title=\"ApplicationMaster(AM)主要作用\"></a>ApplicationMaster(AM)主要作用</h4><ul>\n<li>负责数据的切分</li>\n<li>为应用程序申请资源并分配给内部的任务</li>\n<li>任务的监控与容错</li>\n</ul>\n<h4 id=\"Container\"><a href=\"#Container\" class=\"headerlink\" title=\"Container\"></a>Container</h4><ul>\n<li>Container是YARN中的资源抽象，他封装了某个节点上的多维资源，如内存，CPU,磁盘，网络等。</li>\n</ul>\n<h3 id=\"MapReduce架构概述\"><a href=\"#MapReduce架构概述\" class=\"headerlink\" title=\"MapReduce架构概述\"></a>MapReduce架构概述</h3><p>MapReduce 将计算过程分为两个阶段：map 和 Reduce</p>\n<ol>\n<li>Map 阶段并行处理输入数据</li>\n<li>Reduce阶段对Map结果进行汇总</li>\n</ol>\n<h2 id=\"大数据计数生态体系\"><a href=\"#大数据计数生态体系\" class=\"headerlink\" title=\"大数据计数生态体系\"></a>大数据计数生态体系</h2><p><img src=\"/post/2023/Hadoop/image-20200820224123902.png\" alt=\"image-20200820224123902\"></p>\n<h2 id=\"环境搭建\"><a href=\"#环境搭建\" class=\"headerlink\" title=\"环境搭建\"></a>环境搭建</h2><h3 id=\"1-准备虚拟机\"><a href=\"#1-准备虚拟机\" class=\"headerlink\" title=\"1.准备虚拟机\"></a>1.准备虚拟机</h3><h3 id=\"2-安装JDK\"><a href=\"#2-安装JDK\" class=\"headerlink\" title=\"2.安装JDK\"></a>2.安装JDK</h3><h3 id=\"3-安装Hadoop\"><a href=\"#3-安装Hadoop\" class=\"headerlink\" title=\"3.安装Hadoop\"></a>3.安装Hadoop</h3><ul>\n<li><p>解压</p>\n</li>\n<li><p>配置环境变量</p>\n<p>在 <code>/etc/profile</code>文件的最后加</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/local/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br></pre></td></tr></table></figure>\n\n<p>使用配置生效</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /ect/profile</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"4-Hadoop目录结构\"><a href=\"#4-Hadoop目录结构\" class=\"headerlink\" title=\"4.Hadoop目录结构\"></a>4.Hadoop目录结构</h3><ul>\n<li><p><strong>bin</strong></p>\n<p>存放对Hadoop相关服务（HDFS,YARN）进行操作的脚本</p>\n</li>\n<li><p><strong>etc</strong> </p>\n<p>Hadoop的配置文件目录</p>\n</li>\n<li><p><strong>lib</strong></p>\n<p>存放Hadoop的本地库（对数据进行压缩解压的功能）</p>\n</li>\n<li><p><strong>sbin</strong></p>\n<p>存放启动或停止Hadoop相关服务的脚本</p>\n</li>\n<li><p><strong>share</strong></p>\n<p>存放Hadoop的依赖jar包，文档，和官方案例。</p>\n</li>\n</ul>\n<h3 id=\"5-Hadoop官网手册\"><a href=\"#5-Hadoop官网手册\" class=\"headerlink\" title=\"5.Hadoop官网手册\"></a>5.Hadoop官网手册</h3><p>Hadoop官方网站：<a href=\"https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html\">https://hadoop.apache.org/docs/stable/hadoop-project-dist/hadoop-common/SingleCluster.html</a></p>\n<h2 id=\"Hadoop运行模式\"><a href=\"#Hadoop运行模式\" class=\"headerlink\" title=\"Hadoop运行模式\"></a>Hadoop运行模式</h2><p>Hadoop运行模式包括：</p>\n<p>本地模式、伪分布式模式以及完全分布式模式。</p>\n<h3 id=\"本地运行模式\"><a href=\"#本地运行模式\" class=\"headerlink\" title=\"本地运行模式\"></a>本地运行模式</h3><h4 id=\"官方Grep案例\"><a href=\"#官方Grep案例\" class=\"headerlink\" title=\"官方Grep案例\"></a>官方Grep案例</h4><p>1.创建在hadoop-3.2.1文件下面创建一个input文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">mkdir</span> input</span><br></pre></td></tr></table></figure>\n\n<p>2.将Hadoop的xml配置文件复制到input</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cp</span>  etc/hadoop/*.xml  input</span><br></pre></td></tr></table></figure>\n\n<p>3.执行share目录下的MapReduce程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop\tjar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep input  output  <span class=\"string\">&#x27;dfs[a-z.]+&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>4.查看输出结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cat</span>  output/*</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"官方WordCount案例\"><a href=\"#官方WordCount案例\" class=\"headerlink\" title=\"官方WordCount案例\"></a>官方WordCount案例</h4><p>1.创建在hadoop-3.2.1文件下面创建一个wcinput文件夹</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> wcinput</span><br></pre></td></tr></table></figure>\n\n<p>2.在wcinput文件下创建一个wc.input文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> wcinput</span><br><span class=\"line\"></span><br><span class=\"line\">$ touchwc.input</span><br></pre></td></tr></table></figure>\n\n<p>3.编辑wc.input文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim  wc.input</span><br></pre></td></tr></table></figure>\n\n<p>在文件中输入如下内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hadoopyarn</span><br><span class=\"line\">hadoopmapreduce</span><br><span class=\"line\">atguigu</span><br><span class=\"line\">atguigu</span><br></pre></td></tr></table></figure>\n\n<p>保存退出：：wq</p>\n<p>4.回到Hadoop目录</p>\n<p>5.执行程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount wcinput wcoutput</span><br></pre></td></tr></table></figure>\n\n<p>6.查看结果</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cat</span> wcoutput /part-r-00000</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">atguigu2</span><br><span class=\"line\">hadoop2</span><br><span class=\"line\">mapreduce1</span><br><span class=\"line\">yarn1</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"伪分布式运行模式\"><a href=\"#伪分布式运行模式\" class=\"headerlink\" title=\"伪分布式运行模式\"></a>伪分布式运行模式</h3><h4 id=\"启动HDFS并运行MapReduce程序\"><a href=\"#启动HDFS并运行MapReduce程序\" class=\"headerlink\" title=\"启动HDFS并运行MapReduce程序\"></a>启动HDFS并运行MapReduce程序</h4><h5 id=\"1-分析\"><a href=\"#1-分析\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h5><p>（1）配置集群<br>（2）启动、测试集群增、删、查<br>（3）执行WordCount案例</p>\n<h5 id=\"2-执行步骤\"><a href=\"#2-执行步骤\" class=\"headerlink\" title=\"2.执行步骤\"></a>2.执行步骤</h5><h6 id=\"（1）配置集群\"><a href=\"#（1）配置集群\" class=\"headerlink\" title=\"（1）配置集群\"></a>（1）配置集群</h6><p>进入Hadoop的etc目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> ./etc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>配置：hadoop-env.sh</p>\n<p>Linux系统中获取JDK的安装路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">echo</span> <span class=\"variable\">$JAVA_HOME</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/jdk1.8.0_121</span><br></pre></td></tr></table></figure>\n\n<p>修改JAVA_HOME路径：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/jdk1.8.0_121</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置：core-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定HDFS中NameNode的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://localhost:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定Hadoop运行时产生文件的存储目录--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/hadoop-3.2.1/data/tmp<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置：hdfs-site.xml</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定HDFS副本的数量--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"（2）设置无密码SSH\"><a href=\"#（2）设置无密码SSH\" class=\"headerlink\" title=\"（2）设置无密码SSH\"></a>（2）设置无密码SSH</h6><ul>\n<li><p>现在检查您是否可以在不使用密码的情况下SSH到本地主机：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh  localhost</span><br></pre></td></tr></table></figure>\n\n<p>如果没有密码就无法SSH到本地主机</p>\n</li>\n<li><p>请执行以下命令</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -P<span class=\"string\">&#x27;&#x27;</span>-f〜/ .ssh / id_rsa </span><br><span class=\"line\">$ <span class=\"built_in\">cat</span>〜/ .ssh / id_rsa.pub &gt;&gt;〜/ .ssh / authorized_keys </span><br><span class=\"line\">$ <span class=\"built_in\">chmod</span> 0600〜/ .ssh / authorized_keys</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h6 id=\"（3）执行\"><a href=\"#（3）执行\" class=\"headerlink\" title=\"（3）执行\"></a>（3）执行</h6><ul>\n<li><p>格式化文件系统</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动NameNode守护程序和DataNode守护程序：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@iZ2zednzb8iugz3kgudq9bZ hadoop-3.2.1]<span class=\"comment\"># ./sbin/stop-dfs.sh</span></span><br><span class=\"line\">Stopping namenodes on [localhost]</span><br><span class=\"line\">ERROR: Attempting to operate on hdfs namenode as root</span><br><span class=\"line\">ERROR: but there is no HDFS_NAMENODE_USER defined. Aborting operation.</span><br><span class=\"line\">Stopping datanodes</span><br><span class=\"line\">ERROR: Attempting to operate on hdfs datanode as root</span><br><span class=\"line\">ERROR: but there is no HDFS_DATANODE_USER defined. Aborting operation.</span><br><span class=\"line\">Stopping secondary namenodes [iZ2zednzb8iugz3kgudq9bZ]</span><br><span class=\"line\">ERROR: Attempting to operate on hdfs secondarynamenode as root</span><br><span class=\"line\">ERROR: but there is no HDFS_SECONDARYNAMENODE_USER defined. Aborting operation.</span><br></pre></td></tr></table></figure>\n\n<p>添加以下配置到 <code>hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HDFS_DATANODE_USER=root  </span><br><span class=\"line\">HDFS_NAMENODE_USER=root  </span><br><span class=\"line\">HDFS_SECONDARYNAMENODE_USER=root </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>浏览Web界面以查找NameNode；默认情况下，它在以下位置可用：</p>\n<figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://localhost:9870/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置执行MapReduce作业所需的HDFS目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> /user/root</span><br><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> /user/&lt;用户名&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建多层目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> -p  /user/wry</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822090658863.png\" alt=\"image-20200822090658863\"></p>\n<ul>\n<li>查看多级目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">ls</span> -R /</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822090905199.png\" alt=\"image-20200822090905199\"></p>\n</li>\n<li><p>将本地输入文件复制到分布式文件系统中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">mkdir</span> -p /user/wry/input</span><br><span class=\"line\">$ bin/hdfs dfs -put etc/hadoop/*.xml /user/wry/input</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822091216510.png\" alt=\"image-20200822091216510\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822091335115.png\" alt=\"image-20200822091335115\"></p>\n</li>\n<li><p>运行提供的一些示例：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar grep /user/wry/input /user/wry/output <span class=\"string\">&#x27;dfs[a-z.]+&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822091809558.png\" alt=\"image-20200822091809558\"></p>\n<ul>\n<li><p>查看文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">ls</span> -r /user/wry/output</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看分布式文件系统上的输出文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -<span class=\"built_in\">cat</span> /user/wry/output/&lt;文件名&gt;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822092048172.png\" alt=\"image-20200822092048172\"></p>\n<p>or</p>\n</li>\n<li><p>检查输出文件：将输出文件从分布式文件系统复制到本地文件系统并检查它们：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -get /user/wry/output /usr/local/wryoutput </span><br><span class=\"line\">$ <span class=\"built_in\">cat</span> /usr/local/wryoutput/*</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822093255847.png\" alt=\"image-20200822093255847\"></p>\n</li>\n</ul>\n</li>\n<li><p>完成后，使用以下命令停止守护进程：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p><strong>格式化NameNode 时要注意</strong></p>\n<p>1.先停止进程</p>\n<p>2.删除data 、log文件</p>\n<p>3.执行格式化命令</p>\n</blockquote>\n<blockquote>\n<p><strong>为什么不能一直 格式化NameNode</strong></p>\n<p>格式化NameNode，会产生新的集群Id,导致NameNode和DataNode的集群Id不一致，集群找不到以往的数据，所以，，格式化NameNode时，一定要先删除data数据和log日志，然后再格式化NameNode。</p>\n</blockquote>\n<p><img src=\"/post/2023/Hadoop/image-20200822094801817.png\" alt=\"image-20200822094801817\"></p>\n<h4 id=\"启动YARN并运行MapReduce程序\"><a href=\"#启动YARN并运行MapReduce程序\" class=\"headerlink\" title=\"启动YARN并运行MapReduce程序\"></a>启动YARN并运行MapReduce程序</h4><h5 id=\"1-分析-1\"><a href=\"#1-分析-1\" class=\"headerlink\" title=\"1.分析\"></a>1.分析</h5><p>（1）配置集群在YARN上运行MR<br>（2）启动、测试集群增、删、查<br>（3）在YARN上执行WordCount案例</p>\n<h5 id=\"2-执行步骤-1\"><a href=\"#2-执行步骤-1\" class=\"headerlink\" title=\"2.执行步骤\"></a>2.执行步骤</h5><h6 id=\"（1）配置集群-1\"><a href=\"#（1）配置集群-1\" class=\"headerlink\" title=\"（1）配置集群\"></a>（1）配置集群</h6><p>配置<code>etc/hadoop/mapred-site.xml</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  \t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- MR应用程序的类路径 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.application.classpath<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置<code>etc/hadoop/yarn-site.xml</code>:</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指Reduce 获取数据的方式--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--yarn运行的环境--&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.env-whitelist<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span> \t\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">&lt;!--指定YARN的ResourceManager的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<p>启动报错</p>\n<p><img src=\"/post/2023/Hadoop/image-20200822100056038.png\" alt=\"image-20200822100056038\"></p>\n<p>配置<code>etc/hadoop/hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2023/Hadoop/image-20200822102024933.png\" alt=\"image-20200822102024933\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822102108817.png\" alt=\"image-20200822102108817\"></p>\n<p>浏览ResourceManager的web界面；默认情况下，它位于：</p>\n<p>ResourceManager - <code>http://localhost:8088/</code></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822111645219.png\" alt=\"image-20200822111645219\"></p>\n<p>运行一个job</p>\n<ul>\n<li>拷贝文件到hadoop 目录</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -put wcinput/wc.input  /user/wry/wcinput</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop dfs -<span class=\"built_in\">ls</span> -r /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h4 id=\"配置历史服务器\"><a href=\"#配置历史服务器\" class=\"headerlink\" title=\"配置历史服务器\"></a>配置历史服务器</h4><p>为了查看程序的历史运行情况，需要配置一下历史服务器。具体配置步骤如下：</p>\n<ul>\n<li>配置<code>etc/hadoop/mapred-site.xml</code></li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--历史服务器端地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:10020<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--历史服务器web端地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>0.0.0.0:19888<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>启动历史服务器</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/mr-jobhistory-daemon.sh starthistoryserver</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看历史服务器是否启动</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ jps</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看JobHistory</p>\n<p>JobHistory -   <a href=\"http://hadoop101:19888/jobhistory\">http://hadoop101:19888/jobhistory</a></p>\n</li>\n</ul>\n<h4 id=\"配置日志的聚集\"><a href=\"#配置日志的聚集\" class=\"headerlink\" title=\"配置日志的聚集\"></a>配置日志的聚集</h4><p>日志聚集概念：应用运行完成以后，将程序运行日志信息上传到HDFS系统上。<br>日志聚集功能好处：可以方便的查看到程序运行详情，方便开发调试。</p>\n<p>注意：开启日志聚集功能，需要重新启动NodeManager、ResourceManager和<br>HistoryManager。</p>\n<p>开启日志聚集功能具体步骤如下：</p>\n<ul>\n<li><p>配置 <code>etc/hadoop/yarn-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--日志聚集功能使能--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.log-aggregation-enable<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>true<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--日志保留时间设置7天--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.log-aggregation.retain-seconds<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>604800<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>关闭NodeManager、ResourceManager和HistoryManager</p>\n<ul>\n<li>关闭所有 包括 NodeManager、ResourceManager、Name Node、DataNode</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-all.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭  NodeManager、ResourceManager</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭  Name Node、DataNode</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/stop-dfs.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>关闭  HistoryManager</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/mr-jobhistory-daemon.sh stop historyserver </span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动NodeManager、ResourceManager和HistoryManager</p>\n</li>\n<li><p>删除HDFS上已经存在的输出文件</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop dfs -<span class=\"built_in\">rm</span> -f -r /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>执行WordCount程序</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.2.1.jar wordcount /user/wry/wcinput /user/wry/wcoutput</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看日志，如图所示</p>\n<p><img src=\"/post/2023/Hadoop/image-20200822140954237.png\" alt=\"image-20200822140954237\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822141013068.png\" alt=\"image-20200822141013068\"></p>\n<p><img src=\"/post/2023/Hadoop/image-20200822141028970.png\" alt=\"image-20200822141028970\"></p>\n</li>\n</ul>\n<h4 id=\"配置文件说明\"><a href=\"#配置文件说明\" class=\"headerlink\" title=\"配置文件说明\"></a>配置文件说明</h4><p>Hadoop配置文件分两类：默认配置文件和自定义配置文件，只有用户想修改某一默认<br>配置值时，才需要修改自定义配置文件，更改相应属性值。</p>\n<h5 id=\"（1）默认配置文件：\"><a href=\"#（1）默认配置文件：\" class=\"headerlink\" title=\"（1）默认配置文件：\"></a>（1）默认配置文件：</h5><p>要获取的默认文件文件存放在Hadoop的jar包中的位置</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">配置文件名称</th>\n<th>默认配置所在的文件路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">core-default.xml</td>\n<td>hadoop-common-2.7.2.jar&#x2F;core-default.xml</td>\n</tr>\n<tr>\n<td align=\"left\">hdfs-default.xml</td>\n<td>hadoop-hdfs-2.7.2.jar&#x2F;hdfs-default.xml</td>\n</tr>\n<tr>\n<td align=\"left\">yarn-default.xml</td>\n<td>hadoop-yarn-common-2.7.2.jar&#x2F;yarn-default.xml</td>\n</tr>\n<tr>\n<td align=\"left\">mapred-default.xml</td>\n<td>hadoop-mapreduce-client-core-2.7.2.jar&#x2F;mapred-default.xml</td>\n</tr>\n</tbody></table>\n<h5 id=\"（2）自定义配置文件：\"><a href=\"#（2）自定义配置文件：\" class=\"headerlink\" title=\"（2）自定义配置文件：\"></a>（2）自定义配置文件：</h5><p>core-site.xml、hdfs-site.xml、yarn-site.xml、mapred-site.xml四个配置文件存放在<br>$HADOOP_HOME&#x2F;etc&#x2F;hadoop这个路径上，用户可以根据项目需求重新进行修改配置。</p>\n<h3 id=\"完全分布式运行模式（开发重点）\"><a href=\"#完全分布式运行模式（开发重点）\" class=\"headerlink\" title=\"完全分布式运行模式（开发重点）\"></a>完全分布式运行模式（开发重点）</h3><h4 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h4><p>1）准备3台客户机（关闭防火墙、静态ip、主机名称）<br>2）安装JDK<br>3）配置环境变量<br>4）安装Hadoop<br>5）配置环境变量<br>6）配置集群<br>7）单点启动<br>8）配置ssh<br>9）群起并测试集群</p>\n<h4 id=\"虚拟机准备\"><a href=\"#虚拟机准备\" class=\"headerlink\" title=\"虚拟机准备\"></a>虚拟机准备</h4><h5 id=\"（1）改IP地址\"><a href=\"#（1）改IP地址\" class=\"headerlink\" title=\"（1）改IP地址\"></a>（1）改IP地址</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/sysconfig/network-scripts/ifcfg-ens33 </span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static\t\t<span class=\"comment\">#改为static静态</span></span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=67b4d72d-1ff5-4e3e-a089-e1579700eba8</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span>\t\t\t\t<span class=\"comment\">#改为yes</span></span><br><span class=\"line\"></span><br><span class=\"line\">IPADDR=192.168.100.102  <span class=\"comment\"># ip地址</span></span><br><span class=\"line\">NETMASK=255.255.255.0   <span class=\"comment\">#子网掩码</span></span><br><span class=\"line\">GATEWAY=192.168.100.1\t<span class=\"comment\">#网关</span></span><br><span class=\"line\">DNS1=8.8.8.8\t\t\t<span class=\"comment\">#DNS</span></span><br><span class=\"line\">DNS2=223.6.6.6</span><br><span class=\"line\"></span><br><span class=\"line\">PREFIX=24</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（2）改主机名\"><a href=\"#（2）改主机名\" class=\"headerlink\" title=\"（2）改主机名\"></a>（2）改主机名</h5><p>不配置后期的数据节点可能会找不到。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/hotos</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4</span><br><span class=\"line\">::1         localhost localhost.localdomain localhost6 localhost6.localdomain6</span><br><span class=\"line\">192.168.100.102 hadoop102</span><br><span class=\"line\">192.168.100.103 hadoop103</span><br><span class=\"line\">192.168.100.104 hadoop104</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"编写集群分发脚本xsync\"><a href=\"#编写集群分发脚本xsync\" class=\"headerlink\" title=\"编写集群分发脚本xsync\"></a>编写集群分发脚本xsync</h4><h5 id=\"1-scp（securecopy）安全拷贝\"><a href=\"#1-scp（securecopy）安全拷贝\" class=\"headerlink\" title=\"1.scp（securecopy）安全拷贝\"></a>1.scp（securecopy）安全拷贝</h5><h6 id=\"（1）scp定义：\"><a href=\"#（1）scp定义：\" class=\"headerlink\" title=\"（1）scp定义：\"></a>（1）scp定义：</h6><p><code>scp</code>可以实现服务器与服务器之间的数据拷贝。（fromserver1toserver2）</p>\n<h6 id=\"（2）基本语法\"><a href=\"#（2）基本语法\" class=\"headerlink\" title=\"（2）基本语法\"></a>（2）基本语法</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scp\t\t-r  \t<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span>\t\t<span class=\"variable\">$user</span>@hadoop<span class=\"variable\">$host</span>:<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span></span><br><span class=\"line\">命令\t  递归\t 要拷贝的文件路径\t   名称目的用户@主机:目的路径/名称</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（3）案例实操\"><a href=\"#（3）案例实操\" class=\"headerlink\" title=\"（3）案例实操\"></a>（3）案例实操</h6><p>（a）在<code>192.168.100.101</code>上，将<code>192.168.100.101</code>中<code>/usr/local/software</code>目录下的软件拷贝到<code>192.168.100.102</code>上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp -r /usr/local/software/*  root@192.168.100.102:/usr/local/software</span><br></pre></td></tr></table></figure>\n\n<p>（b）在<code>192.168.100.103</code>上，将<code>192.168.100.101</code>服务器上的<code>/usr/local/software</code>目录下的软件拷贝到<br><code>192.168.100.103</code>上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp -r root@192.168.100.101:/usr/local/software/*  /usr/local/software/</span><br></pre></td></tr></table></figure>\n\n<p>（c）在<code>192.168.100.103</code>上操作将<code>192.168.100.101</code>中<code>/usr/local/software</code>目录下的软件拷贝到<br><code>192.168.100.104</code>上。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ scp -r root@192.168.100.101:/usr/local/software/*  root@192.168.100.104:/usr/local/software/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-rsync远程同步工具\"><a href=\"#2-rsync远程同步工具\" class=\"headerlink\" title=\"2.rsync远程同步工具\"></a>2.rsync远程同步工具</h5><p><code>rsync</code>主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p>\n<p><strong><code>rsync</code>和<code>scp</code>区别：</strong></p>\n<p>用<code>rsync</code>做文件的复制要比<code>scp</code>的速度快，<code>rsync</code>只对差异文件做更新。<code>scp</code>是把所有文件都复制过去。</p>\n<h6 id=\"（1）基本语法\"><a href=\"#（1）基本语法\" class=\"headerlink\" title=\"（1）基本语法\"></a>（1）基本语法</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync\t-rvl\t\t<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span>\t\t\t<span class=\"variable\">$user</span>@hadoop<span class=\"variable\">$host</span>:<span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span></span><br><span class=\"line\">命令\t  选项参数\t\t要拷贝的文件路径/名称\t\t目的用户@主机:目的路径/名称</span><br></pre></td></tr></table></figure>\n\n<p>选项参数说明</p>\n<table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-r</td>\n<td>递归</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>显示复制过程</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>拷贝符号连接</td>\n</tr>\n</tbody></table>\n<h6 id=\"（2）案例实操\"><a href=\"#（2）案例实操\" class=\"headerlink\" title=\"（2）案例实操\"></a>（2）案例实操</h6><p>（a）把<code>192.168.100.101</code>机器上的<code>/usr/local/software</code>目录同步到<code>192.168.100.102</code>服务器的root用户<br>下的<code>/usr/local/software</code>目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ rsync  -rvl /usr/local/software/*  root@192.168.100.102:/usr/local/software/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-xsync集群分发脚本\"><a href=\"#3-xsync集群分发脚本\" class=\"headerlink\" title=\"3.xsync集群分发脚本\"></a>3.xsync集群分发脚本</h5><h6 id=\"（1）需求\"><a href=\"#（1）需求\" class=\"headerlink\" title=\"（1）需求\"></a>（1）需求</h6><p>循环复制文件到所有节点的相同目录下</p>\n<h6 id=\"（2）需求分析\"><a href=\"#（2）需求分析\" class=\"headerlink\" title=\"（2）需求分析\"></a>（2）需求分析</h6><p>（a）rsync命令原始拷贝：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -rvl  /usr/local/program/*  root@192.168.100.103:/usr/local/program/</span><br></pre></td></tr></table></figure>\n\n<p>（b）期望脚本：<br>xsync要同步的文件名称<br>（c）说明：在<code>/home/&lt;用户名&gt;/bin</code>这个目录下存放的脚本，root用户可以在系统任何地方直接执行。</p>\n<h6 id=\"（3）脚本实现\"><a href=\"#（3）脚本实现\" class=\"headerlink\" title=\"（3）脚本实现\"></a>（3）脚本实现</h6><p>（a）在<code>/home/&lt;用户名&gt;/bin</code>目录下创建bin目录，并在bin目录下xsync创建文件，文件内容如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /home/&lt;用户名&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">mkdir</span> bin</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> bin</span><br><span class=\"line\">$ vim xsync</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"comment\">#1获取输入参数个数，如果没有参数，直接退出</span></span><br><span class=\"line\">pcount=<span class=\"variable\">$#</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>((pcount==<span class=\"number\">0</span>));<span class=\"keyword\">then</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> noargs;</span><br><span class=\"line\"><span class=\"built_in\">exit</span>;</span><br><span class=\"line\"><span class=\"keyword\">fi</span></span><br><span class=\"line\"><span class=\"comment\">#2获取文件名称</span></span><br><span class=\"line\">p1=<span class=\"variable\">$1</span></span><br><span class=\"line\">fname=`<span class=\"built_in\">basename</span> <span class=\"variable\">$p1</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span>  fname=<span class=\"variable\">$fname</span></span><br><span class=\"line\"><span class=\"comment\">#3获取上级目录到绝对路径</span></span><br><span class=\"line\">pdir=`<span class=\"built_in\">cd</span> -P $(<span class=\"built_in\">dirname</span> <span class=\"variable\">$p1</span>);<span class=\"built_in\">pwd</span>`</span><br><span class=\"line\"><span class=\"built_in\">echo</span> pdir=<span class=\"variable\">$pdir</span></span><br><span class=\"line\"><span class=\"comment\">#4获取当前用户名称</span></span><br><span class=\"line\">user=`<span class=\"built_in\">whoami</span>`</span><br><span class=\"line\"><span class=\"comment\">#5循环</span></span><br><span class=\"line\"><span class=\"keyword\">for</span>((host=<span class=\"number\">103</span>;host&lt;<span class=\"number\">105</span>;host++));<span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> -------------------192.168.100.<span class=\"variable\">$host</span>--------------</span><br><span class=\"line\">rsync -rvl <span class=\"variable\">$pdir</span>/<span class=\"variable\">$fname</span>  <span class=\"variable\">$user</span>@192.168.100.<span class=\"variable\">$host</span>:<span class=\"variable\">$pdir</span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<p>（b）修改脚本xsync具有执行权限</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">chmod</span> 777 xsync</span><br></pre></td></tr></table></figure>\n\n<p>（c）调用脚本形式：xsync文件名称</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xsync  /home/&lt;用户名&gt;/bin</span><br></pre></td></tr></table></figure>\n\n\n\n\n<blockquote>\n<p><strong>注意</strong>：</p>\n<p>如果将<code>xsync</code>放到<code>/home/&lt;用户名&gt;/bin</code>目录下仍然不能实现全局使用，</p>\n<p>可以将<code>xsync</code>移动到<code>/usr/local/bin</code>目录下。</p>\n</blockquote>\n<h4 id=\"集群配置\"><a href=\"#集群配置\" class=\"headerlink\" title=\"集群配置\"></a>集群配置</h4><h5 id=\"1-集群部署规化\"><a href=\"#1-集群部署规化\" class=\"headerlink\" title=\"1.集群部署规化\"></a>1.集群部署规化</h5><table>\n<thead>\n<tr>\n<th></th>\n<th align=\"left\">192.168.100.102 -hadoop102</th>\n<th>192.168.100.103-hadoop103</th>\n<th>192.168.100.104-hadoop104</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>HDFS</td>\n<td align=\"left\">NameNode <br /> DataNode</td>\n<td><br />DataNode</td>\n<td>SecondaryNameNode <br />DataNode</td>\n</tr>\n<tr>\n<td>YARN</td>\n<td align=\"left\"><br />NodeManage</td>\n<td>ResourceManage  <br />NodeManage</td>\n<td><br />NodeManage</td>\n</tr>\n</tbody></table>\n<p>机器改IP </p>\n<h5 id=\"2-配置集群\"><a href=\"#2-配置集群\" class=\"headerlink\" title=\"2.配置集群\"></a>2.配置集群</h5><h6 id=\"（1）核心配置文件\"><a href=\"#（1）核心配置文件\" class=\"headerlink\" title=\"（1）核心配置文件\"></a>（1）核心配置文件</h6><p>在<code>192.168.100.102</code> 上</p>\n<p>配置<code>etc/hadoop/core-site.xml</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /usr/local/program/hadoop3.2.1</span><br><span class=\"line\">$ vim etc/hadoop/core-site.xml</span><br></pre></td></tr></table></figure>\n\n<p>在该文件中编写如下配置</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定HDFS中NameNode的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>fs.defaultFS<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>hdfs://192.168.100.102:9000<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定Hadoop运行时产生文件的存储目录--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>hadoop.tmp.dir<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-$&#123;user.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）HDFS配置文件\"><a href=\"#（2）HDFS配置文件\" class=\"headerlink\" title=\"（2）HDFS配置文件\"></a>（2）HDFS配置文件</h6><p>配置<code>etc/hadoop/hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/program/jdk1.8 </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_DATANODE_USER=root  </span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_NAMENODE_USER=root  </span><br><span class=\"line\"><span class=\"built_in\">export</span> HDFS_SECONDARYNAMENODE_USER=root </span><br></pre></td></tr></table></figure>\n\n<p>配置<code>etc/hadoop/hdfs-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.replication<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定Hadoop辅助名称节点主机配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.namenode.secondary.http-address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>192.168.100.104:50090<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定HadoopNameNode的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>dfs.http.address<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>192.168.100.102:9870<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（3）YARN配置文件\"><a href=\"#（3）YARN配置文件\" class=\"headerlink\" title=\"（3）YARN配置文件\"></a>（3）YARN配置文件</h6><p>一般在 shell中输入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hadoop  classpath</span><br></pre></td></tr></table></figure>\n\n<p>然后 这些输出 直接 粘贴到 yarn 的配置文件里 yarn-site.xml的属性 <name>yarn.application.classpath</name>赋值</p>\n<p>配置<code>etc/hadoop/hadoop-env.sh</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> YARN_RESOURCEMANAGER_USER=root</span><br><span class=\"line\"><span class=\"built_in\">export</span> YARN_NODEMANAGER_USER=root</span><br></pre></td></tr></table></figure>\n\n<p>配置<code>etc/hadoop/yarn-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--用于指定执行MapReduce作业的运行时框架。可以是local、classic 或yarn之一 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"comment\">&lt;!-- MR应用程序的类路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.application.classpath<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>/usr/local/program/hadoop-3.2.1/etc/hadoop:/usr/local/program/hadoop-3.2.1/share/hadoop/common/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/common/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/hdfs/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/mapreduce/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/lib/*:/usr/local/program/hadoop-3.2.1/share/hadoop/yarn/*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!--指定YARN的ResourceManager的地址--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.resourcemanager.hostname<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>192.168.100.103<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>mapreduce_shuffle<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>yarn.nodemanager.aux-services.mapreduce.shuffle.class<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>org.apache.hadoop.mapred.ShuffleHandler<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（4）MapReduce配置文件\"><a href=\"#（4）MapReduce配置文件\" class=\"headerlink\" title=\"（4）MapReduce配置文件\"></a>（4）MapReduce配置文件</h6><p>配置<code>etc/hadoop/mapred-site.xml</code></p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--指定MR运行在Yarn上--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.framework.name<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>yarn<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- MR应用程序的类路径 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">name</span>&gt;</span>mapreduce.application.classpath<span class=\"tag\">&lt;/<span class=\"name\">name</span>&gt;</span>     <span class=\"tag\">&lt;<span class=\"name\">value</span>&gt;</span>$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/*:$HADOOP_MAPRED_HOME/share/hadoop/mapreduce/lib/*<span class=\"tag\">&lt;/<span class=\"name\">value</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"3-在集群上分发配置好的Hadoop配置文件\"><a href=\"#3-在集群上分发配置好的Hadoop配置文件\" class=\"headerlink\" title=\"3.在集群上分发配置好的Hadoop配置文件\"></a>3.在集群上分发配置好的Hadoop配置文件</h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ xsync ./etc/hadoop/</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"4-查看文件分发情况\"><a href=\"#4-查看文件分发情况\" class=\"headerlink\" title=\"4.查看文件分发情况\"></a>4.查看文件分发情况</h5><h4 id=\"集群单点启动\"><a href=\"#集群单点启动\" class=\"headerlink\" title=\"集群单点启动\"></a>集群单点启动</h4><p>（1）如果集群是第一次启动，需要格式化<code>NameNode</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$  bin/hdfs namenode -formart</span><br></pre></td></tr></table></figure>\n\n<p>（2）在<code>192.168.100.102</code>上启动<code>NameNode</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/hadoop-daemon.sh  start namenode</span><br></pre></td></tr></table></figure>\n\n<p>（3）在<code>192.168.100.102</code>,<code>192.168.100.103</code>以及<code>192.168.100.104</code>上分别启动<code>DataNode</code></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/hadoop-daemon.sh  start datanode</span><br></pre></td></tr></table></figure>\n\n<p>（4）思考：每次都一个一个节点启动，如果节点数增加到1000个怎么办？<br>            早上来了开始一个一个节点启动，到晚上下班刚好完成，下班？</p>\n<h4 id=\"SSH无密登录配置\"><a href=\"#SSH无密登录配置\" class=\"headerlink\" title=\"SSH无密登录配置\"></a>SSH无密登录配置</h4><h5 id=\"1-配置ssh\"><a href=\"#1-配置ssh\" class=\"headerlink\" title=\"1.配置ssh\"></a>1.配置ssh</h5><p>（1）基本语法<br>            ssh另一台电脑的ip地址<br>（2）ssh连接时出现Hostkeyverificationfailed的解决方法</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh  192.168.1.103</span><br><span class=\"line\">Theauthenticityofhost<span class=\"string\">&#x27;192.168.1.103(192.168.1.103)&#x27;</span>can<span class=\"string\">&#x27;t</span></span><br><span class=\"line\"><span class=\"string\">beestablished.</span></span><br><span class=\"line\"><span class=\"string\">RSAkeyfingerprintis</span></span><br><span class=\"line\"><span class=\"string\">cf:1e:de:d7:d0:4c:2d:98:60:b4:fd:ae:b1:2d:ad:06.</span></span><br><span class=\"line\"><span class=\"string\">Areyousureyouwanttocontinueconnecting(yes/no)?</span></span><br><span class=\"line\"><span class=\"string\">Hostkeyverificationfailed.</span></span><br></pre></td></tr></table></figure>\n\n<p>（3）解决方案如下：直接输入yes</p>\n<h5 id=\"2-无密钥配置\"><a href=\"#2-无密钥配置\" class=\"headerlink\" title=\"2.无密钥配置\"></a>2.无密钥配置</h5><p>（1）免密登录原理</p>\n<p><img src=\"/post/2023/Hadoop/image-20200823180537869.png\" alt=\"image-20200823180537869\"></p>\n<p>（2）<code>192.168.100.102</code>生成公钥和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">cd</span> /root/.ssh</span><br><span class=\"line\">$ ssh-keygen -t rsa</span><br></pre></td></tr></table></figure>\n\n<p>然后敲（三个回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</p>\n<p>（3）将公钥拷贝到要免密登录的目标机器上</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ssh-copy-id 192.168.100.102</span><br><span class=\"line\">$ ssh-copy-id 192.168.100.103</span><br><span class=\"line\">$ ssh-copy-id 192.168.100.104</span><br></pre></td></tr></table></figure>\n\n<p>（4）<code>192.168.100.103</code>生成公钥和私钥,进行公钥拷贝到要免密登录的目标机器上</p>\n<h5 id=\"3-ssh文件夹下（-ssh）的文件功能解释\"><a href=\"#3-ssh文件夹下（-ssh）的文件功能解释\" class=\"headerlink\" title=\"3..ssh文件夹下（~&#x2F;.ssh）的文件功能解释\"></a>3.<code>.ssh</code>文件夹下（~&#x2F;.ssh）的文件功能解释</h5><table>\n<thead>\n<tr>\n<th>known_hosts</th>\n<th>记录ssh访问过计算机的公钥(publickey)</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>id_rsa</td>\n<td>生成的私钥</td>\n</tr>\n<tr>\n<td>id_rsa.pub</td>\n<td>生成的公钥</td>\n</tr>\n<tr>\n<td>authorized_keys</td>\n<td>存放授权过得无密登录服务器公钥</td>\n</tr>\n</tbody></table>\n<h4 id=\"群起集群\"><a href=\"#群起集群\" class=\"headerlink\" title=\"群起集群\"></a>群起集群</h4><h5 id=\"1-配置etc-hadoop-workers\"><a href=\"#1-配置etc-hadoop-workers\" class=\"headerlink\" title=\"1.配置etc/hadoop/workers\"></a>1.配置<code>etc/hadoop/workers</code></h5><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim etc/hadoop/workers </span><br></pre></td></tr></table></figure>\n\n<p>添加以下节点</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">192.168.100.102</span><br><span class=\"line\">192.168.100.103</span><br><span class=\"line\">192.168.100.104</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<h4 id=\"注意：\"><a href=\"#注意：\" class=\"headerlink\" title=\"注意：\"></a>注意：</h4><p>千万不要有多余的空格</p>\n</blockquote>\n<h5 id=\"2-启动集群\"><a href=\"#2-启动集群\" class=\"headerlink\" title=\"2.启动集群\"></a>2.启动集群</h5><h6 id=\"（1）如果集群是第一次启动\"><a href=\"#（1）如果集群是第一次启动\" class=\"headerlink\" title=\"（1）如果集群是第一次启动\"></a>（1）如果集群是第一次启动</h6><p>需要格式化NameNode（注意格式化之前，一定要先停止上次启动的所有namenode和datanode进程，然后再删除data和log数据）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs namenode -format</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）启动HDFS\"><a href=\"#（2）启动HDFS\" class=\"headerlink\" title=\"（2）启动HDFS\"></a>（2）启动HDFS</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-dfs.sh</span><br></pre></td></tr></table></figure>\n\n<p><code>jps</code>查看是否启动</p>\n<h6 id=\"（3）启动YARN\"><a href=\"#（3）启动YARN\" class=\"headerlink\" title=\"（3）启动YARN\"></a>（3）启动<code>YARN</code></h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（3）Web端查看SecondaryNameNode\"><a href=\"#（3）Web端查看SecondaryNameNode\" class=\"headerlink\" title=\"（3）Web端查看SecondaryNameNode\"></a>（3）Web端查看<code>SecondaryNameNode</code></h6><figure class=\"highlight http\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://192.168.100.102:9870/</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（4）查看文件系统的基本数据\"><a href=\"#（4）查看文件系统的基本数据\" class=\"headerlink\" title=\"（4）查看文件系统的基本数据\"></a>（4）查看文件系统的基本数据</h6> <figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfsadmin -report</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>注意：</p>\n<p>NameNode和ResourceManger如果不是同一台机器，不能在NameNode上启动YARN，应该在ResouceManager所在的机器上启动YARN。</p>\n</blockquote>\n<h5 id=\"3-集群基本测试\"><a href=\"#3-集群基本测试\" class=\"headerlink\" title=\"3.集群基本测试\"></a>3.集群基本测试</h5><h6 id=\"（1）上传文件到集群\"><a href=\"#（1）上传文件到集群\" class=\"headerlink\" title=\"（1）上传文件到集群\"></a>（1）上传文件到集群</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ bin/hdfs dfs -put  ./wcinput/wc.input  /user/wry/input</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）上传文件后查看文件存放在什么位置\"><a href=\"#（2）上传文件后查看文件存放在什么位置\" class=\"headerlink\" title=\"（2）上传文件后查看文件存放在什么位置\"></a>（2）上传文件后查看文件存放在什么位置</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">pwd</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/program/hadoop-3.2.1/data/tmp/hadoop-root/dfs/data/current/BP-719430212-127.0.0.1-1598525636602/current/finalized/subdir0/subdir0</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"集群启动-停止方式总结\"><a href=\"#集群启动-停止方式总结\" class=\"headerlink\" title=\"集群启动&#x2F;停止方式总结\"></a>集群启动&#x2F;停止方式总结</h4><h5 id=\"1-各个服务组件逐一启动-停止\"><a href=\"#1-各个服务组件逐一启动-停止\" class=\"headerlink\" title=\"1.各个服务组件逐一启动&#x2F;停止\"></a>1.各个服务组件逐一启动&#x2F;停止</h5><h6 id=\"（1）分别启动-停止HDFS组件\"><a href=\"#（1）分别启动-停止HDFS组件\" class=\"headerlink\" title=\"（1）分别启动&#x2F;停止HDFS组件\"></a>（1）分别启动&#x2F;停止HDFS组件</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/hadoop-daemon.sh start/stop  namenode/datanode/secondarynamenode</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）启动-停止YARN\"><a href=\"#（2）启动-停止YARN\" class=\"headerlink\" title=\"（2）启动&#x2F;停止YARN\"></a>（2）启动&#x2F;停止YARN</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/yarn-daemon.sh  start/stop  resourcemanager/nodemanager</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"2-各个模块分开启动-停止（配置ssh是前提）常用\"><a href=\"#2-各个模块分开启动-停止（配置ssh是前提）常用\" class=\"headerlink\" title=\"2.各个模块分开启动&#x2F;停止（配置ssh是前提）常用\"></a>2.各个模块分开启动&#x2F;停止（配置ssh是前提）常用</h5><h6 id=\"（1）整体启动-停止HDFS\"><a href=\"#（1）整体启动-停止HDFS\" class=\"headerlink\" title=\"（1）整体启动&#x2F;停止HDFS\"></a>（1）整体启动&#x2F;停止HDFS</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-dfs.sh/stop-dfs.sh</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"（2）整体启动-停止YARN\"><a href=\"#（2）整体启动-停止YARN\" class=\"headerlink\" title=\"（2）整体启动&#x2F;停止YARN\"></a>（2）整体启动&#x2F;停止YARN</h6><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sbin/start-yarn.sh/stop-yarn.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"crontab定时任务设置\"><a href=\"#crontab定时任务设置\" class=\"headerlink\" title=\"crontab定时任务设置\"></a>crontab定时任务设置</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><p>crontab [选项]</p>\n<h4 id=\"选项说明\"><a href=\"#选项说明\" class=\"headerlink\" title=\"选项说明\"></a>选项说明</h4><table>\n<thead>\n<tr>\n<th>选项</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-e</td>\n<td>编辑crontab 定时任务</td>\n</tr>\n<tr>\n<td>-l</td>\n<td>查询crontab任务</td>\n</tr>\n<tr>\n<td>-r</td>\n<td>删除当前用户所有的crontab 任务</td>\n</tr>\n</tbody></table>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ crontab -e</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"（1）进入crontab编辑界面。会打开vim-编辑你的工作\"><a href=\"#（1）进入crontab编辑界面。会打开vim-编辑你的工作\" class=\"headerlink\" title=\"（1）进入crontab编辑界面。会打开vim 编辑你的工作\"></a>（1）进入crontab编辑界面。会打开vim 编辑你的工作</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* * * * *  执行的任务</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>项目</th>\n<th>含义</th>\n<th>范围</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>第一个“*”</td>\n<td>一小时当中的第几分钟</td>\n<td>0-59</td>\n</tr>\n<tr>\n<td>第二个“*”</td>\n<td>一天当中的第几小时</td>\n<td>0-23</td>\n</tr>\n<tr>\n<td>第三个“*”</td>\n<td>一月当中的第几天</td>\n<td>1-31</td>\n</tr>\n<tr>\n<td>第四个“*”</td>\n<td>一年当中的第几月</td>\n<td>1-12</td>\n</tr>\n<tr>\n<td>第五个“*”</td>\n<td>一周当中的星期几</td>\n<td>0-7（0和7都代表星期日）</td>\n</tr>\n</tbody></table>\n<h5 id=\"（2）特殊符合\"><a href=\"#（2）特殊符合\" class=\"headerlink\" title=\"（2）特殊符合\"></a>（2）特殊符合</h5><table>\n<thead>\n<tr>\n<th>特殊符合</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>*</td>\n<td>代表任何时间。比如第一个“*”，就代表一小时中的每分钟都有执行一次</td>\n</tr>\n<tr>\n<td>，</td>\n<td>代表不连需的时间。比如”0 8,12,16 * * *” 命令，就代表在每天的8点0分，12点0分，16点0分都执行一次</td>\n</tr>\n<tr>\n<td>-</td>\n<td>代表连续的时间范围。比如”0 5 * * 1-6” ,就代表在周一到周六的凌晨5点0分执行命令</td>\n</tr>\n<tr>\n<td>*&#x2F;n</td>\n<td>代表每个多久执行一次。比如”*&#x2F;10 * * * *”,就代表没10分钟执行一次命令</td>\n</tr>\n</tbody></table>\n<h5 id=\"（3）特殊特定时间执行命令\"><a href=\"#（3）特殊特定时间执行命令\" class=\"headerlink\" title=\"（3）特殊特定时间执行命令\"></a>（3）特殊特定时间执行命令</h5><table>\n<thead>\n<tr>\n<th>时间</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>45 22 * * *</td>\n<td>在22点45 分执行命令</td>\n</tr>\n<tr>\n<td>0 17 * * 1</td>\n<td>每周一的17点0分执行命令</td>\n</tr>\n<tr>\n<td>0 5 1,15 * *</td>\n<td>每月1号和15号的凌晨5点0分执行命令</td>\n</tr>\n<tr>\n<td>40 4 * * 1-5</td>\n<td>每周一到周五的凌晨4点40 分执行命令</td>\n</tr>\n<tr>\n<td>*&#x2F;10 4 * * *</td>\n<td>每天的凌晨4点，没隔10分钟执行一次命令</td>\n</tr>\n<tr>\n<td>0 0 1,15 * 1</td>\n<td>每月1号和15号，每周一的0点0分都会执行命令。注意：星期几和几号最好不要同时出现，因为他们定义的都是天。</td>\n</tr>\n</tbody></table>\n<h5 id=\"（4）案例实操\"><a href=\"#（4）案例实操\" class=\"headerlink\" title=\"（4）案例实操\"></a>（4）案例实操</h5><ul>\n<li><p>每隔1分钟，向<code>/root/bailongma.txt</code>文件中添加一个11 的数字。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /bin/echo <span class=\"string\">&quot;11&quot;</span> &gt;&gt;/root/bailongma.txt</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"集群时间同步\"><a href=\"#集群时间同步\" class=\"headerlink\" title=\"集群时间同步\"></a>集群时间同步</h3><p>时间同步的方式：找一个机器，作为时间服务器，所有的机器与这台集群时间进行定时的同步，比如，每隔十分钟，同步一次时间。</p>\n<p><img src=\"/post/2023/Hadoop/image-20200829223326519.png\" alt=\"image-20200829223326519\"></p>\n<h2 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h2><h3 id=\"配置静态IP\"><a href=\"#配置静态IP\" class=\"headerlink\" title=\"配置静态IP\"></a>配置静态IP</h3><h4 id=\"第一步：修改VMnet配置\"><a href=\"#第一步：修改VMnet配置\" class=\"headerlink\" title=\"第一步：修改VMnet配置\"></a>第一步：修改VMnet配置</h4><p>在VMware里，依次点击”编辑“ - ”虚拟网络编辑器“，如下图，我选择的是NAT模式： 以下VMnet2为配置</p>\n<p><img src=\"https://img.jbzj.com/file_images/article/202001/2020011513342421.png\" alt=\"在这里插入图片描述\"></p>\n<p>其中子网ip随便写,子网掩码自己计算,如果不太熟悉就完全配置和我一样就行</p>\n<p>A类默认的子网掩码：255.0.0.0<br>B类默认的子网掩码：255.255.0.0<br>C类默认的子网掩码：255.255.255.0</p>\n<p>为了使用静态IP将: 使用本地DHCP服务将IP地址分配给虚拟机 取消(默认是选择状态)</p>\n<p>点击NAT设置</p>\n<p>将网关ip记住如下图,最后配置虚拟机ip文件所用</p>\n<p><img src=\"https://img.jbzj.com/file_images/article/202001/2020011513342422.png\" alt=\"Alt\"></p>\n<h4 id=\"第二步：进入虚拟机\"><a href=\"#第二步：进入虚拟机\" class=\"headerlink\" title=\"第二步：进入虚拟机\"></a>第二步：进入虚拟机</h4><p> 以root权限登陆centos8并编辑vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33这个文件，效果如下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE=Ethernet</span><br><span class=\"line\">PROXY_METHOD=none</span><br><span class=\"line\">BROWSER_ONLY=no</span><br><span class=\"line\">BOOTPROTO=static <span class=\"comment\">#注意设置为static静态</span></span><br><span class=\"line\">DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV4_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6INIT=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_AUTOCONF=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_DEFROUTE=<span class=\"built_in\">yes</span></span><br><span class=\"line\">IPV6_FAILURE_FATAL=no</span><br><span class=\"line\">IPV6_ADDR_GEN_MODE=stable-privacy</span><br><span class=\"line\">NAME=ens33</span><br><span class=\"line\">UUID=aa18fb34-fea8-4fff-83a4-1ebed631beff</span><br><span class=\"line\">DEVICE=ens33</span><br><span class=\"line\">ONBOOT=<span class=\"built_in\">yes</span> <span class=\"comment\">#这里如果为no的话就改为yes，表示网卡设备自动启动</span></span><br><span class=\"line\">GATEWAY=192.168.0.2 <span class=\"comment\">#这里的网关地址就是上一步获取到的那个网关地址</span></span><br><span class=\"line\">IPADDR=192.168.0.150 <span class=\"comment\">#再网关的范围内随意写</span></span><br><span class=\"line\">NETMASK=255.255.255.0 <span class=\"comment\">#子网掩码</span></span><br><span class=\"line\">DNS1=8.8.8.8 <span class=\"comment\">#DNS1这里用谷歌,</span></span><br><span class=\"line\">DNS2=223.6.6.6 <span class=\"comment\">#DNS2用阿里</span></span><br></pre></td></tr></table></figure>\n\n<p>然后 :wq保存退出</p>\n<h4 id=\"第三步-刷新网卡配置\"><a href=\"#第三步-刷新网卡配置\" class=\"headerlink\" title=\"第三步: 刷新网卡配置\"></a>第三步: 刷新网卡配置</h4><p>CentOS 8 使用 : nmcli c reload</p>\n<p>CentOS7 使用 &#x2F;etc&#x2F;init.d&#x2F;network restart</p>\n<p>如果不能上网直接使用<code>reboot</code> 命令重启</p>\n<h3 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h3><p>centos8</p>\n<h4 id=\"永久关闭防火墙\"><a href=\"#永久关闭防火墙\" class=\"headerlink\" title=\"永久关闭防火墙\"></a>永久关闭防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl <span class=\"built_in\">disable</span> firewalld</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查看防火墙\"><a href=\"#查看防火墙\" class=\"headerlink\" title=\"查看防火墙\"></a>查看防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl status firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"停止防火墙\"><a href=\"#停止防火墙\" class=\"headerlink\" title=\"停止防火墙\"></a>停止防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl stop firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"启用防火墙\"><a href=\"#启用防火墙\" class=\"headerlink\" title=\"启用防火墙\"></a>启用防火墙</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ systemctl start firewalld.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置JDK\"><a href=\"#配置JDK\" class=\"headerlink\" title=\"配置JDK\"></a>配置JDK</h3><h4 id=\"第一步：解压\"><a href=\"#第一步：解压\" class=\"headerlink\" title=\"第一步：解压\"></a>第一步：解压</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar -zxvf /usr/local/software/jdk1.8.231 -C /usr/local/program/</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第二步：配置环境变量\"><a href=\"#第二步：配置环境变量\" class=\"headerlink\" title=\"第二步：配置环境变量\"></a>第二步：配置环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/profile</span><br></pre></td></tr></table></figure>\n\n<p>在最后添加java 环境配置</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> JAVA_HOME=/usr/local/program/jdk1.8.231</span><br><span class=\"line\"><span class=\"built_in\">export</span> CLASS_PATH=.:<span class=\"variable\">$JAVA_HOME</span>/lib.tools.jar</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$JAVA_HOME</span>/bin</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"第三步：使配置生效\"><a href=\"#第三步：使配置生效\" class=\"headerlink\" title=\"第三步：使配置生效\"></a>第三步：使配置生效</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ <span class=\"built_in\">source</span> /etc/profile</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置SSH连接\"><a href=\"#配置SSH连接\" class=\"headerlink\" title=\"配置SSH连接\"></a>配置SSH连接</h3><h4 id=\"第一步：修改配置\"><a href=\"#第一步：修改配置\" class=\"headerlink\" title=\"第一步：修改配置\"></a>第一步：修改配置</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim /etc/ssh/sshd_config</span><br></pre></td></tr></table></figure>\n\n<p>打开 注释修改以下配置</p>\n<p>ClientAliveInterval 60</p>\n<p>表示每分钟发送一次, 然后客户端响应, 这样就保持长连接了</p>\n<p>ClientAliveCountMax 3 </p>\n<p>ClientAliveCountMax表示服务器发出请求后客户端没有响应的次数达到一定值, 就自动断开</p>\n<h4 id=\"第二步：重启服务\"><a href=\"#第二步：重启服务\" class=\"headerlink\" title=\"第二步：重启服务\"></a>第二步：重启服务</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ service sshd restart</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf /usr/local/software/hadoop-3.2.1.tar.gz  -C /usr/local/program/</span><br><span class=\"line\"></span><br><span class=\"line\">vim /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#hadoop 环境</span></span><br><span class=\"line\"><span class=\"built_in\">export</span> HADOOP_HOME=/usr/local/program/hadoop-3.2.1</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/bin</span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=<span class=\"variable\">$PATH</span>:<span class=\"variable\">$HADOOP_HOME</span>/sbin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">source</span> /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">hadoop version</span><br></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot使用docker部署加载外部配置文件","date":"2021-12-20T04:30:00.000Z","_content":"\n# SpringBoot使用docker部署加载外部配置文件\n\n## 修改pom.xml文件，把配置文件copy到镜像中\n```xml\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <executions>\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <dockerHost>http://192.168.1.230:2375</dockerHost>\n                <imageName>${project.artifactId}:${project.version}</imageName>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                    <!-- 把编译后输出路径下的配置文件拷贝到config下-->\n                    <resource>\n                        <targetPath>/config</targetPath>\n                        <directory>${project.build.outputDirectory}</directory>\n                        <includes>\n                            <include>*.*</include>\n                        </includes>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 1.在容器根目录运行jar\n\n### dockerfile\n\n```yaml\n# 该镜像需要依赖的基础镜像\nFROM anapsix/alpine-java:8_server-jre_unlimited\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD /ebbms-admin-1.0.0-SNAPSHOT.jar  /app.jar\n# 配置文件在jar包同级目录下的config文件（优先级最高），具体参考springboot配置优先级\nADD /config       /config\n# 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /app.jar'\n# 声明服务运行在8084端口\nEXPOSE 8084\n# 设置环境\nENV LANG='UTF-8'\nENV LC_ALL='zh_CN.UTF-8'\nENV LC_CTYPE='zh_CN.UTF-8'\n# 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\"]\n# 指定维护者的名字\nMAINTAINER wangruiyu\n```\n\n\n\n## 2.在容器中自定义目录运行jar\n**使用自定义路径：/usr/local/ebbms**\n\n设置docker的WORKDIR（工作目录）为自定义路径！\n\n**重点：设置工作目录**\n### dockerfile文件\n\n```yml\n# 该镜像需要依赖的基础镜像\nFROM anapsix/alpine-java:8_server-jre_unlimited\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD /ebbms-admin-1.0.0-SNAPSHOT.jar  /usr/local/ebbms/app.jar\nADD /config       /usr/local/ebbms/config\n# 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /usr/local/ebbms/app.jar'\n# 声明服务运行在8084端口\nEXPOSE 8084\n# 设置环境\nENV LANG='UTF-8'\nENV LC_ALL='zh_CN.UTF-8'\nENV LC_CTYPE='zh_CN.UTF-8'\n# 设置工作目录，不指定默认为根目录，会找不到jar\nWORKDIR /usr/local/ebbms\n# 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\"]\n# 指定维护者的名字\nMAINTAINER wangruiyu\n\n```\n\n\n\n## 3.在容器根目录运行jar，自定义路径存放配置\n**使用自定义路径：/usr/local/ebbms**\n\n在docker容器启动时运行jar包时，使用spring.config.location 指定配置文件路径即可！\n### dockerfile文件\n\n```yml\n# 该镜像需要依赖的基础镜像\nFROM anapsix/alpine-java:8_server-jre_unlimited\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD /ebbms-admin-1.0.0-SNAPSHOT.jar  /usr/local/ebbms/app.jar\nADD /config       /usr/local/ebbms/config\n# 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /usr/local/ebbms/app.jar'\n# 声明服务运行在8084端口\nEXPOSE 8084\n# 设置环境\nENV LANG='UTF-8'\nENV LC_ALL='zh_CN.UTF-8'\nENV LC_CTYPE='zh_CN.UTF-8'\n# 指定docker容器启动时运行jar包,使用spring.config.location 指定配置文件路径\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\",\"--spring.config.location=/usr/local/ebbms/config/application.yaml\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\"]\n# 指定维护者的名字\nMAINTAINER wangruiyu\n\n```\n\n","source":"_posts/2023/docker-springboot-config.md","raw":"---\ntitle: SpringBoot使用docker部署加载外部配置文件\ndate: 2021-12-20 12:30:00\ntags:\n - springboot\n - docker\n---\n\n# SpringBoot使用docker部署加载外部配置文件\n\n## 修改pom.xml文件，把配置文件copy到镜像中\n```xml\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-maven-plugin</artifactId>\n        </plugin>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <executions>\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <dockerHost>http://192.168.1.230:2375</dockerHost>\n                <imageName>${project.artifactId}:${project.version}</imageName>\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                    <!-- 把编译后输出路径下的配置文件拷贝到config下-->\n                    <resource>\n                        <targetPath>/config</targetPath>\n                        <directory>${project.build.outputDirectory}</directory>\n                        <includes>\n                            <include>*.*</include>\n                        </includes>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 1.在容器根目录运行jar\n\n### dockerfile\n\n```yaml\n# 该镜像需要依赖的基础镜像\nFROM anapsix/alpine-java:8_server-jre_unlimited\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD /ebbms-admin-1.0.0-SNAPSHOT.jar  /app.jar\n# 配置文件在jar包同级目录下的config文件（优先级最高），具体参考springboot配置优先级\nADD /config       /config\n# 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /app.jar'\n# 声明服务运行在8084端口\nEXPOSE 8084\n# 设置环境\nENV LANG='UTF-8'\nENV LC_ALL='zh_CN.UTF-8'\nENV LC_CTYPE='zh_CN.UTF-8'\n# 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\"]\n# 指定维护者的名字\nMAINTAINER wangruiyu\n```\n\n\n\n## 2.在容器中自定义目录运行jar\n**使用自定义路径：/usr/local/ebbms**\n\n设置docker的WORKDIR（工作目录）为自定义路径！\n\n**重点：设置工作目录**\n### dockerfile文件\n\n```yml\n# 该镜像需要依赖的基础镜像\nFROM anapsix/alpine-java:8_server-jre_unlimited\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD /ebbms-admin-1.0.0-SNAPSHOT.jar  /usr/local/ebbms/app.jar\nADD /config       /usr/local/ebbms/config\n# 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /usr/local/ebbms/app.jar'\n# 声明服务运行在8084端口\nEXPOSE 8084\n# 设置环境\nENV LANG='UTF-8'\nENV LC_ALL='zh_CN.UTF-8'\nENV LC_CTYPE='zh_CN.UTF-8'\n# 设置工作目录，不指定默认为根目录，会找不到jar\nWORKDIR /usr/local/ebbms\n# 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\"]\n# 指定维护者的名字\nMAINTAINER wangruiyu\n\n```\n\n\n\n## 3.在容器根目录运行jar，自定义路径存放配置\n**使用自定义路径：/usr/local/ebbms**\n\n在docker容器启动时运行jar包时，使用spring.config.location 指定配置文件路径即可！\n### dockerfile文件\n\n```yml\n# 该镜像需要依赖的基础镜像\nFROM anapsix/alpine-java:8_server-jre_unlimited\n# 将当前目录下的jar包复制到docker容器的/目录下\nADD /ebbms-admin-1.0.0-SNAPSHOT.jar  /usr/local/ebbms/app.jar\nADD /config       /usr/local/ebbms/config\n# 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /usr/local/ebbms/app.jar'\n# 声明服务运行在8084端口\nEXPOSE 8084\n# 设置环境\nENV LANG='UTF-8'\nENV LC_ALL='zh_CN.UTF-8'\nENV LC_CTYPE='zh_CN.UTF-8'\n# 指定docker容器启动时运行jar包,使用spring.config.location 指定配置文件路径\nENTRYPOINT [\"java\",\"-jar\",\"app.jar\",\"--spring.config.location=/usr/local/ebbms/config/application.yaml\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\"]\n# 指定维护者的名字\nMAINTAINER wangruiyu\n\n```\n\n","slug":"2023/docker-springboot-config","published":1,"updated":"2024-08-05T11:07:24.333Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuxv00030aibc92y0mcn","content":"<h1 id=\"SpringBoot使用docker部署加载外部配置文件\"><a href=\"#SpringBoot使用docker部署加载外部配置文件\" class=\"headerlink\" title=\"SpringBoot使用docker部署加载外部配置文件\"></a>SpringBoot使用docker部署加载外部配置文件</h1><h2 id=\"修改pom-xml文件，把配置文件copy到镜像中\"><a href=\"#修改pom-xml文件，把配置文件copy到镜像中\" class=\"headerlink\" title=\"修改pom.xml文件，把配置文件copy到镜像中\"></a>修改pom.xml文件，把配置文件copy到镜像中</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://192.168.1.230:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 把编译后输出路径下的配置文件拷贝到config下--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/config<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.outputDirectory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-在容器根目录运行jar\"><a href=\"#1-在容器根目录运行jar\" class=\"headerlink\" title=\"1.在容器根目录运行jar\"></a>1.在容器根目录运行jar</h2><h3 id=\"dockerfile\"><a href=\"#dockerfile\" class=\"headerlink\" title=\"dockerfile\"></a>dockerfile</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">anapsix/alpine-java:8_server-jre_unlimited</span></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/ebbms-admin-1.0.0-SNAPSHOT.jar</span>  <span class=\"string\">/app.jar</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件在jar包同级目录下的config文件（优先级最高），具体参考springboot配置优先级</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/config</span>       <span class=\"string\">/config</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /app.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8084端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG=&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_CTYPE=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;app.jar&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-在容器中自定义目录运行jar\"><a href=\"#2-在容器中自定义目录运行jar\" class=\"headerlink\" title=\"2.在容器中自定义目录运行jar\"></a>2.在容器中自定义目录运行jar</h2><p><strong>使用自定义路径：&#x2F;usr&#x2F;local&#x2F;ebbms</strong></p>\n<p>设置docker的WORKDIR（工作目录）为自定义路径！</p>\n<p><strong>重点：设置工作目录</strong></p>\n<h3 id=\"dockerfile文件\"><a href=\"#dockerfile文件\" class=\"headerlink\" title=\"dockerfile文件\"></a>dockerfile文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">anapsix/alpine-java:8_server-jre_unlimited</span></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/ebbms-admin-1.0.0-SNAPSHOT.jar</span>  <span class=\"string\">/usr/local/ebbms/app.jar</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/config</span>       <span class=\"string\">/usr/local/ebbms/config</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /usr/local/ebbms/app.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8084端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG=&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_CTYPE=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录，不指定默认为根目录，会找不到jar</span></span><br><span class=\"line\"><span class=\"string\">WORKDIR</span> <span class=\"string\">/usr/local/ebbms</span></span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;app.jar&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-在容器根目录运行jar，自定义路径存放配置\"><a href=\"#3-在容器根目录运行jar，自定义路径存放配置\" class=\"headerlink\" title=\"3.在容器根目录运行jar，自定义路径存放配置\"></a>3.在容器根目录运行jar，自定义路径存放配置</h2><p><strong>使用自定义路径：&#x2F;usr&#x2F;local&#x2F;ebbms</strong></p>\n<p>在docker容器启动时运行jar包时，使用spring.config.location 指定配置文件路径即可！</p>\n<h3 id=\"dockerfile文件-1\"><a href=\"#dockerfile文件-1\" class=\"headerlink\" title=\"dockerfile文件\"></a>dockerfile文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">anapsix/alpine-java:8_server-jre_unlimited</span></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/ebbms-admin-1.0.0-SNAPSHOT.jar</span>  <span class=\"string\">/usr/local/ebbms/app.jar</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/config</span>       <span class=\"string\">/usr/local/ebbms/config</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /usr/local/ebbms/app.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8084端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG=&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_CTYPE=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包,使用spring.config.location 指定配置文件路径</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;app.jar&quot;</span>,<span class=\"string\">&quot;--spring.config.location=/usr/local/ebbms/config/application.yaml&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n","cover":false,"excerpt":"","more":"<h1 id=\"SpringBoot使用docker部署加载外部配置文件\"><a href=\"#SpringBoot使用docker部署加载外部配置文件\" class=\"headerlink\" title=\"SpringBoot使用docker部署加载外部配置文件\"></a>SpringBoot使用docker部署加载外部配置文件</h1><h2 id=\"修改pom-xml文件，把配置文件copy到镜像中\"><a href=\"#修改pom-xml文件，把配置文件copy到镜像中\" class=\"headerlink\" title=\"修改pom.xml文件，把配置文件copy到镜像中\"></a>修改pom.xml文件，把配置文件copy到镜像中</h2><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://192.168.1.230:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"comment\">&lt;!-- 把编译后输出路径下的配置文件拷贝到config下--&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/config<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.outputDirectory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                            <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>*.*<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;/<span class=\"name\">includes</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"1-在容器根目录运行jar\"><a href=\"#1-在容器根目录运行jar\" class=\"headerlink\" title=\"1.在容器根目录运行jar\"></a>1.在容器根目录运行jar</h2><h3 id=\"dockerfile\"><a href=\"#dockerfile\" class=\"headerlink\" title=\"dockerfile\"></a>dockerfile</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">anapsix/alpine-java:8_server-jre_unlimited</span></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/ebbms-admin-1.0.0-SNAPSHOT.jar</span>  <span class=\"string\">/app.jar</span></span><br><span class=\"line\"><span class=\"comment\"># 配置文件在jar包同级目录下的config文件（优先级最高），具体参考springboot配置优先级</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/config</span>       <span class=\"string\">/config</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /app.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8084端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG=&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_CTYPE=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;app.jar&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"2-在容器中自定义目录运行jar\"><a href=\"#2-在容器中自定义目录运行jar\" class=\"headerlink\" title=\"2.在容器中自定义目录运行jar\"></a>2.在容器中自定义目录运行jar</h2><p><strong>使用自定义路径：&#x2F;usr&#x2F;local&#x2F;ebbms</strong></p>\n<p>设置docker的WORKDIR（工作目录）为自定义路径！</p>\n<p><strong>重点：设置工作目录</strong></p>\n<h3 id=\"dockerfile文件\"><a href=\"#dockerfile文件\" class=\"headerlink\" title=\"dockerfile文件\"></a>dockerfile文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">anapsix/alpine-java:8_server-jre_unlimited</span></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/ebbms-admin-1.0.0-SNAPSHOT.jar</span>  <span class=\"string\">/usr/local/ebbms/app.jar</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/config</span>       <span class=\"string\">/usr/local/ebbms/config</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /usr/local/ebbms/app.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8084端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG=&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_CTYPE=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 设置工作目录，不指定默认为根目录，会找不到jar</span></span><br><span class=\"line\"><span class=\"string\">WORKDIR</span> <span class=\"string\">/usr/local/ebbms</span></span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;app.jar&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"3-在容器根目录运行jar，自定义路径存放配置\"><a href=\"#3-在容器根目录运行jar，自定义路径存放配置\" class=\"headerlink\" title=\"3.在容器根目录运行jar，自定义路径存放配置\"></a>3.在容器根目录运行jar，自定义路径存放配置</h2><p><strong>使用自定义路径：&#x2F;usr&#x2F;local&#x2F;ebbms</strong></p>\n<p>在docker容器启动时运行jar包时，使用spring.config.location 指定配置文件路径即可！</p>\n<h3 id=\"dockerfile文件-1\"><a href=\"#dockerfile文件-1\" class=\"headerlink\" title=\"dockerfile文件\"></a>dockerfile文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">anapsix/alpine-java:8_server-jre_unlimited</span></span><br><span class=\"line\"><span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/ebbms-admin-1.0.0-SNAPSHOT.jar</span>  <span class=\"string\">/usr/local/ebbms/app.jar</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">/config</span>       <span class=\"string\">/usr/local/ebbms/config</span></span><br><span class=\"line\"><span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /usr/local/ebbms/app.jar&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 声明服务运行在8084端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\"><span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG=&#x27;UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_CTYPE=&#x27;zh_CN.UTF-8&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 指定docker容器启动时运行jar包,使用spring.config.location 指定配置文件路径</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>,<span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;app.jar&quot;</span>,<span class=\"string\">&quot;--spring.config.location=/usr/local/ebbms/config/application.yaml&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>]</span><br><span class=\"line\"><span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n"},{"title":"SpringBoot使用docker打包的两种方式","date":"2021-12-01T10:00:00.000Z","_content":"\n# SpringBoot使用docker打包的两种方式\n\n## 只使用maven插件\n\n### 在项目的根路径下打开pom.xml文件，在build节点加入一下内容\n```xml\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <executions>\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <!--docker仓库地址-->\n                <dockerHost>http://192.168.1.20:2375</dockerHost>\n                <!--docker镜像名称-->\n                <imageName>${project.artifactId}:${project.version}</imageName>\n                <!--依赖的基础镜像-->\n                <baseImage>java:8</baseImage>\n                <!--运行命令-->\n                <entryPoint>[\"java\",\"-jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\",\"/${project.build.finalName}.jar\"]\n                </entryPoint>\n                <!--jar包所在目录-->\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 使用maven插件+dockerfile\n\n### 在src->main->下创建docker文件夹，并在其目录下创建dockerfile文件\n\n```yml\n# 该镜像需要依赖的基础镜像\nFROM java:8\n  # 将当前目录下的jar包复制到docker容器的/目录下\nADD ebbms-admin-1.0.0-SNAPSHOT.jar /app.jar\n  # 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /app.jar'\n  # 声明服务运行在8080端口\nEXPOSE 8084\n  # 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\",\"/app.jar\"]\n  # 设置环境\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n  # 指定维护者的名字\nMAINTAINER wangruiyu\n```\n\n### 在项目的根路径下打开pom.xml文件，在build节点加入一下内容\n\n```xml\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <executions>\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <!--docker仓库地址-->\n                <dockerHost>http://192.168.1.20:2375</dockerHost>\n                <!--docker镜像名称-->\n                <imageName>${project.artifactId}:${project.version}</imageName>\n                <!--dockerfile所在的目录-->\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <!--jar包所在目录-->\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n","source":"_posts/2023/docker-springboot.md","raw":"---\ntitle: SpringBoot使用docker打包的两种方式\ndate: 2021-12-01 18:00:00\ntags:\n - springboot\n - docker\ncategories:\n - Docker\n---\n\n# SpringBoot使用docker打包的两种方式\n\n## 只使用maven插件\n\n### 在项目的根路径下打开pom.xml文件，在build节点加入一下内容\n```xml\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <executions>\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <!--docker仓库地址-->\n                <dockerHost>http://192.168.1.20:2375</dockerHost>\n                <!--docker镜像名称-->\n                <imageName>${project.artifactId}:${project.version}</imageName>\n                <!--依赖的基础镜像-->\n                <baseImage>java:8</baseImage>\n                <!--运行命令-->\n                <entryPoint>[\"java\",\"-jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\",\"/${project.build.finalName}.jar\"]\n                </entryPoint>\n                <!--jar包所在目录-->\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n## 使用maven插件+dockerfile\n\n### 在src->main->下创建docker文件夹，并在其目录下创建dockerfile文件\n\n```yml\n# 该镜像需要依赖的基础镜像\nFROM java:8\n  # 将当前目录下的jar包复制到docker容器的/目录下\nADD ebbms-admin-1.0.0-SNAPSHOT.jar /app.jar\n  # 运行过程中创建一个app.jar文件\nRUN bash -c 'touch /app.jar'\n  # 声明服务运行在8080端口\nEXPOSE 8084\n  # 指定docker容器启动时运行jar包\nENTRYPOINT [\"java\", \"-jar\",\"-Dfile.encoding=UTF-8\",\"-Dsun.jnu.encoding=UTF-8\",\"/app.jar\"]\n  # 设置环境\nENV LANG en_US.UTF-8\nENV LANGUAGE en_US:en\nENV LC_ALL en_US.UTF-8\n  # 指定维护者的名字\nMAINTAINER wangruiyu\n```\n\n### 在项目的根路径下打开pom.xml文件，在build节点加入一下内容\n\n```xml\n\n<build>\n    <plugins>\n        <plugin>\n            <groupId>com.spotify</groupId>\n            <artifactId>docker-maven-plugin</artifactId>\n            <version>1.1.0</version>\n            <executions>\n                <execution>\n                    <id>build-image</id>\n                    <phase>package</phase>\n                    <goals>\n                        <goal>build</goal>\n                    </goals>\n                </execution>\n            </executions>\n            <configuration>\n                <!--docker仓库地址-->\n                <dockerHost>http://192.168.1.20:2375</dockerHost>\n                <!--docker镜像名称-->\n                <imageName>${project.artifactId}:${project.version}</imageName>\n                <!--dockerfile所在的目录-->\n                <dockerDirectory>src/main/docker</dockerDirectory>\n                <!--jar包所在目录-->\n                <resources>\n                    <resource>\n                        <targetPath>/</targetPath>\n                        <directory>${project.build.directory}</directory>\n                        <include>${project.build.finalName}.jar</include>\n                    </resource>\n                </resources>\n            </configuration>\n        </plugin>\n    </plugins>\n</build>\n```\n\n","slug":"2023/docker-springboot","published":1,"updated":"2025-01-05T09:39:37.898Z","_id":"clzxxiuxz00070aib7yqpfahk","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"SpringBoot使用docker打包的两种方式\"><a href=\"#SpringBoot使用docker打包的两种方式\" class=\"headerlink\" title=\"SpringBoot使用docker打包的两种方式\"></a>SpringBoot使用docker打包的两种方式</h1><h2 id=\"只使用maven插件\"><a href=\"#只使用maven插件\" class=\"headerlink\" title=\"只使用maven插件\"></a>只使用maven插件</h2><h3 id=\"在项目的根路径下打开pom-xml文件，在build节点加入一下内容\"><a href=\"#在项目的根路径下打开pom-xml文件，在build节点加入一下内容\" class=\"headerlink\" title=\"在项目的根路径下打开pom.xml文件，在build节点加入一下内容\"></a>在项目的根路径下打开pom.xml文件，在build节点加入一下内容</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker仓库地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://192.168.1.20:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker镜像名称--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--依赖的基础镜像--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">baseImage</span>&gt;</span>java:8<span class=\"tag\">&lt;/<span class=\"name\">baseImage</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--运行命令--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entryPoint</span>&gt;</span>[&quot;java&quot;,&quot;-jar&quot;,&quot;-Dfile.encoding=UTF-8&quot;,&quot;-Dsun.jnu.encoding=UTF-8&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">entryPoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--jar包所在目录--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用maven插件-dockerfile\"><a href=\"#使用maven插件-dockerfile\" class=\"headerlink\" title=\"使用maven插件+dockerfile\"></a>使用maven插件+dockerfile</h2><h3 id=\"在src-main-下创建docker文件夹，并在其目录下创建dockerfile文件\"><a href=\"#在src-main-下创建docker文件夹，并在其目录下创建dockerfile文件\" class=\"headerlink\" title=\"在src-&gt;main-&gt;下创建docker文件夹，并在其目录下创建dockerfile文件\"></a>在src-&gt;main-&gt;下创建docker文件夹，并在其目录下创建dockerfile文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">java:8</span></span><br><span class=\"line\">  <span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">ebbms-admin-1.0.0-SNAPSHOT.jar</span> <span class=\"string\">/app.jar</span></span><br><span class=\"line\">  <span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /app.jar&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># 声明服务运行在8080端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\">  <span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span><br><span class=\"line\">  <span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG</span> <span class=\"string\">en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANGUAGE</span> <span class=\"string\">en_US:en</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL</span> <span class=\"string\">en_US.UTF-8</span></span><br><span class=\"line\">  <span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在项目的根路径下打开pom-xml文件，在build节点加入一下内容-1\"><a href=\"#在项目的根路径下打开pom-xml文件，在build节点加入一下内容-1\" class=\"headerlink\" title=\"在项目的根路径下打开pom.xml文件，在build节点加入一下内容\"></a>在项目的根路径下打开pom.xml文件，在build节点加入一下内容</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker仓库地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://192.168.1.20:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker镜像名称--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--dockerfile所在的目录--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--jar包所在目录--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n","cover":false,"excerpt":"","more":"<h1 id=\"SpringBoot使用docker打包的两种方式\"><a href=\"#SpringBoot使用docker打包的两种方式\" class=\"headerlink\" title=\"SpringBoot使用docker打包的两种方式\"></a>SpringBoot使用docker打包的两种方式</h1><h2 id=\"只使用maven插件\"><a href=\"#只使用maven插件\" class=\"headerlink\" title=\"只使用maven插件\"></a>只使用maven插件</h2><h3 id=\"在项目的根路径下打开pom-xml文件，在build节点加入一下内容\"><a href=\"#在项目的根路径下打开pom-xml文件，在build节点加入一下内容\" class=\"headerlink\" title=\"在项目的根路径下打开pom.xml文件，在build节点加入一下内容\"></a>在项目的根路径下打开pom.xml文件，在build节点加入一下内容</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker仓库地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://192.168.1.20:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker镜像名称--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--依赖的基础镜像--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">baseImage</span>&gt;</span>java:8<span class=\"tag\">&lt;/<span class=\"name\">baseImage</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--运行命令--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">entryPoint</span>&gt;</span>[&quot;java&quot;,&quot;-jar&quot;,&quot;-Dfile.encoding=UTF-8&quot;,&quot;-Dsun.jnu.encoding=UTF-8&quot;,&quot;/$&#123;project.build.finalName&#125;.jar&quot;]</span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">entryPoint</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--jar包所在目录--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用maven插件-dockerfile\"><a href=\"#使用maven插件-dockerfile\" class=\"headerlink\" title=\"使用maven插件+dockerfile\"></a>使用maven插件+dockerfile</h2><h3 id=\"在src-main-下创建docker文件夹，并在其目录下创建dockerfile文件\"><a href=\"#在src-main-下创建docker文件夹，并在其目录下创建dockerfile文件\" class=\"headerlink\" title=\"在src-&gt;main-&gt;下创建docker文件夹，并在其目录下创建dockerfile文件\"></a>在src-&gt;main-&gt;下创建docker文件夹，并在其目录下创建dockerfile文件</h3><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 该镜像需要依赖的基础镜像</span></span><br><span class=\"line\"><span class=\"string\">FROM</span> <span class=\"string\">java:8</span></span><br><span class=\"line\">  <span class=\"comment\"># 将当前目录下的jar包复制到docker容器的/目录下</span></span><br><span class=\"line\"><span class=\"string\">ADD</span> <span class=\"string\">ebbms-admin-1.0.0-SNAPSHOT.jar</span> <span class=\"string\">/app.jar</span></span><br><span class=\"line\">  <span class=\"comment\"># 运行过程中创建一个app.jar文件</span></span><br><span class=\"line\"><span class=\"string\">RUN</span> <span class=\"string\">bash</span> <span class=\"string\">-c</span> <span class=\"string\">&#x27;touch /app.jar&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># 声明服务运行在8080端口</span></span><br><span class=\"line\"><span class=\"string\">EXPOSE</span> <span class=\"number\">8084</span></span><br><span class=\"line\">  <span class=\"comment\"># 指定docker容器启动时运行jar包</span></span><br><span class=\"line\"><span class=\"string\">ENTRYPOINT</span> [<span class=\"string\">&quot;java&quot;</span>, <span class=\"string\">&quot;-jar&quot;</span>,<span class=\"string\">&quot;-Dfile.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;-Dsun.jnu.encoding=UTF-8&quot;</span>,<span class=\"string\">&quot;/app.jar&quot;</span>]</span><br><span class=\"line\">  <span class=\"comment\"># 设置环境</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANG</span> <span class=\"string\">en_US.UTF-8</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LANGUAGE</span> <span class=\"string\">en_US:en</span></span><br><span class=\"line\"><span class=\"string\">ENV</span> <span class=\"string\">LC_ALL</span> <span class=\"string\">en_US.UTF-8</span></span><br><span class=\"line\">  <span class=\"comment\"># 指定维护者的名字</span></span><br><span class=\"line\"><span class=\"string\">MAINTAINER</span> <span class=\"string\">wangruiyu</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"在项目的根路径下打开pom-xml文件，在build节点加入一下内容-1\"><a href=\"#在项目的根路径下打开pom-xml文件，在build节点加入一下内容-1\" class=\"headerlink\" title=\"在项目的根路径下打开pom.xml文件，在build节点加入一下内容\"></a>在项目的根路径下打开pom.xml文件，在build节点加入一下内容</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.spotify<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>docker-maven-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>build-image<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>build<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker仓库地址--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerHost</span>&gt;</span>http://192.168.1.20:2375<span class=\"tag\">&lt;/<span class=\"name\">dockerHost</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--docker镜像名称--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">imageName</span>&gt;</span>$&#123;project.artifactId&#125;:$&#123;project.version&#125;<span class=\"tag\">&lt;/<span class=\"name\">imageName</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--dockerfile所在的目录--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">dockerDirectory</span>&gt;</span>src/main/docker<span class=\"tag\">&lt;/<span class=\"name\">dockerDirectory</span>&gt;</span></span><br><span class=\"line\">                <span class=\"comment\">&lt;!--jar包所在目录--&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">targetPath</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">targetPath</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">directory</span>&gt;</span>$&#123;project.build.directory&#125;<span class=\"tag\">&lt;/<span class=\"name\">directory</span>&gt;</span></span><br><span class=\"line\">                        <span class=\"tag\">&lt;<span class=\"name\">include</span>&gt;</span>$&#123;project.build.finalName&#125;.jar<span class=\"tag\">&lt;/<span class=\"name\">include</span>&gt;</span></span><br><span class=\"line\">                    <span class=\"tag\">&lt;/<span class=\"name\">resource</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;/<span class=\"name\">resources</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"Docker基本语法","date":"2021-12-20T04:30:00.000Z","_content":"\n![img.png](img.png)\n\n- [官方中文文档](https://dockerdocs.cn/index.html)\n- [官方英文文档](https://docs.docker.com/)\n- [DockerHub地址](https://hub.docker.com/)\n- [国内仓库源](https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6)\n\n\n## 安装\n### 1.查看系统、内核\nCentOS7 要求64位系统、内核版本3.10以上\nCentOS6 要求版本在6.5以上，系统64位、内核版本2.6.32-431以上\n查看内核版本号\n```shell\nuname -r #查看内核版本\n\ncat /etc/os-release #查看系统信息.\n```\n开启centos-extras资源库\n使用Centos 7，开启centos-extras资源库\n### 2.卸载旧版本\n卸载旧版本\n```shell\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n删除旧版本Docker文件\n```shell\nsudo rm /var/lib/docker/ -rf\n```\n### 3.设置仓库\n#### 设置yum仓库\n安装必要依赖包\n```shell\nsudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n添加阿里镜像稳定版仓库\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n添加阿里源时有时会报错，如果报错，使用如下命令使用官方源\n```shell\n#删除异常源\nsudo rm -f /etc/yum.repos.d/docker-ce.repo\n\n#使用官方源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n#### 更新yum缓存\n```shell\nsudo yum makecache fast\n```\n### 4.安装Docker-CE\n注意事项：本步骤分两部分，仅需按需求使用其一\n#### 安装最新版\n```shell\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n```\n#### 安装指定版本\n列出可用版本\n```shell\nyum list docker-ce --showduplicates | sort -r\n\n# 显示结果\n# docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\n# docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\n# docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\n# docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n```\n安装指定版本\n需要替换为第二列的版本号，如：18.06.0.ce-3.el7\n```shell\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n```\n### 设置**镜像代理**\n**阿里Docker镜像云服务**\n[https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors](https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors)\n## 运行\n### 启动Docker服务\n```shell\nsystemctl start docker\n```\n### 运行镜像\n```shell\ndocker run  hello-world\n```\n### 查看本地的镜像\n```shell\ndocker images\n```\n![](https://cdn.nlark.com/yuque/0/2022/png/21973095/1672381927401-6e68e3d2-847d-42e8-aeba-d5aec4ca9a9c.png#averageHue=%23262a2c&id=xsf1S&originHeight=77&originWidth=821&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n- REPOSITORY:表示 镜像的仓库源\n- TAG: 表示镜像的版本标签 （:版本号）\n- IMAGE ID :镜像ID\n- CREATED :镜像创建的时间\n- SIZE: 镜像的大小\n### 所有本地镜像包含中间镜像层\n```shell\ndocker images -a\n```\n### 只显示镜像的ID\n```shell\ndocker images -q\n```\n### 显示当前镜像的ID\n```shell\ndocker images -qa\n```\n### 显示镜像的描述信息\n```shell\ndocker images --digests\n```\n### 显示完整的镜像信息\n```shell\ndocker images --digests --no-trunc\n```\n### 查找镜像命名\n```shell\ndocker search 镜像名称\n```\n### 找Start大于30的tomca\n```shell\ndocker search -s 30 tomcat\n```\n### 下载镜像\n```shell\ndocker pull 镜像名称:latest   \n```\n### 删除镜像\n```shell\ndocker rmi 镜像名称\n```\n### 强制删除\n```shell\ndocker rmi -f 镜像名称\n```\n### 删除多个镜像\n```shell\ndocker rmi  镜像名称 :TAG  镜像名称2:TAG\n```\n### 删除全部镜像\n```shell\ndocker rmi -f $(docker images -q)\n\n```\n### 创建一个新的容器并运行一个命令\n#### 基本语法\n```shell\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n#### OPTIONS说明\n\n- **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n- **-d:** 后台运行容器，并返回容器ID；\n- **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n- **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n- **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n- **-p:** 指定端口映射，格式为：**主机(宿主)端口:容器端口**\n- **--name=\"nginx-lb\":** 为容器指定一个名称；\n- **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n- **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n- **-h \"mars\":** 指定容器的hostname；\n- **-e username=\"ritchie\":** 设置环境变量；\n- **--env-file=[]:** 从指定文件读入环境变量；\n- **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n- **-m :**设置容器使用内存最大值；\n- **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n- **--link=[]:** 添加链接到另一个容器；\n- **--expose=[]:** 开放一个端口或一组端口；\n- **--volume , -v: **绑定一个卷\n#### 测试用例\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n`docker run --name mynginx -d nginx:latest`\n使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n`docker run -P -d nginx:latest`\n使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。\n`docker run -p 80:80 -v /data:/data -d nginx:latest`\n绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。\n`$docker run -p 127.0.0.1:80:8080/tcp ubuntu bash`\n使用镜像nginx:latest以交互模式启动一**-n:** 显示最近N个容器；个容器,在容器内执行/bin/bash命令。\n`docker run -it nginx:latest /bin/bash`\n### 查看正在运行的容器\n#### 基本语法\n```shell\ndocker ps  [OPTIONS] \n```\n#### OPTIONS说明：\n\n- **-a :**当前正在运行的+历史运行过的；\n- **-l:** 最近创建的容器ID；\n- **-n:** 显示最近N个容器；\n- **-q:** 静默模式，只显示容器Id\n- -**-no -trunc**；不断输出\n#### 退出容器\n`exit` 容器停止推出\n`ctrl+P+Q `容器不停止退出\n#### 启动容器\n```shell\ndocker start 容器名称或ID\n```\n#### 重启容器\n```shell\ndocker restart 容器名称或ID\n```\n#### 停止容器\n```shell\ndocker stop 容器名称或ID   （温柔）\n\ndocker kill 容器名称或ID   （强制停止）\n```\n#### 删除容器\n```shell\ndocker rm 容器名称或ID\n```\n#### 一次性删除多个容器\n```shell\ndocker rm  -f $(docker ps -a -q)\n# 或\ndocker ps -a -q|xagrgs docker rm\n```\n查看容器内部的细节\n```shell\ndocker inspect 容器ID或容器名\n```\n#### 查看容器的IP地址\n```shell\ndocker inspect 容器ID或容器名 |grep \"IPAddress\"\n```\n#### 连接运行的容器并以命令行交互\n```shell\ndocker exec -it 容器ID bashShell(shell命令)\n```\n#### 重新进入容器\n```shell\ndocker attach 容器ID\n```\n**exec与 attach的区别**\n\n- attach :直接进入容器，启动命令终端，不会启动新的进程\n- exec：实在容器中打开新的终端，并且可以启动新的\n\n","source":"_posts/2023/docker.md","raw":"---\ntitle: Docker基本语法\ndate: 2021-12-20 12:30:00\ntags:\n - docker\ncategories:\n - Docker\n---\n\n![img.png](img.png)\n\n- [官方中文文档](https://dockerdocs.cn/index.html)\n- [官方英文文档](https://docs.docker.com/)\n- [DockerHub地址](https://hub.docker.com/)\n- [国内仓库源](https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6)\n\n\n## 安装\n### 1.查看系统、内核\nCentOS7 要求64位系统、内核版本3.10以上\nCentOS6 要求版本在6.5以上，系统64位、内核版本2.6.32-431以上\n查看内核版本号\n```shell\nuname -r #查看内核版本\n\ncat /etc/os-release #查看系统信息.\n```\n开启centos-extras资源库\n使用Centos 7，开启centos-extras资源库\n### 2.卸载旧版本\n卸载旧版本\n```shell\nsudo yum remove docker \\\n                  docker-client \\\n                  docker-client-latest \\\n                  docker-common \\\n                  docker-latest \\\n                  docker-latest-logrotate \\\n                  docker-logrotate \\\n                  docker-engine\n```\n删除旧版本Docker文件\n```shell\nsudo rm /var/lib/docker/ -rf\n```\n### 3.设置仓库\n#### 设置yum仓库\n安装必要依赖包\n```shell\nsudo yum install -y yum-utils \\\n  device-mapper-persistent-data \\\n  lvm2\n```\n添加阿里镜像稳定版仓库\n```shell\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n添加阿里源时有时会报错，如果报错，使用如下命令使用官方源\n```shell\n#删除异常源\nsudo rm -f /etc/yum.repos.d/docker-ce.repo\n\n#使用官方源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n```\n#### 更新yum缓存\n```shell\nsudo yum makecache fast\n```\n### 4.安装Docker-CE\n注意事项：本步骤分两部分，仅需按需求使用其一\n#### 安装最新版\n```shell\nsudo yum install -y docker-ce docker-ce-cli containerd.io\n```\n#### 安装指定版本\n列出可用版本\n```shell\nyum list docker-ce --showduplicates | sort -r\n\n# 显示结果\n# docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable\n# docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable\n# docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable\n# docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable\n```\n安装指定版本\n需要替换为第二列的版本号，如：18.06.0.ce-3.el7\n```shell\nsudo yum install docker-ce-<VERSION_STRING> docker-ce-cli-<VERSION_STRING> containerd.io\n```\n### 设置**镜像代理**\n**阿里Docker镜像云服务**\n[https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors](https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors)\n## 运行\n### 启动Docker服务\n```shell\nsystemctl start docker\n```\n### 运行镜像\n```shell\ndocker run  hello-world\n```\n### 查看本地的镜像\n```shell\ndocker images\n```\n![](https://cdn.nlark.com/yuque/0/2022/png/21973095/1672381927401-6e68e3d2-847d-42e8-aeba-d5aec4ca9a9c.png#averageHue=%23262a2c&id=xsf1S&originHeight=77&originWidth=821&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=)\n\n- REPOSITORY:表示 镜像的仓库源\n- TAG: 表示镜像的版本标签 （:版本号）\n- IMAGE ID :镜像ID\n- CREATED :镜像创建的时间\n- SIZE: 镜像的大小\n### 所有本地镜像包含中间镜像层\n```shell\ndocker images -a\n```\n### 只显示镜像的ID\n```shell\ndocker images -q\n```\n### 显示当前镜像的ID\n```shell\ndocker images -qa\n```\n### 显示镜像的描述信息\n```shell\ndocker images --digests\n```\n### 显示完整的镜像信息\n```shell\ndocker images --digests --no-trunc\n```\n### 查找镜像命名\n```shell\ndocker search 镜像名称\n```\n### 找Start大于30的tomca\n```shell\ndocker search -s 30 tomcat\n```\n### 下载镜像\n```shell\ndocker pull 镜像名称:latest   \n```\n### 删除镜像\n```shell\ndocker rmi 镜像名称\n```\n### 强制删除\n```shell\ndocker rmi -f 镜像名称\n```\n### 删除多个镜像\n```shell\ndocker rmi  镜像名称 :TAG  镜像名称2:TAG\n```\n### 删除全部镜像\n```shell\ndocker rmi -f $(docker images -q)\n\n```\n### 创建一个新的容器并运行一个命令\n#### 基本语法\n```shell\ndocker run [OPTIONS] IMAGE [COMMAND] [ARG...]\n```\n#### OPTIONS说明\n\n- **-a stdin:** 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；\n- **-d:** 后台运行容器，并返回容器ID；\n- **-i:** 以交互模式运行容器，通常与 -t 同时使用；\n- **-t:** 为容器重新分配一个伪输入终端，通常与 -i 同时使用；\n- **-P:** 随机端口映射，容器内部端口**随机**映射到主机的高端口\n- **-p:** 指定端口映射，格式为：**主机(宿主)端口:容器端口**\n- **--name=\"nginx-lb\":** 为容器指定一个名称；\n- **--dns 8.8.8.8:** 指定容器使用的DNS服务器，默认和宿主一致；\n- **--dns-search example.com:** 指定容器DNS搜索域名，默认和宿主一致；\n- **-h \"mars\":** 指定容器的hostname；\n- **-e username=\"ritchie\":** 设置环境变量；\n- **--env-file=[]:** 从指定文件读入环境变量；\n- **--cpuset=\"0-2\" or --cpuset=\"0,1,2\":** 绑定容器到指定CPU运行；\n- **-m :**设置容器使用内存最大值；\n- **--net=\"bridge\":** 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；\n- **--link=[]:** 添加链接到另一个容器；\n- **--expose=[]:** 开放一个端口或一组端口；\n- **--volume , -v: **绑定一个卷\n#### 测试用例\n使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。\n`docker run --name mynginx -d nginx:latest`\n使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。\n`docker run -P -d nginx:latest`\n使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 /data 映射到容器的 /data。\n`docker run -p 80:80 -v /data:/data -d nginx:latest`\n绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。\n`$docker run -p 127.0.0.1:80:8080/tcp ubuntu bash`\n使用镜像nginx:latest以交互模式启动一**-n:** 显示最近N个容器；个容器,在容器内执行/bin/bash命令。\n`docker run -it nginx:latest /bin/bash`\n### 查看正在运行的容器\n#### 基本语法\n```shell\ndocker ps  [OPTIONS] \n```\n#### OPTIONS说明：\n\n- **-a :**当前正在运行的+历史运行过的；\n- **-l:** 最近创建的容器ID；\n- **-n:** 显示最近N个容器；\n- **-q:** 静默模式，只显示容器Id\n- -**-no -trunc**；不断输出\n#### 退出容器\n`exit` 容器停止推出\n`ctrl+P+Q `容器不停止退出\n#### 启动容器\n```shell\ndocker start 容器名称或ID\n```\n#### 重启容器\n```shell\ndocker restart 容器名称或ID\n```\n#### 停止容器\n```shell\ndocker stop 容器名称或ID   （温柔）\n\ndocker kill 容器名称或ID   （强制停止）\n```\n#### 删除容器\n```shell\ndocker rm 容器名称或ID\n```\n#### 一次性删除多个容器\n```shell\ndocker rm  -f $(docker ps -a -q)\n# 或\ndocker ps -a -q|xagrgs docker rm\n```\n查看容器内部的细节\n```shell\ndocker inspect 容器ID或容器名\n```\n#### 查看容器的IP地址\n```shell\ndocker inspect 容器ID或容器名 |grep \"IPAddress\"\n```\n#### 连接运行的容器并以命令行交互\n```shell\ndocker exec -it 容器ID bashShell(shell命令)\n```\n#### 重新进入容器\n```shell\ndocker attach 容器ID\n```\n**exec与 attach的区别**\n\n- attach :直接进入容器，启动命令终端，不会启动新的进程\n- exec：实在容器中打开新的终端，并且可以启动新的\n\n","slug":"2023/docker","published":1,"updated":"2024-08-05T11:07:24.333Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy000090aib0pf83034","content":"<p><img src=\"/post/2023/docker/img.png\" alt=\"img.png\"></p>\n<ul>\n<li><a href=\"https://dockerdocs.cn/index.html\">官方中文文档</a></li>\n<li><a href=\"https://docs.docker.com/\">官方英文文档</a></li>\n<li><a href=\"https://hub.docker.com/\">DockerHub地址</a></li>\n<li><a href=\"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6\">国内仓库源</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-查看系统、内核\"><a href=\"#1-查看系统、内核\" class=\"headerlink\" title=\"1.查看系统、内核\"></a>1.查看系统、内核</h3><p>CentOS7 要求64位系统、内核版本3.10以上<br>CentOS6 要求版本在6.5以上，系统64位、内核版本2.6.32-431以上<br>查看内核版本号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r #查看内核版本</span><br><span class=\"line\"></span><br><span class=\"line\">cat /etc/os-release #查看系统信息.</span><br></pre></td></tr></table></figure>\n<p>开启centos-extras资源库<br>使用Centos 7，开启centos-extras资源库</p>\n<h3 id=\"2-卸载旧版本\"><a href=\"#2-卸载旧版本\" class=\"headerlink\" title=\"2.卸载旧版本\"></a>2.卸载旧版本</h3><p>卸载旧版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>删除旧版本Docker文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm /var/lib/docker/ -rf</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-设置仓库\"><a href=\"#3-设置仓库\" class=\"headerlink\" title=\"3.设置仓库\"></a>3.设置仓库</h3><h4 id=\"设置yum仓库\"><a href=\"#设置yum仓库\" class=\"headerlink\" title=\"设置yum仓库\"></a>设置yum仓库</h4><p>安装必要依赖包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n<p>添加阿里镜像稳定版仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>添加阿里源时有时会报错，如果报错，使用如下命令使用官方源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除异常源</span></span><br><span class=\"line\">sudo rm -f /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用官方源</span></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新yum缓存\"><a href=\"#更新yum缓存\" class=\"headerlink\" title=\"更新yum缓存\"></a>更新yum缓存</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-安装Docker-CE\"><a href=\"#4-安装Docker-CE\" class=\"headerlink\" title=\"4.安装Docker-CE\"></a>4.安装Docker-CE</h3><p>注意事项：本步骤分两部分，仅需按需求使用其一</p>\n<h4 id=\"安装最新版\"><a href=\"#安装最新版\" class=\"headerlink\" title=\"安装最新版\"></a>安装最新版</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h4><p>列出可用版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示结果</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span></span><br></pre></td></tr></table></figure>\n<p>安装指定版本<br>需要替换为第二列的版本号，如：18.06.0.ce-3.el7</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置镜像代理\"><a href=\"#设置镜像代理\" class=\"headerlink\" title=\"设置镜像代理\"></a>设置<strong>镜像代理</strong></h3><p><strong>阿里Docker镜像云服务</strong><br><a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"启动Docker服务\"><a href=\"#启动Docker服务\" class=\"headerlink\" title=\"启动Docker服务\"></a>启动Docker服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  hello-world</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看本地的镜像\"><a href=\"#查看本地的镜像\" class=\"headerlink\" title=\"查看本地的镜像\"></a>查看本地的镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21973095/1672381927401-6e68e3d2-847d-42e8-aeba-d5aec4ca9a9c.png#averageHue=%23262a2c&id=xsf1S&originHeight=77&originWidth=821&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<ul>\n<li>REPOSITORY:表示 镜像的仓库源</li>\n<li>TAG: 表示镜像的版本标签 （:版本号）</li>\n<li>IMAGE ID :镜像ID</li>\n<li>CREATED :镜像创建的时间</li>\n<li>SIZE: 镜像的大小</li>\n</ul>\n<h3 id=\"所有本地镜像包含中间镜像层\"><a href=\"#所有本地镜像包含中间镜像层\" class=\"headerlink\" title=\"所有本地镜像包含中间镜像层\"></a>所有本地镜像包含中间镜像层</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"只显示镜像的ID\"><a href=\"#只显示镜像的ID\" class=\"headerlink\" title=\"只显示镜像的ID\"></a>只显示镜像的ID</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -q</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示当前镜像的ID\"><a href=\"#显示当前镜像的ID\" class=\"headerlink\" title=\"显示当前镜像的ID\"></a>显示当前镜像的ID</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -qa</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示镜像的描述信息\"><a href=\"#显示镜像的描述信息\" class=\"headerlink\" title=\"显示镜像的描述信息\"></a>显示镜像的描述信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images --digests</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示完整的镜像信息\"><a href=\"#显示完整的镜像信息\" class=\"headerlink\" title=\"显示完整的镜像信息\"></a>显示完整的镜像信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images --digests --no-trunc</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找镜像命名\"><a href=\"#查找镜像命名\" class=\"headerlink\" title=\"查找镜像命名\"></a>查找镜像命名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search 镜像名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"找Start大于30的tomca\"><a href=\"#找Start大于30的tomca\" class=\"headerlink\" title=\"找Start大于30的tomca\"></a>找Start大于30的tomca</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search -s 30 tomcat</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名称:latest   </span><br></pre></td></tr></table></figure>\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"强制删除\"><a href=\"#强制删除\" class=\"headerlink\" title=\"强制删除\"></a>强制删除</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f 镜像名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除多个镜像\"><a href=\"#删除多个镜像\" class=\"headerlink\" title=\"删除多个镜像\"></a>删除多个镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi  镜像名称 :TAG  镜像名称2:TAG</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除全部镜像\"><a href=\"#删除全部镜像\" class=\"headerlink\" title=\"删除全部镜像\"></a>删除全部镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -q)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个新的容器并运行一个命令\"><a href=\"#创建一个新的容器并运行一个命令\" class=\"headerlink\" title=\"创建一个新的容器并运行一个命令\"></a>创建一个新的容器并运行一个命令</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n<h4 id=\"OPTIONS说明\"><a href=\"#OPTIONS说明\" class=\"headerlink\" title=\"OPTIONS说明\"></a>OPTIONS说明</h4><ul>\n<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li>\n<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>\n<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li>\n<li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>\n<li><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</li>\n<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>\n<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>\n<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>\n<li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li>\n<li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li>\n<li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>\n<li>**-m :**设置容器使用内存最大值；</li>\n<li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li>\n<li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li>\n<li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li>\n<li>**–volume , -v: **绑定一个卷</li>\n</ul>\n<h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。<br><code>docker run --name mynginx -d nginx:latest</code><br>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。<br><code>docker run -P -d nginx:latest</code><br>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 &#x2F;data 映射到容器的 &#x2F;data。<br><code>docker run -p 80:80 -v /data:/data -d nginx:latest</code><br>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。<br><code>$docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</code><br>使用镜像nginx:latest以交互模式启动一**-n:** 显示最近N个容器；个容器,在容器内执行&#x2F;bin&#x2F;bash命令。<br><code>docker run -it nginx:latest /bin/bash</code></p>\n<h3 id=\"查看正在运行的容器\"><a href=\"#查看正在运行的容器\" class=\"headerlink\" title=\"查看正在运行的容器\"></a>查看正在运行的容器</h3><h4 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps  [OPTIONS] </span><br></pre></td></tr></table></figure>\n<h4 id=\"OPTIONS说明：\"><a href=\"#OPTIONS说明：\" class=\"headerlink\" title=\"OPTIONS说明：\"></a>OPTIONS说明：</h4><ul>\n<li>**-a :**当前正在运行的+历史运行过的；</li>\n<li><strong>-l:</strong> 最近创建的容器ID；</li>\n<li><strong>-n:</strong> 显示最近N个容器；</li>\n<li><strong>-q:</strong> 静默模式，只显示容器Id</li>\n<li>-<strong>-no -trunc</strong>；不断输出</li>\n</ul>\n<h4 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h4><p><code>exit</code> 容器停止推出<br><code>ctrl+P+Q </code>容器不停止退出</p>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器名称或ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart 容器名称或ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器名称或ID   （温柔）</span><br><span class=\"line\"></span><br><span class=\"line\">docker kill 容器名称或ID   （强制停止）</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器名称或ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"一次性删除多个容器\"><a href=\"#一次性删除多个容器\" class=\"headerlink\" title=\"一次性删除多个容器\"></a>一次性删除多个容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm  -f $(docker ps -a -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或</span></span><br><span class=\"line\">docker ps -a -q|xagrgs docker rm</span><br></pre></td></tr></table></figure>\n<p>查看容器内部的细节</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器ID或容器名</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看容器的IP地址\"><a href=\"#查看容器的IP地址\" class=\"headerlink\" title=\"查看容器的IP地址\"></a>查看容器的IP地址</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器ID或容器名 |grep &quot;IPAddress&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接运行的容器并以命令行交互\"><a href=\"#连接运行的容器并以命令行交互\" class=\"headerlink\" title=\"连接运行的容器并以命令行交互\"></a>连接运行的容器并以命令行交互</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器ID bashShell(shell命令)</span><br></pre></td></tr></table></figure>\n<h4 id=\"重新进入容器\"><a href=\"#重新进入容器\" class=\"headerlink\" title=\"重新进入容器\"></a>重新进入容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 容器ID</span><br></pre></td></tr></table></figure>\n<p><strong>exec与 attach的区别</strong></p>\n<ul>\n<li>attach :直接进入容器，启动命令终端，不会启动新的进程</li>\n<li>exec：实在容器中打开新的终端，并且可以启动新的</li>\n</ul>\n","cover":false,"excerpt":"","more":"<p><img src=\"/post/2023/docker/img.png\" alt=\"img.png\"></p>\n<ul>\n<li><a href=\"https://dockerdocs.cn/index.html\">官方中文文档</a></li>\n<li><a href=\"https://docs.docker.com/\">官方英文文档</a></li>\n<li><a href=\"https://hub.docker.com/\">DockerHub地址</a></li>\n<li><a href=\"https://gist.github.com/y0ngb1n/7e8f16af3242c7815e7ca2f0833d3ea6\">国内仓库源</a></li>\n</ul>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"1-查看系统、内核\"><a href=\"#1-查看系统、内核\" class=\"headerlink\" title=\"1.查看系统、内核\"></a>1.查看系统、内核</h3><p>CentOS7 要求64位系统、内核版本3.10以上<br>CentOS6 要求版本在6.5以上，系统64位、内核版本2.6.32-431以上<br>查看内核版本号</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uname -r #查看内核版本</span><br><span class=\"line\"></span><br><span class=\"line\">cat /etc/os-release #查看系统信息.</span><br></pre></td></tr></table></figure>\n<p>开启centos-extras资源库<br>使用Centos 7，开启centos-extras资源库</p>\n<h3 id=\"2-卸载旧版本\"><a href=\"#2-卸载旧版本\" class=\"headerlink\" title=\"2.卸载旧版本\"></a>2.卸载旧版本</h3><p>卸载旧版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum remove docker \\</span><br><span class=\"line\">                  docker-client \\</span><br><span class=\"line\">                  docker-client-latest \\</span><br><span class=\"line\">                  docker-common \\</span><br><span class=\"line\">                  docker-latest \\</span><br><span class=\"line\">                  docker-latest-logrotate \\</span><br><span class=\"line\">                  docker-logrotate \\</span><br><span class=\"line\">                  docker-engine</span><br></pre></td></tr></table></figure>\n<p>删除旧版本Docker文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm /var/lib/docker/ -rf</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-设置仓库\"><a href=\"#3-设置仓库\" class=\"headerlink\" title=\"3.设置仓库\"></a>3.设置仓库</h3><h4 id=\"设置yum仓库\"><a href=\"#设置yum仓库\" class=\"headerlink\" title=\"设置yum仓库\"></a>设置yum仓库</h4><p>安装必要依赖包</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y yum-utils \\</span><br><span class=\"line\">  device-mapper-persistent-data \\</span><br><span class=\"line\">  lvm2</span><br></pre></td></tr></table></figure>\n<p>添加阿里镜像稳定版仓库</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<p>添加阿里源时有时会报错，如果报错，使用如下命令使用官方源</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">删除异常源</span></span><br><span class=\"line\">sudo rm -f /etc/yum.repos.d/docker-ce.repo</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\">#</span><span class=\"language-bash\">使用官方源</span></span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新yum缓存\"><a href=\"#更新yum缓存\" class=\"headerlink\" title=\"更新yum缓存\"></a>更新yum缓存</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum makecache fast</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-安装Docker-CE\"><a href=\"#4-安装Docker-CE\" class=\"headerlink\" title=\"4.安装Docker-CE\"></a>4.安装Docker-CE</h3><p>注意事项：本步骤分两部分，仅需按需求使用其一</p>\n<h4 id=\"安装最新版\"><a href=\"#安装最新版\" class=\"headerlink\" title=\"安装最新版\"></a>安装最新版</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install -y docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装指定版本\"><a href=\"#安装指定版本\" class=\"headerlink\" title=\"安装指定版本\"></a>安装指定版本</h4><p>列出可用版本</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"><span class=\"meta prompt_\"></span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">显示结果</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  3:18.09.1-3.el7                     docker-ce-stable</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  3:18.09.0-3.el7                     docker-ce-stable</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  18.06.1.ce-3.el7                    docker-ce-stable</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">docker-ce.x86_64  18.06.0.ce-3.el7                    docker-ce-stable</span></span><br></pre></td></tr></table></figure>\n<p>安装指定版本<br>需要替换为第二列的版本号，如：18.06.0.ce-3.el7</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io</span><br></pre></td></tr></table></figure>\n<h3 id=\"设置镜像代理\"><a href=\"#设置镜像代理\" class=\"headerlink\" title=\"设置镜像代理\"></a>设置<strong>镜像代理</strong></h3><p><strong>阿里Docker镜像云服务</strong><br><a href=\"https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors\">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors</a></p>\n<h2 id=\"运行\"><a href=\"#运行\" class=\"headerlink\" title=\"运行\"></a>运行</h2><h3 id=\"启动Docker服务\"><a href=\"#启动Docker服务\" class=\"headerlink\" title=\"启动Docker服务\"></a>启动Docker服务</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start docker</span><br></pre></td></tr></table></figure>\n<h3 id=\"运行镜像\"><a href=\"#运行镜像\" class=\"headerlink\" title=\"运行镜像\"></a>运行镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run  hello-world</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看本地的镜像\"><a href=\"#查看本地的镜像\" class=\"headerlink\" title=\"查看本地的镜像\"></a>查看本地的镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2022/png/21973095/1672381927401-6e68e3d2-847d-42e8-aeba-d5aec4ca9a9c.png#averageHue=%23262a2c&id=xsf1S&originHeight=77&originWidth=821&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=\"></p>\n<ul>\n<li>REPOSITORY:表示 镜像的仓库源</li>\n<li>TAG: 表示镜像的版本标签 （:版本号）</li>\n<li>IMAGE ID :镜像ID</li>\n<li>CREATED :镜像创建的时间</li>\n<li>SIZE: 镜像的大小</li>\n</ul>\n<h3 id=\"所有本地镜像包含中间镜像层\"><a href=\"#所有本地镜像包含中间镜像层\" class=\"headerlink\" title=\"所有本地镜像包含中间镜像层\"></a>所有本地镜像包含中间镜像层</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -a</span><br></pre></td></tr></table></figure>\n<h3 id=\"只显示镜像的ID\"><a href=\"#只显示镜像的ID\" class=\"headerlink\" title=\"只显示镜像的ID\"></a>只显示镜像的ID</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -q</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示当前镜像的ID\"><a href=\"#显示当前镜像的ID\" class=\"headerlink\" title=\"显示当前镜像的ID\"></a>显示当前镜像的ID</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images -qa</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示镜像的描述信息\"><a href=\"#显示镜像的描述信息\" class=\"headerlink\" title=\"显示镜像的描述信息\"></a>显示镜像的描述信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images --digests</span><br></pre></td></tr></table></figure>\n<h3 id=\"显示完整的镜像信息\"><a href=\"#显示完整的镜像信息\" class=\"headerlink\" title=\"显示完整的镜像信息\"></a>显示完整的镜像信息</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker images --digests --no-trunc</span><br></pre></td></tr></table></figure>\n<h3 id=\"查找镜像命名\"><a href=\"#查找镜像命名\" class=\"headerlink\" title=\"查找镜像命名\"></a>查找镜像命名</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search 镜像名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"找Start大于30的tomca\"><a href=\"#找Start大于30的tomca\" class=\"headerlink\" title=\"找Start大于30的tomca\"></a>找Start大于30的tomca</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker search -s 30 tomcat</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull 镜像名称:latest   </span><br></pre></td></tr></table></figure>\n<h3 id=\"删除镜像\"><a href=\"#删除镜像\" class=\"headerlink\" title=\"删除镜像\"></a>删除镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi 镜像名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"强制删除\"><a href=\"#强制删除\" class=\"headerlink\" title=\"强制删除\"></a>强制删除</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f 镜像名称</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除多个镜像\"><a href=\"#删除多个镜像\" class=\"headerlink\" title=\"删除多个镜像\"></a>删除多个镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi  镜像名称 :TAG  镜像名称2:TAG</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除全部镜像\"><a href=\"#删除全部镜像\" class=\"headerlink\" title=\"删除全部镜像\"></a>删除全部镜像</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rmi -f $(docker images -q)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建一个新的容器并运行一个命令\"><a href=\"#创建一个新的容器并运行一个命令\" class=\"headerlink\" title=\"创建一个新的容器并运行一个命令\"></a>创建一个新的容器并运行一个命令</h3><h4 id=\"基本语法\"><a href=\"#基本语法\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>\n<h4 id=\"OPTIONS说明\"><a href=\"#OPTIONS说明\" class=\"headerlink\" title=\"OPTIONS说明\"></a>OPTIONS说明</h4><ul>\n<li><strong>-a stdin:</strong> 指定标准输入输出内容类型，可选 STDIN&#x2F;STDOUT&#x2F;STDERR 三项；</li>\n<li><strong>-d:</strong> 后台运行容器，并返回容器ID；</li>\n<li><strong>-i:</strong> 以交互模式运行容器，通常与 -t 同时使用；</li>\n<li><strong>-t:</strong> 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li>\n<li><strong>-P:</strong> 随机端口映射，容器内部端口<strong>随机</strong>映射到主机的高端口</li>\n<li><strong>-p:</strong> 指定端口映射，格式为：<strong>主机(宿主)端口:容器端口</strong></li>\n<li><strong>–name&#x3D;”nginx-lb”:</strong> 为容器指定一个名称；</li>\n<li><strong>–dns 8.8.8.8:</strong> 指定容器使用的DNS服务器，默认和宿主一致；</li>\n<li><strong>–dns-search example.com:</strong> 指定容器DNS搜索域名，默认和宿主一致；</li>\n<li><strong>-h “mars”:</strong> 指定容器的hostname；</li>\n<li><strong>-e username&#x3D;”ritchie”:</strong> 设置环境变量；</li>\n<li><strong>–env-file&#x3D;[]:</strong> 从指定文件读入环境变量；</li>\n<li><strong>–cpuset&#x3D;”0-2” or –cpuset&#x3D;”0,1,2”:</strong> 绑定容器到指定CPU运行；</li>\n<li>**-m :**设置容器使用内存最大值；</li>\n<li><strong>–net&#x3D;”bridge”:</strong> 指定容器的网络连接类型，支持 bridge&#x2F;host&#x2F;none&#x2F;container: 四种类型；</li>\n<li><strong>–link&#x3D;[]:</strong> 添加链接到另一个容器；</li>\n<li><strong>–expose&#x3D;[]:</strong> 开放一个端口或一组端口；</li>\n<li>**–volume , -v: **绑定一个卷</li>\n</ul>\n<h4 id=\"测试用例\"><a href=\"#测试用例\" class=\"headerlink\" title=\"测试用例\"></a>测试用例</h4><p>使用docker镜像nginx:latest以后台模式启动一个容器,并将容器命名为mynginx。<br><code>docker run --name mynginx -d nginx:latest</code><br>使用镜像nginx:latest以后台模式启动一个容器,并将容器的80端口映射到主机随机端口。<br><code>docker run -P -d nginx:latest</code><br>使用镜像 nginx:latest，以后台模式启动一个容器,将容器的 80 端口映射到主机的 80 端口,主机的目录 &#x2F;data 映射到容器的 &#x2F;data。<br><code>docker run -p 80:80 -v /data:/data -d nginx:latest</code><br>绑定容器的 8080 端口，并将其映射到本地主机 127.0.0.1 的 80 端口上。<br><code>$docker run -p 127.0.0.1:80:8080/tcp ubuntu bash</code><br>使用镜像nginx:latest以交互模式启动一**-n:** 显示最近N个容器；个容器,在容器内执行&#x2F;bin&#x2F;bash命令。<br><code>docker run -it nginx:latest /bin/bash</code></p>\n<h3 id=\"查看正在运行的容器\"><a href=\"#查看正在运行的容器\" class=\"headerlink\" title=\"查看正在运行的容器\"></a>查看正在运行的容器</h3><h4 id=\"基本语法-1\"><a href=\"#基本语法-1\" class=\"headerlink\" title=\"基本语法\"></a>基本语法</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker ps  [OPTIONS] </span><br></pre></td></tr></table></figure>\n<h4 id=\"OPTIONS说明：\"><a href=\"#OPTIONS说明：\" class=\"headerlink\" title=\"OPTIONS说明：\"></a>OPTIONS说明：</h4><ul>\n<li>**-a :**当前正在运行的+历史运行过的；</li>\n<li><strong>-l:</strong> 最近创建的容器ID；</li>\n<li><strong>-n:</strong> 显示最近N个容器；</li>\n<li><strong>-q:</strong> 静默模式，只显示容器Id</li>\n<li>-<strong>-no -trunc</strong>；不断输出</li>\n</ul>\n<h4 id=\"退出容器\"><a href=\"#退出容器\" class=\"headerlink\" title=\"退出容器\"></a>退出容器</h4><p><code>exit</code> 容器停止推出<br><code>ctrl+P+Q </code>容器不停止退出</p>\n<h4 id=\"启动容器\"><a href=\"#启动容器\" class=\"headerlink\" title=\"启动容器\"></a>启动容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker start 容器名称或ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"重启容器\"><a href=\"#重启容器\" class=\"headerlink\" title=\"重启容器\"></a>重启容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker restart 容器名称或ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"停止容器\"><a href=\"#停止容器\" class=\"headerlink\" title=\"停止容器\"></a>停止容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker stop 容器名称或ID   （温柔）</span><br><span class=\"line\"></span><br><span class=\"line\">docker kill 容器名称或ID   （强制停止）</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除容器\"><a href=\"#删除容器\" class=\"headerlink\" title=\"删除容器\"></a>删除容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm 容器名称或ID</span><br></pre></td></tr></table></figure>\n<h4 id=\"一次性删除多个容器\"><a href=\"#一次性删除多个容器\" class=\"headerlink\" title=\"一次性删除多个容器\"></a>一次性删除多个容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker rm  -f $(docker ps -a -q)</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">或</span></span><br><span class=\"line\">docker ps -a -q|xagrgs docker rm</span><br></pre></td></tr></table></figure>\n<p>查看容器内部的细节</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器ID或容器名</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看容器的IP地址\"><a href=\"#查看容器的IP地址\" class=\"headerlink\" title=\"查看容器的IP地址\"></a>查看容器的IP地址</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker inspect 容器ID或容器名 |grep &quot;IPAddress&quot;</span><br></pre></td></tr></table></figure>\n<h4 id=\"连接运行的容器并以命令行交互\"><a href=\"#连接运行的容器并以命令行交互\" class=\"headerlink\" title=\"连接运行的容器并以命令行交互\"></a>连接运行的容器并以命令行交互</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it 容器ID bashShell(shell命令)</span><br></pre></td></tr></table></figure>\n<h4 id=\"重新进入容器\"><a href=\"#重新进入容器\" class=\"headerlink\" title=\"重新进入容器\"></a>重新进入容器</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker attach 容器ID</span><br></pre></td></tr></table></figure>\n<p><strong>exec与 attach的区别</strong></p>\n<ul>\n<li>attach :直接进入容器，启动命令终端，不会启动新的进程</li>\n<li>exec：实在容器中打开新的终端，并且可以启动新的</li>\n</ul>\n"},{"title":"Dockerfile 基本语法","date":"2021-12-20T04:30:00.000Z","_content":"\n# 保留字介绍\n## FROM\n基础镜像，当前镜像是基于那个镜像创建的\n## MAINTAINER\n镜像作者加邮箱\n## RUN\n构建镜像时执行的命令\n## EXPOSE\n镜像暴露的端口\n## WORKDIR\n指定容器创建后，终端默认登陆进来的工作目录，一个落脚点\n##  ENV (key value)\n构建镜像中设置环境变量(键值对)\n## ADD\n添加并解压缩\n```dockerfile\nADD 源路径 目标路径 \n```\nCOPY\n## 添加并解压缩\n```dockerfile\nCOPY 源路径 目标路径 \n```\n##  VOLUME\n容器卷，用于数据保存和持久化工作\n##  CMD (exec/shell)\n指定容器启动时的命令，一个容器可有多个cmd 命令，但只有最后一个生效,CMD 会被docker run 的参数替换\n##  ENTRYPOINT XXX\n指定容器启动时的命令，追加 docker run 的参数\n##  ONBUILD XXX\n当构建一个被继承的Dockerfile 时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD 被触发\n\n# 案例\n## 自定义mycentos 镜像\n自定义mycentos 镜像让其具备以下功能：\n\n- 登陆后的默认lujing\n- vim 编辑器\n- 查看网络配置 ipconfig\n```dockerfile\nFROM centos\nMAINTAINER Mr.Wang<wry10150@outlook.com>\nENV mypath /temp\nWORKDIR  $mypath\nRUN yum -y install vim\nRUN yum -y install net-tools\nEXPOSE 80\nCMD /bin/bash\n```\n","source":"_posts/2023/dockerfile.md","raw":"---\ntitle: Dockerfile 基本语法\ndate: 2021-12-20 12:30:00\ntags:\n - docker\ncategories:\n - Docker\n---\n\n# 保留字介绍\n## FROM\n基础镜像，当前镜像是基于那个镜像创建的\n## MAINTAINER\n镜像作者加邮箱\n## RUN\n构建镜像时执行的命令\n## EXPOSE\n镜像暴露的端口\n## WORKDIR\n指定容器创建后，终端默认登陆进来的工作目录，一个落脚点\n##  ENV (key value)\n构建镜像中设置环境变量(键值对)\n## ADD\n添加并解压缩\n```dockerfile\nADD 源路径 目标路径 \n```\nCOPY\n## 添加并解压缩\n```dockerfile\nCOPY 源路径 目标路径 \n```\n##  VOLUME\n容器卷，用于数据保存和持久化工作\n##  CMD (exec/shell)\n指定容器启动时的命令，一个容器可有多个cmd 命令，但只有最后一个生效,CMD 会被docker run 的参数替换\n##  ENTRYPOINT XXX\n指定容器启动时的命令，追加 docker run 的参数\n##  ONBUILD XXX\n当构建一个被继承的Dockerfile 时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD 被触发\n\n# 案例\n## 自定义mycentos 镜像\n自定义mycentos 镜像让其具备以下功能：\n\n- 登陆后的默认lujing\n- vim 编辑器\n- 查看网络配置 ipconfig\n```dockerfile\nFROM centos\nMAINTAINER Mr.Wang<wry10150@outlook.com>\nENV mypath /temp\nWORKDIR  $mypath\nRUN yum -y install vim\nRUN yum -y install net-tools\nEXPOSE 80\nCMD /bin/bash\n```\n","slug":"2023/dockerfile","published":1,"updated":"2024-08-05T11:07:24.333Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy1000b0aib0mkcbwcv","content":"<h1 id=\"保留字介绍\"><a href=\"#保留字介绍\" class=\"headerlink\" title=\"保留字介绍\"></a>保留字介绍</h1><h2 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h2><p>基础镜像，当前镜像是基于那个镜像创建的</p>\n<h2 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h2><p>镜像作者加邮箱</p>\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><p>构建镜像时执行的命令</p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h2><p>镜像暴露的端口</p>\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h2><p>指定容器创建后，终端默认登陆进来的工作目录，一个落脚点</p>\n<h2 id=\"ENV-key-value\"><a href=\"#ENV-key-value\" class=\"headerlink\" title=\"ENV (key value)\"></a>ENV (key value)</h2><p>构建镜像中设置环境变量(键值对)</p>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h2><p>添加并解压缩</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> 源路径 目标路径 </span></span><br></pre></td></tr></table></figure>\n<p>COPY</p>\n<h2 id=\"添加并解压缩\"><a href=\"#添加并解压缩\" class=\"headerlink\" title=\"添加并解压缩\"></a>添加并解压缩</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> 源路径 目标路径 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h2><p>容器卷，用于数据保存和持久化工作</p>\n<h2 id=\"CMD-exec-shell\"><a href=\"#CMD-exec-shell\" class=\"headerlink\" title=\"CMD (exec&#x2F;shell)\"></a>CMD (exec&#x2F;shell)</h2><p>指定容器启动时的命令，一个容器可有多个cmd 命令，但只有最后一个生效,CMD 会被docker run 的参数替换</p>\n<h2 id=\"ENTRYPOINT-XXX\"><a href=\"#ENTRYPOINT-XXX\" class=\"headerlink\" title=\"ENTRYPOINT XXX\"></a>ENTRYPOINT XXX</h2><p>指定容器启动时的命令，追加 docker run 的参数</p>\n<h2 id=\"ONBUILD-XXX\"><a href=\"#ONBUILD-XXX\" class=\"headerlink\" title=\"ONBUILD XXX\"></a>ONBUILD XXX</h2><p>当构建一个被继承的Dockerfile 时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD 被触发</p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"自定义mycentos-镜像\"><a href=\"#自定义mycentos-镜像\" class=\"headerlink\" title=\"自定义mycentos 镜像\"></a>自定义mycentos 镜像</h2><p>自定义mycentos 镜像让其具备以下功能：</p>\n<ul>\n<li>登陆后的默认lujing</li>\n<li>vim 编辑器</li>\n<li>查看网络配置 ipconfig<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Mr.Wang&lt;wry10150@outlook.com&gt;</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> mypath /temp</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\">  <span class=\"variable\">$mypath</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install vim</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install net-tools</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","cover":false,"excerpt":"","more":"<h1 id=\"保留字介绍\"><a href=\"#保留字介绍\" class=\"headerlink\" title=\"保留字介绍\"></a>保留字介绍</h1><h2 id=\"FROM\"><a href=\"#FROM\" class=\"headerlink\" title=\"FROM\"></a>FROM</h2><p>基础镜像，当前镜像是基于那个镜像创建的</p>\n<h2 id=\"MAINTAINER\"><a href=\"#MAINTAINER\" class=\"headerlink\" title=\"MAINTAINER\"></a>MAINTAINER</h2><p>镜像作者加邮箱</p>\n<h2 id=\"RUN\"><a href=\"#RUN\" class=\"headerlink\" title=\"RUN\"></a>RUN</h2><p>构建镜像时执行的命令</p>\n<h2 id=\"EXPOSE\"><a href=\"#EXPOSE\" class=\"headerlink\" title=\"EXPOSE\"></a>EXPOSE</h2><p>镜像暴露的端口</p>\n<h2 id=\"WORKDIR\"><a href=\"#WORKDIR\" class=\"headerlink\" title=\"WORKDIR\"></a>WORKDIR</h2><p>指定容器创建后，终端默认登陆进来的工作目录，一个落脚点</p>\n<h2 id=\"ENV-key-value\"><a href=\"#ENV-key-value\" class=\"headerlink\" title=\"ENV (key value)\"></a>ENV (key value)</h2><p>构建镜像中设置环境变量(键值对)</p>\n<h2 id=\"ADD\"><a href=\"#ADD\" class=\"headerlink\" title=\"ADD\"></a>ADD</h2><p>添加并解压缩</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ADD</span><span class=\"language-bash\"> 源路径 目标路径 </span></span><br></pre></td></tr></table></figure>\n<p>COPY</p>\n<h2 id=\"添加并解压缩\"><a href=\"#添加并解压缩\" class=\"headerlink\" title=\"添加并解压缩\"></a>添加并解压缩</h2><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">COPY</span><span class=\"language-bash\"> 源路径 目标路径 </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"VOLUME\"><a href=\"#VOLUME\" class=\"headerlink\" title=\"VOLUME\"></a>VOLUME</h2><p>容器卷，用于数据保存和持久化工作</p>\n<h2 id=\"CMD-exec-shell\"><a href=\"#CMD-exec-shell\" class=\"headerlink\" title=\"CMD (exec&#x2F;shell)\"></a>CMD (exec&#x2F;shell)</h2><p>指定容器启动时的命令，一个容器可有多个cmd 命令，但只有最后一个生效,CMD 会被docker run 的参数替换</p>\n<h2 id=\"ENTRYPOINT-XXX\"><a href=\"#ENTRYPOINT-XXX\" class=\"headerlink\" title=\"ENTRYPOINT XXX\"></a>ENTRYPOINT XXX</h2><p>指定容器启动时的命令，追加 docker run 的参数</p>\n<h2 id=\"ONBUILD-XXX\"><a href=\"#ONBUILD-XXX\" class=\"headerlink\" title=\"ONBUILD XXX\"></a>ONBUILD XXX</h2><p>当构建一个被继承的Dockerfile 时运行命令，父镜像在被子镜像继承后，父镜像的ONBUILD 被触发</p>\n<h1 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h1><h2 id=\"自定义mycentos-镜像\"><a href=\"#自定义mycentos-镜像\" class=\"headerlink\" title=\"自定义mycentos 镜像\"></a>自定义mycentos 镜像</h2><p>自定义mycentos 镜像让其具备以下功能：</p>\n<ul>\n<li>登陆后的默认lujing</li>\n<li>vim 编辑器</li>\n<li>查看网络配置 ipconfig<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">FROM</span> centos</span><br><span class=\"line\"><span class=\"keyword\">MAINTAINER</span> Mr.Wang&lt;wry10150@outlook.com&gt;</span><br><span class=\"line\"><span class=\"keyword\">ENV</span> mypath /temp</span><br><span class=\"line\"><span class=\"keyword\">WORKDIR</span><span class=\"language-bash\">  <span class=\"variable\">$mypath</span></span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install vim</span></span><br><span class=\"line\"><span class=\"keyword\">RUN</span><span class=\"language-bash\"> yum -y install net-tools</span></span><br><span class=\"line\"><span class=\"keyword\">EXPOSE</span> <span class=\"number\">80</span></span><br><span class=\"line\"><span class=\"keyword\">CMD</span><span class=\"language-bash\"> /bin/bash</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"GitLab-CI-SpringBoot","date":"2021-12-20T04:30:00.000Z","_content":"\n# GitLab-CI介绍\n[官方介绍](https://docs.gitlab.cn/ee/ci/index.html)\n# .gitlab-ci.yml语法介绍\n[官方.gitlab-ci.yml说明](https://docs.gitlab.cn/ee/ci/yaml/index.html)\n# 创建SpringBoot项目\n\n\n# 使用Google的Jib插件构建docker镜像\n[官方文档](https://github.com/GoogleContainerTools/jib/tree/v2.0.0-gradle/jib-gradle-plugin#quickstart)\n```kotlin\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    // 引入Google的Jib插件\n    id(\"com.google.cloud.tools.jib\") version \"3.3.1\"\n    \n    id(\"org.springframework.boot\") version \"2.6.8\"\n    id(\"io.spring.dependency-management\") version \"1.0.11.RELEASE\"\n    kotlin(\"jvm\") version \"1.6.21\"\n    kotlin(\"plugin.spring\") version \"1.6.21\"\n    java\n}\napply<JavaPlugin>()\napply<JavaLibraryPlugin>()\n\ngroup = \"com.wry\"\nversion = \"0.0.1-SNAPSHOT\"\njava.sourceCompatibility = JavaVersion.VERSION_1_8\n\nrepositories {\n    // 阿里云\n    maven(\"https://maven.aliyun.com/repository/public/\")\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"org.springframework.boot:spring-boot-starter-web\")\n    implementation(\"com.fasterxml.jackson.module:jackson-module-kotlin\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n}\n\n// 配置构建镜像的基本信息\nconfigure<com.google.cloud.tools.jib.gradle.JibExtension>{\n    setAllowInsecureRegistries(true)\n    from {\n        image = \"openjdk:8\"\n    }\n    to {\n        image = \"wry/${project.name}\"\n        tags = mutableSetOf(\"latest\")\n    }\n    container {\n        appRoot = \"/app\"\n        workingDirectory = \"/app\"\n        jvmFlags = mutableListOf(\n            \"-Dspring.backgroundpreinitializer.ignore=true\", // spring优化线程\n            \"-Duser.timezone=Asia/Shanghai\",\n            \"-Dproject.name=${project.name}\"\n        )\n        ports = mutableListOf(\"8080\")\n    }\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions {\n        freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n        jvmTarget = \"1.8\"\n    }\n}\n\ntasks.withType<Test> {\n    useJUnitPlatform()\n}\n\n```\n# 编写.gitlab-ci.yml\n```yaml\ndefault:\n  image: openjdk:8\n\n# 自定义阶段\nstages:\n  - build\n  - deploy\n\n# 项目构建docker image压缩文件阶段\nbuild:\n  stage: build\n  image: openjdk:8\n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - ./gradlew jibDockerBuild\n\n\n# 部署阶段\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n# 使用常见的`Docker-runner`执行器运行CI\n## 执行CI过程中出现错误\n![image.png](img_12.png)\n## 错误原因\n`GitLab-CI `执行器是`docker`,跑任务的时候会启动一个`docker`容器， 容器内部没有`docker`环境，所以找不到docker 守护进程**\n\n## 解决办法\n翻阅GitLab官方文档,看到GitLab-runner有一个Docker-In-Docker模式，可以在容器中使用docker环境\n[官方链接](https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html)\n# 注册Docker-In-Docker模式的GitLab-runner\n## 查看docker版本信息\n查看宿主机`docker`版本信息\n```shell\ndocker version\n```\n![image.png](img_5.png)\n\n## 注册GitLab-Runner\n```yaml\ndocker-compose exec <compose-service-name> gitlab-runner register -n \\\n  --url \"<url>\" \\\n  --registration-token \"<token>\" \\\n  --executor docker \\\n  --description \"Docker In Docker Runner\" \\\n  --docker-image \"docker:20.10.22\" \\\n  --docker-privileged \\\n  --tag-list \"docker-in-docker\" \n  \n  # 例子\n  # \n  # docker-compose exec gitlab-runner gitlab-runner register -n \\\n  # --url \"http://120.76.142.218\" \\\n  # --registration-token \"RB3asxbMJMv3GXXX\" \\\n  # --executor docker \\\n  # --description \"Docker In Docker Runner\" \\\n  # --docker-image \"docker:20.10.22\" \\\n  # --docker-privileged \\\n  # --tag-list \"docker-in-docker\" \n```\n## 查看结果\nhttp://IP:PORT/admin/runners\n\n![image.png](img_6.png)\n\n# 修改`.gitlab-ci.yml`文件\n```yaml\ndefault:\n  image: docker:20.10.22\n  tags:\n    - docker-in-docker\nvariables:\n  DOCKER_HOST: tcp://120.76.142.218:2375\n\nservices:\n  - docker:20.10.22-dind\n\nstages:\n  - build\n  - deploy\n\nbuild:\n  stage: build\n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - docker version\n    - ./gradlew jibDockerBuild\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n# docker环境无java环境错误\n注册新的`GitLab-runner`后，发现在`docker`环境下无法使用`gradlew`进行docker镜像构建，\n缺少`JAVA`环境\n![image.png](img_7.png)\n\n## 解决办法\n### 把java环境和docker环境分开 （模式一)\n\n- 在java环境下把项目构建成docker镜像压缩包\n- 在docker环境下还原docker镜像压缩包\n\n### 先安装JAVA环境再安装docker环境（模式二)\n\n- 在java环境下安装docker使其连接宿主机docker环境\n\n[https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image](https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image)\n# 修改`.gitlab-ci.yml`文件\n`docker-in-docker`模式`.gitlab-ci.yml`\n[官方推荐写法](https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html#%E4%BD%BF%E7%94%A8-docker-in-docker)\n## 模式一\n**把java环境和docker环境分开**\n```yaml\n# 官方定义写法\ndefault:\n  image: docker:20.10.22\n  tags:\n    - docker-in-docker\nvariables:\n  DOCKER_HOST: tcp://120.76.142.218:2375\nservices:\n  - docker:20.10.22-dind\n\n# 自定义阶段\nstages:\n  - build\n  - docker-image\n  - deploy\n\n# 使用缓存，避免每次执行Job都下载依赖\ncache:\n  paths:\n    - build  \n    - .gradle/wrapper\n    - .gradle/caches\n\n# 前置阶段，输出docker信息\necho:\n  stage: .pre\n  script:\n    - docker info\n\n# 项目构建docker image压缩文件阶段\nbuild:\n  stage: build\n  image: openjdk:8\n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - ./gradlew jibBuildTar\n\n# docker 还原image压缩文件阶段\ndocker-image:\n  stage: docker-image\n  script:\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - docker load --input build/jib-image.tar\n\n# 部署阶段\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n## 模式二\n**先安装JAVA环境再安装docker环境**\n```yaml\ndefault:\n  image: docker:20.10.22\n  tags:\n    - docker-in-docker\nvariables:\n  DOCKER_HOST: tcp://120.76.142.218:2375\n\nservices:\n  - docker:20.10.22-dind\n\nstages:\n  - build\n  - deploy\n\n\necho:\n  stage: .pre\n  script:\n    - docker info\n\nbuild:\n  stage: build\n  image: gradle:jdk8  \n  services:\n    - docker:20.10.22-dind\n  variables:\n    DOCKER_HOST: tcp://120.76.142.218:2375\n  before_script:\n    - apt update && apt install --no-install-recommends -y docker.io \n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - docker version\n    - ./gradlew jibDockerBuild\n\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n# 运行CI\n![image.png](img_8.png)\n![image.png](img_9.png)\n\n# 查看运行的docker容器\n![image.png](img_10.png)\n\n# 测试\n![image.png](img_11.png)\n","source":"_posts/2023/gitlab-ci-springboot.md","raw":"---\ntitle: GitLab-CI-SpringBoot\ndate: 2021-12-20 12:30:00\ntags:\n - docker\ncategories:\n - Docker\n---\n\n# GitLab-CI介绍\n[官方介绍](https://docs.gitlab.cn/ee/ci/index.html)\n# .gitlab-ci.yml语法介绍\n[官方.gitlab-ci.yml说明](https://docs.gitlab.cn/ee/ci/yaml/index.html)\n# 创建SpringBoot项目\n\n\n# 使用Google的Jib插件构建docker镜像\n[官方文档](https://github.com/GoogleContainerTools/jib/tree/v2.0.0-gradle/jib-gradle-plugin#quickstart)\n```kotlin\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    // 引入Google的Jib插件\n    id(\"com.google.cloud.tools.jib\") version \"3.3.1\"\n    \n    id(\"org.springframework.boot\") version \"2.6.8\"\n    id(\"io.spring.dependency-management\") version \"1.0.11.RELEASE\"\n    kotlin(\"jvm\") version \"1.6.21\"\n    kotlin(\"plugin.spring\") version \"1.6.21\"\n    java\n}\napply<JavaPlugin>()\napply<JavaLibraryPlugin>()\n\ngroup = \"com.wry\"\nversion = \"0.0.1-SNAPSHOT\"\njava.sourceCompatibility = JavaVersion.VERSION_1_8\n\nrepositories {\n    // 阿里云\n    maven(\"https://maven.aliyun.com/repository/public/\")\n    mavenCentral()\n}\n\ndependencies {\n    implementation(\"org.springframework.boot:spring-boot-starter-web\")\n    implementation(\"com.fasterxml.jackson.module:jackson-module-kotlin\")\n    implementation(\"org.jetbrains.kotlin:kotlin-reflect\")\n    implementation(\"org.jetbrains.kotlin:kotlin-stdlib-jdk8\")\n    testImplementation(\"org.springframework.boot:spring-boot-starter-test\")\n}\n\n// 配置构建镜像的基本信息\nconfigure<com.google.cloud.tools.jib.gradle.JibExtension>{\n    setAllowInsecureRegistries(true)\n    from {\n        image = \"openjdk:8\"\n    }\n    to {\n        image = \"wry/${project.name}\"\n        tags = mutableSetOf(\"latest\")\n    }\n    container {\n        appRoot = \"/app\"\n        workingDirectory = \"/app\"\n        jvmFlags = mutableListOf(\n            \"-Dspring.backgroundpreinitializer.ignore=true\", // spring优化线程\n            \"-Duser.timezone=Asia/Shanghai\",\n            \"-Dproject.name=${project.name}\"\n        )\n        ports = mutableListOf(\"8080\")\n    }\n}\n\ntasks.withType<KotlinCompile> {\n    kotlinOptions {\n        freeCompilerArgs = listOf(\"-Xjsr305=strict\")\n        jvmTarget = \"1.8\"\n    }\n}\n\ntasks.withType<Test> {\n    useJUnitPlatform()\n}\n\n```\n# 编写.gitlab-ci.yml\n```yaml\ndefault:\n  image: openjdk:8\n\n# 自定义阶段\nstages:\n  - build\n  - deploy\n\n# 项目构建docker image压缩文件阶段\nbuild:\n  stage: build\n  image: openjdk:8\n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - ./gradlew jibDockerBuild\n\n\n# 部署阶段\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n# 使用常见的`Docker-runner`执行器运行CI\n## 执行CI过程中出现错误\n![image.png](img_12.png)\n## 错误原因\n`GitLab-CI `执行器是`docker`,跑任务的时候会启动一个`docker`容器， 容器内部没有`docker`环境，所以找不到docker 守护进程**\n\n## 解决办法\n翻阅GitLab官方文档,看到GitLab-runner有一个Docker-In-Docker模式，可以在容器中使用docker环境\n[官方链接](https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html)\n# 注册Docker-In-Docker模式的GitLab-runner\n## 查看docker版本信息\n查看宿主机`docker`版本信息\n```shell\ndocker version\n```\n![image.png](img_5.png)\n\n## 注册GitLab-Runner\n```yaml\ndocker-compose exec <compose-service-name> gitlab-runner register -n \\\n  --url \"<url>\" \\\n  --registration-token \"<token>\" \\\n  --executor docker \\\n  --description \"Docker In Docker Runner\" \\\n  --docker-image \"docker:20.10.22\" \\\n  --docker-privileged \\\n  --tag-list \"docker-in-docker\" \n  \n  # 例子\n  # \n  # docker-compose exec gitlab-runner gitlab-runner register -n \\\n  # --url \"http://120.76.142.218\" \\\n  # --registration-token \"RB3asxbMJMv3GXXX\" \\\n  # --executor docker \\\n  # --description \"Docker In Docker Runner\" \\\n  # --docker-image \"docker:20.10.22\" \\\n  # --docker-privileged \\\n  # --tag-list \"docker-in-docker\" \n```\n## 查看结果\nhttp://IP:PORT/admin/runners\n\n![image.png](img_6.png)\n\n# 修改`.gitlab-ci.yml`文件\n```yaml\ndefault:\n  image: docker:20.10.22\n  tags:\n    - docker-in-docker\nvariables:\n  DOCKER_HOST: tcp://120.76.142.218:2375\n\nservices:\n  - docker:20.10.22-dind\n\nstages:\n  - build\n  - deploy\n\nbuild:\n  stage: build\n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - docker version\n    - ./gradlew jibDockerBuild\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n# docker环境无java环境错误\n注册新的`GitLab-runner`后，发现在`docker`环境下无法使用`gradlew`进行docker镜像构建，\n缺少`JAVA`环境\n![image.png](img_7.png)\n\n## 解决办法\n### 把java环境和docker环境分开 （模式一)\n\n- 在java环境下把项目构建成docker镜像压缩包\n- 在docker环境下还原docker镜像压缩包\n\n### 先安装JAVA环境再安装docker环境（模式二)\n\n- 在java环境下安装docker使其连接宿主机docker环境\n\n[https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image](https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image)\n# 修改`.gitlab-ci.yml`文件\n`docker-in-docker`模式`.gitlab-ci.yml`\n[官方推荐写法](https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html#%E4%BD%BF%E7%94%A8-docker-in-docker)\n## 模式一\n**把java环境和docker环境分开**\n```yaml\n# 官方定义写法\ndefault:\n  image: docker:20.10.22\n  tags:\n    - docker-in-docker\nvariables:\n  DOCKER_HOST: tcp://120.76.142.218:2375\nservices:\n  - docker:20.10.22-dind\n\n# 自定义阶段\nstages:\n  - build\n  - docker-image\n  - deploy\n\n# 使用缓存，避免每次执行Job都下载依赖\ncache:\n  paths:\n    - build  \n    - .gradle/wrapper\n    - .gradle/caches\n\n# 前置阶段，输出docker信息\necho:\n  stage: .pre\n  script:\n    - docker info\n\n# 项目构建docker image压缩文件阶段\nbuild:\n  stage: build\n  image: openjdk:8\n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - ./gradlew jibBuildTar\n\n# docker 还原image压缩文件阶段\ndocker-image:\n  stage: docker-image\n  script:\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - docker load --input build/jib-image.tar\n\n# 部署阶段\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n## 模式二\n**先安装JAVA环境再安装docker环境**\n```yaml\ndefault:\n  image: docker:20.10.22\n  tags:\n    - docker-in-docker\nvariables:\n  DOCKER_HOST: tcp://120.76.142.218:2375\n\nservices:\n  - docker:20.10.22-dind\n\nstages:\n  - build\n  - deploy\n\n\necho:\n  stage: .pre\n  script:\n    - docker info\n\nbuild:\n  stage: build\n  image: gradle:jdk8  \n  services:\n    - docker:20.10.22-dind\n  variables:\n    DOCKER_HOST: tcp://120.76.142.218:2375\n  before_script:\n    - apt update && apt install --no-install-recommends -y docker.io \n  script:\n    - chmod +x gradlew\n    - CURRENT_PATH=$PWD\n    - echo \"当前路径：$CURRENT_PATH\"\n    - docker version\n    - ./gradlew jibDockerBuild\n\n\ndeploy:\n  stage: deploy\n  script:\n    - echo \"部署项目\"\n    - docker stop test-spring-boot\n    - docker rm test-spring-boot\n    - docker run -itd --restart=always -p 8081:8080 --name test-spring-boot wry/test-spring-boot\n```\n# 运行CI\n![image.png](img_8.png)\n![image.png](img_9.png)\n\n# 查看运行的docker容器\n![image.png](img_10.png)\n\n# 测试\n![image.png](img_11.png)\n","slug":"2023/gitlab-ci-springboot","published":1,"updated":"2024-08-05T11:07:24.333Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy3000g0aib76176qc1","content":"<h1 id=\"GitLab-CI介绍\"><a href=\"#GitLab-CI介绍\" class=\"headerlink\" title=\"GitLab-CI介绍\"></a>GitLab-CI介绍</h1><p><a href=\"https://docs.gitlab.cn/ee/ci/index.html\">官方介绍</a></p>\n<h1 id=\"gitlab-ci-yml语法介绍\"><a href=\"#gitlab-ci-yml语法介绍\" class=\"headerlink\" title=\".gitlab-ci.yml语法介绍\"></a>.gitlab-ci.yml语法介绍</h1><p><a href=\"https://docs.gitlab.cn/ee/ci/yaml/index.html\">官方.gitlab-ci.yml说明</a></p>\n<h1 id=\"创建SpringBoot项目\"><a href=\"#创建SpringBoot项目\" class=\"headerlink\" title=\"创建SpringBoot项目\"></a>创建SpringBoot项目</h1><h1 id=\"使用Google的Jib插件构建docker镜像\"><a href=\"#使用Google的Jib插件构建docker镜像\" class=\"headerlink\" title=\"使用Google的Jib插件构建docker镜像\"></a>使用Google的Jib插件构建docker镜像</h1><p><a href=\"https://github.com/GoogleContainerTools/jib/tree/v2.0.0-gradle/jib-gradle-plugin#quickstart\">官方文档</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引入Google的Jib插件</span></span><br><span class=\"line\">    id(<span class=\"string\">&quot;com.google.cloud.tools.jib&quot;</span>) version <span class=\"string\">&quot;3.3.1&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    id(<span class=\"string\">&quot;org.springframework.boot&quot;</span>) version <span class=\"string\">&quot;2.6.8&quot;</span></span><br><span class=\"line\">    id(<span class=\"string\">&quot;io.spring.dependency-management&quot;</span>) version <span class=\"string\">&quot;1.0.11.RELEASE&quot;</span></span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;jvm&quot;</span>) version <span class=\"string\">&quot;1.6.21&quot;</span></span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;plugin.spring&quot;</span>) version <span class=\"string\">&quot;1.6.21&quot;</span></span><br><span class=\"line\">    java</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply&lt;JavaPlugin&gt;()</span><br><span class=\"line\">apply&lt;JavaLibraryPlugin&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">group = <span class=\"string\">&quot;com.wry&quot;</span></span><br><span class=\"line\">version = <span class=\"string\">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class=\"line\">java.sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 阿里云</span></span><br><span class=\"line\">    maven(<span class=\"string\">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span>)</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span>)</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;</span>)</span><br><span class=\"line\">    testImplementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置构建镜像的基本信息</span></span><br><span class=\"line\">configure&lt;com.google.cloud.tools.jib.gradle.JibExtension&gt;&#123;</span><br><span class=\"line\">    setAllowInsecureRegistries(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    from &#123;</span><br><span class=\"line\">        image = <span class=\"string\">&quot;openjdk:8&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">        image = <span class=\"string\">&quot;wry/<span class=\"subst\">$&#123;project.name&#125;</span>&quot;</span></span><br><span class=\"line\">        tags = mutableSetOf(<span class=\"string\">&quot;latest&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    container &#123;</span><br><span class=\"line\">        appRoot = <span class=\"string\">&quot;/app&quot;</span></span><br><span class=\"line\">        workingDirectory = <span class=\"string\">&quot;/app&quot;</span></span><br><span class=\"line\">        jvmFlags = mutableListOf(</span><br><span class=\"line\">            <span class=\"string\">&quot;-Dspring.backgroundpreinitializer.ignore=true&quot;</span>, <span class=\"comment\">// spring优化线程</span></span><br><span class=\"line\">            <span class=\"string\">&quot;-Duser.timezone=Asia/Shanghai&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;-Dproject.name=<span class=\"subst\">$&#123;project.name&#125;</span>&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        ports = mutableListOf(<span class=\"string\">&quot;8080&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tasks.withType&lt;KotlinCompile&gt; &#123;</span><br><span class=\"line\">    kotlinOptions &#123;</span><br><span class=\"line\">        freeCompilerArgs = listOf(<span class=\"string\">&quot;-Xjsr305=strict&quot;</span>)</span><br><span class=\"line\">        jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tasks.withType&lt;Test&gt; &#123;</span><br><span class=\"line\">    useJUnitPlatform()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写-gitlab-ci-yml\"><a href=\"#编写-gitlab-ci-yml\" class=\"headerlink\" title=\"编写.gitlab-ci.yml\"></a>编写.gitlab-ci.yml</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">openjdk:8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义阶段</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目构建docker image压缩文件阶段</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">openjdk:8</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibDockerBuild</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署阶段</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用常见的Docker-runner执行器运行CI\"><a href=\"#使用常见的Docker-runner执行器运行CI\" class=\"headerlink\" title=\"使用常见的Docker-runner执行器运行CI\"></a>使用常见的<code>Docker-runner</code>执行器运行CI</h1><h2 id=\"执行CI过程中出现错误\"><a href=\"#执行CI过程中出现错误\" class=\"headerlink\" title=\"执行CI过程中出现错误\"></a>执行CI过程中出现错误</h2><p><img src=\"/post/2023/gitlab-ci-springboot/img_12.png\" alt=\"image.png\"></p>\n<h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p><code>GitLab-CI </code>执行器是<code>docker</code>,跑任务的时候会启动一个<code>docker</code>容器， 容器内部没有<code>docker</code>环境，所以找不到docker 守护进程**</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>翻阅GitLab官方文档,看到GitLab-runner有一个Docker-In-Docker模式，可以在容器中使用docker环境<br><a href=\"https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html\">官方链接</a></p>\n<h1 id=\"注册Docker-In-Docker模式的GitLab-runner\"><a href=\"#注册Docker-In-Docker模式的GitLab-runner\" class=\"headerlink\" title=\"注册Docker-In-Docker模式的GitLab-runner\"></a>注册Docker-In-Docker模式的GitLab-runner</h1><h2 id=\"查看docker版本信息\"><a href=\"#查看docker版本信息\" class=\"headerlink\" title=\"查看docker版本信息\"></a>查看docker版本信息</h2><p>查看宿主机<code>docker</code>版本信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/post/2023/gitlab-ci-springboot/img_5.png\" alt=\"image.png\"></p>\n<h2 id=\"注册GitLab-Runner\"><a href=\"#注册GitLab-Runner\" class=\"headerlink\" title=\"注册GitLab-Runner\"></a>注册GitLab-Runner</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-compose</span> <span class=\"string\">exec</span> <span class=\"string\">&lt;compose-service-name&gt;</span> <span class=\"string\">gitlab-runner</span> <span class=\"string\">register</span> <span class=\"string\">-n</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--url</span> <span class=\"string\">&quot;&lt;url&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--registration-token</span> <span class=\"string\">&quot;&lt;token&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--executor</span> <span class=\"string\">docker</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--description</span> <span class=\"string\">&quot;Docker In Docker Runner&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--docker-image</span> <span class=\"string\">&quot;docker:20.10.22&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--docker-privileged</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--tag-list</span> <span class=\"string\">&quot;docker-in-docker&quot;</span> </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 例子</span></span><br><span class=\"line\">  <span class=\"comment\"># </span></span><br><span class=\"line\">  <span class=\"comment\"># docker-compose exec gitlab-runner gitlab-runner register -n \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --url &quot;http://120.76.142.218&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --registration-token &quot;RB3asxbMJMv3GXXX&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --executor docker \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --description &quot;Docker In Docker Runner&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --docker-image &quot;docker:20.10.22&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --docker-privileged \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --tag-list &quot;docker-in-docker&quot; </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h2><p><a href=\"http://IP:PORT/admin/runners\">http://IP:PORT/admin/runners</a></p>\n<p><img src=\"/post/2023/gitlab-ci-springboot/img_6.png\" alt=\"image.png\"></p>\n<h1 id=\"修改-gitlab-ci-yml文件\"><a href=\"#修改-gitlab-ci-yml文件\" class=\"headerlink\" title=\"修改.gitlab-ci.yml文件\"></a>修改<code>.gitlab-ci.yml</code>文件</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:20.10.22</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-in-docker</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">version</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibDockerBuild</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"docker环境无java环境错误\"><a href=\"#docker环境无java环境错误\" class=\"headerlink\" title=\"docker环境无java环境错误\"></a>docker环境无java环境错误</h1><p>注册新的<code>GitLab-runner</code>后，发现在<code>docker</code>环境下无法使用<code>gradlew</code>进行docker镜像构建，<br>缺少<code>JAVA</code>环境<br><img src=\"/post/2023/gitlab-ci-springboot/img_7.png\" alt=\"image.png\"></p>\n<h2 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><h3 id=\"把java环境和docker环境分开-（模式一\"><a href=\"#把java环境和docker环境分开-（模式一\" class=\"headerlink\" title=\"把java环境和docker环境分开 （模式一)\"></a>把java环境和docker环境分开 （模式一)</h3><ul>\n<li>在java环境下把项目构建成docker镜像压缩包</li>\n<li>在docker环境下还原docker镜像压缩包</li>\n</ul>\n<h3 id=\"先安装JAVA环境再安装docker环境（模式二\"><a href=\"#先安装JAVA环境再安装docker环境（模式二\" class=\"headerlink\" title=\"先安装JAVA环境再安装docker环境（模式二)\"></a>先安装JAVA环境再安装docker环境（模式二)</h3><ul>\n<li>在java环境下安装docker使其连接宿主机docker环境</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image\">https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image</a></p>\n<h1 id=\"修改-gitlab-ci-yml文件-1\"><a href=\"#修改-gitlab-ci-yml文件-1\" class=\"headerlink\" title=\"修改.gitlab-ci.yml文件\"></a>修改<code>.gitlab-ci.yml</code>文件</h1><p><code>docker-in-docker</code>模式<code>.gitlab-ci.yml</code><br><a href=\"https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html#%E4%BD%BF%E7%94%A8-docker-in-docker\">官方推荐写法</a></p>\n<h2 id=\"模式一\"><a href=\"#模式一\" class=\"headerlink\" title=\"模式一\"></a>模式一</h2><p><strong>把java环境和docker环境分开</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方定义写法</span></span><br><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:20.10.22</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-in-docker</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义阶段</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker-image</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用缓存，避免每次执行Job都下载依赖</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">build</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.gradle/wrapper</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.gradle/caches</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前置阶段，输出docker信息</span></span><br><span class=\"line\"><span class=\"attr\">echo:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">.pre</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目构建docker image压缩文件阶段</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">openjdk:8</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibBuildTar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker 还原image压缩文件阶段</span></span><br><span class=\"line\"><span class=\"attr\">docker-image:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">docker-image</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">load</span> <span class=\"string\">--input</span> <span class=\"string\">build/jib-image.tar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署阶段</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模式二\"><a href=\"#模式二\" class=\"headerlink\" title=\"模式二\"></a>模式二</h2><p><strong>先安装JAVA环境再安装docker环境</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:20.10.22</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-in-docker</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">echo:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">.pre</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">gradle:jdk8</span>  </span><br><span class=\"line\">  <span class=\"attr\">services:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\">  <span class=\"attr\">variables:</span></span><br><span class=\"line\">    <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">apt</span> <span class=\"string\">update</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">apt</span> <span class=\"string\">install</span> <span class=\"string\">--no-install-recommends</span> <span class=\"string\">-y</span> <span class=\"string\">docker.io</span> </span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">version</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibDockerBuild</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"运行CI\"><a href=\"#运行CI\" class=\"headerlink\" title=\"运行CI\"></a>运行CI</h1><p><img src=\"/post/2023/gitlab-ci-springboot/img_8.png\" alt=\"image.png\"><br><img src=\"/post/2023/gitlab-ci-springboot/img_9.png\" alt=\"image.png\"></p>\n<h1 id=\"查看运行的docker容器\"><a href=\"#查看运行的docker容器\" class=\"headerlink\" title=\"查看运行的docker容器\"></a>查看运行的docker容器</h1><p><img src=\"/post/2023/gitlab-ci-springboot/img_10.png\" alt=\"image.png\"></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p><img src=\"/post/2023/gitlab-ci-springboot/img_11.png\" alt=\"image.png\"></p>\n","cover":false,"excerpt":"","more":"<h1 id=\"GitLab-CI介绍\"><a href=\"#GitLab-CI介绍\" class=\"headerlink\" title=\"GitLab-CI介绍\"></a>GitLab-CI介绍</h1><p><a href=\"https://docs.gitlab.cn/ee/ci/index.html\">官方介绍</a></p>\n<h1 id=\"gitlab-ci-yml语法介绍\"><a href=\"#gitlab-ci-yml语法介绍\" class=\"headerlink\" title=\".gitlab-ci.yml语法介绍\"></a>.gitlab-ci.yml语法介绍</h1><p><a href=\"https://docs.gitlab.cn/ee/ci/yaml/index.html\">官方.gitlab-ci.yml说明</a></p>\n<h1 id=\"创建SpringBoot项目\"><a href=\"#创建SpringBoot项目\" class=\"headerlink\" title=\"创建SpringBoot项目\"></a>创建SpringBoot项目</h1><h1 id=\"使用Google的Jib插件构建docker镜像\"><a href=\"#使用Google的Jib插件构建docker镜像\" class=\"headerlink\" title=\"使用Google的Jib插件构建docker镜像\"></a>使用Google的Jib插件构建docker镜像</h1><p><a href=\"https://github.com/GoogleContainerTools/jib/tree/v2.0.0-gradle/jib-gradle-plugin#quickstart\">官方文档</a></p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.jetbrains.kotlin.gradle.tasks.KotlinCompile</span><br><span class=\"line\"></span><br><span class=\"line\">plugins &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 引入Google的Jib插件</span></span><br><span class=\"line\">    id(<span class=\"string\">&quot;com.google.cloud.tools.jib&quot;</span>) version <span class=\"string\">&quot;3.3.1&quot;</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    id(<span class=\"string\">&quot;org.springframework.boot&quot;</span>) version <span class=\"string\">&quot;2.6.8&quot;</span></span><br><span class=\"line\">    id(<span class=\"string\">&quot;io.spring.dependency-management&quot;</span>) version <span class=\"string\">&quot;1.0.11.RELEASE&quot;</span></span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;jvm&quot;</span>) version <span class=\"string\">&quot;1.6.21&quot;</span></span><br><span class=\"line\">    kotlin(<span class=\"string\">&quot;plugin.spring&quot;</span>) version <span class=\"string\">&quot;1.6.21&quot;</span></span><br><span class=\"line\">    java</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">apply&lt;JavaPlugin&gt;()</span><br><span class=\"line\">apply&lt;JavaLibraryPlugin&gt;()</span><br><span class=\"line\"></span><br><span class=\"line\">group = <span class=\"string\">&quot;com.wry&quot;</span></span><br><span class=\"line\">version = <span class=\"string\">&quot;0.0.1-SNAPSHOT&quot;</span></span><br><span class=\"line\">java.sourceCompatibility = JavaVersion.VERSION_1_8</span><br><span class=\"line\"></span><br><span class=\"line\">repositories &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 阿里云</span></span><br><span class=\"line\">    maven(<span class=\"string\">&quot;https://maven.aliyun.com/repository/public/&quot;</span>)</span><br><span class=\"line\">    mavenCentral()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-web&quot;</span>)</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;com.fasterxml.jackson.module:jackson-module-kotlin&quot;</span>)</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-reflect&quot;</span>)</span><br><span class=\"line\">    implementation(<span class=\"string\">&quot;org.jetbrains.kotlin:kotlin-stdlib-jdk8&quot;</span>)</span><br><span class=\"line\">    testImplementation(<span class=\"string\">&quot;org.springframework.boot:spring-boot-starter-test&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 配置构建镜像的基本信息</span></span><br><span class=\"line\">configure&lt;com.google.cloud.tools.jib.gradle.JibExtension&gt;&#123;</span><br><span class=\"line\">    setAllowInsecureRegistries(<span class=\"literal\">true</span>)</span><br><span class=\"line\">    from &#123;</span><br><span class=\"line\">        image = <span class=\"string\">&quot;openjdk:8&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    to &#123;</span><br><span class=\"line\">        image = <span class=\"string\">&quot;wry/<span class=\"subst\">$&#123;project.name&#125;</span>&quot;</span></span><br><span class=\"line\">        tags = mutableSetOf(<span class=\"string\">&quot;latest&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    container &#123;</span><br><span class=\"line\">        appRoot = <span class=\"string\">&quot;/app&quot;</span></span><br><span class=\"line\">        workingDirectory = <span class=\"string\">&quot;/app&quot;</span></span><br><span class=\"line\">        jvmFlags = mutableListOf(</span><br><span class=\"line\">            <span class=\"string\">&quot;-Dspring.backgroundpreinitializer.ignore=true&quot;</span>, <span class=\"comment\">// spring优化线程</span></span><br><span class=\"line\">            <span class=\"string\">&quot;-Duser.timezone=Asia/Shanghai&quot;</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;-Dproject.name=<span class=\"subst\">$&#123;project.name&#125;</span>&quot;</span></span><br><span class=\"line\">        )</span><br><span class=\"line\">        ports = mutableListOf(<span class=\"string\">&quot;8080&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tasks.withType&lt;KotlinCompile&gt; &#123;</span><br><span class=\"line\">    kotlinOptions &#123;</span><br><span class=\"line\">        freeCompilerArgs = listOf(<span class=\"string\">&quot;-Xjsr305=strict&quot;</span>)</span><br><span class=\"line\">        jvmTarget = <span class=\"string\">&quot;1.8&quot;</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">tasks.withType&lt;Test&gt; &#123;</span><br><span class=\"line\">    useJUnitPlatform()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"编写-gitlab-ci-yml\"><a href=\"#编写-gitlab-ci-yml\" class=\"headerlink\" title=\"编写.gitlab-ci.yml\"></a>编写.gitlab-ci.yml</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">openjdk:8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义阶段</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目构建docker image压缩文件阶段</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">openjdk:8</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibDockerBuild</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署阶段</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"使用常见的Docker-runner执行器运行CI\"><a href=\"#使用常见的Docker-runner执行器运行CI\" class=\"headerlink\" title=\"使用常见的Docker-runner执行器运行CI\"></a>使用常见的<code>Docker-runner</code>执行器运行CI</h1><h2 id=\"执行CI过程中出现错误\"><a href=\"#执行CI过程中出现错误\" class=\"headerlink\" title=\"执行CI过程中出现错误\"></a>执行CI过程中出现错误</h2><p><img src=\"/post/2023/gitlab-ci-springboot/img_12.png\" alt=\"image.png\"></p>\n<h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p><code>GitLab-CI </code>执行器是<code>docker</code>,跑任务的时候会启动一个<code>docker</code>容器， 容器内部没有<code>docker</code>环境，所以找不到docker 守护进程**</p>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><p>翻阅GitLab官方文档,看到GitLab-runner有一个Docker-In-Docker模式，可以在容器中使用docker环境<br><a href=\"https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html\">官方链接</a></p>\n<h1 id=\"注册Docker-In-Docker模式的GitLab-runner\"><a href=\"#注册Docker-In-Docker模式的GitLab-runner\" class=\"headerlink\" title=\"注册Docker-In-Docker模式的GitLab-runner\"></a>注册Docker-In-Docker模式的GitLab-runner</h1><h2 id=\"查看docker版本信息\"><a href=\"#查看docker版本信息\" class=\"headerlink\" title=\"查看docker版本信息\"></a>查看docker版本信息</h2><p>查看宿主机<code>docker</code>版本信息</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker version</span><br></pre></td></tr></table></figure>\n<p><img src=\"/post/2023/gitlab-ci-springboot/img_5.png\" alt=\"image.png\"></p>\n<h2 id=\"注册GitLab-Runner\"><a href=\"#注册GitLab-Runner\" class=\"headerlink\" title=\"注册GitLab-Runner\"></a>注册GitLab-Runner</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-compose</span> <span class=\"string\">exec</span> <span class=\"string\">&lt;compose-service-name&gt;</span> <span class=\"string\">gitlab-runner</span> <span class=\"string\">register</span> <span class=\"string\">-n</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--url</span> <span class=\"string\">&quot;&lt;url&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--registration-token</span> <span class=\"string\">&quot;&lt;token&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--executor</span> <span class=\"string\">docker</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--description</span> <span class=\"string\">&quot;Docker In Docker Runner&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--docker-image</span> <span class=\"string\">&quot;docker:20.10.22&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--docker-privileged</span> <span class=\"string\">\\</span></span><br><span class=\"line\">  <span class=\"string\">--tag-list</span> <span class=\"string\">&quot;docker-in-docker&quot;</span> </span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\"># 例子</span></span><br><span class=\"line\">  <span class=\"comment\"># </span></span><br><span class=\"line\">  <span class=\"comment\"># docker-compose exec gitlab-runner gitlab-runner register -n \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --url &quot;http://120.76.142.218&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --registration-token &quot;RB3asxbMJMv3GXXX&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --executor docker \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --description &quot;Docker In Docker Runner&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --docker-image &quot;docker:20.10.22&quot; \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --docker-privileged \\</span></span><br><span class=\"line\">  <span class=\"comment\"># --tag-list &quot;docker-in-docker&quot; </span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看结果\"><a href=\"#查看结果\" class=\"headerlink\" title=\"查看结果\"></a>查看结果</h2><p><a href=\"http://IP:PORT/admin/runners\">http://IP:PORT/admin/runners</a></p>\n<p><img src=\"/post/2023/gitlab-ci-springboot/img_6.png\" alt=\"image.png\"></p>\n<h1 id=\"修改-gitlab-ci-yml文件\"><a href=\"#修改-gitlab-ci-yml文件\" class=\"headerlink\" title=\"修改.gitlab-ci.yml文件\"></a>修改<code>.gitlab-ci.yml</code>文件</h1><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:20.10.22</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-in-docker</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">version</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibDockerBuild</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"docker环境无java环境错误\"><a href=\"#docker环境无java环境错误\" class=\"headerlink\" title=\"docker环境无java环境错误\"></a>docker环境无java环境错误</h1><p>注册新的<code>GitLab-runner</code>后，发现在<code>docker</code>环境下无法使用<code>gradlew</code>进行docker镜像构建，<br>缺少<code>JAVA</code>环境<br><img src=\"/post/2023/gitlab-ci-springboot/img_7.png\" alt=\"image.png\"></p>\n<h2 id=\"解决办法-1\"><a href=\"#解决办法-1\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><h3 id=\"把java环境和docker环境分开-（模式一\"><a href=\"#把java环境和docker环境分开-（模式一\" class=\"headerlink\" title=\"把java环境和docker环境分开 （模式一)\"></a>把java环境和docker环境分开 （模式一)</h3><ul>\n<li>在java环境下把项目构建成docker镜像压缩包</li>\n<li>在docker环境下还原docker镜像压缩包</li>\n</ul>\n<h3 id=\"先安装JAVA环境再安装docker环境（模式二\"><a href=\"#先安装JAVA环境再安装docker环境（模式二\" class=\"headerlink\" title=\"先安装JAVA环境再安装docker环境（模式二)\"></a>先安装JAVA环境再安装docker环境（模式二)</h3><ul>\n<li>在java环境下安装docker使其连接宿主机docker环境</li>\n</ul>\n<p><a href=\"https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image\">https://stackoverflow.com/questions/71109409/gitlab-ci-docker-inside-java-image</a></p>\n<h1 id=\"修改-gitlab-ci-yml文件-1\"><a href=\"#修改-gitlab-ci-yml文件-1\" class=\"headerlink\" title=\"修改.gitlab-ci.yml文件\"></a>修改<code>.gitlab-ci.yml</code>文件</h1><p><code>docker-in-docker</code>模式<code>.gitlab-ci.yml</code><br><a href=\"https://docs.gitlab.cn/jh/ci/docker/using_docker_build.html#%E4%BD%BF%E7%94%A8-docker-in-docker\">官方推荐写法</a></p>\n<h2 id=\"模式一\"><a href=\"#模式一\" class=\"headerlink\" title=\"模式一\"></a>模式一</h2><p><strong>把java环境和docker环境分开</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 官方定义写法</span></span><br><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:20.10.22</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-in-docker</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 自定义阶段</span></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker-image</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用缓存，避免每次执行Job都下载依赖</span></span><br><span class=\"line\"><span class=\"attr\">cache:</span></span><br><span class=\"line\">  <span class=\"attr\">paths:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">build</span>  </span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.gradle/wrapper</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">.gradle/caches</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 前置阶段，输出docker信息</span></span><br><span class=\"line\"><span class=\"attr\">echo:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">.pre</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 项目构建docker image压缩文件阶段</span></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">openjdk:8</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibBuildTar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># docker 还原image压缩文件阶段</span></span><br><span class=\"line\"><span class=\"attr\">docker-image:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">docker-image</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">load</span> <span class=\"string\">--input</span> <span class=\"string\">build/jib-image.tar</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 部署阶段</span></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"模式二\"><a href=\"#模式二\" class=\"headerlink\" title=\"模式二\"></a>模式二</h2><p><strong>先安装JAVA环境再安装docker环境</strong></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">default:</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">docker:20.10.22</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker-in-docker</span></span><br><span class=\"line\"><span class=\"attr\">variables:</span></span><br><span class=\"line\">  <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">stages:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"string\">deploy</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">echo:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">.pre</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">info</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">build:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">build</span></span><br><span class=\"line\">  <span class=\"attr\">image:</span> <span class=\"string\">gradle:jdk8</span>  </span><br><span class=\"line\">  <span class=\"attr\">services:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker:20.10.22-dind</span></span><br><span class=\"line\">  <span class=\"attr\">variables:</span></span><br><span class=\"line\">    <span class=\"attr\">DOCKER_HOST:</span> <span class=\"string\">tcp://120.76.142.218:2375</span></span><br><span class=\"line\">  <span class=\"attr\">before_script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">apt</span> <span class=\"string\">update</span> <span class=\"string\">&amp;&amp;</span> <span class=\"string\">apt</span> <span class=\"string\">install</span> <span class=\"string\">--no-install-recommends</span> <span class=\"string\">-y</span> <span class=\"string\">docker.io</span> </span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">chmod</span> <span class=\"string\">+x</span> <span class=\"string\">gradlew</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">CURRENT_PATH=$PWD</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;当前路径：$CURRENT_PATH&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">version</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">./gradlew</span> <span class=\"string\">jibDockerBuild</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">stage:</span> <span class=\"string\">deploy</span></span><br><span class=\"line\">  <span class=\"attr\">script:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">echo</span> <span class=\"string\">&quot;部署项目&quot;</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">stop</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">rm</span> <span class=\"string\">test-spring-boot</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">docker</span> <span class=\"string\">run</span> <span class=\"string\">-itd</span> <span class=\"string\">--restart=always</span> <span class=\"string\">-p</span> <span class=\"number\">8081</span><span class=\"string\">:8080</span> <span class=\"string\">--name</span> <span class=\"string\">test-spring-boot</span> <span class=\"string\">wry/test-spring-boot</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"运行CI\"><a href=\"#运行CI\" class=\"headerlink\" title=\"运行CI\"></a>运行CI</h1><p><img src=\"/post/2023/gitlab-ci-springboot/img_8.png\" alt=\"image.png\"><br><img src=\"/post/2023/gitlab-ci-springboot/img_9.png\" alt=\"image.png\"></p>\n<h1 id=\"查看运行的docker容器\"><a href=\"#查看运行的docker容器\" class=\"headerlink\" title=\"查看运行的docker容器\"></a>查看运行的docker容器</h1><p><img src=\"/post/2023/gitlab-ci-springboot/img_10.png\" alt=\"image.png\"></p>\n<h1 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h1><p><img src=\"/post/2023/gitlab-ci-springboot/img_11.png\" alt=\"image.png\"></p>\n"},{"title":"GitLab","date":"2021-12-20T04:30:00.000Z","_content":"\n本案例使用`docker-compose`进行安装，如需安装`docker`环境，参考一下文章。\n\n- [Docker环境安装](https://www.yuque.com/yangleduo-cg2ct/fgrxr9)\n# GitLab-ce\n\n- [官方安装教程推荐](https://docs.gitlab.cn/ee/install/docker.html)\n## 编写docker-compose\n```yaml\nversion: '3'\nservices:\n  gitlab-ce:\n   image: 'gitlab/gitlab-ce:latest'\n   container_name: 'gitlab-ce'\n   privileged: true\n   hostname: 'gitlab'\n   environment:\n     TZ: 'Asia/Shanghai'\n     GITLAB_OMNIBUS_CONFIG: |\n       external_url 'http://120.76.142.218'\n       gitlab_rails['time_zone'] = 'Asia/Shanghai'\n       gitlab_rails['smtp_enable'] = true\n       gitlab_rails['gitlab_shell_ssh_port'] = 1022\n   ports:\n     - '80:80'\n     - '443:443'\n     - '1022:22'\n   volumes:\n     - ./config:/etc/gitlab\n     - ./data:/var/opt/gitlab\n     - ./logs:/var/log/gitlab\n   shm_size: '256m'\n```\n## 使用指定版本的GitLab\n[GitLab-ce历史版本](https://hub.docker.com/r/gitlab/gitlab-ce/tags)\n要使用特定的标记版本，请将 gitlab/gitlab-ce:latest 替换为您要运行的GitLab 版本。\n例如: gitlab/gitlab-ce:15.6.0-ce.0\n## 启动\n进入`docker-compose.yml`文件的目录下。执行启动命令\n```yaml\ndocker-compose up -d\n```\n## 查看日志\n```yaml\ndocker-componse logs -f\n```\n\n## 访问\n![image.png](img_0.png)\n## 查询密码\n### 方式一\n```yaml\ndocker exec -it $(docker ps | grep gitlab | awk '{print $1}') grep 'Password:' /etc/gitlab/initial_root_password\n```\n### 方式二\n进入挂在配置文件的目录找到`initial_root_password`文件\n```yaml\ngrep 'Password:' ./initial_root_password\n```\n\n## 登录\n使用用户名：`root` ，和查询到的密码进行登录。\n## 修改密码\n登录后点击头像选择`Edit profile` 进入信息编辑界面，选择左侧的`Password`页面修改密码。\n![image.png](img_1.png)\n# GitLab-runner\n## 介绍\n[官方介绍](https://docs.gitlab.cn/runner/)\n## 文档\n\n- [官方安装runner教程](https://docs.gitlab.cn/runner/install/docker.html)\n- [官方注册runner教程](https://docs.gitlab.cn/runner/register/index.html#docker)\n- [官方配置runner教程](https://docs.gitlab.cn/runner/configuration/advanced-configuration.html)\n- [官方.gitlab-ci.yml说明](https://docs.gitlab.cn/ee/ci/yaml/index.html)\n## 编写docker-compose\n```yaml\nversion: '3'\nservices:\n  gitlab-ce:\n   image: 'gitlab/gitlab-ce'\n   container_name: 'gitlab-ce'\n   privileged: true\n   hostname: 'gitlab'\n   environment:\n     TZ: 'Asia/Shanghai'\n     GITLAB_OMNIBUS_CONFIG: |\n       external_url 'http://120.76.142.218'\n       gitlab_rails['time_zone'] = 'Asia/Shanghai'\n       gitlab_rails['smtp_enable'] = true\n       gitlab_rails['gitlab_shell_ssh_port'] = 1022\n   ports:\n     - '80:80'\n     - '443:443'\n     - '1022:22'\n   volumes:\n     - ./config:/etc/gitlab\n     - ./data:/var/opt/gitlab\n     - ./logs:/var/log/gitlab\n   shm_size: '256m'\n  gitlab-runner:\n    image: gitlab/gitlab-runner:latest\n    container_name: gitlab-runner\n    restart: always\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - ./gitlab-runner-conf/:/etc/gitlab-runner/\n      - /var/run/docker.sock:/var/run/docker.sock \n```\n## 使用指定版本的GitLab-runner\n[GitLab-runner历史版本](https://hub.docker.com/r/gitlab/gitlab-runner/tags)\n要使用特定的标记版本，请将 gitlab/gitlab-runner:latest 替换为您要运行的GitLab-runner 版本。\n例如: gitlab/gitlab-latest:v15.6.0\n## 执行注册runner到gitlab\n[官方注册文档](https://docs.gitlab.cn/15.5/runner/register/index.html)\n这里我们使用最常见的选项，使用单行命令注册 Runner\n```yaml\ndocker-compose exec <compose-service-name> gitlab-runner register \\\n--non-interactive \\\n--executor \"docker\" \\\n--docker-image alpine:latest \\\n--url \"<url>\" \\\n--registration-token \"<token>\" \\\n--description \"docker-runner\" \\\n--maintenance-note \"Free-form maintainer notes about this runner\" \\\n--tag-list \"docker,deploy,server\" \\\n--run-untagged=\"true\" \\\n--locked=\"false\" \\\n--access-level=\"not_protected\"\n```\n## 查询token\n![image.png](img_1.png)\n![image.png](img_2.png)\n\n## 注册\n![image.png](img_3.png)\n## 查看注册结果\n![image.png](img_4.png)\n","source":"_posts/2023/gitlab.md","raw":"---\ntitle: GitLab\ndate: 2021-12-20 12:30:00\ntags:\n - docker\ncategories:\n - Docker\n---\n\n本案例使用`docker-compose`进行安装，如需安装`docker`环境，参考一下文章。\n\n- [Docker环境安装](https://www.yuque.com/yangleduo-cg2ct/fgrxr9)\n# GitLab-ce\n\n- [官方安装教程推荐](https://docs.gitlab.cn/ee/install/docker.html)\n## 编写docker-compose\n```yaml\nversion: '3'\nservices:\n  gitlab-ce:\n   image: 'gitlab/gitlab-ce:latest'\n   container_name: 'gitlab-ce'\n   privileged: true\n   hostname: 'gitlab'\n   environment:\n     TZ: 'Asia/Shanghai'\n     GITLAB_OMNIBUS_CONFIG: |\n       external_url 'http://120.76.142.218'\n       gitlab_rails['time_zone'] = 'Asia/Shanghai'\n       gitlab_rails['smtp_enable'] = true\n       gitlab_rails['gitlab_shell_ssh_port'] = 1022\n   ports:\n     - '80:80'\n     - '443:443'\n     - '1022:22'\n   volumes:\n     - ./config:/etc/gitlab\n     - ./data:/var/opt/gitlab\n     - ./logs:/var/log/gitlab\n   shm_size: '256m'\n```\n## 使用指定版本的GitLab\n[GitLab-ce历史版本](https://hub.docker.com/r/gitlab/gitlab-ce/tags)\n要使用特定的标记版本，请将 gitlab/gitlab-ce:latest 替换为您要运行的GitLab 版本。\n例如: gitlab/gitlab-ce:15.6.0-ce.0\n## 启动\n进入`docker-compose.yml`文件的目录下。执行启动命令\n```yaml\ndocker-compose up -d\n```\n## 查看日志\n```yaml\ndocker-componse logs -f\n```\n\n## 访问\n![image.png](img_0.png)\n## 查询密码\n### 方式一\n```yaml\ndocker exec -it $(docker ps | grep gitlab | awk '{print $1}') grep 'Password:' /etc/gitlab/initial_root_password\n```\n### 方式二\n进入挂在配置文件的目录找到`initial_root_password`文件\n```yaml\ngrep 'Password:' ./initial_root_password\n```\n\n## 登录\n使用用户名：`root` ，和查询到的密码进行登录。\n## 修改密码\n登录后点击头像选择`Edit profile` 进入信息编辑界面，选择左侧的`Password`页面修改密码。\n![image.png](img_1.png)\n# GitLab-runner\n## 介绍\n[官方介绍](https://docs.gitlab.cn/runner/)\n## 文档\n\n- [官方安装runner教程](https://docs.gitlab.cn/runner/install/docker.html)\n- [官方注册runner教程](https://docs.gitlab.cn/runner/register/index.html#docker)\n- [官方配置runner教程](https://docs.gitlab.cn/runner/configuration/advanced-configuration.html)\n- [官方.gitlab-ci.yml说明](https://docs.gitlab.cn/ee/ci/yaml/index.html)\n## 编写docker-compose\n```yaml\nversion: '3'\nservices:\n  gitlab-ce:\n   image: 'gitlab/gitlab-ce'\n   container_name: 'gitlab-ce'\n   privileged: true\n   hostname: 'gitlab'\n   environment:\n     TZ: 'Asia/Shanghai'\n     GITLAB_OMNIBUS_CONFIG: |\n       external_url 'http://120.76.142.218'\n       gitlab_rails['time_zone'] = 'Asia/Shanghai'\n       gitlab_rails['smtp_enable'] = true\n       gitlab_rails['gitlab_shell_ssh_port'] = 1022\n   ports:\n     - '80:80'\n     - '443:443'\n     - '1022:22'\n   volumes:\n     - ./config:/etc/gitlab\n     - ./data:/var/opt/gitlab\n     - ./logs:/var/log/gitlab\n   shm_size: '256m'\n  gitlab-runner:\n    image: gitlab/gitlab-runner:latest\n    container_name: gitlab-runner\n    restart: always\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - ./gitlab-runner-conf/:/etc/gitlab-runner/\n      - /var/run/docker.sock:/var/run/docker.sock \n```\n## 使用指定版本的GitLab-runner\n[GitLab-runner历史版本](https://hub.docker.com/r/gitlab/gitlab-runner/tags)\n要使用特定的标记版本，请将 gitlab/gitlab-runner:latest 替换为您要运行的GitLab-runner 版本。\n例如: gitlab/gitlab-latest:v15.6.0\n## 执行注册runner到gitlab\n[官方注册文档](https://docs.gitlab.cn/15.5/runner/register/index.html)\n这里我们使用最常见的选项，使用单行命令注册 Runner\n```yaml\ndocker-compose exec <compose-service-name> gitlab-runner register \\\n--non-interactive \\\n--executor \"docker\" \\\n--docker-image alpine:latest \\\n--url \"<url>\" \\\n--registration-token \"<token>\" \\\n--description \"docker-runner\" \\\n--maintenance-note \"Free-form maintainer notes about this runner\" \\\n--tag-list \"docker,deploy,server\" \\\n--run-untagged=\"true\" \\\n--locked=\"false\" \\\n--access-level=\"not_protected\"\n```\n## 查询token\n![image.png](img_1.png)\n![image.png](img_2.png)\n\n## 注册\n![image.png](img_3.png)\n## 查看注册结果\n![image.png](img_4.png)\n","slug":"2023/gitlab","published":1,"updated":"2024-08-05T11:07:24.336Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy4000h0aib71plggj4","content":"<p>本案例使用<code>docker-compose</code>进行安装，如需安装<code>docker</code>环境，参考一下文章。</p>\n<ul>\n<li><a href=\"https://www.yuque.com/yangleduo-cg2ct/fgrxr9\">Docker环境安装</a></li>\n</ul>\n<h1 id=\"GitLab-ce\"><a href=\"#GitLab-ce\" class=\"headerlink\" title=\"GitLab-ce\"></a>GitLab-ce</h1><ul>\n<li><a href=\"https://docs.gitlab.cn/ee/install/docker.html\">官方安装教程推荐</a></li>\n</ul>\n<h2 id=\"编写docker-compose\"><a href=\"#编写docker-compose\" class=\"headerlink\" title=\"编写docker-compose\"></a>编写docker-compose</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab-ce:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">&#x27;gitlab/gitlab-ce:latest&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">&#x27;gitlab-ce&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">hostname:</span> <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">TZ:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">     <span class=\"attr\">GITLAB_OMNIBUS_CONFIG:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">       external_url &#x27;http://120.76.142.218&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;smtp_enable&#x27;] = true</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1022</span></span><br><span class=\"line\"><span class=\"string\"></span>   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;80:80&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;443:443&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;1022:22&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./config:/etc/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./data:/var/opt/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/gitlab</span></span><br><span class=\"line\">   <span class=\"attr\">shm_size:</span> <span class=\"string\">&#x27;256m&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用指定版本的GitLab\"><a href=\"#使用指定版本的GitLab\" class=\"headerlink\" title=\"使用指定版本的GitLab\"></a>使用指定版本的GitLab</h2><p><a href=\"https://hub.docker.com/r/gitlab/gitlab-ce/tags\">GitLab-ce历史版本</a><br>要使用特定的标记版本，请将 gitlab&#x2F;gitlab-ce:latest 替换为您要运行的GitLab 版本。<br>例如: gitlab&#x2F;gitlab-ce:15.6.0-ce.0</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>进入<code>docker-compose.yml</code>文件的目录下。执行启动命令</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-compose</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-componse</span> <span class=\"string\">logs</span> <span class=\"string\">-f</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p><img src=\"/post/2023/gitlab/img_0.png\" alt=\"image.png\"></p>\n<h2 id=\"查询密码\"><a href=\"#查询密码\" class=\"headerlink\" title=\"查询密码\"></a>查询密码</h2><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker</span> <span class=\"string\">exec</span> <span class=\"string\">-it</span> <span class=\"string\">$(docker</span> <span class=\"string\">ps</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">gitlab</span> <span class=\"string\">|</span> <span class=\"string\">awk</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span><span class=\"string\">)</span> <span class=\"string\">grep</span> <span class=\"string\">&#x27;Password:&#x27;</span> <span class=\"string\">/etc/gitlab/initial_root_password</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>进入挂在配置文件的目录找到<code>initial_root_password</code>文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">grep</span> <span class=\"string\">&#x27;Password:&#x27;</span> <span class=\"string\">./initial_root_password</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>使用用户名：<code>root</code> ，和查询到的密码进行登录。</p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p>登录后点击头像选择<code>Edit profile</code> 进入信息编辑界面，选择左侧的<code>Password</code>页面修改密码。<br><img src=\"/post/2023/gitlab/img_1.png\" alt=\"image.png\"></p>\n<h1 id=\"GitLab-runner\"><a href=\"#GitLab-runner\" class=\"headerlink\" title=\"GitLab-runner\"></a>GitLab-runner</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://docs.gitlab.cn/runner/\">官方介绍</a></p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><ul>\n<li><a href=\"https://docs.gitlab.cn/runner/install/docker.html\">官方安装runner教程</a></li>\n<li><a href=\"https://docs.gitlab.cn/runner/register/index.html#docker\">官方注册runner教程</a></li>\n<li><a href=\"https://docs.gitlab.cn/runner/configuration/advanced-configuration.html\">官方配置runner教程</a></li>\n<li><a href=\"https://docs.gitlab.cn/ee/ci/yaml/index.html\">官方.gitlab-ci.yml说明</a></li>\n</ul>\n<h2 id=\"编写docker-compose-1\"><a href=\"#编写docker-compose-1\" class=\"headerlink\" title=\"编写docker-compose\"></a>编写docker-compose</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab-ce:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">&#x27;gitlab/gitlab-ce&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">&#x27;gitlab-ce&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">hostname:</span> <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">TZ:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">     <span class=\"attr\">GITLAB_OMNIBUS_CONFIG:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">       external_url &#x27;http://120.76.142.218&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;smtp_enable&#x27;] = true</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1022</span></span><br><span class=\"line\"><span class=\"string\"></span>   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;80:80&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;443:443&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;1022:22&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./config:/etc/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./data:/var/opt/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/gitlab</span></span><br><span class=\"line\">   <span class=\"attr\">shm_size:</span> <span class=\"string\">&#x27;256m&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab-runner:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">gitlab/gitlab-runner:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">gitlab-runner</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">      <span class=\"attr\">memlock:</span></span><br><span class=\"line\">        <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./gitlab-runner-conf/:/etc/gitlab-runner/</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"使用指定版本的GitLab-runner\"><a href=\"#使用指定版本的GitLab-runner\" class=\"headerlink\" title=\"使用指定版本的GitLab-runner\"></a>使用指定版本的GitLab-runner</h2><p><a href=\"https://hub.docker.com/r/gitlab/gitlab-runner/tags\">GitLab-runner历史版本</a><br>要使用特定的标记版本，请将 gitlab&#x2F;gitlab-runner:latest 替换为您要运行的GitLab-runner 版本。<br>例如: gitlab&#x2F;gitlab-latest:v15.6.0</p>\n<h2 id=\"执行注册runner到gitlab\"><a href=\"#执行注册runner到gitlab\" class=\"headerlink\" title=\"执行注册runner到gitlab\"></a>执行注册runner到gitlab</h2><p><a href=\"https://docs.gitlab.cn/15.5/runner/register/index.html\">官方注册文档</a><br>这里我们使用最常见的选项，使用单行命令注册 Runner</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-compose</span> <span class=\"string\">exec</span> <span class=\"string\">&lt;compose-service-name&gt;</span> <span class=\"string\">gitlab-runner</span> <span class=\"string\">register</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--non-interactive</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--executor</span> <span class=\"string\">&quot;docker&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--docker-image</span> <span class=\"string\">alpine:latest</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--url</span> <span class=\"string\">&quot;&lt;url&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--registration-token</span> <span class=\"string\">&quot;&lt;token&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--description</span> <span class=\"string\">&quot;docker-runner&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--maintenance-note</span> <span class=\"string\">&quot;Free-form maintainer notes about this runner&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--tag-list</span> <span class=\"string\">&quot;docker,deploy,server&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--run-untagged=&quot;true&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--locked=&quot;false&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--access-level=&quot;not_protected&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查询token\"><a href=\"#查询token\" class=\"headerlink\" title=\"查询token\"></a>查询token</h2><p><img src=\"/post/2023/gitlab/img_1.png\" alt=\"image.png\"><br><img src=\"/post/2023/gitlab/img_2.png\" alt=\"image.png\"></p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p><img src=\"/post/2023/gitlab/img_3.png\" alt=\"image.png\"></p>\n<h2 id=\"查看注册结果\"><a href=\"#查看注册结果\" class=\"headerlink\" title=\"查看注册结果\"></a>查看注册结果</h2><p><img src=\"/post/2023/gitlab/img_4.png\" alt=\"image.png\"></p>\n","cover":false,"excerpt":"","more":"<p>本案例使用<code>docker-compose</code>进行安装，如需安装<code>docker</code>环境，参考一下文章。</p>\n<ul>\n<li><a href=\"https://www.yuque.com/yangleduo-cg2ct/fgrxr9\">Docker环境安装</a></li>\n</ul>\n<h1 id=\"GitLab-ce\"><a href=\"#GitLab-ce\" class=\"headerlink\" title=\"GitLab-ce\"></a>GitLab-ce</h1><ul>\n<li><a href=\"https://docs.gitlab.cn/ee/install/docker.html\">官方安装教程推荐</a></li>\n</ul>\n<h2 id=\"编写docker-compose\"><a href=\"#编写docker-compose\" class=\"headerlink\" title=\"编写docker-compose\"></a>编写docker-compose</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab-ce:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">&#x27;gitlab/gitlab-ce:latest&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">&#x27;gitlab-ce&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">hostname:</span> <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">TZ:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">     <span class=\"attr\">GITLAB_OMNIBUS_CONFIG:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">       external_url &#x27;http://120.76.142.218&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;smtp_enable&#x27;] = true</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1022</span></span><br><span class=\"line\"><span class=\"string\"></span>   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;80:80&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;443:443&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;1022:22&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./config:/etc/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./data:/var/opt/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/gitlab</span></span><br><span class=\"line\">   <span class=\"attr\">shm_size:</span> <span class=\"string\">&#x27;256m&#x27;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"使用指定版本的GitLab\"><a href=\"#使用指定版本的GitLab\" class=\"headerlink\" title=\"使用指定版本的GitLab\"></a>使用指定版本的GitLab</h2><p><a href=\"https://hub.docker.com/r/gitlab/gitlab-ce/tags\">GitLab-ce历史版本</a><br>要使用特定的标记版本，请将 gitlab&#x2F;gitlab-ce:latest 替换为您要运行的GitLab 版本。<br>例如: gitlab&#x2F;gitlab-ce:15.6.0-ce.0</p>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><p>进入<code>docker-compose.yml</code>文件的目录下。执行启动命令</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-compose</span> <span class=\"string\">up</span> <span class=\"string\">-d</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查看日志\"><a href=\"#查看日志\" class=\"headerlink\" title=\"查看日志\"></a>查看日志</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-componse</span> <span class=\"string\">logs</span> <span class=\"string\">-f</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p><img src=\"/post/2023/gitlab/img_0.png\" alt=\"image.png\"></p>\n<h2 id=\"查询密码\"><a href=\"#查询密码\" class=\"headerlink\" title=\"查询密码\"></a>查询密码</h2><h3 id=\"方式一\"><a href=\"#方式一\" class=\"headerlink\" title=\"方式一\"></a>方式一</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker</span> <span class=\"string\">exec</span> <span class=\"string\">-it</span> <span class=\"string\">$(docker</span> <span class=\"string\">ps</span> <span class=\"string\">|</span> <span class=\"string\">grep</span> <span class=\"string\">gitlab</span> <span class=\"string\">|</span> <span class=\"string\">awk</span> <span class=\"string\">&#x27;&#123;print $1&#125;&#x27;</span><span class=\"string\">)</span> <span class=\"string\">grep</span> <span class=\"string\">&#x27;Password:&#x27;</span> <span class=\"string\">/etc/gitlab/initial_root_password</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h3><p>进入挂在配置文件的目录找到<code>initial_root_password</code>文件</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">grep</span> <span class=\"string\">&#x27;Password:&#x27;</span> <span class=\"string\">./initial_root_password</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"登录\"><a href=\"#登录\" class=\"headerlink\" title=\"登录\"></a>登录</h2><p>使用用户名：<code>root</code> ，和查询到的密码进行登录。</p>\n<h2 id=\"修改密码\"><a href=\"#修改密码\" class=\"headerlink\" title=\"修改密码\"></a>修改密码</h2><p>登录后点击头像选择<code>Edit profile</code> 进入信息编辑界面，选择左侧的<code>Password</code>页面修改密码。<br><img src=\"/post/2023/gitlab/img_1.png\" alt=\"image.png\"></p>\n<h1 id=\"GitLab-runner\"><a href=\"#GitLab-runner\" class=\"headerlink\" title=\"GitLab-runner\"></a>GitLab-runner</h1><h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p><a href=\"https://docs.gitlab.cn/runner/\">官方介绍</a></p>\n<h2 id=\"文档\"><a href=\"#文档\" class=\"headerlink\" title=\"文档\"></a>文档</h2><ul>\n<li><a href=\"https://docs.gitlab.cn/runner/install/docker.html\">官方安装runner教程</a></li>\n<li><a href=\"https://docs.gitlab.cn/runner/register/index.html#docker\">官方注册runner教程</a></li>\n<li><a href=\"https://docs.gitlab.cn/runner/configuration/advanced-configuration.html\">官方配置runner教程</a></li>\n<li><a href=\"https://docs.gitlab.cn/ee/ci/yaml/index.html\">官方.gitlab-ci.yml说明</a></li>\n</ul>\n<h2 id=\"编写docker-compose-1\"><a href=\"#编写docker-compose-1\" class=\"headerlink\" title=\"编写docker-compose\"></a>编写docker-compose</h2><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3&#x27;</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab-ce:</span></span><br><span class=\"line\">   <span class=\"attr\">image:</span> <span class=\"string\">&#x27;gitlab/gitlab-ce&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">container_name:</span> <span class=\"string\">&#x27;gitlab-ce&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">privileged:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">   <span class=\"attr\">hostname:</span> <span class=\"string\">&#x27;gitlab&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">environment:</span></span><br><span class=\"line\">     <span class=\"attr\">TZ:</span> <span class=\"string\">&#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\">     <span class=\"attr\">GITLAB_OMNIBUS_CONFIG:</span> <span class=\"string\">|</span></span><br><span class=\"line\"><span class=\"string\">       external_url &#x27;http://120.76.142.218&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;time_zone&#x27;] = &#x27;Asia/Shanghai&#x27;</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;smtp_enable&#x27;] = true</span></span><br><span class=\"line\"><span class=\"string\">       gitlab_rails[&#x27;gitlab_shell_ssh_port&#x27;] = 1022</span></span><br><span class=\"line\"><span class=\"string\"></span>   <span class=\"attr\">ports:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;80:80&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;443:443&#x27;</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">&#x27;1022:22&#x27;</span></span><br><span class=\"line\">   <span class=\"attr\">volumes:</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./config:/etc/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./data:/var/opt/gitlab</span></span><br><span class=\"line\">     <span class=\"bullet\">-</span> <span class=\"string\">./logs:/var/log/gitlab</span></span><br><span class=\"line\">   <span class=\"attr\">shm_size:</span> <span class=\"string\">&#x27;256m&#x27;</span></span><br><span class=\"line\">  <span class=\"attr\">gitlab-runner:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">gitlab/gitlab-runner:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">gitlab-runner</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">ulimits:</span></span><br><span class=\"line\">      <span class=\"attr\">memlock:</span></span><br><span class=\"line\">        <span class=\"attr\">soft:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">        <span class=\"attr\">hard:</span> <span class=\"number\">-1</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./gitlab-runner-conf/:/etc/gitlab-runner/</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">/var/run/docker.sock:/var/run/docker.sock</span> </span><br></pre></td></tr></table></figure>\n<h2 id=\"使用指定版本的GitLab-runner\"><a href=\"#使用指定版本的GitLab-runner\" class=\"headerlink\" title=\"使用指定版本的GitLab-runner\"></a>使用指定版本的GitLab-runner</h2><p><a href=\"https://hub.docker.com/r/gitlab/gitlab-runner/tags\">GitLab-runner历史版本</a><br>要使用特定的标记版本，请将 gitlab&#x2F;gitlab-runner:latest 替换为您要运行的GitLab-runner 版本。<br>例如: gitlab&#x2F;gitlab-latest:v15.6.0</p>\n<h2 id=\"执行注册runner到gitlab\"><a href=\"#执行注册runner到gitlab\" class=\"headerlink\" title=\"执行注册runner到gitlab\"></a>执行注册runner到gitlab</h2><p><a href=\"https://docs.gitlab.cn/15.5/runner/register/index.html\">官方注册文档</a><br>这里我们使用最常见的选项，使用单行命令注册 Runner</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">docker-compose</span> <span class=\"string\">exec</span> <span class=\"string\">&lt;compose-service-name&gt;</span> <span class=\"string\">gitlab-runner</span> <span class=\"string\">register</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--non-interactive</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--executor</span> <span class=\"string\">&quot;docker&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--docker-image</span> <span class=\"string\">alpine:latest</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--url</span> <span class=\"string\">&quot;&lt;url&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--registration-token</span> <span class=\"string\">&quot;&lt;token&gt;&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--description</span> <span class=\"string\">&quot;docker-runner&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--maintenance-note</span> <span class=\"string\">&quot;Free-form maintainer notes about this runner&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--tag-list</span> <span class=\"string\">&quot;docker,deploy,server&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--run-untagged=&quot;true&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--locked=&quot;false&quot;</span> <span class=\"string\">\\</span></span><br><span class=\"line\"><span class=\"string\">--access-level=&quot;not_protected&quot;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"查询token\"><a href=\"#查询token\" class=\"headerlink\" title=\"查询token\"></a>查询token</h2><p><img src=\"/post/2023/gitlab/img_1.png\" alt=\"image.png\"><br><img src=\"/post/2023/gitlab/img_2.png\" alt=\"image.png\"></p>\n<h2 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h2><p><img src=\"/post/2023/gitlab/img_3.png\" alt=\"image.png\"></p>\n<h2 id=\"查看注册结果\"><a href=\"#查看注册结果\" class=\"headerlink\" title=\"查看注册结果\"></a>查看注册结果</h2><p><img src=\"/post/2023/gitlab/img_4.png\" alt=\"image.png\"></p>\n"},{"title":"https","date":"2023-05-28T13:01:21.000Z","_content":"\n\n![https](https.png)","source":"_posts/2023/https.md","raw":"---\ntitle: https\ndate: 2023-05-28 21:01:21\ntags:\n---\n\n\n![https](https.png)","slug":"2023/https","published":1,"updated":"2024-08-05T11:07:24.339Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy5000l0aibabkm0zkk","content":"<p><img src=\"/post/2023/https/https.png\" alt=\"https\"></p>\n","cover":false,"excerpt":"","more":"<p><img src=\"/post/2023/https/https.png\" alt=\"https\"></p>\n"},{"title":"Kotlin整合SpringBoot后Jackson序列化问题","date":"2023-06-05T02:00:00.000Z","cover":"/post/2023/kotlin-springboot/kotlin.png","_content":"\n## 问题\n\n使用kotlin作为SpringBoot的开发语音后，由于Kotlin语音的特性（自定义的类有主构造器的没有无参构造器）,会造成Jackson在序列化JSON的时候报错。\n```\n(No Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator\n```\n\n## 解决方案\n其实只需要配置Jackson支持kotlin的序列化就可以了，并且jackson提供了kotlin-module依赖\n## 依赖\n[jackson-module-kotlin](https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-kotlin)\n#### gradle(kotlin)\n```kotlin\nimplementation(\"com.fasterxml.jackson.module:jackson-module-kotlin:last-version\")\n```\n#### gradle(groovy)\n```groovy\nimplementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: 'last-version'\n```\n\n#### maven\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.module</groupId>\n    <artifactId>jackson-module-kotlin</artifactId>\n    <version>last-version</version>\n</dependency>\n```\n\n## 配置\n```kotlin\n@Configuration\nclass AppConfig {\n    \n    @Bean\n    fun customJackson2HttpMessageConverter(): MappingJackson2HttpMessageConverter {\n        val jsonConverter = MappingJackson2HttpMessageConverter()\n        val objectMapper = ObjectMapper()\n      \n        //注册kotlinModule,解决没有无参构造器时无法序列化问题\n        objectMapper.registerModule(kotlinModule())\n      \n        jsonConverter.objectMapper = objectMapper\n        return jsonConverter\n    }\n}\n```\n\n\n\n\n\n","source":"_posts/2023/kotlin-springboot.md","raw":"---\ntitle: Kotlin整合SpringBoot后Jackson序列化问题\ndate: 2023-06-05 10:00:00\ncategories:\n  - SpringBoot\n\ncover: /post/2023/kotlin-springboot/kotlin.png\n---\n\n## 问题\n\n使用kotlin作为SpringBoot的开发语音后，由于Kotlin语音的特性（自定义的类有主构造器的没有无参构造器）,会造成Jackson在序列化JSON的时候报错。\n```\n(No Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator\n```\n\n## 解决方案\n其实只需要配置Jackson支持kotlin的序列化就可以了，并且jackson提供了kotlin-module依赖\n## 依赖\n[jackson-module-kotlin](https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-kotlin)\n#### gradle(kotlin)\n```kotlin\nimplementation(\"com.fasterxml.jackson.module:jackson-module-kotlin:last-version\")\n```\n#### gradle(groovy)\n```groovy\nimplementation group: 'com.fasterxml.jackson.module', name: 'jackson-module-kotlin', version: 'last-version'\n```\n\n#### maven\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.module</groupId>\n    <artifactId>jackson-module-kotlin</artifactId>\n    <version>last-version</version>\n</dependency>\n```\n\n## 配置\n```kotlin\n@Configuration\nclass AppConfig {\n    \n    @Bean\n    fun customJackson2HttpMessageConverter(): MappingJackson2HttpMessageConverter {\n        val jsonConverter = MappingJackson2HttpMessageConverter()\n        val objectMapper = ObjectMapper()\n      \n        //注册kotlinModule,解决没有无参构造器时无法序列化问题\n        objectMapper.registerModule(kotlinModule())\n      \n        jsonConverter.objectMapper = objectMapper\n        return jsonConverter\n    }\n}\n```\n\n\n\n\n\n","slug":"2023/kotlin-springboot","published":1,"updated":"2024-08-17T05:44:50.804Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy6000m0aibexq38shb","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>使用kotlin作为SpringBoot的开发语音后，由于Kotlin语音的特性（自定义的类有主构造器的没有无参构造器）,会造成Jackson在序列化JSON的时候报错。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(No Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>其实只需要配置Jackson支持kotlin的序列化就可以了，并且jackson提供了kotlin-module依赖</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p><a href=\"https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-kotlin\">jackson-module-kotlin</a></p>\n<h4 id=\"gradle-kotlin\"><a href=\"#gradle-kotlin\" class=\"headerlink\" title=\"gradle(kotlin)\"></a>gradle(kotlin)</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.fasterxml.jackson.module:jackson-module-kotlin:last-version&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"gradle-groovy\"><a href=\"#gradle-groovy\" class=\"headerlink\" title=\"gradle(groovy)\"></a>gradle(groovy)</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.fasterxml.jackson.module&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;jackson-module-kotlin&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;last-version&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-module-kotlin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>last-version<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">customJackson2HttpMessageConverter</span><span class=\"params\">()</span></span>: MappingJackson2HttpMessageConverter &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> jsonConverter = MappingJackson2HttpMessageConverter()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> objectMapper = ObjectMapper()</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">//注册kotlinModule,解决没有无参构造器时无法序列化问题</span></span><br><span class=\"line\">        objectMapper.registerModule(kotlinModule())</span><br><span class=\"line\">      </span><br><span class=\"line\">        jsonConverter.objectMapper = objectMapper</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonConverter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n","cover_type":"img","excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>使用kotlin作为SpringBoot的开发语音后，由于Kotlin语音的特性（自定义的类有主构造器的没有无参构造器）,会造成Jackson在序列化JSON的时候报错。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(No Creators, like default construct, exist): cannot deserialize from Object value (no delegate- or property-based Creator</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>其实只需要配置Jackson支持kotlin的序列化就可以了，并且jackson提供了kotlin-module依赖</p>\n<h2 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h2><p><a href=\"https://mvnrepository.com/artifact/com.fasterxml.jackson.module/jackson-module-kotlin\">jackson-module-kotlin</a></p>\n<h4 id=\"gradle-kotlin\"><a href=\"#gradle-kotlin\" class=\"headerlink\" title=\"gradle(kotlin)\"></a>gradle(kotlin)</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.fasterxml.jackson.module:jackson-module-kotlin:last-version&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"gradle-groovy\"><a href=\"#gradle-groovy\" class=\"headerlink\" title=\"gradle(groovy)\"></a>gradle(groovy)</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.fasterxml.jackson.module&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;jackson-module-kotlin&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;last-version&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.module<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-module-kotlin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>last-version<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">customJackson2HttpMessageConverter</span><span class=\"params\">()</span></span>: MappingJackson2HttpMessageConverter &#123;</span><br><span class=\"line\">        <span class=\"keyword\">val</span> jsonConverter = MappingJackson2HttpMessageConverter()</span><br><span class=\"line\">        <span class=\"keyword\">val</span> objectMapper = ObjectMapper()</span><br><span class=\"line\">      </span><br><span class=\"line\">        <span class=\"comment\">//注册kotlinModule,解决没有无参构造器时无法序列化问题</span></span><br><span class=\"line\">        objectMapper.registerModule(kotlinModule())</span><br><span class=\"line\">      </span><br><span class=\"line\">        jsonConverter.objectMapper = objectMapper</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonConverter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n"},{"title":"JVM","date":"2023-03-20T16:00:00.000Z","_content":"\n## JVM 体系结构模型\n\n灰色线程私有，亮色线程共享！\n\n![](./jvm/ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png)\n\n## ClassLoad(类加载器)\n\n![](./jvm/6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png)\n\n> 负责加载class文件，class 文件在文件开头有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。\n\n![](./jvm/3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png)\n\n### 虚拟机自带的加载器\n\n1. 启动类加载器（Bootstrap） C++\n\n   java自带的类使用BootstrapClassLoader，由`c++`编写，加载`java`核心库 `java.*`,构造`ExtClassLoader`和`AppClassLoader`。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。\n\n2. 扩展类加载器（Extension） Java\n\n   jdk扩展的类使用ExtensionClassLoader，由`java`编写，加载扩展库，如`classpath`中的`jre` ，`javax.*`或者`java.ext.dir` 指定位置中的类，开发者可以直接使用标准扩展类加载器。\n\n3. 应用程序类加载器（AppClassLoader）\n\n   我们自己编写的类使用AppClassLoader，由`java`编写，加载程序所在的目录，如`user.dir`所在的位置的`class` 。\n\n4. CustomClassLoader（用户自定义类加载器）\n\n   `java`编写,用户自定义的类加载器,可加载指定路径的`class`文件\n\n\n\n``` java\npublic class MyObject {\n    public static void main(String[] args) {\n        Object object = new Object();\n        System.out.println(object.getClass().getName() + \" 的加载器： \" + object.getClass().getClassLoader());\n\n        MyObject myObject = new MyObject();\n        System.out.println(myObject.getClass().getName() + \" 的加载器： \" + myObject.getClass().getClassLoader());\n        System.out.println(myObject.getClass().getName() + \" 上一代的加载器： \" + myObject.getClass().getClassLoader().getParent());\n        System.out.println(myObject.getClass().getName() + \" 上一代的上一代的加载器： \" + myObject.getClass().getClassLoader().getParent().getParent());\n\n    }\n}\n```\n\n![](./jvm/626353d2-1f73-46e9-858d-732ed7bee94a.png)\n\n因为BootStropClassLoader 不是java 编写的 所以打印出来是null \n\n\n\nJAVA 也叫系统类加载器，加载当前应用的classpath的所有类\n\n\n\n### 用户自定义加载器\n\n 继承 java.lang.ClassLoader\n\n![](./jvm/a670f078-2260-4276-8db9-79112eb9e979.png)\n\n\n\n### ClassLoad的双亲委派机制\n\n当某个类加载器需要加载某个`.class`文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。\n\n####  源码分析\n\n``` java\nprotected Class<?> loadClass(String name, boolean resolve)\n            throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // 首先检查这个classsh是否已经加载过了\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    // c==null表示没有加载，如果有父类的加载器则让父类加载器加载\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        //如果父类的加载器为空 则说明递归到bootStrapClassloader了\n                        //bootStrapClassloader比较特殊无法通过get获取\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {}\n                if (c == null) {\n                    //如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n\n#### 委派机制的流程图\n\n![](./jvm/745b992d-fcff-46df-8a33-150b65bf47ca.png)\n\n####  双亲委派机制的作用\n1.  防止重复加载同一个`.class`。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。\n2. 保证核心`.class`不能被篡改。通过委托方式，不会去篡改核心`.class`，即使篡改也不会去加载，即使加载也不会是同一个`.class`对象了。不同的加载器加载同一个`.class`也不是同一个`Class`对象。这样保证了`Class`执行安全。\n\n## Execution Engine 执行引擎\n\n- 执行引擎是Java虚拟机的核心组成部分之一\n- 虚拟机是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式\n- JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM锁识别的字节码指令、符号表和其他辅助信息\n- 那么，如果想让一个Java程序运行起来、执行引擎的任务就是将字节码指令解释/编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者\n- 从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果\n- 执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器\n- 每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址\n- 当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息\n\n## Native Interface本地接口\n\n`native`是一个计算机函数，一个Native Method就是一个Java调用非[Java](https://baike.baidu.com/item/Java/85979)代码的接口。方法的实现由非Java语言实现，比如C或C++。\n\n本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序， Java诞生的时候是C/C++横行的时候，要想立足，必须有调用C/C++程序， 于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies。\n目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用Web Service等等，不多做介绍。\n\n\n\n[标识符](https://baike.baidu.com/item/标识符)native可以与所有其它的[java标识符](https://baike.baidu.com/item/java标识符)连用，但是abstract除外。这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非java的，但是abstract却显然的指明这些方法无实现体。native与其它java标识符连用时，其意义同非Native Method并无差别，比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，比如当你想用一个native method去调用一个C的类库时。上面的第三个方法用到了native synchronized，JVM在进入这个方法的实现体之前会执行[同步锁](https://baike.baidu.com/item/同步锁)机制（就像java的多线程。）\n\n###  线程案例\n\n#### 案例代码\n\n``` java\npublic class MyObject {  \n    public static void main(String[] args) {\n        Thread thread = new Thread();\n        thread.start();\n    }\n}\n\n```\n\n####  源码分析\n\n进入strat()方法查看，实际调用了start0()方法\n\n``` java\n   /**\n     * Causes this thread to begin execution; the Java Virtual Machine\n     * calls the <code>run</code> method of this thread.\n     * <p>\n     * The result is that two threads are running concurrently: the\n     * current thread (which returns from the call to the\n     * <code>start</code> method) and the other thread (which executes its\n     * <code>run</code> method).\n     * <p>\n     * It is never legal to start a thread more than once.\n     * In particular, a thread may not be restarted once it has completed\n     * execution.\n     *\n     * @exception  IllegalThreadStateException  if the thread was already\n     *               started.\n     * @see        #run()\n     * @see        #stop()\n     */\n    public synchronized void start() {\n        /**\n         * This method is not invoked for the main method thread or \"system\"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         *\n         * A zero status value corresponds to state \"NEW\".\n         */\n        if (threadStatus != 0)\n            throw new IllegalThreadStateException();\n\n        /* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. */\n        group.add(this);\n\n        boolean started = false;\n        try {\n            start0();\n            started = true;\n        } finally {\n            try {\n                if (!started) {\n                    group.threadStartFailed(this);\n                }\n            } catch (Throwable ignore) {\n                /* do nothing. If start0 threw a Throwable then\n                  it will be passed up the call stack */\n            }\n        }\n    }\n\n    private native void start0();\n```\n\n##  Native Method Stack\n它的具体做法是Native Method Stack中登记`native`方法，在Execution\n`Engine`执行时加载本地方法库。\n\n\n\n## Program Counter Register PC寄存器\n\n- PC寄存器就是一个指针，用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。\n\n- 它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。\n\n- 在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。\n\n- 任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的java方法的JVM指令地址：或者，如果是在执行native方法，则是未指定值（undefined）\n\n- 它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n\n- 字节码解释器工作时就是通过改变这个计数器的值来选取下一个条需要执行的字节码指令。\n\n- 它是唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域。\n\n### 举例说明\n\n![](./jvm/0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png)\n![](./jvm/3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png)\n\n\n\n###  两个常见问题\n#### 使用PC寄存器存储字节码指令地址有什么用？\n\n因为CPU需要不停的切换各个线程，这时候切换回来以后，就的知道接着从哪开始执行。\n\n#### 为什么使用PC寄存器记录当前线程的执行地址呢？\n\nJVM的字节码解释器就是通过改变pc寄存器的值来确定下一条应该执行什么样的字节码指令。\n\n![](./jvm/5f12c1e3-2e47-4997-a887-b395b511490b.png)\n\n### PC寄存器为什么会被设定为线程私有?\n\n我们都知道所谓多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停的做任务切换，这样必然导致经常终端或回复，如果保证分毫不差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程分配一个pc寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。\n\n由于cpu时间片轮询限制，众多线程在并发执行过程中，任何一个确定的时间，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。\n\n这样必然会导致经常终端或恢复，如何保证分毫不差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。\n\n\n\n## Method Area 方法区\n\n供各线程共享的运行时内存区域。它**存储了每一个类的结构信息**，例如运行时常量池( Runtime Constant Pool)、字段和方法数据、构造函数和普通方法的字节码内容。**方法区是规范**，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space) 和元空间(Metaspace)。\n\njdk 1.7 是永久代，jdk1.8 是元空间。\n\n实例变量存在堆内存中,和方法区无关\n\n特性：    \n\n - 存放类的描述信息，类的模板。\n - 是线程共享，整个虚拟机只有一个方法区。\n - 永久代，方法区中的信息一般需要长期存在,而且它又是堆的逻辑分区,因此用堆的划分方法,我们把方法区称之为老年代。\n - 内存回收效率低，方法区中的信息一般需要长期存在,回收一遍内存之后可能只有少量信息无效.对方法区的内存回收的主要目标是:对常量池的回收和对类型的卸载。  \n\n\n\n##  Stackd 栈\n\n**栈管运行，堆管存储**\n\n> 理想：程序= 算法+ 数据结构\n\n> 现实：程序= 框架+业务逻辑\n\n### 队列 （FIFO） 先进先出\n\n就想食堂打饭，先到先得\n\n### 栈  （FILO） 先进后出\n\n就行弹匣，先进后出\n\n\n\n\n\n栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程--结束该栈就Over，生命周期和线程一致，是线程私有的。**8种基本类型的变量+对象的引用变量+实例方法都是**\n**在函数的栈内存中分配。**\n\n### 栈存储什么?\n\n栈帧=java 方法；\n\n栈帧中主要保存3类数据:\n\n-  本地变量(Local Variables) :输入参数和输出参数以及方法内的变量;\n-  栈操作(Operand Stack) :记录出栈、入栈的操作;\n-  栈帧数据(Frame Data) :包括类文件、方法等等。\n\n\n\n###  栈运行原理:\n栈中的数据都是以栈帧(Stack Frame) 的格式存在，栈帧是一个内存区\n块，是一个数据集，是一个有关方法(Method)和运行期数据的数据集，\n当一个方法A被调用时就产生了一个栈帧F1， 并被压入到栈中，\nA方法又调用了B方法， 于是产生栈帧F2也被压入栈，\nB方法又调用了C方法，于是产生栈帧F3也被压入栈，\n执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧.....\n\n遵循“先进后出”/“后进先出”原则。\n\n**每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数**\n**栈、动态链接、方法出口等信息**，每一个方法从调用直至执行完毕的过\n程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体\nJVM的实现有关，通常在256K\" ~756K之间，约等于1Mb左右。\n\n\n\n![](./jvm/95c89389-d9e7-42e1-9d80-4886d458a48b.png)\n\n\n\n图示在一个栈中有两个栈帧:栈帧2是最先被调用的方法，先入栈,然后方法2又调用了方法1，栈帧1处于栈顶的位置，栈帧2处于栈底，执行完毕后，依次弹出栈帧1和栈帧2,线程结束，栈释放。\n\n每执行一个方法都会产生一个栈帧，保存到栈(后进先出)的顶部,顶部栈就是当前的方法，该访法执行完毕后会自动将此栈帧出栈。\n\n\n\n###  栈溢出 （SOF）\n\n**Exception in thread \"main\" java.lang.StackOverflowError**  \n\n堆栈溢出是错误还是异常？\n\n![](./jvm/90434413-5431-408e-878f-3b76d5118d64.png)\n\n\n\n### 栈+堆+方法区的交互关系\n\n![](./jvm/d404438c-1def-4366-90a5-3f304dd1ddf2.png)\n\n**HotSpot是使用指针的方式来访问对象:Java堆中会存放访问`类元数据`的地址，reference存储的就直接是对象的地址。**\n\n![](./jvm/5066a220-0f28-4b94-8934-f54c722697a9.png)\n\n\n\n## Heap 堆\n\n\n一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分:\n\n- Young Generation Space\t新生区\t\tYoung/New\n- Tenure generation space\t养老区\t\tOld/ Tenure\n- Permanent Space\t\t\t\t  永久区\t\tPerm\n\n\n\n### JAVA7 之前\n\n![](./jvm/bedb0d3f-90d8-4867-84c2-cea52a58412f.png)\n\n\n\n### JAVA8 之后\n\n永久代变成了元空间。\n\n\n\n**堆内存`逻辑`分为`三部分`：新生+养老+永久**\n\n**堆内存`物理`分为`两部分`：新生+养老**\n\n\n\n新生区(如下是首次讲解，简单版，先入门大致理解)\n\n新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。\n\n> 新生区又分为两部分:伊甸区(Eden space) 和幸存者区(Survivorpacee)，所有的类都是在伊甸区被new出来的。幸存区有两个: 0区 (Survivor 0 pace) 和1区(Survivor 1 space) 。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢?再移动到养老区。若养老区也满了,那么这个时候将产生Ma jorGC (Fu11GC) ，进行养老区的内存清理。若养老区执行了Ful1 GC之后发现依然无法进行对象的保存，就会产生00M异常“QutOfMemoryError\"。\n\n如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够，原因有二：\n\n1. Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调 整。\n2. 代码中创建了大量大对象，并且长时间不能被垃圾收集器收集(存\n   在被引用)。\n\n\n\n##  对象的生命周期和GC\n\nJava堆从GC的角度还可以细分为:新生代( Eden区、From Survivor区)和To Survivor区和老年代。\n\n![](./jvm/bece6bf1-f9a8-475d-9911-6293e225d84e.png)\n\n\n\n###  MinorGC的过程(复制->清空->互换)\n\n1. Eden、 SurvivorFrom 复制到SurvivorTo，年龄+1首先，当Eden区满的时候会触发第一 次GC,把还活着的对象拷贝到SurvivorFrom区， 当Eden区再次触发GC的时候会扫描Eden区和From区域,对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接复制到To区域(如果有对象的年龄已经达到了老年的标准，则赋值到老年代区)，同时把这些对象的年龄+1\n2. 清空Eden、 SurvivorFrom然后，清空Eden和SurvivorFrom中的对象， 也即复制之后有交换，谁空谁是to\n3. SurvivorTo和 SurvivorFrom互换最后，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为 下一次GC时的SurvivorFrom区。部分对象会在From和To区域中复制来复制去，如此交换15次(由JVM参数MaxTenuringThreshold决定，这个参数默认是15),最终如果还是存活,就存入到老年代。\n\n**HotSpot内存管理**\n\n![](./jvm/5fb46273-081b-4271-b94c-e2ba6eea5f69.png)\n\n\n\n### 永久区(java7之前有)\n永久存储区是一个常驻内存区域，用于存放JDK自身所携带的Class, Interface的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是**不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占用的内存。**\n\n\n\n## 堆参数调整\n\n**JAVA7**\n\n![](./jvm/8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png)\n\n\n\n**JAVA8**\n\nJDK 1.8之后将最初的永久代取消了，由元空间取代。\n\n![](./jvm/db1f5266-c920-4379-a82d-f0dadbe1a1c3.png)\n\n\n\n\n\n在Java8中， 永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似。\n\n\n\n元空间与永久代之间最大的区别在于：**永久带使用的JVM的堆内存，但是java8以后的元空间并不在虚拟机中而是使用本机物理内存。**\n\n\n\n因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入native memory,字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制,而由系统的实际可用空间来控制。\n\n### JVM调优第一步，了解JVM常用命令行参数\n\n* JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\n\n* HotSpot参数分类\n\n  > 标准： - 开头，所有的HotSpot都支持\n  >\n  > 非标准：-X 开头，特定版本HotSpot支持特定命令\n  >\n  > 不稳定：-XX 开头，下个版本可能取消\n\n  java -version\n\n  java -X\n\n  java -XX:+PrintFlagsWithComments //只有debug版本能用\n\n### 堆内存调优\n\n|        命令         | 描述                                     |\n| :-----------------: | ---------------------------------------- |\n|        -Xms         | 设置初始分配大小，默认为物理内存的\"1/64\" |\n|        -Xmx         | 最大分配内存，默认为物理内存的\"1/4\"      |\n| -XX:+PrintGCDetails | 输出详细的GC处理日志                     |\n\n``` java\npublic class T1 {\n    public static void main(String[] args) {\n\n        int availableProcessors = Runtime.getRuntime().availableProcessors();\n        System.out.println(\"逻辑处理器：\" + availableProcessors);\n\n        //最大分配内存，默认为物理内存的\"1/4\"\n        long maxMemory = Runtime.getRuntime().maxMemory();\n        System.out.println(\"-Xmx (MAX_MEMORY) = \" + maxMemory + \"字节，\" + maxMemory / 1024 / 1024 + \"M\");\n\n        //设置初始分配大小，默认为物理内存的\"1/64\"\n        long totalMemory = Runtime.getRuntime().totalMemory();\n        System.out.println(\"-Xms (TOTAL_MEMORY) = \" + totalMemory + \"字节，\" + totalMemory / 1024 / 1024 + \"M\");\n    }\n}\n```\n\n![](./jvm/4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png)\n\n调整JVM的参数\n\n![](./jvm/f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png)\n\nJAVA8\n\n![](./jvm/d215e636-ea46-4b84-a861-4aff3dbdbf0e.png)\n\nJAVA7\n\n![](./jvm/befee5fe-233e-4ca1-8a63-1b8908311845.png)\n\n### 堆溢出 （OOM）\n\n``` java\nimport java.util.Random;\n\npublic class T2 {\n    public static void main(String[] args) {\n        while (true) {\n            String str = \"Mr.Wang\";\n            str += new Random().nextInt(88888888) + new Random().nextInt(99999999);\n        }\n    }\n}\n```\n\n配置堆内存参数：\n\n![](./jvm/787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png)\n\n![](./jvm/d5649d47-ed1b-4797-8a8f-73634873cd9d.png)\n\n**Exception: java.lang.OutOfMemoryError** \n\n![](./jvm/9111c342-79fb-4def-aef6-d266daea6078.png)\n\n### GC 日志插看\n\n![](./jvm/d9b58c91-421c-4afe-b359-2cde68c12eca.png)\n\n![](./jvm/3e60331e-2742-4047-8383-e107945f85c4.png)\n\n![](./jvm/3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png)\n\nJVM在进行GC时，并非每次都对上面三个内存区域一起回收的， **大部分时候回收的都是指新生代**。因此GC按照回收的区域又分了两种类型，一种是普通GC (minor GC)，一种是全局GC (major GC or FullGC)\n\n**Minor GC Full GC的区别**\n\n- 普通GC (minor GC) :只针对新生代区域的GC,指发生在新生代的垃圾收集动作，因为大多数Java对象存活率都不高，所以Minor GC非常频繁，一般回收速 度也比较快。\n\n- 全局GC (major GC or Full GC) :指发生在老年代的垃圾收集动作，出现了Major GC,经常会伴随至少一次的Minor GC (但并不是绝对的)。 **Major GC的速度一 般要比Minor GC慢上10倍以,原因是因为老年代占2/3，新生代占1/3。**\n","source":"_posts/2023/jvm.md","raw":"---\ntitle: JVM\ndate: 2023-03-21\ntags:\n- jvm\ncategories:\n- JAVA\n---\n\n## JVM 体系结构模型\n\n灰色线程私有，亮色线程共享！\n\n![](./jvm/ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png)\n\n## ClassLoad(类加载器)\n\n![](./jvm/6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png)\n\n> 负责加载class文件，class 文件在文件开头有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。\n\n![](./jvm/3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png)\n\n### 虚拟机自带的加载器\n\n1. 启动类加载器（Bootstrap） C++\n\n   java自带的类使用BootstrapClassLoader，由`c++`编写，加载`java`核心库 `java.*`,构造`ExtClassLoader`和`AppClassLoader`。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。\n\n2. 扩展类加载器（Extension） Java\n\n   jdk扩展的类使用ExtensionClassLoader，由`java`编写，加载扩展库，如`classpath`中的`jre` ，`javax.*`或者`java.ext.dir` 指定位置中的类，开发者可以直接使用标准扩展类加载器。\n\n3. 应用程序类加载器（AppClassLoader）\n\n   我们自己编写的类使用AppClassLoader，由`java`编写，加载程序所在的目录，如`user.dir`所在的位置的`class` 。\n\n4. CustomClassLoader（用户自定义类加载器）\n\n   `java`编写,用户自定义的类加载器,可加载指定路径的`class`文件\n\n\n\n``` java\npublic class MyObject {\n    public static void main(String[] args) {\n        Object object = new Object();\n        System.out.println(object.getClass().getName() + \" 的加载器： \" + object.getClass().getClassLoader());\n\n        MyObject myObject = new MyObject();\n        System.out.println(myObject.getClass().getName() + \" 的加载器： \" + myObject.getClass().getClassLoader());\n        System.out.println(myObject.getClass().getName() + \" 上一代的加载器： \" + myObject.getClass().getClassLoader().getParent());\n        System.out.println(myObject.getClass().getName() + \" 上一代的上一代的加载器： \" + myObject.getClass().getClassLoader().getParent().getParent());\n\n    }\n}\n```\n\n![](./jvm/626353d2-1f73-46e9-858d-732ed7bee94a.png)\n\n因为BootStropClassLoader 不是java 编写的 所以打印出来是null \n\n\n\nJAVA 也叫系统类加载器，加载当前应用的classpath的所有类\n\n\n\n### 用户自定义加载器\n\n 继承 java.lang.ClassLoader\n\n![](./jvm/a670f078-2260-4276-8db9-79112eb9e979.png)\n\n\n\n### ClassLoad的双亲委派机制\n\n当某个类加载器需要加载某个`.class`文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。\n\n####  源码分析\n\n``` java\nprotected Class<?> loadClass(String name, boolean resolve)\n            throws ClassNotFoundException\n    {\n        synchronized (getClassLoadingLock(name)) {\n            // 首先检查这个classsh是否已经加载过了\n            Class<?> c = findLoadedClass(name);\n            if (c == null) {\n                long t0 = System.nanoTime();\n                try {\n                    // c==null表示没有加载，如果有父类的加载器则让父类加载器加载\n                    if (parent != null) {\n                        c = parent.loadClass(name, false);\n                    } else {\n                        //如果父类的加载器为空 则说明递归到bootStrapClassloader了\n                        //bootStrapClassloader比较特殊无法通过get获取\n                        c = findBootstrapClassOrNull(name);\n                    }\n                } catch (ClassNotFoundException e) {}\n                if (c == null) {\n                    //如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class\n                    long t1 = System.nanoTime();\n                    c = findClass(name);\n                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);\n                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);\n                    sun.misc.PerfCounter.getFindClasses().increment();\n                }\n            }\n            if (resolve) {\n                resolveClass(c);\n            }\n            return c;\n        }\n    }\n```\n\n#### 委派机制的流程图\n\n![](./jvm/745b992d-fcff-46df-8a33-150b65bf47ca.png)\n\n####  双亲委派机制的作用\n1.  防止重复加载同一个`.class`。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。\n2. 保证核心`.class`不能被篡改。通过委托方式，不会去篡改核心`.class`，即使篡改也不会去加载，即使加载也不会是同一个`.class`对象了。不同的加载器加载同一个`.class`也不是同一个`Class`对象。这样保证了`Class`执行安全。\n\n## Execution Engine 执行引擎\n\n- 执行引擎是Java虚拟机的核心组成部分之一\n- 虚拟机是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式\n- JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM锁识别的字节码指令、符号表和其他辅助信息\n- 那么，如果想让一个Java程序运行起来、执行引擎的任务就是将字节码指令解释/编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者\n- 从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果\n- 执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器\n- 每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址\n- 当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息\n\n## Native Interface本地接口\n\n`native`是一个计算机函数，一个Native Method就是一个Java调用非[Java](https://baike.baidu.com/item/Java/85979)代码的接口。方法的实现由非Java语言实现，比如C或C++。\n\n本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C/C++程序， Java诞生的时候是C/C++横行的时候，要想立足，必须有调用C/C++程序， 于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies。\n目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用Web Service等等，不多做介绍。\n\n\n\n[标识符](https://baike.baidu.com/item/标识符)native可以与所有其它的[java标识符](https://baike.baidu.com/item/java标识符)连用，但是abstract除外。这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非java的，但是abstract却显然的指明这些方法无实现体。native与其它java标识符连用时，其意义同非Native Method并无差别，比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，比如当你想用一个native method去调用一个C的类库时。上面的第三个方法用到了native synchronized，JVM在进入这个方法的实现体之前会执行[同步锁](https://baike.baidu.com/item/同步锁)机制（就像java的多线程。）\n\n###  线程案例\n\n#### 案例代码\n\n``` java\npublic class MyObject {  \n    public static void main(String[] args) {\n        Thread thread = new Thread();\n        thread.start();\n    }\n}\n\n```\n\n####  源码分析\n\n进入strat()方法查看，实际调用了start0()方法\n\n``` java\n   /**\n     * Causes this thread to begin execution; the Java Virtual Machine\n     * calls the <code>run</code> method of this thread.\n     * <p>\n     * The result is that two threads are running concurrently: the\n     * current thread (which returns from the call to the\n     * <code>start</code> method) and the other thread (which executes its\n     * <code>run</code> method).\n     * <p>\n     * It is never legal to start a thread more than once.\n     * In particular, a thread may not be restarted once it has completed\n     * execution.\n     *\n     * @exception  IllegalThreadStateException  if the thread was already\n     *               started.\n     * @see        #run()\n     * @see        #stop()\n     */\n    public synchronized void start() {\n        /**\n         * This method is not invoked for the main method thread or \"system\"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         *\n         * A zero status value corresponds to state \"NEW\".\n         */\n        if (threadStatus != 0)\n            throw new IllegalThreadStateException();\n\n        /* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. */\n        group.add(this);\n\n        boolean started = false;\n        try {\n            start0();\n            started = true;\n        } finally {\n            try {\n                if (!started) {\n                    group.threadStartFailed(this);\n                }\n            } catch (Throwable ignore) {\n                /* do nothing. If start0 threw a Throwable then\n                  it will be passed up the call stack */\n            }\n        }\n    }\n\n    private native void start0();\n```\n\n##  Native Method Stack\n它的具体做法是Native Method Stack中登记`native`方法，在Execution\n`Engine`执行时加载本地方法库。\n\n\n\n## Program Counter Register PC寄存器\n\n- PC寄存器就是一个指针，用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。\n\n- 它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。\n\n- 在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。\n\n- 任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的java方法的JVM指令地址：或者，如果是在执行native方法，则是未指定值（undefined）\n\n- 它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。\n\n- 字节码解释器工作时就是通过改变这个计数器的值来选取下一个条需要执行的字节码指令。\n\n- 它是唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域。\n\n### 举例说明\n\n![](./jvm/0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png)\n![](./jvm/3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png)\n\n\n\n###  两个常见问题\n#### 使用PC寄存器存储字节码指令地址有什么用？\n\n因为CPU需要不停的切换各个线程，这时候切换回来以后，就的知道接着从哪开始执行。\n\n#### 为什么使用PC寄存器记录当前线程的执行地址呢？\n\nJVM的字节码解释器就是通过改变pc寄存器的值来确定下一条应该执行什么样的字节码指令。\n\n![](./jvm/5f12c1e3-2e47-4997-a887-b395b511490b.png)\n\n### PC寄存器为什么会被设定为线程私有?\n\n我们都知道所谓多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停的做任务切换，这样必然导致经常终端或回复，如果保证分毫不差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程分配一个pc寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。\n\n由于cpu时间片轮询限制，众多线程在并发执行过程中，任何一个确定的时间，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。\n\n这样必然会导致经常终端或恢复，如何保证分毫不差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。\n\n\n\n## Method Area 方法区\n\n供各线程共享的运行时内存区域。它**存储了每一个类的结构信息**，例如运行时常量池( Runtime Constant Pool)、字段和方法数据、构造函数和普通方法的字节码内容。**方法区是规范**，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space) 和元空间(Metaspace)。\n\njdk 1.7 是永久代，jdk1.8 是元空间。\n\n实例变量存在堆内存中,和方法区无关\n\n特性：    \n\n - 存放类的描述信息，类的模板。\n - 是线程共享，整个虚拟机只有一个方法区。\n - 永久代，方法区中的信息一般需要长期存在,而且它又是堆的逻辑分区,因此用堆的划分方法,我们把方法区称之为老年代。\n - 内存回收效率低，方法区中的信息一般需要长期存在,回收一遍内存之后可能只有少量信息无效.对方法区的内存回收的主要目标是:对常量池的回收和对类型的卸载。  \n\n\n\n##  Stackd 栈\n\n**栈管运行，堆管存储**\n\n> 理想：程序= 算法+ 数据结构\n\n> 现实：程序= 框架+业务逻辑\n\n### 队列 （FIFO） 先进先出\n\n就想食堂打饭，先到先得\n\n### 栈  （FILO） 先进后出\n\n就行弹匣，先进后出\n\n\n\n\n\n栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程--结束该栈就Over，生命周期和线程一致，是线程私有的。**8种基本类型的变量+对象的引用变量+实例方法都是**\n**在函数的栈内存中分配。**\n\n### 栈存储什么?\n\n栈帧=java 方法；\n\n栈帧中主要保存3类数据:\n\n-  本地变量(Local Variables) :输入参数和输出参数以及方法内的变量;\n-  栈操作(Operand Stack) :记录出栈、入栈的操作;\n-  栈帧数据(Frame Data) :包括类文件、方法等等。\n\n\n\n###  栈运行原理:\n栈中的数据都是以栈帧(Stack Frame) 的格式存在，栈帧是一个内存区\n块，是一个数据集，是一个有关方法(Method)和运行期数据的数据集，\n当一个方法A被调用时就产生了一个栈帧F1， 并被压入到栈中，\nA方法又调用了B方法， 于是产生栈帧F2也被压入栈，\nB方法又调用了C方法，于是产生栈帧F3也被压入栈，\n执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧.....\n\n遵循“先进后出”/“后进先出”原则。\n\n**每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数**\n**栈、动态链接、方法出口等信息**，每一个方法从调用直至执行完毕的过\n程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体\nJVM的实现有关，通常在256K\" ~756K之间，约等于1Mb左右。\n\n\n\n![](./jvm/95c89389-d9e7-42e1-9d80-4886d458a48b.png)\n\n\n\n图示在一个栈中有两个栈帧:栈帧2是最先被调用的方法，先入栈,然后方法2又调用了方法1，栈帧1处于栈顶的位置，栈帧2处于栈底，执行完毕后，依次弹出栈帧1和栈帧2,线程结束，栈释放。\n\n每执行一个方法都会产生一个栈帧，保存到栈(后进先出)的顶部,顶部栈就是当前的方法，该访法执行完毕后会自动将此栈帧出栈。\n\n\n\n###  栈溢出 （SOF）\n\n**Exception in thread \"main\" java.lang.StackOverflowError**  \n\n堆栈溢出是错误还是异常？\n\n![](./jvm/90434413-5431-408e-878f-3b76d5118d64.png)\n\n\n\n### 栈+堆+方法区的交互关系\n\n![](./jvm/d404438c-1def-4366-90a5-3f304dd1ddf2.png)\n\n**HotSpot是使用指针的方式来访问对象:Java堆中会存放访问`类元数据`的地址，reference存储的就直接是对象的地址。**\n\n![](./jvm/5066a220-0f28-4b94-8934-f54c722697a9.png)\n\n\n\n## Heap 堆\n\n\n一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分:\n\n- Young Generation Space\t新生区\t\tYoung/New\n- Tenure generation space\t养老区\t\tOld/ Tenure\n- Permanent Space\t\t\t\t  永久区\t\tPerm\n\n\n\n### JAVA7 之前\n\n![](./jvm/bedb0d3f-90d8-4867-84c2-cea52a58412f.png)\n\n\n\n### JAVA8 之后\n\n永久代变成了元空间。\n\n\n\n**堆内存`逻辑`分为`三部分`：新生+养老+永久**\n\n**堆内存`物理`分为`两部分`：新生+养老**\n\n\n\n新生区(如下是首次讲解，简单版，先入门大致理解)\n\n新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。\n\n> 新生区又分为两部分:伊甸区(Eden space) 和幸存者区(Survivorpacee)，所有的类都是在伊甸区被new出来的。幸存区有两个: 0区 (Survivor 0 pace) 和1区(Survivor 1 space) 。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢?再移动到养老区。若养老区也满了,那么这个时候将产生Ma jorGC (Fu11GC) ，进行养老区的内存清理。若养老区执行了Ful1 GC之后发现依然无法进行对象的保存，就会产生00M异常“QutOfMemoryError\"。\n\n如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够，原因有二：\n\n1. Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调 整。\n2. 代码中创建了大量大对象，并且长时间不能被垃圾收集器收集(存\n   在被引用)。\n\n\n\n##  对象的生命周期和GC\n\nJava堆从GC的角度还可以细分为:新生代( Eden区、From Survivor区)和To Survivor区和老年代。\n\n![](./jvm/bece6bf1-f9a8-475d-9911-6293e225d84e.png)\n\n\n\n###  MinorGC的过程(复制->清空->互换)\n\n1. Eden、 SurvivorFrom 复制到SurvivorTo，年龄+1首先，当Eden区满的时候会触发第一 次GC,把还活着的对象拷贝到SurvivorFrom区， 当Eden区再次触发GC的时候会扫描Eden区和From区域,对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接复制到To区域(如果有对象的年龄已经达到了老年的标准，则赋值到老年代区)，同时把这些对象的年龄+1\n2. 清空Eden、 SurvivorFrom然后，清空Eden和SurvivorFrom中的对象， 也即复制之后有交换，谁空谁是to\n3. SurvivorTo和 SurvivorFrom互换最后，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为 下一次GC时的SurvivorFrom区。部分对象会在From和To区域中复制来复制去，如此交换15次(由JVM参数MaxTenuringThreshold决定，这个参数默认是15),最终如果还是存活,就存入到老年代。\n\n**HotSpot内存管理**\n\n![](./jvm/5fb46273-081b-4271-b94c-e2ba6eea5f69.png)\n\n\n\n### 永久区(java7之前有)\n永久存储区是一个常驻内存区域，用于存放JDK自身所携带的Class, Interface的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是**不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占用的内存。**\n\n\n\n## 堆参数调整\n\n**JAVA7**\n\n![](./jvm/8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png)\n\n\n\n**JAVA8**\n\nJDK 1.8之后将最初的永久代取消了，由元空间取代。\n\n![](./jvm/db1f5266-c920-4379-a82d-f0dadbe1a1c3.png)\n\n\n\n\n\n在Java8中， 永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似。\n\n\n\n元空间与永久代之间最大的区别在于：**永久带使用的JVM的堆内存，但是java8以后的元空间并不在虚拟机中而是使用本机物理内存。**\n\n\n\n因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入native memory,字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制,而由系统的实际可用空间来控制。\n\n### JVM调优第一步，了解JVM常用命令行参数\n\n* JVM的命令行参数参考：https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\n\n* HotSpot参数分类\n\n  > 标准： - 开头，所有的HotSpot都支持\n  >\n  > 非标准：-X 开头，特定版本HotSpot支持特定命令\n  >\n  > 不稳定：-XX 开头，下个版本可能取消\n\n  java -version\n\n  java -X\n\n  java -XX:+PrintFlagsWithComments //只有debug版本能用\n\n### 堆内存调优\n\n|        命令         | 描述                                     |\n| :-----------------: | ---------------------------------------- |\n|        -Xms         | 设置初始分配大小，默认为物理内存的\"1/64\" |\n|        -Xmx         | 最大分配内存，默认为物理内存的\"1/4\"      |\n| -XX:+PrintGCDetails | 输出详细的GC处理日志                     |\n\n``` java\npublic class T1 {\n    public static void main(String[] args) {\n\n        int availableProcessors = Runtime.getRuntime().availableProcessors();\n        System.out.println(\"逻辑处理器：\" + availableProcessors);\n\n        //最大分配内存，默认为物理内存的\"1/4\"\n        long maxMemory = Runtime.getRuntime().maxMemory();\n        System.out.println(\"-Xmx (MAX_MEMORY) = \" + maxMemory + \"字节，\" + maxMemory / 1024 / 1024 + \"M\");\n\n        //设置初始分配大小，默认为物理内存的\"1/64\"\n        long totalMemory = Runtime.getRuntime().totalMemory();\n        System.out.println(\"-Xms (TOTAL_MEMORY) = \" + totalMemory + \"字节，\" + totalMemory / 1024 / 1024 + \"M\");\n    }\n}\n```\n\n![](./jvm/4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png)\n\n调整JVM的参数\n\n![](./jvm/f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png)\n\nJAVA8\n\n![](./jvm/d215e636-ea46-4b84-a861-4aff3dbdbf0e.png)\n\nJAVA7\n\n![](./jvm/befee5fe-233e-4ca1-8a63-1b8908311845.png)\n\n### 堆溢出 （OOM）\n\n``` java\nimport java.util.Random;\n\npublic class T2 {\n    public static void main(String[] args) {\n        while (true) {\n            String str = \"Mr.Wang\";\n            str += new Random().nextInt(88888888) + new Random().nextInt(99999999);\n        }\n    }\n}\n```\n\n配置堆内存参数：\n\n![](./jvm/787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png)\n\n![](./jvm/d5649d47-ed1b-4797-8a8f-73634873cd9d.png)\n\n**Exception: java.lang.OutOfMemoryError** \n\n![](./jvm/9111c342-79fb-4def-aef6-d266daea6078.png)\n\n### GC 日志插看\n\n![](./jvm/d9b58c91-421c-4afe-b359-2cde68c12eca.png)\n\n![](./jvm/3e60331e-2742-4047-8383-e107945f85c4.png)\n\n![](./jvm/3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png)\n\nJVM在进行GC时，并非每次都对上面三个内存区域一起回收的， **大部分时候回收的都是指新生代**。因此GC按照回收的区域又分了两种类型，一种是普通GC (minor GC)，一种是全局GC (major GC or FullGC)\n\n**Minor GC Full GC的区别**\n\n- 普通GC (minor GC) :只针对新生代区域的GC,指发生在新生代的垃圾收集动作，因为大多数Java对象存活率都不高，所以Minor GC非常频繁，一般回收速 度也比较快。\n\n- 全局GC (major GC or Full GC) :指发生在老年代的垃圾收集动作，出现了Major GC,经常会伴随至少一次的Minor GC (但并不是绝对的)。 **Major GC的速度一 般要比Minor GC慢上10倍以,原因是因为老年代占2/3，新生代占1/3。**\n","slug":"2023/jvm","published":1,"updated":"2024-08-05T11:07:24.339Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy8000p0aib3bxi0007","content":"<h2 id=\"JVM-体系结构模型\"><a href=\"#JVM-体系结构模型\" class=\"headerlink\" title=\"JVM 体系结构模型\"></a>JVM 体系结构模型</h2><p>灰色线程私有，亮色线程共享！</p>\n<p><img src=\"/./jvm/ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png\"></p>\n<h2 id=\"ClassLoad-类加载器\"><a href=\"#ClassLoad-类加载器\" class=\"headerlink\" title=\"ClassLoad(类加载器)\"></a>ClassLoad(类加载器)</h2><p><img src=\"/./jvm/6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png\"></p>\n<blockquote>\n<p>负责加载class文件，class 文件在文件开头有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>\n</blockquote>\n<p><img src=\"/./jvm/3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png\"></p>\n<h3 id=\"虚拟机自带的加载器\"><a href=\"#虚拟机自带的加载器\" class=\"headerlink\" title=\"虚拟机自带的加载器\"></a>虚拟机自带的加载器</h3><ol>\n<li><p>启动类加载器（Bootstrap） C++</p>\n<p>java自带的类使用BootstrapClassLoader，由<code>c++</code>编写，加载<code>java</code>核心库 <code>java.*</code>,构造<code>ExtClassLoader</code>和<code>AppClassLoader</code>。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。</p>\n</li>\n<li><p>扩展类加载器（Extension） Java</p>\n<p>jdk扩展的类使用ExtensionClassLoader，由<code>java</code>编写，加载扩展库，如<code>classpath</code>中的<code>jre</code> ，<code>javax.*</code>或者<code>java.ext.dir</code> 指定位置中的类，开发者可以直接使用标准扩展类加载器。</p>\n</li>\n<li><p>应用程序类加载器（AppClassLoader）</p>\n<p>我们自己编写的类使用AppClassLoader，由<code>java</code>编写，加载程序所在的目录，如<code>user.dir</code>所在的位置的<code>class</code> 。</p>\n</li>\n<li><p>CustomClassLoader（用户自定义类加载器）</p>\n<p><code>java</code>编写,用户自定义的类加载器,可加载指定路径的<code>class</code>文件</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        System.out.println(object.getClass().getName() + <span class=\"string\">&quot; 的加载器： &quot;</span> + object.getClass().getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MyObject</span> <span class=\"variable\">myObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyObject</span>();</span><br><span class=\"line\">        System.out.println(myObject.getClass().getName() + <span class=\"string\">&quot; 的加载器： &quot;</span> + myObject.getClass().getClassLoader());</span><br><span class=\"line\">        System.out.println(myObject.getClass().getName() + <span class=\"string\">&quot; 上一代的加载器： &quot;</span> + myObject.getClass().getClassLoader().getParent());</span><br><span class=\"line\">        System.out.println(myObject.getClass().getName() + <span class=\"string\">&quot; 上一代的上一代的加载器： &quot;</span> + myObject.getClass().getClassLoader().getParent().getParent());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./jvm/626353d2-1f73-46e9-858d-732ed7bee94a.png\"></p>\n<p>因为BootStropClassLoader 不是java 编写的 所以打印出来是null </p>\n<p>JAVA 也叫系统类加载器，加载当前应用的classpath的所有类</p>\n<h3 id=\"用户自定义加载器\"><a href=\"#用户自定义加载器\" class=\"headerlink\" title=\"用户自定义加载器\"></a>用户自定义加载器</h3><p> 继承 java.lang.ClassLoader</p>\n<p><img src=\"/./jvm/a670f078-2260-4276-8db9-79112eb9e979.png\"></p>\n<h3 id=\"ClassLoad的双亲委派机制\"><a href=\"#ClassLoad的双亲委派机制\" class=\"headerlink\" title=\"ClassLoad的双亲委派机制\"></a>ClassLoad的双亲委派机制</h3><p>当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首先检查这个classsh是否已经加载过了</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// c==null表示没有加载，如果有父类的加载器则让父类加载器加载</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果父类的加载器为空 则说明递归到bootStrapClassloader了</span></span><br><span class=\"line\">                        <span class=\"comment\">//bootStrapClassloader比较特殊无法通过get获取</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"委派机制的流程图\"><a href=\"#委派机制的流程图\" class=\"headerlink\" title=\"委派机制的流程图\"></a>委派机制的流程图</h4><p><img src=\"/./jvm/745b992d-fcff-46df-8a33-150b65bf47ca.png\"></p>\n<h4 id=\"双亲委派机制的作用\"><a href=\"#双亲委派机制的作用\" class=\"headerlink\" title=\"双亲委派机制的作用\"></a>双亲委派机制的作用</h4><ol>\n<li>防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。</li>\n<li>保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.class</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</li>\n</ol>\n<h2 id=\"Execution-Engine-执行引擎\"><a href=\"#Execution-Engine-执行引擎\" class=\"headerlink\" title=\"Execution Engine 执行引擎\"></a>Execution Engine 执行引擎</h2><ul>\n<li>执行引擎是Java虚拟机的核心组成部分之一</li>\n<li>虚拟机是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式</li>\n<li>JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM锁识别的字节码指令、符号表和其他辅助信息</li>\n<li>那么，如果想让一个Java程序运行起来、执行引擎的任务就是将字节码指令解释&#x2F;编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者</li>\n<li>从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果</li>\n<li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器</li>\n<li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址</li>\n<li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息</li>\n</ul>\n<h2 id=\"Native-Interface本地接口\"><a href=\"#Native-Interface本地接口\" class=\"headerlink\" title=\"Native Interface本地接口\"></a>Native Interface本地接口</h2><p><code>native</code>是一个计算机函数，一个Native Method就是一个Java调用非<a href=\"https://baike.baidu.com/item/Java/85979\">Java</a>代码的接口。方法的实现由非Java语言实现，比如C或C++。</p>\n<p>本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C&#x2F;C++程序， Java诞生的时候是C&#x2F;C++横行的时候，要想立足，必须有调用C&#x2F;C++程序， 于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies。<br>目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用Web Service等等，不多做介绍。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6\">标识符</a>native可以与所有其它的<a href=\"https://baike.baidu.com/item/java%E6%A0%87%E8%AF%86%E7%AC%A6\">java标识符</a>连用，但是abstract除外。这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非java的，但是abstract却显然的指明这些方法无实现体。native与其它java标识符连用时，其意义同非Native Method并无差别，比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，比如当你想用一个native method去调用一个C的类库时。上面的第三个方法用到了native synchronized，JVM在进入这个方法的实现体之前会执行<a href=\"https://baike.baidu.com/item/%E5%90%8C%E6%AD%A5%E9%94%81\">同步锁</a>机制（就像java的多线程。）</p>\n<h3 id=\"线程案例\"><a href=\"#线程案例\" class=\"headerlink\" title=\"线程案例\"></a>线程案例</h3><h4 id=\"案例代码\"><a href=\"#案例代码\" class=\"headerlink\" title=\"案例代码\"></a>案例代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>进入strat()方法查看，实际调用了start0()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class=\"line\"><span class=\"comment\">  * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * The result is that two threads are running concurrently: the</span></span><br><span class=\"line\"><span class=\"comment\">  * current thread (which returns from the call to the</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * It is never legal to start a thread more than once.</span></span><br><span class=\"line\"><span class=\"comment\">  * In particular, a thread may not be restarted once it has completed</span></span><br><span class=\"line\"><span class=\"comment\">  * execution.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class=\"line\"><span class=\"comment\">  *               started.</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@see</span>        #run()</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@see</span>        #stop()</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class=\"line\"><span class=\"comment\">      * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">      * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">      * so that it can be added to the group&#x27;s list of threads</span></span><br><span class=\"line\"><span class=\"comment\">      * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class=\"line\">     group.add(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         start0();</span><br><span class=\"line\">         started = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                 group.threadStartFailed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">             <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">               it will be passed up the call stack */</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Native-Method-Stack\"><a href=\"#Native-Method-Stack\" class=\"headerlink\" title=\"Native Method Stack\"></a>Native Method Stack</h2><p>它的具体做法是Native Method Stack中登记<code>native</code>方法，在Execution<br><code>Engine</code>执行时加载本地方法库。</p>\n<h2 id=\"Program-Counter-Register-PC寄存器\"><a href=\"#Program-Counter-Register-PC寄存器\" class=\"headerlink\" title=\"Program Counter Register PC寄存器\"></a>Program Counter Register PC寄存器</h2><ul>\n<li><p>PC寄存器就是一个指针，用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</p>\n</li>\n<li><p>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p>\n</li>\n<li><p>在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p>\n</li>\n<li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的java方法的JVM指令地址：或者，如果是在执行native方法，则是未指定值（undefined）</p>\n</li>\n<li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>\n</li>\n<li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一个条需要执行的字节码指令。</p>\n</li>\n<li><p>它是唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域。</p>\n</li>\n</ul>\n<h3 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h3><p><img src=\"/./jvm/0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png\"><br><img src=\"/./jvm/3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png\"></p>\n<h3 id=\"两个常见问题\"><a href=\"#两个常见问题\" class=\"headerlink\" title=\"两个常见问题\"></a>两个常见问题</h3><h4 id=\"使用PC寄存器存储字节码指令地址有什么用？\"><a href=\"#使用PC寄存器存储字节码指令地址有什么用？\" class=\"headerlink\" title=\"使用PC寄存器存储字节码指令地址有什么用？\"></a>使用PC寄存器存储字节码指令地址有什么用？</h4><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就的知道接着从哪开始执行。</p>\n<h4 id=\"为什么使用PC寄存器记录当前线程的执行地址呢？\"><a href=\"#为什么使用PC寄存器记录当前线程的执行地址呢？\" class=\"headerlink\" title=\"为什么使用PC寄存器记录当前线程的执行地址呢？\"></a>为什么使用PC寄存器记录当前线程的执行地址呢？</h4><p>JVM的字节码解释器就是通过改变pc寄存器的值来确定下一条应该执行什么样的字节码指令。</p>\n<p><img src=\"/./jvm/5f12c1e3-2e47-4997-a887-b395b511490b.png\"></p>\n<h3 id=\"PC寄存器为什么会被设定为线程私有\"><a href=\"#PC寄存器为什么会被设定为线程私有\" class=\"headerlink\" title=\"PC寄存器为什么会被设定为线程私有?\"></a>PC寄存器为什么会被设定为线程私有?</h3><p>我们都知道所谓多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停的做任务切换，这样必然导致经常终端或回复，如果保证分毫不差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程分配一个pc寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p>\n<p>由于cpu时间片轮询限制，众多线程在并发执行过程中，任何一个确定的时间，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p>\n<p>这样必然会导致经常终端或恢复，如何保证分毫不差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p>\n<h2 id=\"Method-Area-方法区\"><a href=\"#Method-Area-方法区\" class=\"headerlink\" title=\"Method Area 方法区\"></a>Method Area 方法区</h2><p>供各线程共享的运行时内存区域。它<strong>存储了每一个类的结构信息</strong>，例如运行时常量池( Runtime Constant Pool)、字段和方法数据、构造函数和普通方法的字节码内容。<strong>方法区是规范</strong>，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space) 和元空间(Metaspace)。</p>\n<p>jdk 1.7 是永久代，jdk1.8 是元空间。</p>\n<p>实例变量存在堆内存中,和方法区无关</p>\n<p>特性：    </p>\n<ul>\n<li>存放类的描述信息，类的模板。</li>\n<li>是线程共享，整个虚拟机只有一个方法区。</li>\n<li>永久代，方法区中的信息一般需要长期存在,而且它又是堆的逻辑分区,因此用堆的划分方法,我们把方法区称之为老年代。</li>\n<li>内存回收效率低，方法区中的信息一般需要长期存在,回收一遍内存之后可能只有少量信息无效.对方法区的内存回收的主要目标是:对常量池的回收和对类型的卸载。</li>\n</ul>\n<h2 id=\"Stackd-栈\"><a href=\"#Stackd-栈\" class=\"headerlink\" title=\"Stackd 栈\"></a>Stackd 栈</h2><p><strong>栈管运行，堆管存储</strong></p>\n<blockquote>\n<p>理想：程序&#x3D; 算法+ 数据结构</p>\n</blockquote>\n<blockquote>\n<p>现实：程序&#x3D; 框架+业务逻辑</p>\n</blockquote>\n<h3 id=\"队列-（FIFO）-先进先出\"><a href=\"#队列-（FIFO）-先进先出\" class=\"headerlink\" title=\"队列 （FIFO） 先进先出\"></a>队列 （FIFO） 先进先出</h3><p>就想食堂打饭，先到先得</p>\n<h3 id=\"栈-（FILO）-先进后出\"><a href=\"#栈-（FILO）-先进后出\" class=\"headerlink\" title=\"栈  （FILO） 先进后出\"></a>栈  （FILO） 先进后出</h3><p>就行弹匣，先进后出</p>\n<p>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程–结束该栈就Over，生命周期和线程一致，是线程私有的。<strong>8种基本类型的变量+对象的引用变量+实例方法都是</strong><br><strong>在函数的栈内存中分配。</strong></p>\n<h3 id=\"栈存储什么\"><a href=\"#栈存储什么\" class=\"headerlink\" title=\"栈存储什么?\"></a>栈存储什么?</h3><p>栈帧&#x3D;java 方法；</p>\n<p>栈帧中主要保存3类数据:</p>\n<ul>\n<li>本地变量(Local Variables) :输入参数和输出参数以及方法内的变量;</li>\n<li>栈操作(Operand Stack) :记录出栈、入栈的操作;</li>\n<li>栈帧数据(Frame Data) :包括类文件、方法等等。</li>\n</ul>\n<h3 id=\"栈运行原理\"><a href=\"#栈运行原理\" class=\"headerlink\" title=\"栈运行原理:\"></a>栈运行原理:</h3><p>栈中的数据都是以栈帧(Stack Frame) 的格式存在，栈帧是一个内存区<br>块，是一个数据集，是一个有关方法(Method)和运行期数据的数据集，<br>当一个方法A被调用时就产生了一个栈帧F1， 并被压入到栈中，<br>A方法又调用了B方法， 于是产生栈帧F2也被压入栈，<br>B方法又调用了C方法，于是产生栈帧F3也被压入栈，<br>执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧…..</p>\n<p>遵循“先进后出”&#x2F;“后进先出”原则。</p>\n<p><strong>每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数</strong><br><strong>栈、动态链接、方法出口等信息</strong>，每一个方法从调用直至执行完毕的过<br>程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体<br>JVM的实现有关，通常在256K” ~756K之间，约等于1Mb左右。</p>\n<p><img src=\"/./jvm/95c89389-d9e7-42e1-9d80-4886d458a48b.png\"></p>\n<p>图示在一个栈中有两个栈帧:栈帧2是最先被调用的方法，先入栈,然后方法2又调用了方法1，栈帧1处于栈顶的位置，栈帧2处于栈底，执行完毕后，依次弹出栈帧1和栈帧2,线程结束，栈释放。</p>\n<p>每执行一个方法都会产生一个栈帧，保存到栈(后进先出)的顶部,顶部栈就是当前的方法，该访法执行完毕后会自动将此栈帧出栈。</p>\n<h3 id=\"栈溢出-（SOF）\"><a href=\"#栈溢出-（SOF）\" class=\"headerlink\" title=\"栈溢出 （SOF）\"></a>栈溢出 （SOF）</h3><p><strong>Exception in thread “main” java.lang.StackOverflowError</strong>  </p>\n<p>堆栈溢出是错误还是异常？</p>\n<p><img src=\"/./jvm/90434413-5431-408e-878f-3b76d5118d64.png\"></p>\n<h3 id=\"栈-堆-方法区的交互关系\"><a href=\"#栈-堆-方法区的交互关系\" class=\"headerlink\" title=\"栈+堆+方法区的交互关系\"></a>栈+堆+方法区的交互关系</h3><p><img src=\"/./jvm/d404438c-1def-4366-90a5-3f304dd1ddf2.png\"></p>\n<p><strong>HotSpot是使用指针的方式来访问对象:Java堆中会存放访问<code>类元数据</code>的地址，reference存储的就直接是对象的地址。</strong></p>\n<p><img src=\"/./jvm/5066a220-0f28-4b94-8934-f54c722697a9.png\"></p>\n<h2 id=\"Heap-堆\"><a href=\"#Heap-堆\" class=\"headerlink\" title=\"Heap 堆\"></a>Heap 堆</h2><p>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分:</p>\n<ul>\n<li>Young Generation Space\t新生区\t\tYoung&#x2F;New</li>\n<li>Tenure generation space\t养老区\t\tOld&#x2F; Tenure</li>\n<li>Permanent Space\t\t\t\t  永久区\t\tPerm</li>\n</ul>\n<h3 id=\"JAVA7-之前\"><a href=\"#JAVA7-之前\" class=\"headerlink\" title=\"JAVA7 之前\"></a>JAVA7 之前</h3><p><img src=\"/./jvm/bedb0d3f-90d8-4867-84c2-cea52a58412f.png\"></p>\n<h3 id=\"JAVA8-之后\"><a href=\"#JAVA8-之后\" class=\"headerlink\" title=\"JAVA8 之后\"></a>JAVA8 之后</h3><p>永久代变成了元空间。</p>\n<p><strong>堆内存<code>逻辑</code>分为<code>三部分</code>：新生+养老+永久</strong></p>\n<p><strong>堆内存<code>物理</code>分为<code>两部分</code>：新生+养老</strong></p>\n<p>新生区(如下是首次讲解，简单版，先入门大致理解)</p>\n<p>新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。</p>\n<blockquote>\n<p>新生区又分为两部分:伊甸区(Eden space) 和幸存者区(Survivorpacee)，所有的类都是在伊甸区被new出来的。幸存区有两个: 0区 (Survivor 0 pace) 和1区(Survivor 1 space) 。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢?再移动到养老区。若养老区也满了,那么这个时候将产生Ma jorGC (Fu11GC) ，进行养老区的内存清理。若养老区执行了Ful1 GC之后发现依然无法进行对象的保存，就会产生00M异常“QutOfMemoryError”。</p>\n</blockquote>\n<p>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够，原因有二：</p>\n<ol>\n<li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调 整。</li>\n<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集(存<br>在被引用)。</li>\n</ol>\n<h2 id=\"对象的生命周期和GC\"><a href=\"#对象的生命周期和GC\" class=\"headerlink\" title=\"对象的生命周期和GC\"></a>对象的生命周期和GC</h2><p>Java堆从GC的角度还可以细分为:新生代( Eden区、From Survivor区)和To Survivor区和老年代。</p>\n<p><img src=\"/./jvm/bece6bf1-f9a8-475d-9911-6293e225d84e.png\"></p>\n<h3 id=\"MinorGC的过程-复制-清空-互换\"><a href=\"#MinorGC的过程-复制-清空-互换\" class=\"headerlink\" title=\"MinorGC的过程(复制-&gt;清空-&gt;互换)\"></a>MinorGC的过程(复制-&gt;清空-&gt;互换)</h3><ol>\n<li>Eden、 SurvivorFrom 复制到SurvivorTo，年龄+1首先，当Eden区满的时候会触发第一 次GC,把还活着的对象拷贝到SurvivorFrom区， 当Eden区再次触发GC的时候会扫描Eden区和From区域,对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接复制到To区域(如果有对象的年龄已经达到了老年的标准，则赋值到老年代区)，同时把这些对象的年龄+1</li>\n<li>清空Eden、 SurvivorFrom然后，清空Eden和SurvivorFrom中的对象， 也即复制之后有交换，谁空谁是to</li>\n<li>SurvivorTo和 SurvivorFrom互换最后，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为 下一次GC时的SurvivorFrom区。部分对象会在From和To区域中复制来复制去，如此交换15次(由JVM参数MaxTenuringThreshold决定，这个参数默认是15),最终如果还是存活,就存入到老年代。</li>\n</ol>\n<p><strong>HotSpot内存管理</strong></p>\n<p><img src=\"/./jvm/5fb46273-081b-4271-b94c-e2ba6eea5f69.png\"></p>\n<h3 id=\"永久区-java7之前有\"><a href=\"#永久区-java7之前有\" class=\"headerlink\" title=\"永久区(java7之前有)\"></a>永久区(java7之前有)</h3><p>永久存储区是一个常驻内存区域，用于存放JDK自身所携带的Class, Interface的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是<strong>不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占用的内存。</strong></p>\n<h2 id=\"堆参数调整\"><a href=\"#堆参数调整\" class=\"headerlink\" title=\"堆参数调整\"></a>堆参数调整</h2><p><strong>JAVA7</strong></p>\n<p><img src=\"/./jvm/8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png\"></p>\n<p><strong>JAVA8</strong></p>\n<p>JDK 1.8之后将最初的永久代取消了，由元空间取代。</p>\n<p><img src=\"/./jvm/db1f5266-c920-4379-a82d-f0dadbe1a1c3.png\"></p>\n<p>在Java8中， 永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似。</p>\n<p>元空间与永久代之间最大的区别在于：<strong>永久带使用的JVM的堆内存，但是java8以后的元空间并不在虚拟机中而是使用本机物理内存。</strong></p>\n<p>因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入native memory,字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制,而由系统的实际可用空间来控制。</p>\n<h3 id=\"JVM调优第一步，了解JVM常用命令行参数\"><a href=\"#JVM调优第一步，了解JVM常用命令行参数\" class=\"headerlink\" title=\"JVM调优第一步，了解JVM常用命令行参数\"></a>JVM调优第一步，了解JVM常用命令行参数</h3><ul>\n<li><p>JVM的命令行参数参考：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>\n</li>\n<li><p>HotSpot参数分类</p>\n<blockquote>\n<p>标准： - 开头，所有的HotSpot都支持</p>\n<p>非标准：-X 开头，特定版本HotSpot支持特定命令</p>\n<p>不稳定：-XX 开头，下个版本可能取消</p>\n</blockquote>\n<p>java -version</p>\n<p>java -X</p>\n<p>java -XX:+PrintFlagsWithComments &#x2F;&#x2F;只有debug版本能用</p>\n</li>\n</ul>\n<h3 id=\"堆内存调优\"><a href=\"#堆内存调优\" class=\"headerlink\" title=\"堆内存调优\"></a>堆内存调优</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-Xms</td>\n<td>设置初始分配大小，默认为物理内存的”1&#x2F;64”</td>\n</tr>\n<tr>\n<td align=\"center\">-Xmx</td>\n<td>最大分配内存，默认为物理内存的”1&#x2F;4”</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+PrintGCDetails</td>\n<td>输出详细的GC处理日志</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">T1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">availableProcessors</span> <span class=\"operator\">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;逻辑处理器：&quot;</span> + availableProcessors);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最大分配内存，默认为物理内存的&quot;1/4&quot;</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">maxMemory</span> <span class=\"operator\">=</span> Runtime.getRuntime().maxMemory();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-Xmx (MAX_MEMORY) = &quot;</span> + maxMemory + <span class=\"string\">&quot;字节，&quot;</span> + maxMemory / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;M&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置初始分配大小，默认为物理内存的&quot;1/64&quot;</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">totalMemory</span> <span class=\"operator\">=</span> Runtime.getRuntime().totalMemory();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-Xms (TOTAL_MEMORY) = &quot;</span> + totalMemory + <span class=\"string\">&quot;字节，&quot;</span> + totalMemory / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;M&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./jvm/4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png\"></p>\n<p>调整JVM的参数</p>\n<p><img src=\"/./jvm/f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png\"></p>\n<p>JAVA8</p>\n<p><img src=\"/./jvm/d215e636-ea46-4b84-a861-4aff3dbdbf0e.png\"></p>\n<p>JAVA7</p>\n<p><img src=\"/./jvm/befee5fe-233e-4ca1-8a63-1b8908311845.png\"></p>\n<h3 id=\"堆溢出-（OOM）\"><a href=\"#堆溢出-（OOM）\" class=\"headerlink\" title=\"堆溢出 （OOM）\"></a>堆溢出 （OOM）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Mr.Wang&quot;</span>;</span><br><span class=\"line\">            str += <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">88888888</span>) + <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">99999999</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置堆内存参数：</p>\n<p><img src=\"/./jvm/787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png\"></p>\n<p><img src=\"/./jvm/d5649d47-ed1b-4797-8a8f-73634873cd9d.png\"></p>\n<p><strong>Exception: java.lang.OutOfMemoryError</strong> </p>\n<p><img src=\"/./jvm/9111c342-79fb-4def-aef6-d266daea6078.png\"></p>\n<h3 id=\"GC-日志插看\"><a href=\"#GC-日志插看\" class=\"headerlink\" title=\"GC 日志插看\"></a>GC 日志插看</h3><p><img src=\"/./jvm/d9b58c91-421c-4afe-b359-2cde68c12eca.png\"></p>\n<p><img src=\"/./jvm/3e60331e-2742-4047-8383-e107945f85c4.png\"></p>\n<p><img src=\"/./jvm/3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png\"></p>\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的， <strong>大部分时候回收的都是指新生代</strong>。因此GC按照回收的区域又分了两种类型，一种是普通GC (minor GC)，一种是全局GC (major GC or FullGC)</p>\n<p><strong>Minor GC Full GC的区别</strong></p>\n<ul>\n<li><p>普通GC (minor GC) :只针对新生代区域的GC,指发生在新生代的垃圾收集动作，因为大多数Java对象存活率都不高，所以Minor GC非常频繁，一般回收速 度也比较快。</p>\n</li>\n<li><p>全局GC (major GC or Full GC) :指发生在老年代的垃圾收集动作，出现了Major GC,经常会伴随至少一次的Minor GC (但并不是绝对的)。 <strong>Major GC的速度一 般要比Minor GC慢上10倍以,原因是因为老年代占2&#x2F;3，新生代占1&#x2F;3。</strong></p>\n</li>\n</ul>\n","cover":false,"excerpt":"","more":"<h2 id=\"JVM-体系结构模型\"><a href=\"#JVM-体系结构模型\" class=\"headerlink\" title=\"JVM 体系结构模型\"></a>JVM 体系结构模型</h2><p>灰色线程私有，亮色线程共享！</p>\n<p><img src=\"/./jvm/ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png\"></p>\n<h2 id=\"ClassLoad-类加载器\"><a href=\"#ClassLoad-类加载器\" class=\"headerlink\" title=\"ClassLoad(类加载器)\"></a>ClassLoad(类加载器)</h2><p><img src=\"/./jvm/6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png\"></p>\n<blockquote>\n<p>负责加载class文件，class 文件在文件开头有特定的文件标示，将class文件字节码内容加载到内存中，并将这些内容转换成方法区中的运行时数据结构并且ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。</p>\n</blockquote>\n<p><img src=\"/./jvm/3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png\"></p>\n<h3 id=\"虚拟机自带的加载器\"><a href=\"#虚拟机自带的加载器\" class=\"headerlink\" title=\"虚拟机自带的加载器\"></a>虚拟机自带的加载器</h3><ol>\n<li><p>启动类加载器（Bootstrap） C++</p>\n<p>java自带的类使用BootstrapClassLoader，由<code>c++</code>编写，加载<code>java</code>核心库 <code>java.*</code>,构造<code>ExtClassLoader</code>和<code>AppClassLoader</code>。由于引导类加载器涉及到虚拟机本地实现细节，开发者无法直接获取到启动类加载器的引用，所以不允许直接通过引用进行操作。</p>\n</li>\n<li><p>扩展类加载器（Extension） Java</p>\n<p>jdk扩展的类使用ExtensionClassLoader，由<code>java</code>编写，加载扩展库，如<code>classpath</code>中的<code>jre</code> ，<code>javax.*</code>或者<code>java.ext.dir</code> 指定位置中的类，开发者可以直接使用标准扩展类加载器。</p>\n</li>\n<li><p>应用程序类加载器（AppClassLoader）</p>\n<p>我们自己编写的类使用AppClassLoader，由<code>java</code>编写，加载程序所在的目录，如<code>user.dir</code>所在的位置的<code>class</code> 。</p>\n</li>\n<li><p>CustomClassLoader（用户自定义类加载器）</p>\n<p><code>java</code>编写,用户自定义的类加载器,可加载指定路径的<code>class</code>文件</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">object</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        System.out.println(object.getClass().getName() + <span class=\"string\">&quot; 的加载器： &quot;</span> + object.getClass().getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">MyObject</span> <span class=\"variable\">myObject</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MyObject</span>();</span><br><span class=\"line\">        System.out.println(myObject.getClass().getName() + <span class=\"string\">&quot; 的加载器： &quot;</span> + myObject.getClass().getClassLoader());</span><br><span class=\"line\">        System.out.println(myObject.getClass().getName() + <span class=\"string\">&quot; 上一代的加载器： &quot;</span> + myObject.getClass().getClassLoader().getParent());</span><br><span class=\"line\">        System.out.println(myObject.getClass().getName() + <span class=\"string\">&quot; 上一代的上一代的加载器： &quot;</span> + myObject.getClass().getClassLoader().getParent().getParent());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./jvm/626353d2-1f73-46e9-858d-732ed7bee94a.png\"></p>\n<p>因为BootStropClassLoader 不是java 编写的 所以打印出来是null </p>\n<p>JAVA 也叫系统类加载器，加载当前应用的classpath的所有类</p>\n<h3 id=\"用户自定义加载器\"><a href=\"#用户自定义加载器\" class=\"headerlink\" title=\"用户自定义加载器\"></a>用户自定义加载器</h3><p> 继承 java.lang.ClassLoader</p>\n<p><img src=\"/./jvm/a670f078-2260-4276-8db9-79112eb9e979.png\"></p>\n<h3 id=\"ClassLoad的双亲委派机制\"><a href=\"#ClassLoad的双亲委派机制\" class=\"headerlink\" title=\"ClassLoad的双亲委派机制\"></a>ClassLoad的双亲委派机制</h3><p>当某个类加载器需要加载某个<code>.class</code>文件时，它首先把这个任务委托给他的上级类加载器，递归这个操作，如果上级的类加载器没有加载，自己才会去加载这个类。</p>\n<h4 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">protected</span> Class&lt;?&gt; loadClass(String name, <span class=\"type\">boolean</span> resolve)</span><br><span class=\"line\">            <span class=\"keyword\">throws</span> ClassNotFoundException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 首先检查这个classsh是否已经加载过了</span></span><br><span class=\"line\">            Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">long</span> <span class=\"variable\">t0</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// c==null表示没有加载，如果有父类的加载器则让父类加载器加载</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (parent != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                        c = parent.loadClass(name, <span class=\"literal\">false</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//如果父类的加载器为空 则说明递归到bootStrapClassloader了</span></span><br><span class=\"line\">                        <span class=\"comment\">//bootStrapClassloader比较特殊无法通过get获取</span></span><br><span class=\"line\">                        c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (ClassNotFoundException e) &#123;&#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//如果bootstrapClassLoader 仍然没有加载过，则递归回来，尝试自己去加载class</span></span><br><span class=\"line\">                    <span class=\"type\">long</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> System.nanoTime();</span><br><span class=\"line\">                    c = findClass(name);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class=\"line\">                    sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">                resolveClass(c);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> c;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"委派机制的流程图\"><a href=\"#委派机制的流程图\" class=\"headerlink\" title=\"委派机制的流程图\"></a>委派机制的流程图</h4><p><img src=\"/./jvm/745b992d-fcff-46df-8a33-150b65bf47ca.png\"></p>\n<h4 id=\"双亲委派机制的作用\"><a href=\"#双亲委派机制的作用\" class=\"headerlink\" title=\"双亲委派机制的作用\"></a>双亲委派机制的作用</h4><ol>\n<li>防止重复加载同一个<code>.class</code>。通过委托去向上面问一问，加载过了，就不用再加载一遍。保证数据安全。</li>\n<li>保证核心<code>.class</code>不能被篡改。通过委托方式，不会去篡改核心<code>.class</code>，即使篡改也不会去加载，即使加载也不会是同一个<code>.class</code>对象了。不同的加载器加载同一个<code>.class</code>也不是同一个<code>Class</code>对象。这样保证了<code>Class</code>执行安全。</li>\n</ol>\n<h2 id=\"Execution-Engine-执行引擎\"><a href=\"#Execution-Engine-执行引擎\" class=\"headerlink\" title=\"Execution Engine 执行引擎\"></a>Execution Engine 执行引擎</h2><ul>\n<li>执行引擎是Java虚拟机的核心组成部分之一</li>\n<li>虚拟机是一个相对于“物理机”的概念，这两种机器都有代码执行能力，其区别是物理机的执行引擎是直接建立在处理器、缓存、指令集和操作系统层面上的，而虚拟机的执行引擎则是由软件自行实现的，因此可以不受物理条件制约地定制指令集与执行引擎的结构体系，能够执行那些不被硬件直接支持的指令集格式</li>\n<li>JVM的主要任务是负责装载字节码到其内部，但字节码并不能够直接运行在操作系统之上，因为字节码指令并非等价于本地机器指令，它内部包含的仅仅只是一些能够被JVM锁识别的字节码指令、符号表和其他辅助信息</li>\n<li>那么，如果想让一个Java程序运行起来、执行引擎的任务就是将字节码指令解释&#x2F;编译为对应平台上的本地机器指令才可以。简单来说，JVM中的执行引擎充当了将高级语言翻译为机器语言的译者</li>\n<li>从外观上来看，所有的Java虚拟机的执行引擎输入、输出都是一致的：输入的是字节码二进制流，处理过程是字节码解析执行的等效过程，输出的是执行结果</li>\n<li>执行引擎在执行的过程中究竟需要执行什么样的字节码指令完全依赖于PC寄存器</li>\n<li>每当执行完一项指令操作后，PC寄存器就会更新下一条需要被执行的指令地址</li>\n<li>当然方法在执行的过程中，执行引擎有可能会通过存储在局部变量表中的对象引用准确定位到存储在Java堆区中的对象实例信息，以及通过对象头中的元数据指针定位到目标对象的类型信息</li>\n</ul>\n<h2 id=\"Native-Interface本地接口\"><a href=\"#Native-Interface本地接口\" class=\"headerlink\" title=\"Native Interface本地接口\"></a>Native Interface本地接口</h2><p><code>native</code>是一个计算机函数，一个Native Method就是一个Java调用非<a href=\"https://baike.baidu.com/item/Java/85979\">Java</a>代码的接口。方法的实现由非Java语言实现，比如C或C++。</p>\n<p>本地接口的作用是融合不同的编程语言为Java所用，它的初衷是融合C&#x2F;C++程序， Java诞生的时候是C&#x2F;C++横行的时候，要想立足，必须有调用C&#x2F;C++程序， 于是就在内存中专门开辟了一块区域处理标记为native的代码，它的具体做法是Native Method Stack中登记native方法，在Execution Engine执行时加载native libraies。<br>目前该方法使用的越来越少了，除非是与硬件有关的应用，比如通过Java程序驱动打印机或者Java系统管理生产设备，在企业级应用中已经比较少见。因为现在的异构领域间的通信很发达，比如可以使用Socket通信，也可以使用Web Service等等，不多做介绍。</p>\n<p><a href=\"https://baike.baidu.com/item/%E6%A0%87%E8%AF%86%E7%AC%A6\">标识符</a>native可以与所有其它的<a href=\"https://baike.baidu.com/item/java%E6%A0%87%E8%AF%86%E7%AC%A6\">java标识符</a>连用，但是abstract除外。这是合理的，因为native暗示这些方法是有实现体的，只不过这些实现体是非java的，但是abstract却显然的指明这些方法无实现体。native与其它java标识符连用时，其意义同非Native Method并无差别，比如native static表明这个方法可以在不产生类的实例时直接调用，这非常方便，比如当你想用一个native method去调用一个C的类库时。上面的第三个方法用到了native synchronized，JVM在进入这个方法的实现体之前会执行<a href=\"https://baike.baidu.com/item/%E5%90%8C%E6%AD%A5%E9%94%81\">同步锁</a>机制（就像java的多线程。）</p>\n<h3 id=\"线程案例\"><a href=\"#线程案例\" class=\"headerlink\" title=\"线程案例\"></a>线程案例</h3><h4 id=\"案例代码\"><a href=\"#案例代码\" class=\"headerlink\" title=\"案例代码\"></a>案例代码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyObject</span> &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"源码分析-1\"><a href=\"#源码分析-1\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h4><p>进入strat()方法查看，实际调用了start0()方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">  * Causes this thread to begin execution; the Java Virtual Machine</span></span><br><span class=\"line\"><span class=\"comment\">  * calls the &lt;code&gt;run&lt;/code&gt; method of this thread.</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * The result is that two threads are running concurrently: the</span></span><br><span class=\"line\"><span class=\"comment\">  * current thread (which returns from the call to the</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;code&gt;start&lt;/code&gt; method) and the other thread (which executes its</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;code&gt;run&lt;/code&gt; method).</span></span><br><span class=\"line\"><span class=\"comment\">  * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">  * It is never legal to start a thread more than once.</span></span><br><span class=\"line\"><span class=\"comment\">  * In particular, a thread may not be restarted once it has completed</span></span><br><span class=\"line\"><span class=\"comment\">  * execution.</span></span><br><span class=\"line\"><span class=\"comment\">  *</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@exception</span>  IllegalThreadStateException  if the thread was already</span></span><br><span class=\"line\"><span class=\"comment\">  *               started.</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@see</span>        #run()</span></span><br><span class=\"line\"><span class=\"comment\">  * <span class=\"doctag\">@see</span>        #stop()</span></span><br><span class=\"line\"><span class=\"comment\">  */</span></span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class=\"line\"><span class=\"comment\">      * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">      * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">      * so that it can be added to the group&#x27;s list of threads</span></span><br><span class=\"line\"><span class=\"comment\">      * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class=\"line\">     group.add(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         start0();</span><br><span class=\"line\">         started = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                 group.threadStartFailed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">             <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">               it will be passed up the call stack */</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Native-Method-Stack\"><a href=\"#Native-Method-Stack\" class=\"headerlink\" title=\"Native Method Stack\"></a>Native Method Stack</h2><p>它的具体做法是Native Method Stack中登记<code>native</code>方法，在Execution<br><code>Engine</code>执行时加载本地方法库。</p>\n<h2 id=\"Program-Counter-Register-PC寄存器\"><a href=\"#Program-Counter-Register-PC寄存器\" class=\"headerlink\" title=\"Program Counter Register PC寄存器\"></a>Program Counter Register PC寄存器</h2><ul>\n<li><p>PC寄存器就是一个指针，用来存储指向下一条指令的地址，也即将要执行的指令代码。由执行引擎读取下一条指令。</p>\n</li>\n<li><p>它是一块很小的内存空间，几乎可以忽略不记。也是运行速度最快的存储区域。</p>\n</li>\n<li><p>在JVM规范中，每个线程都有它自己的程序计数器，是线程私有的，生命周期与线程的生命周期保持一致。</p>\n</li>\n<li><p>任何时间一个线程都只有一个方法在执行，也就是所谓的当前方法。程序计数器会存储当前线程正在执行的java方法的JVM指令地址：或者，如果是在执行native方法，则是未指定值（undefined）</p>\n</li>\n<li><p>它是程序控制流的指示器，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。</p>\n</li>\n<li><p>字节码解释器工作时就是通过改变这个计数器的值来选取下一个条需要执行的字节码指令。</p>\n</li>\n<li><p>它是唯一一个在Java虚拟机规范中没有规定任何OOM情况的区域。</p>\n</li>\n</ul>\n<h3 id=\"举例说明\"><a href=\"#举例说明\" class=\"headerlink\" title=\"举例说明\"></a>举例说明</h3><p><img src=\"/./jvm/0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png\"><br><img src=\"/./jvm/3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png\"></p>\n<h3 id=\"两个常见问题\"><a href=\"#两个常见问题\" class=\"headerlink\" title=\"两个常见问题\"></a>两个常见问题</h3><h4 id=\"使用PC寄存器存储字节码指令地址有什么用？\"><a href=\"#使用PC寄存器存储字节码指令地址有什么用？\" class=\"headerlink\" title=\"使用PC寄存器存储字节码指令地址有什么用？\"></a>使用PC寄存器存储字节码指令地址有什么用？</h4><p>因为CPU需要不停的切换各个线程，这时候切换回来以后，就的知道接着从哪开始执行。</p>\n<h4 id=\"为什么使用PC寄存器记录当前线程的执行地址呢？\"><a href=\"#为什么使用PC寄存器记录当前线程的执行地址呢？\" class=\"headerlink\" title=\"为什么使用PC寄存器记录当前线程的执行地址呢？\"></a>为什么使用PC寄存器记录当前线程的执行地址呢？</h4><p>JVM的字节码解释器就是通过改变pc寄存器的值来确定下一条应该执行什么样的字节码指令。</p>\n<p><img src=\"/./jvm/5f12c1e3-2e47-4997-a887-b395b511490b.png\"></p>\n<h3 id=\"PC寄存器为什么会被设定为线程私有\"><a href=\"#PC寄存器为什么会被设定为线程私有\" class=\"headerlink\" title=\"PC寄存器为什么会被设定为线程私有?\"></a>PC寄存器为什么会被设定为线程私有?</h3><p>我们都知道所谓多线程在一个特定的时间段内只会执行其中某一个线程的方法，CPU会不停的做任务切换，这样必然导致经常终端或回复，如果保证分毫不差呢？为了能够准确地记录各个线程正在执行的当前字节码指令地址，最好的办法自然是为每一个线程分配一个pc寄存器，这样一来各个线程之间便可以进行独立计算，从而不会出现相互干扰的情况。</p>\n<p>由于cpu时间片轮询限制，众多线程在并发执行过程中，任何一个确定的时间，一个处理器或者多核处理器中的一个内核，只会执行某个线程中的一条指令。</p>\n<p>这样必然会导致经常终端或恢复，如何保证分毫不差呢？每个线程在创建后，都会产生自己的程序计数器和栈帧，程序计数器在各个线程之间互不影响。</p>\n<h2 id=\"Method-Area-方法区\"><a href=\"#Method-Area-方法区\" class=\"headerlink\" title=\"Method Area 方法区\"></a>Method Area 方法区</h2><p>供各线程共享的运行时内存区域。它<strong>存储了每一个类的结构信息</strong>，例如运行时常量池( Runtime Constant Pool)、字段和方法数据、构造函数和普通方法的字节码内容。<strong>方法区是规范</strong>，在不同虚拟机里头实现是不一样的，最典型的就是永久代(PermGen space) 和元空间(Metaspace)。</p>\n<p>jdk 1.7 是永久代，jdk1.8 是元空间。</p>\n<p>实例变量存在堆内存中,和方法区无关</p>\n<p>特性：    </p>\n<ul>\n<li>存放类的描述信息，类的模板。</li>\n<li>是线程共享，整个虚拟机只有一个方法区。</li>\n<li>永久代，方法区中的信息一般需要长期存在,而且它又是堆的逻辑分区,因此用堆的划分方法,我们把方法区称之为老年代。</li>\n<li>内存回收效率低，方法区中的信息一般需要长期存在,回收一遍内存之后可能只有少量信息无效.对方法区的内存回收的主要目标是:对常量池的回收和对类型的卸载。</li>\n</ul>\n<h2 id=\"Stackd-栈\"><a href=\"#Stackd-栈\" class=\"headerlink\" title=\"Stackd 栈\"></a>Stackd 栈</h2><p><strong>栈管运行，堆管存储</strong></p>\n<blockquote>\n<p>理想：程序&#x3D; 算法+ 数据结构</p>\n</blockquote>\n<blockquote>\n<p>现实：程序&#x3D; 框架+业务逻辑</p>\n</blockquote>\n<h3 id=\"队列-（FIFO）-先进先出\"><a href=\"#队列-（FIFO）-先进先出\" class=\"headerlink\" title=\"队列 （FIFO） 先进先出\"></a>队列 （FIFO） 先进先出</h3><p>就想食堂打饭，先到先得</p>\n<h3 id=\"栈-（FILO）-先进后出\"><a href=\"#栈-（FILO）-先进后出\" class=\"headerlink\" title=\"栈  （FILO） 先进后出\"></a>栈  （FILO） 先进后出</h3><p>就行弹匣，先进后出</p>\n<p>栈也叫栈内存，主管Java程序的运行，是在线程创建时创建，它的生命期是跟随线程的生命期，线程结束栈内存也就释放，对于栈来说不存在垃圾回收问题，只要线程–结束该栈就Over，生命周期和线程一致，是线程私有的。<strong>8种基本类型的变量+对象的引用变量+实例方法都是</strong><br><strong>在函数的栈内存中分配。</strong></p>\n<h3 id=\"栈存储什么\"><a href=\"#栈存储什么\" class=\"headerlink\" title=\"栈存储什么?\"></a>栈存储什么?</h3><p>栈帧&#x3D;java 方法；</p>\n<p>栈帧中主要保存3类数据:</p>\n<ul>\n<li>本地变量(Local Variables) :输入参数和输出参数以及方法内的变量;</li>\n<li>栈操作(Operand Stack) :记录出栈、入栈的操作;</li>\n<li>栈帧数据(Frame Data) :包括类文件、方法等等。</li>\n</ul>\n<h3 id=\"栈运行原理\"><a href=\"#栈运行原理\" class=\"headerlink\" title=\"栈运行原理:\"></a>栈运行原理:</h3><p>栈中的数据都是以栈帧(Stack Frame) 的格式存在，栈帧是一个内存区<br>块，是一个数据集，是一个有关方法(Method)和运行期数据的数据集，<br>当一个方法A被调用时就产生了一个栈帧F1， 并被压入到栈中，<br>A方法又调用了B方法， 于是产生栈帧F2也被压入栈，<br>B方法又调用了C方法，于是产生栈帧F3也被压入栈，<br>执行完毕后，先弹出F3栈帧，再弹出F2栈帧，再弹出F1栈帧…..</p>\n<p>遵循“先进后出”&#x2F;“后进先出”原则。</p>\n<p><strong>每个方法执行的同时都会创建一个栈帧，用于存储局部变量表、操作数</strong><br><strong>栈、动态链接、方法出口等信息</strong>，每一个方法从调用直至执行完毕的过<br>程，就对应着一个栈帧在虚拟机中入栈到出栈的过程。栈的大小和具体<br>JVM的实现有关，通常在256K” ~756K之间，约等于1Mb左右。</p>\n<p><img src=\"/./jvm/95c89389-d9e7-42e1-9d80-4886d458a48b.png\"></p>\n<p>图示在一个栈中有两个栈帧:栈帧2是最先被调用的方法，先入栈,然后方法2又调用了方法1，栈帧1处于栈顶的位置，栈帧2处于栈底，执行完毕后，依次弹出栈帧1和栈帧2,线程结束，栈释放。</p>\n<p>每执行一个方法都会产生一个栈帧，保存到栈(后进先出)的顶部,顶部栈就是当前的方法，该访法执行完毕后会自动将此栈帧出栈。</p>\n<h3 id=\"栈溢出-（SOF）\"><a href=\"#栈溢出-（SOF）\" class=\"headerlink\" title=\"栈溢出 （SOF）\"></a>栈溢出 （SOF）</h3><p><strong>Exception in thread “main” java.lang.StackOverflowError</strong>  </p>\n<p>堆栈溢出是错误还是异常？</p>\n<p><img src=\"/./jvm/90434413-5431-408e-878f-3b76d5118d64.png\"></p>\n<h3 id=\"栈-堆-方法区的交互关系\"><a href=\"#栈-堆-方法区的交互关系\" class=\"headerlink\" title=\"栈+堆+方法区的交互关系\"></a>栈+堆+方法区的交互关系</h3><p><img src=\"/./jvm/d404438c-1def-4366-90a5-3f304dd1ddf2.png\"></p>\n<p><strong>HotSpot是使用指针的方式来访问对象:Java堆中会存放访问<code>类元数据</code>的地址，reference存储的就直接是对象的地址。</strong></p>\n<p><img src=\"/./jvm/5066a220-0f28-4b94-8934-f54c722697a9.png\"></p>\n<h2 id=\"Heap-堆\"><a href=\"#Heap-堆\" class=\"headerlink\" title=\"Heap 堆\"></a>Heap 堆</h2><p>一个JVM实例只存在一个堆内存，堆内存的大小是可以调节的。类加载器读取了类文件后，需要把类、方法、常变量放到堆内存中，保存所有引用类型的真实信息，以方便执行器执行，堆内存分为三部分:</p>\n<ul>\n<li>Young Generation Space\t新生区\t\tYoung&#x2F;New</li>\n<li>Tenure generation space\t养老区\t\tOld&#x2F; Tenure</li>\n<li>Permanent Space\t\t\t\t  永久区\t\tPerm</li>\n</ul>\n<h3 id=\"JAVA7-之前\"><a href=\"#JAVA7-之前\" class=\"headerlink\" title=\"JAVA7 之前\"></a>JAVA7 之前</h3><p><img src=\"/./jvm/bedb0d3f-90d8-4867-84c2-cea52a58412f.png\"></p>\n<h3 id=\"JAVA8-之后\"><a href=\"#JAVA8-之后\" class=\"headerlink\" title=\"JAVA8 之后\"></a>JAVA8 之后</h3><p>永久代变成了元空间。</p>\n<p><strong>堆内存<code>逻辑</code>分为<code>三部分</code>：新生+养老+永久</strong></p>\n<p><strong>堆内存<code>物理</code>分为<code>两部分</code>：新生+养老</strong></p>\n<p>新生区(如下是首次讲解，简单版，先入门大致理解)</p>\n<p>新生区是类的诞生、成长、消亡的区域，一个类在这里产生，应用，最后被垃圾回收器收集，结束生命。</p>\n<blockquote>\n<p>新生区又分为两部分:伊甸区(Eden space) 和幸存者区(Survivorpacee)，所有的类都是在伊甸区被new出来的。幸存区有两个: 0区 (Survivor 0 pace) 和1区(Survivor 1 space) 。当伊甸园的空间用完时，程序又需要创建对象，JVM的垃圾回收器将对伊甸园区进行垃圾回收(MinorGC)，将伊甸园区中的不再被其他对象所引用的对象进行销毁。然后将伊甸园中的剩余对象移动到幸存0区。若幸存0区也满了，再对该区进行垃圾回收，然后移动到1区。那如果1区也满了呢?再移动到养老区。若养老区也满了,那么这个时候将产生Ma jorGC (Fu11GC) ，进行养老区的内存清理。若养老区执行了Ful1 GC之后发现依然无法进行对象的保存，就会产生00M异常“QutOfMemoryError”。</p>\n</blockquote>\n<p>如果出现java.lang.OutOfMemoryError: Java heap space异常，说明Java虚拟机的堆内存不够，原因有二：</p>\n<ol>\n<li>Java虚拟机的堆内存设置不够，可以通过参数-Xms、-Xmx来调 整。</li>\n<li>代码中创建了大量大对象，并且长时间不能被垃圾收集器收集(存<br>在被引用)。</li>\n</ol>\n<h2 id=\"对象的生命周期和GC\"><a href=\"#对象的生命周期和GC\" class=\"headerlink\" title=\"对象的生命周期和GC\"></a>对象的生命周期和GC</h2><p>Java堆从GC的角度还可以细分为:新生代( Eden区、From Survivor区)和To Survivor区和老年代。</p>\n<p><img src=\"/./jvm/bece6bf1-f9a8-475d-9911-6293e225d84e.png\"></p>\n<h3 id=\"MinorGC的过程-复制-清空-互换\"><a href=\"#MinorGC的过程-复制-清空-互换\" class=\"headerlink\" title=\"MinorGC的过程(复制-&gt;清空-&gt;互换)\"></a>MinorGC的过程(复制-&gt;清空-&gt;互换)</h3><ol>\n<li>Eden、 SurvivorFrom 复制到SurvivorTo，年龄+1首先，当Eden区满的时候会触发第一 次GC,把还活着的对象拷贝到SurvivorFrom区， 当Eden区再次触发GC的时候会扫描Eden区和From区域,对这两个区域进行垃圾回收，经过这次回收后还存活的对象,则直接复制到To区域(如果有对象的年龄已经达到了老年的标准，则赋值到老年代区)，同时把这些对象的年龄+1</li>\n<li>清空Eden、 SurvivorFrom然后，清空Eden和SurvivorFrom中的对象， 也即复制之后有交换，谁空谁是to</li>\n<li>SurvivorTo和 SurvivorFrom互换最后，SurvivorTo和SurvivorFrom互换，原SurvivorTo成为 下一次GC时的SurvivorFrom区。部分对象会在From和To区域中复制来复制去，如此交换15次(由JVM参数MaxTenuringThreshold决定，这个参数默认是15),最终如果还是存活,就存入到老年代。</li>\n</ol>\n<p><strong>HotSpot内存管理</strong></p>\n<p><img src=\"/./jvm/5fb46273-081b-4271-b94c-e2ba6eea5f69.png\"></p>\n<h3 id=\"永久区-java7之前有\"><a href=\"#永久区-java7之前有\" class=\"headerlink\" title=\"永久区(java7之前有)\"></a>永久区(java7之前有)</h3><p>永久存储区是一个常驻内存区域，用于存放JDK自身所携带的Class, Interface的元数据，也就是说它存储的是运行环境必须的类信息，被装载进此区域的数据是<strong>不会被垃圾回收器回收掉的，关闭JVM才会释放此区域所占用的内存。</strong></p>\n<h2 id=\"堆参数调整\"><a href=\"#堆参数调整\" class=\"headerlink\" title=\"堆参数调整\"></a>堆参数调整</h2><p><strong>JAVA7</strong></p>\n<p><img src=\"/./jvm/8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png\"></p>\n<p><strong>JAVA8</strong></p>\n<p>JDK 1.8之后将最初的永久代取消了，由元空间取代。</p>\n<p><img src=\"/./jvm/db1f5266-c920-4379-a82d-f0dadbe1a1c3.png\"></p>\n<p>在Java8中， 永久代已经被移除，被一个称为元空间的区域所取代。元空间的本质和永久代类似。</p>\n<p>元空间与永久代之间最大的区别在于：<strong>永久带使用的JVM的堆内存，但是java8以后的元空间并不在虚拟机中而是使用本机物理内存。</strong></p>\n<p>因此，默认情况下，元空间的大小仅受本地内存限制。类的元数据放入native memory,字符串池和类的静态变量放入java堆中，这样可以加载多少类的元数据就不再由MaxPermSize控制,而由系统的实际可用空间来控制。</p>\n<h3 id=\"JVM调优第一步，了解JVM常用命令行参数\"><a href=\"#JVM调优第一步，了解JVM常用命令行参数\" class=\"headerlink\" title=\"JVM调优第一步，了解JVM常用命令行参数\"></a>JVM调优第一步，了解JVM常用命令行参数</h3><ul>\n<li><p>JVM的命令行参数参考：<a href=\"https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html\">https://docs.oracle.com/javase/8/docs/technotes/tools/unix/java.html</a></p>\n</li>\n<li><p>HotSpot参数分类</p>\n<blockquote>\n<p>标准： - 开头，所有的HotSpot都支持</p>\n<p>非标准：-X 开头，特定版本HotSpot支持特定命令</p>\n<p>不稳定：-XX 开头，下个版本可能取消</p>\n</blockquote>\n<p>java -version</p>\n<p>java -X</p>\n<p>java -XX:+PrintFlagsWithComments &#x2F;&#x2F;只有debug版本能用</p>\n</li>\n</ul>\n<h3 id=\"堆内存调优\"><a href=\"#堆内存调优\" class=\"headerlink\" title=\"堆内存调优\"></a>堆内存调优</h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">-Xms</td>\n<td>设置初始分配大小，默认为物理内存的”1&#x2F;64”</td>\n</tr>\n<tr>\n<td align=\"center\">-Xmx</td>\n<td>最大分配内存，默认为物理内存的”1&#x2F;4”</td>\n</tr>\n<tr>\n<td align=\"center\">-XX:+PrintGCDetails</td>\n<td>输出详细的GC处理日志</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">T1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">availableProcessors</span> <span class=\"operator\">=</span> Runtime.getRuntime().availableProcessors();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;逻辑处理器：&quot;</span> + availableProcessors);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//最大分配内存，默认为物理内存的&quot;1/4&quot;</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">maxMemory</span> <span class=\"operator\">=</span> Runtime.getRuntime().maxMemory();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-Xmx (MAX_MEMORY) = &quot;</span> + maxMemory + <span class=\"string\">&quot;字节，&quot;</span> + maxMemory / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;M&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//设置初始分配大小，默认为物理内存的&quot;1/64&quot;</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">totalMemory</span> <span class=\"operator\">=</span> Runtime.getRuntime().totalMemory();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;-Xms (TOTAL_MEMORY) = &quot;</span> + totalMemory + <span class=\"string\">&quot;字节，&quot;</span> + totalMemory / <span class=\"number\">1024</span> / <span class=\"number\">1024</span> + <span class=\"string\">&quot;M&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/./jvm/4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png\"></p>\n<p>调整JVM的参数</p>\n<p><img src=\"/./jvm/f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png\"></p>\n<p>JAVA8</p>\n<p><img src=\"/./jvm/d215e636-ea46-4b84-a861-4aff3dbdbf0e.png\"></p>\n<p>JAVA7</p>\n<p><img src=\"/./jvm/befee5fe-233e-4ca1-8a63-1b8908311845.png\"></p>\n<h3 id=\"堆溢出-（OOM）\"><a href=\"#堆溢出-（OOM）\" class=\"headerlink\" title=\"堆溢出 （OOM）\"></a>堆溢出 （OOM）</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">T2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">String</span> <span class=\"variable\">str</span> <span class=\"operator\">=</span> <span class=\"string\">&quot;Mr.Wang&quot;</span>;</span><br><span class=\"line\">            str += <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">88888888</span>) + <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>().nextInt(<span class=\"number\">99999999</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置堆内存参数：</p>\n<p><img src=\"/./jvm/787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png\"></p>\n<p><img src=\"/./jvm/d5649d47-ed1b-4797-8a8f-73634873cd9d.png\"></p>\n<p><strong>Exception: java.lang.OutOfMemoryError</strong> </p>\n<p><img src=\"/./jvm/9111c342-79fb-4def-aef6-d266daea6078.png\"></p>\n<h3 id=\"GC-日志插看\"><a href=\"#GC-日志插看\" class=\"headerlink\" title=\"GC 日志插看\"></a>GC 日志插看</h3><p><img src=\"/./jvm/d9b58c91-421c-4afe-b359-2cde68c12eca.png\"></p>\n<p><img src=\"/./jvm/3e60331e-2742-4047-8383-e107945f85c4.png\"></p>\n<p><img src=\"/./jvm/3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png\"></p>\n<p>JVM在进行GC时，并非每次都对上面三个内存区域一起回收的， <strong>大部分时候回收的都是指新生代</strong>。因此GC按照回收的区域又分了两种类型，一种是普通GC (minor GC)，一种是全局GC (major GC or FullGC)</p>\n<p><strong>Minor GC Full GC的区别</strong></p>\n<ul>\n<li><p>普通GC (minor GC) :只针对新生代区域的GC,指发生在新生代的垃圾收集动作，因为大多数Java对象存活率都不高，所以Minor GC非常频繁，一般回收速 度也比较快。</p>\n</li>\n<li><p>全局GC (major GC or Full GC) :指发生在老年代的垃圾收集动作，出现了Major GC,经常会伴随至少一次的Minor GC (但并不是绝对的)。 <strong>Major GC的速度一 般要比Minor GC慢上10倍以,原因是因为老年代占2&#x2F;3，新生代占1&#x2F;3。</strong></p>\n</li>\n</ul>\n"},{"title":"SpringBoot接收前端Date类型参数转换LocalDate或LocalDateTime类型","date":"2023-06-05T02:00:00.000Z","cover":"/post/2023/localdate-springboot/kotlin.jpg","_content":"\n## 问题\n\nSpringBoot默认是不支持将时间类型转换成LocalDate类型的\n\n## 解决方案1:(添加 Jackson 的 @JsonFormat 注解) 不推荐\n### java\n```java\n@Data\npublic class Obj {\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private LocalDateTime time;\n}\n```\n### kotlin\n```kotlin\n@Data\n class Obj (\n        @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n        var  time:LocalDateTime,\n )\n```\n## 解决方案2:(@JsonSerialize、@JsonDeserialize 自定义序列化器和反序列化器) 不推荐\n@JsonSerialize、@JsonDeserialize 可分别指定序列化、反序列化时的格式：\n### java\n```java\npublic class MyLocalDateTimeSerializer extends com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer {\n    public MyLocalDateTimeSerializer() {\n        super(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n}\n\npublic class MyLocalDateTimeDeserializer extends com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer {\n    public MyLocalDateTimeDeserializer() {\n        super(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n}\n\n@Data\npublic class Obj {\n    @JsonSerialize(using = MyLocalDateTimeSerializer.class)\n    @JsonDeserialize(using = MyLocalDateTimeDeserializer.class)\n    private LocalDateTime time;\n}\n```\n### kotlin\n```kotlin\nclass MyLocalDateTimeSerializer : LocalDateTimeSerializer(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))\n\nclass MyLocalDateTimeDeserializer : LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))\n\nclass Obj (\n        @JsonSerialize(using = MyLocalDateTimeSerializer::class)\n        @JsonDeserialize(using = MyLocalDateTimeDeserializer::class)\n      val time: LocalDateTime? = null\n)\n```\n\n\n\n## 解决方案3:(使用 Jackson扩展工具包的JavaTimeModule ) 推荐\n使用 jackson-datatype-jsr310 定制化 ObjectMapper\n### 依赖\n[com.fasterxml.jackson.datatype:jackson-datatype-jsr310](https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310)\n#### gradle(kotlin)\n```kotlin\nimplementation(\"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:last-version\")\n```\n#### gradle(groovy)\n```groovy\nimplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: 'last-version'\n```\n\n#### maven\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.datatype</groupId>\n    <artifactId>jackson-datatype-jsr310</artifactId>\n    <version>last-version</version>\n</dependency>\n```\n### java\n```java\n@Configuration\npublic class AppConfig {\n    \n    @Bean\n    public MappingJackson2HttpMessageConverter customJackson2HttpMessageConverter() {\n        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();\n        ObjectMapper objectMapper = ObjectMapper();\n\n        //注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型\n        objectMapper.registerModule(new JavaTimeModule());\n      \n        jsonConverter.objectMapper = objectMapper;\n        return jsonConverter;\n    }\n}\n```      \n\n### kotlin\n```kotlin\n@Configuration\nclass AppConfig {\n    \n    @Bean\n    fun customJackson2HttpMessageConverter(): MappingJackson2HttpMessageConverter {\n        val jsonConverter = MappingJackson2HttpMessageConverter()\n        val objectMapper = ObjectMapper()\n\n        //注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型\n        objectMapper.registerModule(JavaTimeModule())\n      \n        jsonConverter.objectMapper = objectMapper\n        return jsonConverter\n    }\n}\n```\n\n\n\n\n\n\n","source":"_posts/2023/localdate-springboot.md","raw":"---\ntitle: SpringBoot接收前端Date类型参数转换LocalDate或LocalDateTime类型\ndate: 2023-06-05 10:00:00\ncategories:\n  - SpringBoot\ncover: /post/2023/localdate-springboot/kotlin.jpg\n---\n\n## 问题\n\nSpringBoot默认是不支持将时间类型转换成LocalDate类型的\n\n## 解决方案1:(添加 Jackson 的 @JsonFormat 注解) 不推荐\n### java\n```java\n@Data\npublic class Obj {\n    @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n    private LocalDateTime time;\n}\n```\n### kotlin\n```kotlin\n@Data\n class Obj (\n        @JsonFormat(pattern = \"yyyy-MM-dd HH:mm:ss\")\n        var  time:LocalDateTime,\n )\n```\n## 解决方案2:(@JsonSerialize、@JsonDeserialize 自定义序列化器和反序列化器) 不推荐\n@JsonSerialize、@JsonDeserialize 可分别指定序列化、反序列化时的格式：\n### java\n```java\npublic class MyLocalDateTimeSerializer extends com.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer {\n    public MyLocalDateTimeSerializer() {\n        super(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n}\n\npublic class MyLocalDateTimeDeserializer extends com.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer {\n    public MyLocalDateTimeDeserializer() {\n        super(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));\n    }\n}\n\n@Data\npublic class Obj {\n    @JsonSerialize(using = MyLocalDateTimeSerializer.class)\n    @JsonDeserialize(using = MyLocalDateTimeDeserializer.class)\n    private LocalDateTime time;\n}\n```\n### kotlin\n```kotlin\nclass MyLocalDateTimeSerializer : LocalDateTimeSerializer(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))\n\nclass MyLocalDateTimeDeserializer : LocalDateTimeDeserializer(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"))\n\nclass Obj (\n        @JsonSerialize(using = MyLocalDateTimeSerializer::class)\n        @JsonDeserialize(using = MyLocalDateTimeDeserializer::class)\n      val time: LocalDateTime? = null\n)\n```\n\n\n\n## 解决方案3:(使用 Jackson扩展工具包的JavaTimeModule ) 推荐\n使用 jackson-datatype-jsr310 定制化 ObjectMapper\n### 依赖\n[com.fasterxml.jackson.datatype:jackson-datatype-jsr310](https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310)\n#### gradle(kotlin)\n```kotlin\nimplementation(\"com.fasterxml.jackson.datatype:jackson-datatype-jsr310:last-version\")\n```\n#### gradle(groovy)\n```groovy\nimplementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: 'last-version'\n```\n\n#### maven\n```xml\n<dependency>\n    <groupId>com.fasterxml.jackson.datatype</groupId>\n    <artifactId>jackson-datatype-jsr310</artifactId>\n    <version>last-version</version>\n</dependency>\n```\n### java\n```java\n@Configuration\npublic class AppConfig {\n    \n    @Bean\n    public MappingJackson2HttpMessageConverter customJackson2HttpMessageConverter() {\n        MappingJackson2HttpMessageConverter jsonConverter = new MappingJackson2HttpMessageConverter();\n        ObjectMapper objectMapper = ObjectMapper();\n\n        //注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型\n        objectMapper.registerModule(new JavaTimeModule());\n      \n        jsonConverter.objectMapper = objectMapper;\n        return jsonConverter;\n    }\n}\n```      \n\n### kotlin\n```kotlin\n@Configuration\nclass AppConfig {\n    \n    @Bean\n    fun customJackson2HttpMessageConverter(): MappingJackson2HttpMessageConverter {\n        val jsonConverter = MappingJackson2HttpMessageConverter()\n        val objectMapper = ObjectMapper()\n\n        //注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型\n        objectMapper.registerModule(JavaTimeModule())\n      \n        jsonConverter.objectMapper = objectMapper\n        return jsonConverter\n    }\n}\n```\n\n\n\n\n\n\n","slug":"2023/localdate-springboot","published":1,"updated":"2024-08-17T05:44:50.825Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuy9000r0aib1lgk1xhq","content":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>SpringBoot默认是不支持将时间类型转换成LocalDate类型的</p>\n<h2 id=\"解决方案1-添加-Jackson-的-JsonFormat-注解-不推荐\"><a href=\"#解决方案1-添加-Jackson-的-JsonFormat-注解-不推荐\" class=\"headerlink\" title=\"解决方案1:(添加 Jackson 的 @JsonFormat 注解) 不推荐\"></a>解决方案1:(添加 Jackson 的 @JsonFormat 注解) 不推荐</h2><h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime time;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"kotlin\"><a href=\"#kotlin\" class=\"headerlink\" title=\"kotlin\"></a>kotlin</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> (</span><br><span class=\"line\">        <span class=\"meta\">@JsonFormat(pattern = <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  time:LocalDateTime,</span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案2-JsonSerialize、-JsonDeserialize-自定义序列化器和反序列化器-不推荐\"><a href=\"#解决方案2-JsonSerialize、-JsonDeserialize-自定义序列化器和反序列化器-不推荐\" class=\"headerlink\" title=\"解决方案2:(@JsonSerialize、@JsonDeserialize 自定义序列化器和反序列化器) 不推荐\"></a>解决方案2:(@JsonSerialize、@JsonDeserialize 自定义序列化器和反序列化器) 不推荐</h2><p>@JsonSerialize、@JsonDeserialize 可分别指定序列化、反序列化时的格式：</p>\n<h3 id=\"java-1\"><a href=\"#java-1\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">com</span>.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocalDateTimeSerializer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeDeserializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">com</span>.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocalDateTimeDeserializer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonSerialize(using = MyLocalDateTimeSerializer.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonDeserialize(using = MyLocalDateTimeDeserializer.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime time;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"kotlin-1\"><a href=\"#kotlin-1\" class=\"headerlink\" title=\"kotlin\"></a>kotlin</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeSerializer</span> : <span class=\"type\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeDeserializer</span> : <span class=\"type\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> (</span><br><span class=\"line\">        <span class=\"meta\">@JsonSerialize(using = MyLocalDateTimeSerializer::class)</span></span><br><span class=\"line\">        <span class=\"meta\">@JsonDeserialize(using = MyLocalDateTimeDeserializer::class)</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> time: LocalDateTime? = <span class=\"literal\">null</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"解决方案3-使用-Jackson扩展工具包的JavaTimeModule-推荐\"><a href=\"#解决方案3-使用-Jackson扩展工具包的JavaTimeModule-推荐\" class=\"headerlink\" title=\"解决方案3:(使用 Jackson扩展工具包的JavaTimeModule ) 推荐\"></a>解决方案3:(使用 Jackson扩展工具包的JavaTimeModule ) 推荐</h2><p>使用 jackson-datatype-jsr310 定制化 ObjectMapper</p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p><a href=\"https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310\">com.fasterxml.jackson.datatype:jackson-datatype-jsr310</a></p>\n<h4 id=\"gradle-kotlin\"><a href=\"#gradle-kotlin\" class=\"headerlink\" title=\"gradle(kotlin)\"></a>gradle(kotlin)</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310:last-version&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"gradle-groovy\"><a href=\"#gradle-groovy\" class=\"headerlink\" title=\"gradle(groovy)\"></a>gradle(groovy)</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.fasterxml.jackson.datatype&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;jackson-datatype-jsr310&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;last-version&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>last-version<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"java-2\"><a href=\"#java-2\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title function_\">customJackson2HttpMessageConverter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">jsonConverter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> ObjectMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型</span></span><br><span class=\"line\">        objectMapper.registerModule(<span class=\"keyword\">new</span> <span class=\"title class_\">JavaTimeModule</span>());</span><br><span class=\"line\">      </span><br><span class=\"line\">        jsonConverter.objectMapper = objectMapper;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonConverter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```      </span><br><span class=\"line\"></span><br><span class=\"line\">### kotlin</span><br><span class=\"line\">```kotlin</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    fun <span class=\"title function_\">customJackson2HttpMessageConverter</span><span class=\"params\">()</span>: MappingJackson2HttpMessageConverter &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">jsonConverter</span> <span class=\"operator\">=</span> MappingJackson2HttpMessageConverter()</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> ObjectMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型</span></span><br><span class=\"line\">        objectMapper.registerModule(JavaTimeModule())</span><br><span class=\"line\">      </span><br><span class=\"line\">        jsonConverter.objectMapper = objectMapper</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonConverter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n","cover_type":"img","excerpt":"","more":"<h2 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h2><p>SpringBoot默认是不支持将时间类型转换成LocalDate类型的</p>\n<h2 id=\"解决方案1-添加-Jackson-的-JsonFormat-注解-不推荐\"><a href=\"#解决方案1-添加-Jackson-的-JsonFormat-注解-不推荐\" class=\"headerlink\" title=\"解决方案1:(添加 Jackson 的 @JsonFormat 注解) 不推荐\"></a>解决方案1:(添加 Jackson 的 @JsonFormat 注解) 不推荐</h2><h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime time;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"kotlin\"><a href=\"#kotlin\" class=\"headerlink\" title=\"kotlin\"></a>kotlin</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"> <span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> (</span><br><span class=\"line\">        <span class=\"meta\">@JsonFormat(pattern = <span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>)</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span>  time:LocalDateTime,</span><br><span class=\"line\"> )</span><br></pre></td></tr></table></figure>\n<h2 id=\"解决方案2-JsonSerialize、-JsonDeserialize-自定义序列化器和反序列化器-不推荐\"><a href=\"#解决方案2-JsonSerialize、-JsonDeserialize-自定义序列化器和反序列化器-不推荐\" class=\"headerlink\" title=\"解决方案2:(@JsonSerialize、@JsonDeserialize 自定义序列化器和反序列化器) 不推荐\"></a>解决方案2:(@JsonSerialize、@JsonDeserialize 自定义序列化器和反序列化器) 不推荐</h2><p>@JsonSerialize、@JsonDeserialize 可分别指定序列化、反序列化时的格式：</p>\n<h3 id=\"java-1\"><a href=\"#java-1\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeSerializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">com</span>.fasterxml.jackson.datatype.jsr310.ser.LocalDateTimeSerializer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocalDateTimeSerializer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeDeserializer</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">com</span>.fasterxml.jackson.datatype.jsr310.deser.LocalDateTimeDeserializer &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">MyLocalDateTimeDeserializer</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">super</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Data</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> &#123;</span><br><span class=\"line\">    <span class=\"meta\">@JsonSerialize(using = MyLocalDateTimeSerializer.class)</span></span><br><span class=\"line\">    <span class=\"meta\">@JsonDeserialize(using = MyLocalDateTimeDeserializer.class)</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> LocalDateTime time;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"kotlin-1\"><a href=\"#kotlin-1\" class=\"headerlink\" title=\"kotlin\"></a>kotlin</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeSerializer</span> : <span class=\"type\">LocalDateTimeSerializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">MyLocalDateTimeDeserializer</span> : <span class=\"type\">LocalDateTimeDeserializer</span>(DateTimeFormatter.ofPattern(<span class=\"string\">&quot;yyyy-MM-dd HH:mm:ss&quot;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Obj</span> (</span><br><span class=\"line\">        <span class=\"meta\">@JsonSerialize(using = MyLocalDateTimeSerializer::class)</span></span><br><span class=\"line\">        <span class=\"meta\">@JsonDeserialize(using = MyLocalDateTimeDeserializer::class)</span></span><br><span class=\"line\">      <span class=\"keyword\">val</span> time: LocalDateTime? = <span class=\"literal\">null</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"解决方案3-使用-Jackson扩展工具包的JavaTimeModule-推荐\"><a href=\"#解决方案3-使用-Jackson扩展工具包的JavaTimeModule-推荐\" class=\"headerlink\" title=\"解决方案3:(使用 Jackson扩展工具包的JavaTimeModule ) 推荐\"></a>解决方案3:(使用 Jackson扩展工具包的JavaTimeModule ) 推荐</h2><p>使用 jackson-datatype-jsr310 定制化 ObjectMapper</p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p><a href=\"https://mvnrepository.com/artifact/com.fasterxml.jackson.datatype/jackson-datatype-jsr310\">com.fasterxml.jackson.datatype:jackson-datatype-jsr310</a></p>\n<h4 id=\"gradle-kotlin\"><a href=\"#gradle-kotlin\" class=\"headerlink\" title=\"gradle(kotlin)\"></a>gradle(kotlin)</h4><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation(<span class=\"string\">&quot;com.fasterxml.jackson.datatype:jackson-datatype-jsr310:last-version&quot;</span>)</span><br></pre></td></tr></table></figure>\n<h4 id=\"gradle-groovy\"><a href=\"#gradle-groovy\" class=\"headerlink\" title=\"gradle(groovy)\"></a>gradle(groovy)</h4><figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">implementation <span class=\"attr\">group:</span> <span class=\"string\">&#x27;com.fasterxml.jackson.datatype&#x27;</span>, <span class=\"attr\">name:</span> <span class=\"string\">&#x27;jackson-datatype-jsr310&#x27;</span>, <span class=\"attr\">version:</span> <span class=\"string\">&#x27;last-version&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"maven\"><a href=\"#maven\" class=\"headerlink\" title=\"maven\"></a>maven</h4><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.fasterxml.jackson.datatype<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>jackson-datatype-jsr310<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>last-version<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"java-2\"><a href=\"#java-2\" class=\"headerlink\" title=\"java\"></a>java</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> MappingJackson2HttpMessageConverter <span class=\"title function_\">customJackson2HttpMessageConverter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">MappingJackson2HttpMessageConverter</span> <span class=\"variable\">jsonConverter</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">MappingJackson2HttpMessageConverter</span>();</span><br><span class=\"line\">        <span class=\"type\">ObjectMapper</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> ObjectMapper();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型</span></span><br><span class=\"line\">        objectMapper.registerModule(<span class=\"keyword\">new</span> <span class=\"title class_\">JavaTimeModule</span>());</span><br><span class=\"line\">      </span><br><span class=\"line\">        jsonConverter.objectMapper = objectMapper;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonConverter;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">```      </span><br><span class=\"line\"></span><br><span class=\"line\">### kotlin</span><br><span class=\"line\">```kotlin</span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">AppConfig</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"meta\">@Bean</span></span><br><span class=\"line\">    fun <span class=\"title function_\">customJackson2HttpMessageConverter</span><span class=\"params\">()</span>: MappingJackson2HttpMessageConverter &#123;</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">jsonConverter</span> <span class=\"operator\">=</span> MappingJackson2HttpMessageConverter()</span><br><span class=\"line\">        <span class=\"type\">val</span> <span class=\"variable\">objectMapper</span> <span class=\"operator\">=</span> ObjectMapper()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//注册JavaTimeModule，解决无法序列化时间到LocalDate、LocalDateTime类型</span></span><br><span class=\"line\">        objectMapper.registerModule(JavaTimeModule())</span><br><span class=\"line\">      </span><br><span class=\"line\">        jsonConverter.objectMapper = objectMapper</span><br><span class=\"line\">        <span class=\"keyword\">return</span> jsonConverter</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n"},{"title":"创建线程那么容易，为什么非要让我使用线程池？","date":"2023-03-20T16:00:00.000Z","_content":"\n\n# 一、概述\n## 1、问题\n>先看我们遇到的问题：我们创建线程的方式很简单，new Thread(() -> {...})，就是因为这么简单粗暴的方式，才带来了致命的问题。首先线程的创建和销毁都是**很耗时很浪费性能**的操作，你用线程为了什么？为了就是异步，为了就是**提升性能**。简单的new三五个Thread还好，我需要一千个线程呢？你也for循环new1000个Thread吗？用完在销毁掉。那这一千个线程的创建和销毁的性能是很糟糕的！\n## 2、解决\n>为了解决上述问题，线程池诞生了，线程池的核心思想就是：**线程复用**。也就是说线程用完后不销毁，放到池子里等着新任务的到来，反复利用N个线程来执行所有新老任务。这带来的开销只会是那N个线程的创建，而不是每来一个请求都带来一个线程的从生到死的过程。\n# 二、线程池\n## 1、概念\n还说个鸡儿，上面的问题解决方案已经很通俗易懂了。  \n针对特级小白我在举个生活的案例：\n>比如找工作面试，涉及到两个角色：面试官、求职者。求职者成千上万，每来一个求职者都要为其单独新找一个面试官来面试吗？显然不是，公司都有面试官池子，比如：A、B、C你们三就是这公司的面试官了，有人来面试你们三轮流面就行了。可能不是很恰当，含义就是说我并不需要为每个请求（求职者）都单独分配一个新的线程（面试官） ，而是我固定好几个线程，由他们几个来处理所有请求。不会反复创建销毁。\n## 2、参数\n### 2.1、源码\n``` java\npublic ThreadPoolExecutor(int corePoolSize,\n    int maximumPoolSize,\n    long keepAliveTime,\n    TimeUnit unit,\n    BlockingQueue<Runnable> workQueue,\n    ThreadFactory threadFactory,\n    RejectedExecutionHandler handler) {}\n```\n### 2.2、解释\n- **corePoolSize**：核心线程数  \n\n   线程池在完成初始化之后，默认情况下，线程池中不会有任何线程，线程池会等有任务来的时候再去创建线程。核心线程创建出来后即使超出了线程保持的存活时间配置也不会销毁，核心线程只要创建就永驻了，就等着新任务进来进行处理。\n  \n- **maximumPoolSize**：最大线程数  \n\n   核心线程忙不过来且任务存储队列满了的情况下，还有新任务进来的话就会继续开辟线程，但是也不是任意的开辟线程数量，线程数（包含核心线程）达到**maximumPoolSize**后就不会产生新线程了，就会执行拒绝策略。\n\n- **keepAliveTime**：线程保持的存活时间\n\n  如果线程池当前的线程数多于**corePoolSize**，那么如果多余的线程空闲时间超过**keepAliveTime**，那么这些多余的线程（超出核心线程数的那些线程）就会被回收。\n\n- **unit**：线程保持的存活时间单位\n\n  比如：TimeUnit.MILLISECONDS、TimeUnit.SECONDS\n\n- **workQueue**：任务存储队列\n  \n  核心线程数满了后还有任务继续提交到线程池的话，就先进入workQueue。  \n  \n  workQueue通常情况下有如下选择：\n  -  **LinkedBlockingQueue**：无界队列，意味着无限制，其实是有限制，大小是int的最大值。也可以自定义大小。\n  - **ArrayBlockingQueue**：有界队列，可以自定义大小，到了阈值就开启新线程（不会超过maximumPoolSize）。\n  - **SynchronousQueue**：**Executors.newCachedThreadPool()**;默认使用的队列。也不算是个队列，他不没有存储元素的能力。\n\n  一般都采取**LinkedBlockingQueue**，因为他也可以设置大小，可以取代**ArrayBlockingQueue**有界队列。\n\n- **threadFactory**：当线程池需要新的线程时，会用**threadFactory**来生成新的线程\n\n  默认采用的是**DefaultThreadFactory**，主要负责创建线程。newThread()方法。创建出来的线程都在同一个线程组且优先级也是一样的。\n  \n- **handler**：拒绝策略，任务量超出线程池的配置限制或执行shutdown还在继续提交任务的话，会执行handler的逻辑。\n\n  默认采用的是**AbortPolicy**，遇到上面的情况，线程池将直接采取直接拒绝策略，也就是直接抛出异常**RejectedExecutionException**\n  \n## 3、原理\n### 3.1、原理\n\n- 线程池刚启动的时候核心线程数为0\n\n- 丢任务给线程池的时候，线程池会新开启线程来执行这个任务\n\n- 如果线程数小于corePoolSize，即使工作线程处于空闲状态，也会创建一个新线程来执行新任务\n\n- 如果线程数大于或等于corePoolSize，则会将任务放到workQueue，也就是任务队列\n\n- 如果任务队列满了，且线程数小于maximumPoolSize，则会创建一个新线程来运行任务\n\n- 如果任务队列满了，且线程数大于或等于maximumPoolSize，则直接采取拒绝策略\n### 3.2、图解\n\n![](./thread-pool/e0733727-92bd-4438-a628-3b3989d8e838.png)\n### 3.3、举例\n\n线程池参数配置：核心线程5个，最大线程数10个，队列长度为100。\n\n那么线程池启动的时候不会创建任何线程，假设请求进来6个，则会创建5个核心线程来处理五个请求，另一个没被处理到的进入到队列。这时候有进来99个请求，线程池发现核心线程满了，队列还在空着99个位置，所以会进入到队列里99个，加上刚才的1个正好100个。这时候再次进来5个请求，线程池会再次开辟五个非核心线程来处理这五个请求。目前的情况是线程池里线程数是10个RUNNING状态的，队列里100个也满了。如果这时候又进来1个请求，则直接走拒绝策略。\n\n### 3.4、源码\n``` java\npublic void execute(Runnable command) {\n    int c = ctl.get();\n    // workerCountOf(c)：工作线程数\n    // worker数量比核心线程数小，直接创建worker执行任务\n    if (workerCountOf(c) < corePoolSize) {\n        // addWorker里面负责创建线程且执行任务\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // worker数量超过核心线程数，任务直接进入队列\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。\n        // 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        // 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。\n    // 这儿有3点需要注意：\n    // 1. 线程池不是运行状态时，addWorker内部会判断线程池状态\n    // 2. addWorker第2个参数表示是否创建核心线程\n    // 3. addWorker返回false，则说明任务执行失败，需要执行reject操作\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n## 4、Executors\n### 4.1、概念\n\n首先这不是一个线程池，这是线程池的工具类，他能方便的为我们创建线程。\n\n但是阿里巴巴开发手册上说明不推荐用Executors创建线程池，推荐自己定义线程池。这是因为Executors创建的任何一种线程池都可能引发血案，具体是什么问题下面会说。\n\n### 4.2、固定线程数\n#### 4.2.1、描述\n核心线程数和最大线程数是一样的，所以称之为固定线程数。\n\n其他参数配置默认为：永不超时（0ms），无界队列（**LinkedBlockingQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n\n#### 4.2.2、api\n\n**Executors.newFixedThreadPool(n);**\n\n#### 4.2.3、demo\n\n``` java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建2个线程来执行10个任务。\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        for (int i = 0; i < 10; i++) {\n            // 从结果中可以发现线程name永远都是两个。不会有第三个。\n            executorService.execute(() -> System.out.println(Thread.currentThread().getName()));\n        }\n    }\n}\n```\n####  4.2.4、问题\n\n问题就在于它是**无界队列**，队列里能放int的最大值个任务，并发巨高的情况下极大可能直接OOM了然后任务还在堆积，毕竟直接用的是jvm内存。所以建议自定义线程池，自己按照需求指定合适的队列大小，自定义拒绝策略将超出队列大小的任务放到对外内存做补偿，比如Redis。别把业务系统压垮就行。\n\n#### 4.2.5、源码\n``` java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(\n                // 核心线程数和最大线程数都是nThreads\n                nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  // 无界队列！！！致命问题的关键所在。\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n### 4.3、单个线程\n#### 4.3.1、描述\n核心线程数和最大线程数是1，内部默认的，不可更改，所以称之为单线程数的线程池。\n\n类似于**Executors.newFixedThreadPool(1)**;\n\n其他参数配置默认为：永不超时（0ms），无界队列（**LinkedBlockingQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n#### 4.3.2、api\n\n**Executors.newSingleThreadExecutor();**\n\n#### 4.3.3、demo\n``` java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建1个线程来执行10个任务。\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        for (int i = 0; i < 10; i++) {\n            // 从结果中可以发现线程name永远都是pool-1-thread-1。不会有第二个出现。\n            executorService.execute(() -> System.out.println(Thread.currentThread().getName()));\n        }\n    }\n}\n```\n#### 4.3.4、问题\n同【4.2、固定线程数】的问题，都是无界队列惹的祸。\n#### 4.3.5、源码\n``` java \n\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(\n        // 核心线程数和最大线程数都是1，写死的，客户端不可更改。\n                 1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                 // 无界队列！！！致命问题的关键所在。\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n### 4.4、带缓存的线程池\n#### 4.4.1、描述\n他的功能是来个任务我就开辟个线程去处理，不会进入队列，**SynchronousQueue**队列也不带存储元素的功能。那这意味着来一亿个请求就会开辟一亿个线程去处理，**keepAliveTime**为60S，意味着线程空闲时间超过60S就会被杀死；这就叫带缓存功能的线程池。\n\n核心线程数是0，最大线程数是int的最大值，内部默认的，不可更改。\n\n其他参数配置默认为：1min超时（60s），**SynchronousQueue队列**、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n\n#### 4.4.2、api\n**Executors.newCachedThreadPool();**\n#### 4.4.3、demo\n``` java\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建个带缓存功能的线程池来执行10个任务。\n *\n * @author TongWei.Chen 2020-07-09 21:28:34\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        for (int i = 0; i < 10; i++) {\n            // 从结果中可以发现线程name有10个。也就是有几个任务就会开辟几个线程。\n            executorService.execute(() -> System.out.println(Thread.currentThread().getName()));\n        }\n    }\n}\n```\n#### 4.4.4、问题\n问题就在于他的最大线程数是int的最大值，因为他内部采取的队列是**SynchronousQueue**，这个队列没有容纳元素的能力，这将意味着只要来请求我就开启线程去工作，巅峰期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！\n\n#### 4.4.5、源码\n``` java\n\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(\n                // 核心线程数是0，最大线程数都是Integer.MAX_VALUE，这个可致命了！！！\n                0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n````\n\n\n###  4.5、有调度功能的线程池\n#### 4.5.1、描述\nRocketMQ内部大量采用了此种线程池来做心跳等任务。\n\n核心线程数手动传进来，最大线程数是Integer.MAX_VALUE，最大线程数是内部默认的，不可更改。\n其他参数配置默认为：永不超时（0ns），带延迟功能的队列（**DelayedWorkQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n\n#### 4.5.2、api\n**Executors.newScheduledThreadPool(n);**\n#### 4.5.3、demo\n``` java \n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建个带调度功能的线程池来执行任务。\n *\n * @author TongWei.Chen 2020-07-09 21:28:34\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2);\n        // 五秒一次\n        scheduledExecutorService.schedule(() -> System.out.println(Thread.currentThread().getName()), 5, TimeUnit.SECONDS);\n        // 首次五秒后执行，其次每隔1s执行一次\n        scheduledExecutorService.scheduleAtFixedRate(() -> System.out.println(Thread.currentThread().getName()), 5, 1, TimeUnit.SECONDS);\n    }\n}\n```\n#### 4.5.4、问题\n【同4.4、带缓存的线程池的问题】\n\n问题就在于他的最大线程数是int的最大值，这将意味海量并发期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！\n#### 4.5.5、源码\n``` java\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    // 致命的问题跟newCachedThreadPool一样，最大线程数能开到几十亿（Integer.MAX_VALUE）！！！\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n```\n\n## 4.6、停止线程\n### 4.6.1、shutdown\n\n平缓的结束线程池，比如当前线程池还在执行任务，还没执行完，这时候执行了shutdown的话，线程池并不会立即停止工作，而是会等待线程池中的任务都执行完成后才会shutdown掉，但是如果执行shutdown了，外界还在继续提交任务到线程池，那么线程池会直接采取拒绝策略。\n\n### 4.6.2、isShutdown\n\n判断线程池是否已经shutdown。\n\n### 4.6.3、shutdownNow\n暴力结束线程池。不管你当前线程池有没有任务在执行，队列里有没有堆积消息，我都直接让线程池挂掉。但是他的返回值是队列里那些未被执行的任务。有需要的可以记录下log啥的。\n### 4.7、疑问\n这几种线程池为什么要采取不一样的队列？比如**newFixedThreadPool**为什么采取**LinkedBlockingQueue**，而**newCachedThreadPool**又为什么采取**SynchronousQueue**？\n\n因为**newFixedThreadPool**线程数量有限，他又不想丢失任务，只能采取无界队列，而**newCachedThreadPool**的话本身自带int最大值个线程数，所以没必要用无界队列，他的宗旨就是我有线程能处理，不需要队列。\n\n## 5、总结几个问题\n\n### 1、线程池的状态\n- RUNNING：接受新任务并处理排队任务。\n- SHUTDOWN：不接受新任务，但是会处理排队任务。【见：停止线程的4.6.1、shutdown】\n- STOP：不接受新任务，也不处理排队任务，并中端正在进行的任务。\n- TIDYING：所有任务都已经完事，工作线程为0的时候 ，线程会进入这个状态并执行terminate()钩子方法。\n- TERMINATED：terminate()钩子方法运行完成。\n\n### 2、线程池自动创建还是手动？\n那肯定是手动了，因为Executors自动创建的那些线程池都存在致命的问题。手动创建线程池我们能自己控制线程数大小以及队列大小，还可以指定组名称等等个性化配置。重点不会出现致命问题，风险都把控在我们手里。\n### 3、线程数多少合适？\nCPU密集型（比如加密、各种复杂计算等）：建议设置为CPU核数+1。\n耗时IO操作（比如读写数据库，压缩解压缩大文件等等）：一般会设置CPU核数的2倍。当然也有个很牛X的计算公式：线程数=CPU核数 *（1+平均等待时间/平均工作时间）\n### 4、before&after\n在线程执行前后可以通过两个方法来进行打印log或其他工作。\n源码如下：\n``` java\n// 执行前的before\nbeforeExecute(wt, task);\nThrowable thrown = null;\ntry {\n    // 真正执行\n    task.run();\n} catch (RuntimeException x) {\n    thrown = x; throw x;\n} catch (Error x) {\n    thrown = x; throw x;\n} catch (Throwable x) {\n    thrown = x; throw new Error(x);\n} finally {\n    // 执行完成后after\n    afterExecute(task, thrown);\n}\n```\n\n## 6、核心源码（全）\n\n### 1、常用变量的解释\n``` java\n// 1. `ctl`，可以看做一个int类型的数字，高3位表示线程池状态，低29位表示worker数量\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n// 2. `COUNT_BITS`，`Integer.SIZE`为32，所以`COUNT_BITS`为29\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\n// 3. `CAPACITY`，线程池允许的最大线程数。1左移29位，然后减1，即为 2^29 - 1\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n// runState is stored in the high-order bits\n// 4. 线程池有5种状态，按大小排序如下：RUNNING < SHUTDOWN < STOP < TIDYING < TERMINATED\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n\n// Packing and unpacking ctl\n// 5. `runStateOf()`，获取线程池状态，通过按位与操作，低29位将全部变成0\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\n// 6. `workerCountOf()`，获取线程池worker数量，通过按位与操作，高3位将全部变成0\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\n// 7. `ctlOf()`，根据线程池状态和线程池worker数量，生成ctl值\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n\n/*\n * Bit field accessors that don't require unpacking ctl.\n * These depend on the bit layout and on workerCount being never negative.\n */\n// 8. `runStateLessThan()`，线程池状态小于xx\nprivate static boolean runStateLessThan(int c, int s) {\n    return c < s;\n}\n// 9. `runStateAtLeast()`，线程池状态大于等于xx\nprivate static boolean runStateAtLeast(int c, int s) {\n    return c >= s;\n}\n```\n### 2、构造方法\n``` java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    // 基本类型参数校验\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    // 空指针校验\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    // 根据传入参数`unit`和`keepAliveTime`，将存活时间转换为纳秒存到变量`keepAliveTime `中\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n### 3、提交执行task的过程\n``` java\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn't, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */\n    int c = ctl.get();\n    // worker数量比核心线程数小，直接创建worker执行任务\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // worker数量超过核心线程数，任务直接进入队列\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。\n        // 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        // 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。\n    // 这儿有3点需要注意：\n    // 1. 线程池不是运行状态时，addWorker内部会判断线程池状态\n    // 2. addWorker第2个参数表示是否创建核心线程\n    // 3. addWorker返回false，则说明任务执行失败，需要执行reject操作\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n### 4、addworker源码解析\n``` java\n\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    // 外层自旋\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // 这个条件写得比较难懂，我对其进行了调整，和下面的条件等价\n        // (rs > SHUTDOWN) || \n        // (rs == SHUTDOWN && firstTask != null) || \n        // (rs == SHUTDOWN && workQueue.isEmpty())\n        // 1. 线程池状态大于SHUTDOWN时，直接返回false\n        // 2. 线程池状态等于SHUTDOWN，且firstTask不为null，直接返回false\n        // 3. 线程池状态等于SHUTDOWN，且队列为空，直接返回false\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        // 内层自旋\n        for (;;) {\n            int wc = workerCountOf(c);\n            // worker数量超过容量，直接返回false\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            // 使用CAS的方式增加worker数量。\n            // 若增加成功，则直接跳出外层循环进入到第二部分\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            // 线程池状态发生变化，对外层循环进行自旋\n            if (runStateOf(c) != rs)\n                continue retry;\n            // 其他情况，直接内层循环进行自旋即可\n            // else CAS failed due to workerCount change; retry inner loop\n        } \n    }\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            // worker的添加必须是串行的，因此需要加锁\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                // 这儿需要重新检查线程池状态\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    // worker已经调用过了start()方法，则不再创建worker\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    // worker创建并添加到workers成功\n                    workers.add(w);\n                    // 更新`largestPoolSize`变量\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            // 启动worker线程\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        // worker线程启动失败，说明线程池状态发生了变化（关闭操作被执行），需要进行shutdown相关操作\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n###  5、线程池worker任务单元\n``` java\nprivate final class Worker\n    extends AbstractQueuedSynchronizer\n    implements Runnable\n{\n    /**\n     * This class will never be serialized, but we provide a\n     * serialVersionUID to suppress a javac warning.\n     */\n    private static final long serialVersionUID = 6138294804551838833L;\n\n    /** Thread this worker is running in.  Null if factory fails. */\n    final Thread thread;\n    /** Initial task to run.  Possibly null. */\n    Runnable firstTask;\n    /** Per-thread task counter */\n    volatile long completedTasks;\n\n    /**\n     * Creates with given first task and thread from ThreadFactory.\n     * @param firstTask the first task (null if none)\n     */\n    Worker(Runnable firstTask) {\n        setState(-1); // inhibit interrupts until runWorker\n        this.firstTask = firstTask;\n        // 这儿是Worker的关键所在，使用了线程工厂创建了一个线程。传入的参数为当前worker\n        this.thread = getThreadFactory().newThread(this);\n    }\n\n    /** Delegates main run loop to outer runWorker  */\n    public void run() {\n        runWorker(this);\n    }\n\n    // 省略代码...\n}\n```\n### 6、核心线程执行逻辑-runworker\n``` java\n\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 调用unlock()是为了让外部可以中断\n    w.unlock(); // allow interrupts\n    // 这个变量用于判断是否进入过自旋（while循环）\n    boolean completedAbruptly = true;\n    try {\n        // 这儿是自旋\n        // 1. 如果firstTask不为null，则执行firstTask；\n        // 2. 如果firstTask为null，则调用getTask()从队列获取任务。\n        // 3. 阻塞队列的特性就是：当队列为空时，当前线程会被阻塞等待\n        while (task != null || (task = getTask()) != null) {\n            // 这儿对worker进行加锁，是为了达到下面的目的\n            // 1. 降低锁范围，提升性能\n            // 2. 保证每个worker执行的任务是串行的\n            w.lock();\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            // 如果线程池正在停止，则对当前线程进行中断操作\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            // 执行任务，且在执行前后通过`beforeExecute()`和`afterExecute()`来扩展其功能。\n            // 这两个方法在当前类里面为空实现。\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                // 帮助gc\n                task = null;\n                // 已完成任务数加一 \n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        // 自旋操作被退出，说明线程池正在结束\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n```\n\n### 7、自建线程池注意点\n\n- 阻塞任务队列数\n- 线程池的名字，最好跟业务相关\n\n- 核心线程池大小，看业务实际情况。  \n\n  一般情况：**CPU核数+1**,可以参考【线程数多少合适？】\n- 最大线程池大小，看业务实际情况。\n  \n  一般情况：**2*CPU核数+1**,可以参考【线程数多少合适？】\n- 拒绝策略，我个人一般都是记录log，如果主要的业务我会根据log做补偿。\n比如：\n``` java\n\nThreadPoolExecutor executor = new ThreadPoolExecutor(CPU核数 + 1, 2 * CPU核数 + 1,\n      5, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2000),\n         // 线程池名字pay-account\n          new DefaultThreadFactory(\"pay-account\"), (r1, executor) -> {\n         // 记录log 重新入队列做补偿\n });\n```\n\n\n\n","source":"_posts/2023/thread-pool.md","raw":"---\ntitle: 创建线程那么容易，为什么非要让我使用线程池？\ndate: 2023-03-21\ntags:\n- thread\ncategories:\n- JAVA\n---\n\n\n# 一、概述\n## 1、问题\n>先看我们遇到的问题：我们创建线程的方式很简单，new Thread(() -> {...})，就是因为这么简单粗暴的方式，才带来了致命的问题。首先线程的创建和销毁都是**很耗时很浪费性能**的操作，你用线程为了什么？为了就是异步，为了就是**提升性能**。简单的new三五个Thread还好，我需要一千个线程呢？你也for循环new1000个Thread吗？用完在销毁掉。那这一千个线程的创建和销毁的性能是很糟糕的！\n## 2、解决\n>为了解决上述问题，线程池诞生了，线程池的核心思想就是：**线程复用**。也就是说线程用完后不销毁，放到池子里等着新任务的到来，反复利用N个线程来执行所有新老任务。这带来的开销只会是那N个线程的创建，而不是每来一个请求都带来一个线程的从生到死的过程。\n# 二、线程池\n## 1、概念\n还说个鸡儿，上面的问题解决方案已经很通俗易懂了。  \n针对特级小白我在举个生活的案例：\n>比如找工作面试，涉及到两个角色：面试官、求职者。求职者成千上万，每来一个求职者都要为其单独新找一个面试官来面试吗？显然不是，公司都有面试官池子，比如：A、B、C你们三就是这公司的面试官了，有人来面试你们三轮流面就行了。可能不是很恰当，含义就是说我并不需要为每个请求（求职者）都单独分配一个新的线程（面试官） ，而是我固定好几个线程，由他们几个来处理所有请求。不会反复创建销毁。\n## 2、参数\n### 2.1、源码\n``` java\npublic ThreadPoolExecutor(int corePoolSize,\n    int maximumPoolSize,\n    long keepAliveTime,\n    TimeUnit unit,\n    BlockingQueue<Runnable> workQueue,\n    ThreadFactory threadFactory,\n    RejectedExecutionHandler handler) {}\n```\n### 2.2、解释\n- **corePoolSize**：核心线程数  \n\n   线程池在完成初始化之后，默认情况下，线程池中不会有任何线程，线程池会等有任务来的时候再去创建线程。核心线程创建出来后即使超出了线程保持的存活时间配置也不会销毁，核心线程只要创建就永驻了，就等着新任务进来进行处理。\n  \n- **maximumPoolSize**：最大线程数  \n\n   核心线程忙不过来且任务存储队列满了的情况下，还有新任务进来的话就会继续开辟线程，但是也不是任意的开辟线程数量，线程数（包含核心线程）达到**maximumPoolSize**后就不会产生新线程了，就会执行拒绝策略。\n\n- **keepAliveTime**：线程保持的存活时间\n\n  如果线程池当前的线程数多于**corePoolSize**，那么如果多余的线程空闲时间超过**keepAliveTime**，那么这些多余的线程（超出核心线程数的那些线程）就会被回收。\n\n- **unit**：线程保持的存活时间单位\n\n  比如：TimeUnit.MILLISECONDS、TimeUnit.SECONDS\n\n- **workQueue**：任务存储队列\n  \n  核心线程数满了后还有任务继续提交到线程池的话，就先进入workQueue。  \n  \n  workQueue通常情况下有如下选择：\n  -  **LinkedBlockingQueue**：无界队列，意味着无限制，其实是有限制，大小是int的最大值。也可以自定义大小。\n  - **ArrayBlockingQueue**：有界队列，可以自定义大小，到了阈值就开启新线程（不会超过maximumPoolSize）。\n  - **SynchronousQueue**：**Executors.newCachedThreadPool()**;默认使用的队列。也不算是个队列，他不没有存储元素的能力。\n\n  一般都采取**LinkedBlockingQueue**，因为他也可以设置大小，可以取代**ArrayBlockingQueue**有界队列。\n\n- **threadFactory**：当线程池需要新的线程时，会用**threadFactory**来生成新的线程\n\n  默认采用的是**DefaultThreadFactory**，主要负责创建线程。newThread()方法。创建出来的线程都在同一个线程组且优先级也是一样的。\n  \n- **handler**：拒绝策略，任务量超出线程池的配置限制或执行shutdown还在继续提交任务的话，会执行handler的逻辑。\n\n  默认采用的是**AbortPolicy**，遇到上面的情况，线程池将直接采取直接拒绝策略，也就是直接抛出异常**RejectedExecutionException**\n  \n## 3、原理\n### 3.1、原理\n\n- 线程池刚启动的时候核心线程数为0\n\n- 丢任务给线程池的时候，线程池会新开启线程来执行这个任务\n\n- 如果线程数小于corePoolSize，即使工作线程处于空闲状态，也会创建一个新线程来执行新任务\n\n- 如果线程数大于或等于corePoolSize，则会将任务放到workQueue，也就是任务队列\n\n- 如果任务队列满了，且线程数小于maximumPoolSize，则会创建一个新线程来运行任务\n\n- 如果任务队列满了，且线程数大于或等于maximumPoolSize，则直接采取拒绝策略\n### 3.2、图解\n\n![](./thread-pool/e0733727-92bd-4438-a628-3b3989d8e838.png)\n### 3.3、举例\n\n线程池参数配置：核心线程5个，最大线程数10个，队列长度为100。\n\n那么线程池启动的时候不会创建任何线程，假设请求进来6个，则会创建5个核心线程来处理五个请求，另一个没被处理到的进入到队列。这时候有进来99个请求，线程池发现核心线程满了，队列还在空着99个位置，所以会进入到队列里99个，加上刚才的1个正好100个。这时候再次进来5个请求，线程池会再次开辟五个非核心线程来处理这五个请求。目前的情况是线程池里线程数是10个RUNNING状态的，队列里100个也满了。如果这时候又进来1个请求，则直接走拒绝策略。\n\n### 3.4、源码\n``` java\npublic void execute(Runnable command) {\n    int c = ctl.get();\n    // workerCountOf(c)：工作线程数\n    // worker数量比核心线程数小，直接创建worker执行任务\n    if (workerCountOf(c) < corePoolSize) {\n        // addWorker里面负责创建线程且执行任务\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // worker数量超过核心线程数，任务直接进入队列\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。\n        // 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        // 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。\n    // 这儿有3点需要注意：\n    // 1. 线程池不是运行状态时，addWorker内部会判断线程池状态\n    // 2. addWorker第2个参数表示是否创建核心线程\n    // 3. addWorker返回false，则说明任务执行失败，需要执行reject操作\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n## 4、Executors\n### 4.1、概念\n\n首先这不是一个线程池，这是线程池的工具类，他能方便的为我们创建线程。\n\n但是阿里巴巴开发手册上说明不推荐用Executors创建线程池，推荐自己定义线程池。这是因为Executors创建的任何一种线程池都可能引发血案，具体是什么问题下面会说。\n\n### 4.2、固定线程数\n#### 4.2.1、描述\n核心线程数和最大线程数是一样的，所以称之为固定线程数。\n\n其他参数配置默认为：永不超时（0ms），无界队列（**LinkedBlockingQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n\n#### 4.2.2、api\n\n**Executors.newFixedThreadPool(n);**\n\n#### 4.2.3、demo\n\n``` java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建2个线程来执行10个任务。\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newFixedThreadPool(2);\n        for (int i = 0; i < 10; i++) {\n            // 从结果中可以发现线程name永远都是两个。不会有第三个。\n            executorService.execute(() -> System.out.println(Thread.currentThread().getName()));\n        }\n    }\n}\n```\n####  4.2.4、问题\n\n问题就在于它是**无界队列**，队列里能放int的最大值个任务，并发巨高的情况下极大可能直接OOM了然后任务还在堆积，毕竟直接用的是jvm内存。所以建议自定义线程池，自己按照需求指定合适的队列大小，自定义拒绝策略将超出队列大小的任务放到对外内存做补偿，比如Redis。别把业务系统压垮就行。\n\n#### 4.2.5、源码\n``` java\npublic static ExecutorService newFixedThreadPool(int nThreads) {\n    return new ThreadPoolExecutor(\n                // 核心线程数和最大线程数都是nThreads\n                nThreads, nThreads,\n                                  0L, TimeUnit.MILLISECONDS,\n                                  // 无界队列！！！致命问题的关键所在。\n                                  new LinkedBlockingQueue<Runnable>());\n}\n```\n### 4.3、单个线程\n#### 4.3.1、描述\n核心线程数和最大线程数是1，内部默认的，不可更改，所以称之为单线程数的线程池。\n\n类似于**Executors.newFixedThreadPool(1)**;\n\n其他参数配置默认为：永不超时（0ms），无界队列（**LinkedBlockingQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n#### 4.3.2、api\n\n**Executors.newSingleThreadExecutor();**\n\n#### 4.3.3、demo\n``` java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建1个线程来执行10个任务。\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newSingleThreadExecutor();\n        for (int i = 0; i < 10; i++) {\n            // 从结果中可以发现线程name永远都是pool-1-thread-1。不会有第二个出现。\n            executorService.execute(() -> System.out.println(Thread.currentThread().getName()));\n        }\n    }\n}\n```\n#### 4.3.4、问题\n同【4.2、固定线程数】的问题，都是无界队列惹的祸。\n#### 4.3.5、源码\n``` java \n\npublic static ExecutorService newSingleThreadExecutor() {\n    return new FinalizableDelegatedExecutorService\n        (new ThreadPoolExecutor(\n        // 核心线程数和最大线程数都是1，写死的，客户端不可更改。\n                 1, 1,\n                                0L, TimeUnit.MILLISECONDS,\n                 // 无界队列！！！致命问题的关键所在。\n                                new LinkedBlockingQueue<Runnable>()));\n}\n```\n\n### 4.4、带缓存的线程池\n#### 4.4.1、描述\n他的功能是来个任务我就开辟个线程去处理，不会进入队列，**SynchronousQueue**队列也不带存储元素的功能。那这意味着来一亿个请求就会开辟一亿个线程去处理，**keepAliveTime**为60S，意味着线程空闲时间超过60S就会被杀死；这就叫带缓存功能的线程池。\n\n核心线程数是0，最大线程数是int的最大值，内部默认的，不可更改。\n\n其他参数配置默认为：1min超时（60s），**SynchronousQueue队列**、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n\n#### 4.4.2、api\n**Executors.newCachedThreadPool();**\n#### 4.4.3、demo\n``` java\n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建个带缓存功能的线程池来执行10个任务。\n *\n * @author TongWei.Chen 2020-07-09 21:28:34\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ExecutorService executorService = Executors.newCachedThreadPool();\n        for (int i = 0; i < 10; i++) {\n            // 从结果中可以发现线程name有10个。也就是有几个任务就会开辟几个线程。\n            executorService.execute(() -> System.out.println(Thread.currentThread().getName()));\n        }\n    }\n}\n```\n#### 4.4.4、问题\n问题就在于他的最大线程数是int的最大值，因为他内部采取的队列是**SynchronousQueue**，这个队列没有容纳元素的能力，这将意味着只要来请求我就开启线程去工作，巅峰期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！\n\n#### 4.4.5、源码\n``` java\n\npublic static ExecutorService newCachedThreadPool() {\n    return new ThreadPoolExecutor(\n                // 核心线程数是0，最大线程数都是Integer.MAX_VALUE，这个可致命了！！！\n                0, Integer.MAX_VALUE,\n                                  60L, TimeUnit.SECONDS,\n                                  new SynchronousQueue<Runnable>());\n}\n````\n\n\n###  4.5、有调度功能的线程池\n#### 4.5.1、描述\nRocketMQ内部大量采用了此种线程池来做心跳等任务。\n\n核心线程数手动传进来，最大线程数是Integer.MAX_VALUE，最大线程数是内部默认的，不可更改。\n其他参数配置默认为：永不超时（0ns），带延迟功能的队列（**DelayedWorkQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。\n\n#### 4.5.2、api\n**Executors.newScheduledThreadPool(n);**\n#### 4.5.3、demo\n``` java \n\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\n/**\n * Description: 创建个带调度功能的线程池来执行任务。\n *\n * @author TongWei.Chen 2020-07-09 21:28:34\n */\npublic class ThreadPoolTest {\n    public static void main(String[] args) {\n        ScheduledExecutorService scheduledExecutorService = Executors.newScheduledThreadPool(2);\n        // 五秒一次\n        scheduledExecutorService.schedule(() -> System.out.println(Thread.currentThread().getName()), 5, TimeUnit.SECONDS);\n        // 首次五秒后执行，其次每隔1s执行一次\n        scheduledExecutorService.scheduleAtFixedRate(() -> System.out.println(Thread.currentThread().getName()), 5, 1, TimeUnit.SECONDS);\n    }\n}\n```\n#### 4.5.4、问题\n【同4.4、带缓存的线程池的问题】\n\n问题就在于他的最大线程数是int的最大值，这将意味海量并发期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！\n#### 4.5.5、源码\n``` java\n\npublic ScheduledThreadPoolExecutor(int corePoolSize) {\n    // 致命的问题跟newCachedThreadPool一样，最大线程数能开到几十亿（Integer.MAX_VALUE）！！！\n    super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,\n          new DelayedWorkQueue());\n}\n```\n\n## 4.6、停止线程\n### 4.6.1、shutdown\n\n平缓的结束线程池，比如当前线程池还在执行任务，还没执行完，这时候执行了shutdown的话，线程池并不会立即停止工作，而是会等待线程池中的任务都执行完成后才会shutdown掉，但是如果执行shutdown了，外界还在继续提交任务到线程池，那么线程池会直接采取拒绝策略。\n\n### 4.6.2、isShutdown\n\n判断线程池是否已经shutdown。\n\n### 4.6.3、shutdownNow\n暴力结束线程池。不管你当前线程池有没有任务在执行，队列里有没有堆积消息，我都直接让线程池挂掉。但是他的返回值是队列里那些未被执行的任务。有需要的可以记录下log啥的。\n### 4.7、疑问\n这几种线程池为什么要采取不一样的队列？比如**newFixedThreadPool**为什么采取**LinkedBlockingQueue**，而**newCachedThreadPool**又为什么采取**SynchronousQueue**？\n\n因为**newFixedThreadPool**线程数量有限，他又不想丢失任务，只能采取无界队列，而**newCachedThreadPool**的话本身自带int最大值个线程数，所以没必要用无界队列，他的宗旨就是我有线程能处理，不需要队列。\n\n## 5、总结几个问题\n\n### 1、线程池的状态\n- RUNNING：接受新任务并处理排队任务。\n- SHUTDOWN：不接受新任务，但是会处理排队任务。【见：停止线程的4.6.1、shutdown】\n- STOP：不接受新任务，也不处理排队任务，并中端正在进行的任务。\n- TIDYING：所有任务都已经完事，工作线程为0的时候 ，线程会进入这个状态并执行terminate()钩子方法。\n- TERMINATED：terminate()钩子方法运行完成。\n\n### 2、线程池自动创建还是手动？\n那肯定是手动了，因为Executors自动创建的那些线程池都存在致命的问题。手动创建线程池我们能自己控制线程数大小以及队列大小，还可以指定组名称等等个性化配置。重点不会出现致命问题，风险都把控在我们手里。\n### 3、线程数多少合适？\nCPU密集型（比如加密、各种复杂计算等）：建议设置为CPU核数+1。\n耗时IO操作（比如读写数据库，压缩解压缩大文件等等）：一般会设置CPU核数的2倍。当然也有个很牛X的计算公式：线程数=CPU核数 *（1+平均等待时间/平均工作时间）\n### 4、before&after\n在线程执行前后可以通过两个方法来进行打印log或其他工作。\n源码如下：\n``` java\n// 执行前的before\nbeforeExecute(wt, task);\nThrowable thrown = null;\ntry {\n    // 真正执行\n    task.run();\n} catch (RuntimeException x) {\n    thrown = x; throw x;\n} catch (Error x) {\n    thrown = x; throw x;\n} catch (Throwable x) {\n    thrown = x; throw new Error(x);\n} finally {\n    // 执行完成后after\n    afterExecute(task, thrown);\n}\n```\n\n## 6、核心源码（全）\n\n### 1、常用变量的解释\n``` java\n// 1. `ctl`，可以看做一个int类型的数字，高3位表示线程池状态，低29位表示worker数量\nprivate final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0));\n// 2. `COUNT_BITS`，`Integer.SIZE`为32，所以`COUNT_BITS`为29\nprivate static final int COUNT_BITS = Integer.SIZE - 3;\n// 3. `CAPACITY`，线程池允许的最大线程数。1左移29位，然后减1，即为 2^29 - 1\nprivate static final int CAPACITY   = (1 << COUNT_BITS) - 1;\n\n// runState is stored in the high-order bits\n// 4. 线程池有5种状态，按大小排序如下：RUNNING < SHUTDOWN < STOP < TIDYING < TERMINATED\nprivate static final int RUNNING    = -1 << COUNT_BITS;\nprivate static final int SHUTDOWN   =  0 << COUNT_BITS;\nprivate static final int STOP       =  1 << COUNT_BITS;\nprivate static final int TIDYING    =  2 << COUNT_BITS;\nprivate static final int TERMINATED =  3 << COUNT_BITS;\n\n// Packing and unpacking ctl\n// 5. `runStateOf()`，获取线程池状态，通过按位与操作，低29位将全部变成0\nprivate static int runStateOf(int c)     { return c & ~CAPACITY; }\n// 6. `workerCountOf()`，获取线程池worker数量，通过按位与操作，高3位将全部变成0\nprivate static int workerCountOf(int c)  { return c & CAPACITY; }\n// 7. `ctlOf()`，根据线程池状态和线程池worker数量，生成ctl值\nprivate static int ctlOf(int rs, int wc) { return rs | wc; }\n\n/*\n * Bit field accessors that don't require unpacking ctl.\n * These depend on the bit layout and on workerCount being never negative.\n */\n// 8. `runStateLessThan()`，线程池状态小于xx\nprivate static boolean runStateLessThan(int c, int s) {\n    return c < s;\n}\n// 9. `runStateAtLeast()`，线程池状态大于等于xx\nprivate static boolean runStateAtLeast(int c, int s) {\n    return c >= s;\n}\n```\n### 2、构造方法\n``` java\npublic ThreadPoolExecutor(int corePoolSize,\n                          int maximumPoolSize,\n                          long keepAliveTime,\n                          TimeUnit unit,\n                          BlockingQueue<Runnable> workQueue,\n                          ThreadFactory threadFactory,\n                          RejectedExecutionHandler handler) {\n    // 基本类型参数校验\n    if (corePoolSize < 0 ||\n        maximumPoolSize <= 0 ||\n        maximumPoolSize < corePoolSize ||\n        keepAliveTime < 0)\n        throw new IllegalArgumentException();\n    // 空指针校验\n    if (workQueue == null || threadFactory == null || handler == null)\n        throw new NullPointerException();\n    this.corePoolSize = corePoolSize;\n    this.maximumPoolSize = maximumPoolSize;\n    this.workQueue = workQueue;\n    // 根据传入参数`unit`和`keepAliveTime`，将存活时间转换为纳秒存到变量`keepAliveTime `中\n    this.keepAliveTime = unit.toNanos(keepAliveTime);\n    this.threadFactory = threadFactory;\n    this.handler = handler;\n}\n```\n\n### 3、提交执行task的过程\n``` java\npublic void execute(Runnable command) {\n    if (command == null)\n        throw new NullPointerException();\n    /*\n     * Proceed in 3 steps:\n     *\n     * 1. If fewer than corePoolSize threads are running, try to\n     * start a new thread with the given command as its first\n     * task.  The call to addWorker atomically checks runState and\n     * workerCount, and so prevents false alarms that would add\n     * threads when it shouldn't, by returning false.\n     *\n     * 2. If a task can be successfully queued, then we still need\n     * to double-check whether we should have added a thread\n     * (because existing ones died since last checking) or that\n     * the pool shut down since entry into this method. So we\n     * recheck state and if necessary roll back the enqueuing if\n     * stopped, or start a new thread if there are none.\n     *\n     * 3. If we cannot queue task, then we try to add a new\n     * thread.  If it fails, we know we are shut down or saturated\n     * and so reject the task.\n     */\n    int c = ctl.get();\n    // worker数量比核心线程数小，直接创建worker执行任务\n    if (workerCountOf(c) < corePoolSize) {\n        if (addWorker(command, true))\n            return;\n        c = ctl.get();\n    }\n    // worker数量超过核心线程数，任务直接进入队列\n    if (isRunning(c) && workQueue.offer(command)) {\n        int recheck = ctl.get();\n        // 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。\n        // 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。\n        if (! isRunning(recheck) && remove(command))\n            reject(command);\n        // 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0\n        else if (workerCountOf(recheck) == 0)\n            addWorker(null, false);\n    }\n    // 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。\n    // 这儿有3点需要注意：\n    // 1. 线程池不是运行状态时，addWorker内部会判断线程池状态\n    // 2. addWorker第2个参数表示是否创建核心线程\n    // 3. addWorker返回false，则说明任务执行失败，需要执行reject操作\n    else if (!addWorker(command, false))\n        reject(command);\n}\n```\n\n### 4、addworker源码解析\n``` java\n\nprivate boolean addWorker(Runnable firstTask, boolean core) {\n    retry:\n    // 外层自旋\n    for (;;) {\n        int c = ctl.get();\n        int rs = runStateOf(c);\n\n        // 这个条件写得比较难懂，我对其进行了调整，和下面的条件等价\n        // (rs > SHUTDOWN) || \n        // (rs == SHUTDOWN && firstTask != null) || \n        // (rs == SHUTDOWN && workQueue.isEmpty())\n        // 1. 线程池状态大于SHUTDOWN时，直接返回false\n        // 2. 线程池状态等于SHUTDOWN，且firstTask不为null，直接返回false\n        // 3. 线程池状态等于SHUTDOWN，且队列为空，直接返回false\n        // Check if queue empty only if necessary.\n        if (rs >= SHUTDOWN &&\n            ! (rs == SHUTDOWN &&\n               firstTask == null &&\n               ! workQueue.isEmpty()))\n            return false;\n\n        // 内层自旋\n        for (;;) {\n            int wc = workerCountOf(c);\n            // worker数量超过容量，直接返回false\n            if (wc >= CAPACITY ||\n                wc >= (core ? corePoolSize : maximumPoolSize))\n                return false;\n            // 使用CAS的方式增加worker数量。\n            // 若增加成功，则直接跳出外层循环进入到第二部分\n            if (compareAndIncrementWorkerCount(c))\n                break retry;\n            c = ctl.get();  // Re-read ctl\n            // 线程池状态发生变化，对外层循环进行自旋\n            if (runStateOf(c) != rs)\n                continue retry;\n            // 其他情况，直接内层循环进行自旋即可\n            // else CAS failed due to workerCount change; retry inner loop\n        } \n    }\n    boolean workerStarted = false;\n    boolean workerAdded = false;\n    Worker w = null;\n    try {\n        w = new Worker(firstTask);\n        final Thread t = w.thread;\n        if (t != null) {\n            final ReentrantLock mainLock = this.mainLock;\n            // worker的添加必须是串行的，因此需要加锁\n            mainLock.lock();\n            try {\n                // Recheck while holding lock.\n                // Back out on ThreadFactory failure or if\n                // shut down before lock acquired.\n                // 这儿需要重新检查线程池状态\n                int rs = runStateOf(ctl.get());\n\n                if (rs < SHUTDOWN ||\n                    (rs == SHUTDOWN && firstTask == null)) {\n                    // worker已经调用过了start()方法，则不再创建worker\n                    if (t.isAlive()) // precheck that t is startable\n                        throw new IllegalThreadStateException();\n                    // worker创建并添加到workers成功\n                    workers.add(w);\n                    // 更新`largestPoolSize`变量\n                    int s = workers.size();\n                    if (s > largestPoolSize)\n                        largestPoolSize = s;\n                    workerAdded = true;\n                }\n            } finally {\n                mainLock.unlock();\n            }\n            // 启动worker线程\n            if (workerAdded) {\n                t.start();\n                workerStarted = true;\n            }\n        }\n    } finally {\n        // worker线程启动失败，说明线程池状态发生了变化（关闭操作被执行），需要进行shutdown相关操作\n        if (! workerStarted)\n            addWorkerFailed(w);\n    }\n    return workerStarted;\n}\n```\n###  5、线程池worker任务单元\n``` java\nprivate final class Worker\n    extends AbstractQueuedSynchronizer\n    implements Runnable\n{\n    /**\n     * This class will never be serialized, but we provide a\n     * serialVersionUID to suppress a javac warning.\n     */\n    private static final long serialVersionUID = 6138294804551838833L;\n\n    /** Thread this worker is running in.  Null if factory fails. */\n    final Thread thread;\n    /** Initial task to run.  Possibly null. */\n    Runnable firstTask;\n    /** Per-thread task counter */\n    volatile long completedTasks;\n\n    /**\n     * Creates with given first task and thread from ThreadFactory.\n     * @param firstTask the first task (null if none)\n     */\n    Worker(Runnable firstTask) {\n        setState(-1); // inhibit interrupts until runWorker\n        this.firstTask = firstTask;\n        // 这儿是Worker的关键所在，使用了线程工厂创建了一个线程。传入的参数为当前worker\n        this.thread = getThreadFactory().newThread(this);\n    }\n\n    /** Delegates main run loop to outer runWorker  */\n    public void run() {\n        runWorker(this);\n    }\n\n    // 省略代码...\n}\n```\n### 6、核心线程执行逻辑-runworker\n``` java\n\nfinal void runWorker(Worker w) {\n    Thread wt = Thread.currentThread();\n    Runnable task = w.firstTask;\n    w.firstTask = null;\n    // 调用unlock()是为了让外部可以中断\n    w.unlock(); // allow interrupts\n    // 这个变量用于判断是否进入过自旋（while循环）\n    boolean completedAbruptly = true;\n    try {\n        // 这儿是自旋\n        // 1. 如果firstTask不为null，则执行firstTask；\n        // 2. 如果firstTask为null，则调用getTask()从队列获取任务。\n        // 3. 阻塞队列的特性就是：当队列为空时，当前线程会被阻塞等待\n        while (task != null || (task = getTask()) != null) {\n            // 这儿对worker进行加锁，是为了达到下面的目的\n            // 1. 降低锁范围，提升性能\n            // 2. 保证每个worker执行的任务是串行的\n            w.lock();\n            // If pool is stopping, ensure thread is interrupted;\n            // if not, ensure thread is not interrupted.  This\n            // requires a recheck in second case to deal with\n            // shutdownNow race while clearing interrupt\n            // 如果线程池正在停止，则对当前线程进行中断操作\n            if ((runStateAtLeast(ctl.get(), STOP) ||\n                 (Thread.interrupted() &&\n                  runStateAtLeast(ctl.get(), STOP))) &&\n                !wt.isInterrupted())\n                wt.interrupt();\n            // 执行任务，且在执行前后通过`beforeExecute()`和`afterExecute()`来扩展其功能。\n            // 这两个方法在当前类里面为空实现。\n            try {\n                beforeExecute(wt, task);\n                Throwable thrown = null;\n                try {\n                    task.run();\n                } catch (RuntimeException x) {\n                    thrown = x; throw x;\n                } catch (Error x) {\n                    thrown = x; throw x;\n                } catch (Throwable x) {\n                    thrown = x; throw new Error(x);\n                } finally {\n                    afterExecute(task, thrown);\n                }\n            } finally {\n                // 帮助gc\n                task = null;\n                // 已完成任务数加一 \n                w.completedTasks++;\n                w.unlock();\n            }\n        }\n        completedAbruptly = false;\n    } finally {\n        // 自旋操作被退出，说明线程池正在结束\n        processWorkerExit(w, completedAbruptly);\n    }\n}\n```\n\n### 7、自建线程池注意点\n\n- 阻塞任务队列数\n- 线程池的名字，最好跟业务相关\n\n- 核心线程池大小，看业务实际情况。  \n\n  一般情况：**CPU核数+1**,可以参考【线程数多少合适？】\n- 最大线程池大小，看业务实际情况。\n  \n  一般情况：**2*CPU核数+1**,可以参考【线程数多少合适？】\n- 拒绝策略，我个人一般都是记录log，如果主要的业务我会根据log做补偿。\n比如：\n``` java\n\nThreadPoolExecutor executor = new ThreadPoolExecutor(CPU核数 + 1, 2 * CPU核数 + 1,\n      5, TimeUnit.SECONDS, new ArrayBlockingQueue<>(2000),\n         // 线程池名字pay-account\n          new DefaultThreadFactory(\"pay-account\"), (r1, executor) -> {\n         // 记录log 重新入队列做补偿\n });\n```\n\n\n\n","slug":"2023/thread-pool","published":1,"updated":"2024-08-05T11:07:24.366Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuyb000w0aibdapb1vug","content":"<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><h2 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h2><blockquote>\n<p>先看我们遇到的问题：我们创建线程的方式很简单，new Thread(() -&gt; {…})，就是因为这么简单粗暴的方式，才带来了致命的问题。首先线程的创建和销毁都是<strong>很耗时很浪费性能</strong>的操作，你用线程为了什么？为了就是异步，为了就是<strong>提升性能</strong>。简单的new三五个Thread还好，我需要一千个线程呢？你也for循环new1000个Thread吗？用完在销毁掉。那这一千个线程的创建和销毁的性能是很糟糕的！</p>\n</blockquote>\n<h2 id=\"2、解决\"><a href=\"#2、解决\" class=\"headerlink\" title=\"2、解决\"></a>2、解决</h2><blockquote>\n<p>为了解决上述问题，线程池诞生了，线程池的核心思想就是：<strong>线程复用</strong>。也就是说线程用完后不销毁，放到池子里等着新任务的到来，反复利用N个线程来执行所有新老任务。这带来的开销只会是那N个线程的创建，而不是每来一个请求都带来一个线程的从生到死的过程。</p>\n</blockquote>\n<h1 id=\"二、线程池\"><a href=\"#二、线程池\" class=\"headerlink\" title=\"二、线程池\"></a>二、线程池</h1><h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><p>还说个鸡儿，上面的问题解决方案已经很通俗易懂了。<br>针对特级小白我在举个生活的案例：</p>\n<blockquote>\n<p>比如找工作面试，涉及到两个角色：面试官、求职者。求职者成千上万，每来一个求职者都要为其单独新找一个面试官来面试吗？显然不是，公司都有面试官池子，比如：A、B、C你们三就是这公司的面试官了，有人来面试你们三轮流面就行了。可能不是很恰当，含义就是说我并不需要为每个请求（求职者）都单独分配一个新的线程（面试官） ，而是我固定好几个线程，由他们几个来处理所有请求。不会反复创建销毁。</p>\n</blockquote>\n<h2 id=\"2、参数\"><a href=\"#2、参数\" class=\"headerlink\" title=\"2、参数\"></a>2、参数</h2><h3 id=\"2-1、源码\"><a href=\"#2-1、源码\" class=\"headerlink\" title=\"2.1、源码\"></a>2.1、源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">    TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">    BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">    ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">    RejectedExecutionHandler handler)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2、解释\"><a href=\"#2-2、解释\" class=\"headerlink\" title=\"2.2、解释\"></a>2.2、解释</h3><ul>\n<li><p><strong>corePoolSize</strong>：核心线程数  </p>\n<p> 线程池在完成初始化之后，默认情况下，线程池中不会有任何线程，线程池会等有任务来的时候再去创建线程。核心线程创建出来后即使超出了线程保持的存活时间配置也不会销毁，核心线程只要创建就永驻了，就等着新任务进来进行处理。</p>\n</li>\n<li><p><strong>maximumPoolSize</strong>：最大线程数  </p>\n<p> 核心线程忙不过来且任务存储队列满了的情况下，还有新任务进来的话就会继续开辟线程，但是也不是任意的开辟线程数量，线程数（包含核心线程）达到<strong>maximumPoolSize</strong>后就不会产生新线程了，就会执行拒绝策略。</p>\n</li>\n<li><p><strong>keepAliveTime</strong>：线程保持的存活时间</p>\n<p>如果线程池当前的线程数多于<strong>corePoolSize</strong>，那么如果多余的线程空闲时间超过<strong>keepAliveTime</strong>，那么这些多余的线程（超出核心线程数的那些线程）就会被回收。</p>\n</li>\n<li><p><strong>unit</strong>：线程保持的存活时间单位</p>\n<p>比如：TimeUnit.MILLISECONDS、TimeUnit.SECONDS</p>\n</li>\n<li><p><strong>workQueue</strong>：任务存储队列</p>\n<p>核心线程数满了后还有任务继续提交到线程池的话，就先进入workQueue。  </p>\n<p>workQueue通常情况下有如下选择：</p>\n<ul>\n<li><strong>LinkedBlockingQueue</strong>：无界队列，意味着无限制，其实是有限制，大小是int的最大值。也可以自定义大小。</li>\n<li><strong>ArrayBlockingQueue</strong>：有界队列，可以自定义大小，到了阈值就开启新线程（不会超过maximumPoolSize）。</li>\n<li><strong>SynchronousQueue</strong>：<strong>Executors.newCachedThreadPool()</strong>;默认使用的队列。也不算是个队列，他不没有存储元素的能力。</li>\n</ul>\n<p>一般都采取<strong>LinkedBlockingQueue</strong>，因为他也可以设置大小，可以取代<strong>ArrayBlockingQueue</strong>有界队列。</p>\n</li>\n<li><p><strong>threadFactory</strong>：当线程池需要新的线程时，会用<strong>threadFactory</strong>来生成新的线程</p>\n<p>默认采用的是<strong>DefaultThreadFactory</strong>，主要负责创建线程。newThread()方法。创建出来的线程都在同一个线程组且优先级也是一样的。</p>\n</li>\n<li><p><strong>handler</strong>：拒绝策略，任务量超出线程池的配置限制或执行shutdown还在继续提交任务的话，会执行handler的逻辑。</p>\n<p>默认采用的是<strong>AbortPolicy</strong>，遇到上面的情况，线程池将直接采取直接拒绝策略，也就是直接抛出异常<strong>RejectedExecutionException</strong></p>\n</li>\n</ul>\n<h2 id=\"3、原理\"><a href=\"#3、原理\" class=\"headerlink\" title=\"3、原理\"></a>3、原理</h2><h3 id=\"3-1、原理\"><a href=\"#3-1、原理\" class=\"headerlink\" title=\"3.1、原理\"></a>3.1、原理</h3><ul>\n<li><p>线程池刚启动的时候核心线程数为0</p>\n</li>\n<li><p>丢任务给线程池的时候，线程池会新开启线程来执行这个任务</p>\n</li>\n<li><p>如果线程数小于corePoolSize，即使工作线程处于空闲状态，也会创建一个新线程来执行新任务</p>\n</li>\n<li><p>如果线程数大于或等于corePoolSize，则会将任务放到workQueue，也就是任务队列</p>\n</li>\n<li><p>如果任务队列满了，且线程数小于maximumPoolSize，则会创建一个新线程来运行任务</p>\n</li>\n<li><p>如果任务队列满了，且线程数大于或等于maximumPoolSize，则直接采取拒绝策略</p>\n</li>\n</ul>\n<h3 id=\"3-2、图解\"><a href=\"#3-2、图解\" class=\"headerlink\" title=\"3.2、图解\"></a>3.2、图解</h3><p><img src=\"/./thread-pool/e0733727-92bd-4438-a628-3b3989d8e838.png\"></p>\n<h3 id=\"3-3、举例\"><a href=\"#3-3、举例\" class=\"headerlink\" title=\"3.3、举例\"></a>3.3、举例</h3><p>线程池参数配置：核心线程5个，最大线程数10个，队列长度为100。</p>\n<p>那么线程池启动的时候不会创建任何线程，假设请求进来6个，则会创建5个核心线程来处理五个请求，另一个没被处理到的进入到队列。这时候有进来99个请求，线程池发现核心线程满了，队列还在空着99个位置，所以会进入到队列里99个，加上刚才的1个正好100个。这时候再次进来5个请求，线程池会再次开辟五个非核心线程来处理这五个请求。目前的情况是线程池里线程数是10个RUNNING状态的，队列里100个也满了。如果这时候又进来1个请求，则直接走拒绝策略。</p>\n<h3 id=\"3-4、源码\"><a href=\"#3-4、源码\" class=\"headerlink\" title=\"3.4、源码\"></a>3.4、源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">    <span class=\"comment\">// workerCountOf(c)：工作线程数</span></span><br><span class=\"line\">    <span class=\"comment\">// worker数量比核心线程数小，直接创建worker执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// addWorker里面负责创建线程且执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// worker数量超过核心线程数，任务直接进入队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"comment\">// 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这儿有3点需要注意：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 线程池不是运行状态时，addWorker内部会判断线程池状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. addWorker第2个参数表示是否创建核心线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. addWorker返回false，则说明任务执行失败，需要执行reject操作</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、Executors\"><a href=\"#4、Executors\" class=\"headerlink\" title=\"4、Executors\"></a>4、Executors</h2><h3 id=\"4-1、概念\"><a href=\"#4-1、概念\" class=\"headerlink\" title=\"4.1、概念\"></a>4.1、概念</h3><p>首先这不是一个线程池，这是线程池的工具类，他能方便的为我们创建线程。</p>\n<p>但是阿里巴巴开发手册上说明不推荐用Executors创建线程池，推荐自己定义线程池。这是因为Executors创建的任何一种线程池都可能引发血案，具体是什么问题下面会说。</p>\n<h3 id=\"4-2、固定线程数\"><a href=\"#4-2、固定线程数\" class=\"headerlink\" title=\"4.2、固定线程数\"></a>4.2、固定线程数</h3><h4 id=\"4-2-1、描述\"><a href=\"#4-2-1、描述\" class=\"headerlink\" title=\"4.2.1、描述\"></a>4.2.1、描述</h4><p>核心线程数和最大线程数是一样的，所以称之为固定线程数。</p>\n<p>其他参数配置默认为：永不超时（0ms），无界队列（<strong>LinkedBlockingQueue</strong>）、默认线程工厂（<strong>DefaultThreadFactory</strong>）、直接拒绝策略（<strong>AbortPolicy</strong>）。</p>\n<h4 id=\"4-2-2、api\"><a href=\"#4-2-2、api\" class=\"headerlink\" title=\"4.2.2、api\"></a>4.2.2、api</h4><p><strong>Executors.newFixedThreadPool(n);</strong></p>\n<h4 id=\"4-2-3、demo\"><a href=\"#4-2-3、demo\" class=\"headerlink\" title=\"4.2.3、demo\"></a>4.2.3、demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建2个线程来执行10个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从结果中可以发现线程name永远都是两个。不会有第三个。</span></span><br><span class=\"line\">            executorService.execute(() -&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-4、问题\"><a href=\"#4-2-4、问题\" class=\"headerlink\" title=\"4.2.4、问题\"></a>4.2.4、问题</h4><p>问题就在于它是<strong>无界队列</strong>，队列里能放int的最大值个任务，并发巨高的情况下极大可能直接OOM了然后任务还在堆积，毕竟直接用的是jvm内存。所以建议自定义线程池，自己按照需求指定合适的队列大小，自定义拒绝策略将超出队列大小的任务放到对外内存做补偿，比如Redis。别把业务系统压垮就行。</p>\n<h4 id=\"4-2-5、源码\"><a href=\"#4-2-5、源码\" class=\"headerlink\" title=\"4.2.5、源码\"></a>4.2.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"comment\">// 核心线程数和最大线程数都是nThreads</span></span><br><span class=\"line\">                nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"comment\">// 无界队列！！！致命问题的关键所在。</span></span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3、单个线程\"><a href=\"#4-3、单个线程\" class=\"headerlink\" title=\"4.3、单个线程\"></a>4.3、单个线程</h3><h4 id=\"4-3-1、描述\"><a href=\"#4-3-1、描述\" class=\"headerlink\" title=\"4.3.1、描述\"></a>4.3.1、描述</h4><p>核心线程数和最大线程数是1，内部默认的，不可更改，所以称之为单线程数的线程池。</p>\n<p>类似于<strong>Executors.newFixedThreadPool(1)</strong>;</p>\n<p>其他参数配置默认为：永不超时（0ms），无界队列（<strong>LinkedBlockingQueue</strong>）、默认线程工厂（<strong>DefaultThreadFactory</strong>）、直接拒绝策略（<strong>AbortPolicy</strong>）。</p>\n<h4 id=\"4-3-2、api\"><a href=\"#4-3-2、api\" class=\"headerlink\" title=\"4.3.2、api\"></a>4.3.2、api</h4><p><strong>Executors.newSingleThreadExecutor();</strong></p>\n<h4 id=\"4-3-3、demo\"><a href=\"#4-3-3、demo\" class=\"headerlink\" title=\"4.3.3、demo\"></a>4.3.3、demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建1个线程来执行10个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从结果中可以发现线程name永远都是pool-1-thread-1。不会有第二个出现。</span></span><br><span class=\"line\">            executorService.execute(() -&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-4、问题\"><a href=\"#4-3-4、问题\" class=\"headerlink\" title=\"4.3.4、问题\"></a>4.3.4、问题</h4><p>同【4.2、固定线程数】的问题，都是无界队列惹的祸。</p>\n<h4 id=\"4-3-5、源码\"><a href=\"#4-3-5、源码\" class=\"headerlink\" title=\"4.3.5、源码\"></a>4.3.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">        <span class=\"comment\">// 核心线程数和最大线程数都是1，写死的，客户端不可更改。</span></span><br><span class=\"line\">                 <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                 <span class=\"comment\">// 无界队列！！！致命问题的关键所在。</span></span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、带缓存的线程池\"><a href=\"#4-4、带缓存的线程池\" class=\"headerlink\" title=\"4.4、带缓存的线程池\"></a>4.4、带缓存的线程池</h3><h4 id=\"4-4-1、描述\"><a href=\"#4-4-1、描述\" class=\"headerlink\" title=\"4.4.1、描述\"></a>4.4.1、描述</h4><p>他的功能是来个任务我就开辟个线程去处理，不会进入队列，<strong>SynchronousQueue</strong>队列也不带存储元素的功能。那这意味着来一亿个请求就会开辟一亿个线程去处理，<strong>keepAliveTime</strong>为60S，意味着线程空闲时间超过60S就会被杀死；这就叫带缓存功能的线程池。</p>\n<p>核心线程数是0，最大线程数是int的最大值，内部默认的，不可更改。</p>\n<p>其他参数配置默认为：1min超时（60s），<strong>SynchronousQueue队列</strong>、默认线程工厂（<strong>DefaultThreadFactory</strong>）、直接拒绝策略（<strong>AbortPolicy</strong>）。</p>\n<h4 id=\"4-4-2、api\"><a href=\"#4-4-2、api\" class=\"headerlink\" title=\"4.4.2、api\"></a>4.4.2、api</h4><p><strong>Executors.newCachedThreadPool();</strong></p>\n<h4 id=\"4-4-3、demo\"><a href=\"#4-4-3、demo\" class=\"headerlink\" title=\"4.4.3、demo\"></a>4.4.3、demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建个带缓存功能的线程池来执行10个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> TongWei.Chen 2020-07-09 21:28:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从结果中可以发现线程name有10个。也就是有几个任务就会开辟几个线程。</span></span><br><span class=\"line\">            executorService.execute(() -&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-4、问题\"><a href=\"#4-4-4、问题\" class=\"headerlink\" title=\"4.4.4、问题\"></a>4.4.4、问题</h4><p>问题就在于他的最大线程数是int的最大值，因为他内部采取的队列是<strong>SynchronousQueue</strong>，这个队列没有容纳元素的能力，这将意味着只要来请求我就开启线程去工作，巅峰期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！</p>\n<h4 id=\"4-4-5、源码\"><a href=\"#4-4-5、源码\" class=\"headerlink\" title=\"4.4.5、源码\"></a>4.4.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"comment\">// 核心线程数是0，最大线程数都是Integer.MAX_VALUE，这个可致命了！！！</span></span><br><span class=\"line\">                <span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###  <span class=\"number\">4.5</span>、有调度功能的线程池</span><br><span class=\"line\">#### <span class=\"number\">4.5</span><span class=\"number\">.1</span>、描述</span><br><span class=\"line\">RocketMQ内部大量采用了此种线程池来做心跳等任务。</span><br><span class=\"line\"></span><br><span class=\"line\">核心线程数手动传进来，最大线程数是Integer.MAX_VALUE，最大线程数是内部默认的，不可更改。</span><br><span class=\"line\">其他参数配置默认为：永不超时（0ns），带延迟功能的队列（**DelayedWorkQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。</span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">4.5</span><span class=\"number\">.2</span>、api</span><br><span class=\"line\">**Executors.newScheduledThreadPool(n);**</span><br><span class=\"line\">#### <span class=\"number\">4.5</span><span class=\"number\">.3</span>、demo</span><br><span class=\"line\">``` java </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建个带调度功能的线程池来执行任务。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> TongWei.Chen 2020-07-09 21:28:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">scheduledExecutorService</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 五秒一次</span></span><br><span class=\"line\">        scheduledExecutorService.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        <span class=\"comment\">// 首次五秒后执行，其次每隔1s执行一次</span></span><br><span class=\"line\">        scheduledExecutorService.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-5-4、问题\"><a href=\"#4-5-4、问题\" class=\"headerlink\" title=\"4.5.4、问题\"></a>4.5.4、问题</h4><p>【同4.4、带缓存的线程池的问题】</p>\n<p>问题就在于他的最大线程数是int的最大值，这将意味海量并发期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！</p>\n<h4 id=\"4-5-5、源码\"><a href=\"#4-5-5、源码\" class=\"headerlink\" title=\"4.5.5、源码\"></a>4.5.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 致命的问题跟newCachedThreadPool一样，最大线程数能开到几十亿（Integer.MAX_VALUE）！！！</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">DelayedWorkQueue</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-6、停止线程\"><a href=\"#4-6、停止线程\" class=\"headerlink\" title=\"4.6、停止线程\"></a>4.6、停止线程</h2><h3 id=\"4-6-1、shutdown\"><a href=\"#4-6-1、shutdown\" class=\"headerlink\" title=\"4.6.1、shutdown\"></a>4.6.1、shutdown</h3><p>平缓的结束线程池，比如当前线程池还在执行任务，还没执行完，这时候执行了shutdown的话，线程池并不会立即停止工作，而是会等待线程池中的任务都执行完成后才会shutdown掉，但是如果执行shutdown了，外界还在继续提交任务到线程池，那么线程池会直接采取拒绝策略。</p>\n<h3 id=\"4-6-2、isShutdown\"><a href=\"#4-6-2、isShutdown\" class=\"headerlink\" title=\"4.6.2、isShutdown\"></a>4.6.2、isShutdown</h3><p>判断线程池是否已经shutdown。</p>\n<h3 id=\"4-6-3、shutdownNow\"><a href=\"#4-6-3、shutdownNow\" class=\"headerlink\" title=\"4.6.3、shutdownNow\"></a>4.6.3、shutdownNow</h3><p>暴力结束线程池。不管你当前线程池有没有任务在执行，队列里有没有堆积消息，我都直接让线程池挂掉。但是他的返回值是队列里那些未被执行的任务。有需要的可以记录下log啥的。</p>\n<h3 id=\"4-7、疑问\"><a href=\"#4-7、疑问\" class=\"headerlink\" title=\"4.7、疑问\"></a>4.7、疑问</h3><p>这几种线程池为什么要采取不一样的队列？比如<strong>newFixedThreadPool</strong>为什么采取<strong>LinkedBlockingQueue</strong>，而<strong>newCachedThreadPool</strong>又为什么采取<strong>SynchronousQueue</strong>？</p>\n<p>因为<strong>newFixedThreadPool</strong>线程数量有限，他又不想丢失任务，只能采取无界队列，而<strong>newCachedThreadPool</strong>的话本身自带int最大值个线程数，所以没必要用无界队列，他的宗旨就是我有线程能处理，不需要队列。</p>\n<h2 id=\"5、总结几个问题\"><a href=\"#5、总结几个问题\" class=\"headerlink\" title=\"5、总结几个问题\"></a>5、总结几个问题</h2><h3 id=\"1、线程池的状态\"><a href=\"#1、线程池的状态\" class=\"headerlink\" title=\"1、线程池的状态\"></a>1、线程池的状态</h3><ul>\n<li>RUNNING：接受新任务并处理排队任务。</li>\n<li>SHUTDOWN：不接受新任务，但是会处理排队任务。【见：停止线程的4.6.1、shutdown】</li>\n<li>STOP：不接受新任务，也不处理排队任务，并中端正在进行的任务。</li>\n<li>TIDYING：所有任务都已经完事，工作线程为0的时候 ，线程会进入这个状态并执行terminate()钩子方法。</li>\n<li>TERMINATED：terminate()钩子方法运行完成。</li>\n</ul>\n<h3 id=\"2、线程池自动创建还是手动？\"><a href=\"#2、线程池自动创建还是手动？\" class=\"headerlink\" title=\"2、线程池自动创建还是手动？\"></a>2、线程池自动创建还是手动？</h3><p>那肯定是手动了，因为Executors自动创建的那些线程池都存在致命的问题。手动创建线程池我们能自己控制线程数大小以及队列大小，还可以指定组名称等等个性化配置。重点不会出现致命问题，风险都把控在我们手里。</p>\n<h3 id=\"3、线程数多少合适？\"><a href=\"#3、线程数多少合适？\" class=\"headerlink\" title=\"3、线程数多少合适？\"></a>3、线程数多少合适？</h3><p>CPU密集型（比如加密、各种复杂计算等）：建议设置为CPU核数+1。<br>耗时IO操作（比如读写数据库，压缩解压缩大文件等等）：一般会设置CPU核数的2倍。当然也有个很牛X的计算公式：线程数&#x3D;CPU核数 *（1+平均等待时间&#x2F;平均工作时间）</p>\n<h3 id=\"4、before-after\"><a href=\"#4、before-after\" class=\"headerlink\" title=\"4、before&amp;after\"></a>4、before&amp;after</h3><p>在线程执行前后可以通过两个方法来进行打印log或其他工作。<br>源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行前的before</span></span><br><span class=\"line\">beforeExecute(wt, task);</span><br><span class=\"line\"><span class=\"type\">Throwable</span> <span class=\"variable\">thrown</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真正执行</span></span><br><span class=\"line\">    task.run();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(x);</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行完成后after</span></span><br><span class=\"line\">    afterExecute(task, thrown);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、核心源码（全）\"><a href=\"#6、核心源码（全）\" class=\"headerlink\" title=\"6、核心源码（全）\"></a>6、核心源码（全）</h2><h3 id=\"1、常用变量的解释\"><a href=\"#1、常用变量的解释\" class=\"headerlink\" title=\"1、常用变量的解释\"></a>1、常用变量的解释</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. `ctl`，可以看做一个int类型的数字，高3位表示线程池状态，低29位表示worker数量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">ctl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(ctlOf(RUNNING, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">// 2. `COUNT_BITS`，`Integer.SIZE`为32，所以`COUNT_BITS`为29</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">COUNT_BITS</span> <span class=\"operator\">=</span> Integer.SIZE - <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 3. `CAPACITY`，线程池允许的最大线程数。1左移29位，然后减1，即为 2^29 - 1</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CAPACITY</span>   <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runState is stored in the high-order bits</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 线程池有5种状态，按大小排序如下：RUNNING &lt; SHUTDOWN &lt; STOP &lt; TIDYING &lt; TERMINATED</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHUTDOWN</span>   <span class=\"operator\">=</span>  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STOP</span>       <span class=\"operator\">=</span>  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TIDYING</span>    <span class=\"operator\">=</span>  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TERMINATED</span> <span class=\"operator\">=</span>  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Packing and unpacking ctl</span></span><br><span class=\"line\"><span class=\"comment\">// 5. `runStateOf()`，获取线程池状态，通过按位与操作，低29位将全部变成0</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">runStateOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>     &#123; <span class=\"keyword\">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 6. `workerCountOf()`，获取线程池worker数量，通过按位与操作，高3位将全部变成0</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">workerCountOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>  &#123; <span class=\"keyword\">return</span> c &amp; CAPACITY; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 7. `ctlOf()`，根据线程池状态和线程池worker数量，生成ctl值</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Bit field accessors that don&#x27;t require unpacking ctl.</span></span><br><span class=\"line\"><span class=\"comment\"> * These depend on the bit layout and on workerCount being never negative.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 8. `runStateLessThan()`，线程池状态小于xx</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateLessThan</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c &lt; s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 9. `runStateAtLeast()`，线程池状态大于等于xx</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateAtLeast</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c &gt;= s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、构造方法\"><a href=\"#2、构造方法\" class=\"headerlink\" title=\"2、构造方法\"></a>2、构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本类型参数校验</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 空指针校验</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"comment\">// 根据传入参数`unit`和`keepAliveTime`，将存活时间转换为纳秒存到变量`keepAliveTime `中</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、提交执行task的过程\"><a href=\"#3、提交执行task的过程\" class=\"headerlink\" title=\"3、提交执行task的过程\"></a>3、提交执行task的过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Proceed in 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class=\"line\"><span class=\"comment\">     * start a new thread with the given command as its first</span></span><br><span class=\"line\"><span class=\"comment\">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class=\"line\"><span class=\"comment\">     * workerCount, and so prevents false alarms that would add</span></span><br><span class=\"line\"><span class=\"comment\">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class=\"line\"><span class=\"comment\">     * to double-check whether we should have added a thread</span></span><br><span class=\"line\"><span class=\"comment\">     * (because existing ones died since last checking) or that</span></span><br><span class=\"line\"><span class=\"comment\">     * the pool shut down since entry into this method. So we</span></span><br><span class=\"line\"><span class=\"comment\">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class=\"line\"><span class=\"comment\">     * stopped, or start a new thread if there are none.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class=\"line\"><span class=\"comment\">     * and so reject the task.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">    <span class=\"comment\">// worker数量比核心线程数小，直接创建worker执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// worker数量超过核心线程数，任务直接进入队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"comment\">// 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这儿有3点需要注意：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 线程池不是运行状态时，addWorker内部会判断线程池状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. addWorker第2个参数表示是否创建核心线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. addWorker返回false，则说明任务执行失败，需要执行reject操作</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、addworker源码解析\"><a href=\"#4、addworker源码解析\" class=\"headerlink\" title=\"4、addworker源码解析\"></a>4、addworker源码解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addWorker</span><span class=\"params\">(Runnable firstTask, <span class=\"type\">boolean</span> core)</span> &#123;</span><br><span class=\"line\">    retry:</span><br><span class=\"line\">    <span class=\"comment\">// 外层自旋</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个条件写得比较难懂，我对其进行了调整，和下面的条件等价</span></span><br><span class=\"line\">        <span class=\"comment\">// (rs &gt; SHUTDOWN) || </span></span><br><span class=\"line\">        <span class=\"comment\">// (rs == SHUTDOWN &amp;&amp; firstTask != null) || </span></span><br><span class=\"line\">        <span class=\"comment\">// (rs == SHUTDOWN &amp;&amp; workQueue.isEmpty())</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 线程池状态大于SHUTDOWN时，直接返回false</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 线程池状态等于SHUTDOWN，且firstTask不为null，直接返回false</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 线程池状态等于SHUTDOWN，且队列为空，直接返回false</span></span><br><span class=\"line\">        <span class=\"comment\">// Check if queue empty only if necessary.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class=\"line\">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class=\"line\">               firstTask == <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">               ! workQueue.isEmpty()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 内层自旋</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">wc</span> <span class=\"operator\">=</span> workerCountOf(c);</span><br><span class=\"line\">            <span class=\"comment\">// worker数量超过容量，直接返回false</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wc &gt;= CAPACITY ||</span><br><span class=\"line\">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 使用CAS的方式增加worker数量。</span></span><br><span class=\"line\">            <span class=\"comment\">// 若增加成功，则直接跳出外层循环进入到第二部分</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">break</span> retry;</span><br><span class=\"line\">            c = ctl.get();  <span class=\"comment\">// Re-read ctl</span></span><br><span class=\"line\">            <span class=\"comment\">// 线程池状态发生变化，对外层循环进行自旋</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runStateOf(c) != rs)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">            <span class=\"comment\">// 其他情况，直接内层循环进行自旋即可</span></span><br><span class=\"line\">            <span class=\"comment\">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerStarted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerAdded</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">Worker</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        w = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(firstTask);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> w.thread;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">            <span class=\"comment\">// worker的添加必须是串行的，因此需要加锁</span></span><br><span class=\"line\">            mainLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Recheck while holding lock.</span></span><br><span class=\"line\">                <span class=\"comment\">// Back out on ThreadFactory failure or if</span></span><br><span class=\"line\">                <span class=\"comment\">// shut down before lock acquired.</span></span><br><span class=\"line\">                <span class=\"comment\">// 这儿需要重新检查线程池状态</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(ctl.get());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs &lt; SHUTDOWN ||</span><br><span class=\"line\">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// worker已经调用过了start()方法，则不再创建worker</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.isAlive()) <span class=\"comment\">// precheck that t is startable</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\">                    <span class=\"comment\">// worker创建并添加到workers成功</span></span><br><span class=\"line\">                    workers.add(w);</span><br><span class=\"line\">                    <span class=\"comment\">// 更新`largestPoolSize`变量</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> workers.size();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s &gt; largestPoolSize)</span><br><span class=\"line\">                        largestPoolSize = s;</span><br><span class=\"line\">                    workerAdded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mainLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 启动worker线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerAdded) &#123;</span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">                workerStarted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// worker线程启动失败，说明线程池状态发生了变化（关闭操作被执行），需要进行shutdown相关操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! workerStarted)</span><br><span class=\"line\">            addWorkerFailed(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workerStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、线程池worker任务单元\"><a href=\"#5、线程池worker任务单元\" class=\"headerlink\" title=\"5、线程池worker任务单元\"></a>5、线程池worker任务单元</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This class will never be serialized, but we provide a</span></span><br><span class=\"line\"><span class=\"comment\">     * serialVersionUID to suppress a javac warning.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">6138294804551838833L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread thread;</span><br><span class=\"line\">    <span class=\"comment\">/** Initial task to run.  Possibly null. */</span></span><br><span class=\"line\">    Runnable firstTask;</span><br><span class=\"line\">    <span class=\"comment\">/** Per-thread task counter */</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> completedTasks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> firstTask the first task (null if none)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Worker(Runnable firstTask) &#123;</span><br><span class=\"line\">        setState(-<span class=\"number\">1</span>); <span class=\"comment\">// inhibit interrupts until runWorker</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstTask = firstTask;</span><br><span class=\"line\">        <span class=\"comment\">// 这儿是Worker的关键所在，使用了线程工厂创建了一个线程。传入的参数为当前worker</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.thread = getThreadFactory().newThread(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Delegates main run loop to outer runWorker  */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        runWorker(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、核心线程执行逻辑-runworker\"><a href=\"#6、核心线程执行逻辑-runworker\" class=\"headerlink\" title=\"6、核心线程执行逻辑-runworker\"></a>6、核心线程执行逻辑-runworker</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runWorker</span><span class=\"params\">(Worker w)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">wt</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> w.firstTask;</span><br><span class=\"line\">    w.firstTask = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用unlock()是为了让外部可以中断</span></span><br><span class=\"line\">    w.unlock(); <span class=\"comment\">// allow interrupts</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个变量用于判断是否进入过自旋（while循环）</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">completedAbruptly</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这儿是自旋</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 如果firstTask不为null，则执行firstTask；</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 如果firstTask为null，则调用getTask()从队列获取任务。</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 阻塞队列的特性就是：当队列为空时，当前线程会被阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (task != <span class=\"literal\">null</span> || (task = getTask()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这儿对worker进行加锁，是为了达到下面的目的</span></span><br><span class=\"line\">            <span class=\"comment\">// 1. 降低锁范围，提升性能</span></span><br><span class=\"line\">            <span class=\"comment\">// 2. 保证每个worker执行的任务是串行的</span></span><br><span class=\"line\">            w.lock();</span><br><span class=\"line\">            <span class=\"comment\">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class=\"line\">            <span class=\"comment\">// if not, ensure thread is not interrupted.  This</span></span><br><span class=\"line\">            <span class=\"comment\">// requires a recheck in second case to deal with</span></span><br><span class=\"line\">            <span class=\"comment\">// shutdownNow race while clearing interrupt</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果线程池正在停止，则对当前线程进行中断操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class=\"line\">                 (Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class=\"line\">                !wt.isInterrupted())</span><br><span class=\"line\">                wt.interrupt();</span><br><span class=\"line\">            <span class=\"comment\">// 执行任务，且在执行前后通过`beforeExecute()`和`afterExecute()`来扩展其功能。</span></span><br><span class=\"line\">            <span class=\"comment\">// 这两个方法在当前类里面为空实现。</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                beforeExecute(wt, task);</span><br><span class=\"line\">                <span class=\"type\">Throwable</span> <span class=\"variable\">thrown</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    afterExecute(task, thrown);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 帮助gc</span></span><br><span class=\"line\">                task = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 已完成任务数加一 </span></span><br><span class=\"line\">                w.completedTasks++;</span><br><span class=\"line\">                w.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        completedAbruptly = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自旋操作被退出，说明线程池正在结束</span></span><br><span class=\"line\">        processWorkerExit(w, completedAbruptly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、自建线程池注意点\"><a href=\"#7、自建线程池注意点\" class=\"headerlink\" title=\"7、自建线程池注意点\"></a>7、自建线程池注意点</h3><ul>\n<li><p>阻塞任务队列数</p>\n</li>\n<li><p>线程池的名字，最好跟业务相关</p>\n</li>\n<li><p>核心线程池大小，看业务实际情况。  </p>\n<p>一般情况：<strong>CPU核数+1</strong>,可以参考【线程数多少合适？】</p>\n</li>\n<li><p>最大线程池大小，看业务实际情况。</p>\n<p>一般情况：<strong>2*CPU核数+1</strong>,可以参考【线程数多少合适？】</p>\n</li>\n<li><p>拒绝策略，我个人一般都是记录log，如果主要的业务我会根据log做补偿。<br>比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(CPU核数 + <span class=\"number\">1</span>, <span class=\"number\">2</span> * CPU核数 + <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"number\">5</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">2000</span>),</span><br><span class=\"line\">         <span class=\"comment\">// 线程池名字pay-account</span></span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultThreadFactory</span>(<span class=\"string\">&quot;pay-account&quot;</span>), (r1, executor) -&gt; &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 记录log 重新入队列做补偿</span></span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n","cover":false,"excerpt":"","more":"<h1 id=\"一、概述\"><a href=\"#一、概述\" class=\"headerlink\" title=\"一、概述\"></a>一、概述</h1><h2 id=\"1、问题\"><a href=\"#1、问题\" class=\"headerlink\" title=\"1、问题\"></a>1、问题</h2><blockquote>\n<p>先看我们遇到的问题：我们创建线程的方式很简单，new Thread(() -&gt; {…})，就是因为这么简单粗暴的方式，才带来了致命的问题。首先线程的创建和销毁都是<strong>很耗时很浪费性能</strong>的操作，你用线程为了什么？为了就是异步，为了就是<strong>提升性能</strong>。简单的new三五个Thread还好，我需要一千个线程呢？你也for循环new1000个Thread吗？用完在销毁掉。那这一千个线程的创建和销毁的性能是很糟糕的！</p>\n</blockquote>\n<h2 id=\"2、解决\"><a href=\"#2、解决\" class=\"headerlink\" title=\"2、解决\"></a>2、解决</h2><blockquote>\n<p>为了解决上述问题，线程池诞生了，线程池的核心思想就是：<strong>线程复用</strong>。也就是说线程用完后不销毁，放到池子里等着新任务的到来，反复利用N个线程来执行所有新老任务。这带来的开销只会是那N个线程的创建，而不是每来一个请求都带来一个线程的从生到死的过程。</p>\n</blockquote>\n<h1 id=\"二、线程池\"><a href=\"#二、线程池\" class=\"headerlink\" title=\"二、线程池\"></a>二、线程池</h1><h2 id=\"1、概念\"><a href=\"#1、概念\" class=\"headerlink\" title=\"1、概念\"></a>1、概念</h2><p>还说个鸡儿，上面的问题解决方案已经很通俗易懂了。<br>针对特级小白我在举个生活的案例：</p>\n<blockquote>\n<p>比如找工作面试，涉及到两个角色：面试官、求职者。求职者成千上万，每来一个求职者都要为其单独新找一个面试官来面试吗？显然不是，公司都有面试官池子，比如：A、B、C你们三就是这公司的面试官了，有人来面试你们三轮流面就行了。可能不是很恰当，含义就是说我并不需要为每个请求（求职者）都单独分配一个新的线程（面试官） ，而是我固定好几个线程，由他们几个来处理所有请求。不会反复创建销毁。</p>\n</blockquote>\n<h2 id=\"2、参数\"><a href=\"#2、参数\" class=\"headerlink\" title=\"2、参数\"></a>2、参数</h2><h3 id=\"2-1、源码\"><a href=\"#2-1、源码\" class=\"headerlink\" title=\"2.1、源码\"></a>2.1、源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">    <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">    TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">    BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">    ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">    RejectedExecutionHandler handler)</span> &#123;&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-2、解释\"><a href=\"#2-2、解释\" class=\"headerlink\" title=\"2.2、解释\"></a>2.2、解释</h3><ul>\n<li><p><strong>corePoolSize</strong>：核心线程数  </p>\n<p> 线程池在完成初始化之后，默认情况下，线程池中不会有任何线程，线程池会等有任务来的时候再去创建线程。核心线程创建出来后即使超出了线程保持的存活时间配置也不会销毁，核心线程只要创建就永驻了，就等着新任务进来进行处理。</p>\n</li>\n<li><p><strong>maximumPoolSize</strong>：最大线程数  </p>\n<p> 核心线程忙不过来且任务存储队列满了的情况下，还有新任务进来的话就会继续开辟线程，但是也不是任意的开辟线程数量，线程数（包含核心线程）达到<strong>maximumPoolSize</strong>后就不会产生新线程了，就会执行拒绝策略。</p>\n</li>\n<li><p><strong>keepAliveTime</strong>：线程保持的存活时间</p>\n<p>如果线程池当前的线程数多于<strong>corePoolSize</strong>，那么如果多余的线程空闲时间超过<strong>keepAliveTime</strong>，那么这些多余的线程（超出核心线程数的那些线程）就会被回收。</p>\n</li>\n<li><p><strong>unit</strong>：线程保持的存活时间单位</p>\n<p>比如：TimeUnit.MILLISECONDS、TimeUnit.SECONDS</p>\n</li>\n<li><p><strong>workQueue</strong>：任务存储队列</p>\n<p>核心线程数满了后还有任务继续提交到线程池的话，就先进入workQueue。  </p>\n<p>workQueue通常情况下有如下选择：</p>\n<ul>\n<li><strong>LinkedBlockingQueue</strong>：无界队列，意味着无限制，其实是有限制，大小是int的最大值。也可以自定义大小。</li>\n<li><strong>ArrayBlockingQueue</strong>：有界队列，可以自定义大小，到了阈值就开启新线程（不会超过maximumPoolSize）。</li>\n<li><strong>SynchronousQueue</strong>：<strong>Executors.newCachedThreadPool()</strong>;默认使用的队列。也不算是个队列，他不没有存储元素的能力。</li>\n</ul>\n<p>一般都采取<strong>LinkedBlockingQueue</strong>，因为他也可以设置大小，可以取代<strong>ArrayBlockingQueue</strong>有界队列。</p>\n</li>\n<li><p><strong>threadFactory</strong>：当线程池需要新的线程时，会用<strong>threadFactory</strong>来生成新的线程</p>\n<p>默认采用的是<strong>DefaultThreadFactory</strong>，主要负责创建线程。newThread()方法。创建出来的线程都在同一个线程组且优先级也是一样的。</p>\n</li>\n<li><p><strong>handler</strong>：拒绝策略，任务量超出线程池的配置限制或执行shutdown还在继续提交任务的话，会执行handler的逻辑。</p>\n<p>默认采用的是<strong>AbortPolicy</strong>，遇到上面的情况，线程池将直接采取直接拒绝策略，也就是直接抛出异常<strong>RejectedExecutionException</strong></p>\n</li>\n</ul>\n<h2 id=\"3、原理\"><a href=\"#3、原理\" class=\"headerlink\" title=\"3、原理\"></a>3、原理</h2><h3 id=\"3-1、原理\"><a href=\"#3-1、原理\" class=\"headerlink\" title=\"3.1、原理\"></a>3.1、原理</h3><ul>\n<li><p>线程池刚启动的时候核心线程数为0</p>\n</li>\n<li><p>丢任务给线程池的时候，线程池会新开启线程来执行这个任务</p>\n</li>\n<li><p>如果线程数小于corePoolSize，即使工作线程处于空闲状态，也会创建一个新线程来执行新任务</p>\n</li>\n<li><p>如果线程数大于或等于corePoolSize，则会将任务放到workQueue，也就是任务队列</p>\n</li>\n<li><p>如果任务队列满了，且线程数小于maximumPoolSize，则会创建一个新线程来运行任务</p>\n</li>\n<li><p>如果任务队列满了，且线程数大于或等于maximumPoolSize，则直接采取拒绝策略</p>\n</li>\n</ul>\n<h3 id=\"3-2、图解\"><a href=\"#3-2、图解\" class=\"headerlink\" title=\"3.2、图解\"></a>3.2、图解</h3><p><img src=\"/./thread-pool/e0733727-92bd-4438-a628-3b3989d8e838.png\"></p>\n<h3 id=\"3-3、举例\"><a href=\"#3-3、举例\" class=\"headerlink\" title=\"3.3、举例\"></a>3.3、举例</h3><p>线程池参数配置：核心线程5个，最大线程数10个，队列长度为100。</p>\n<p>那么线程池启动的时候不会创建任何线程，假设请求进来6个，则会创建5个核心线程来处理五个请求，另一个没被处理到的进入到队列。这时候有进来99个请求，线程池发现核心线程满了，队列还在空着99个位置，所以会进入到队列里99个，加上刚才的1个正好100个。这时候再次进来5个请求，线程池会再次开辟五个非核心线程来处理这五个请求。目前的情况是线程池里线程数是10个RUNNING状态的，队列里100个也满了。如果这时候又进来1个请求，则直接走拒绝策略。</p>\n<h3 id=\"3-4、源码\"><a href=\"#3-4、源码\" class=\"headerlink\" title=\"3.4、源码\"></a>3.4、源码</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">    <span class=\"comment\">// workerCountOf(c)：工作线程数</span></span><br><span class=\"line\">    <span class=\"comment\">// worker数量比核心线程数小，直接创建worker执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// addWorker里面负责创建线程且执行任务</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// worker数量超过核心线程数，任务直接进入队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"comment\">// 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这儿有3点需要注意：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 线程池不是运行状态时，addWorker内部会判断线程池状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. addWorker第2个参数表示是否创建核心线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. addWorker返回false，则说明任务执行失败，需要执行reject操作</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"4、Executors\"><a href=\"#4、Executors\" class=\"headerlink\" title=\"4、Executors\"></a>4、Executors</h2><h3 id=\"4-1、概念\"><a href=\"#4-1、概念\" class=\"headerlink\" title=\"4.1、概念\"></a>4.1、概念</h3><p>首先这不是一个线程池，这是线程池的工具类，他能方便的为我们创建线程。</p>\n<p>但是阿里巴巴开发手册上说明不推荐用Executors创建线程池，推荐自己定义线程池。这是因为Executors创建的任何一种线程池都可能引发血案，具体是什么问题下面会说。</p>\n<h3 id=\"4-2、固定线程数\"><a href=\"#4-2、固定线程数\" class=\"headerlink\" title=\"4.2、固定线程数\"></a>4.2、固定线程数</h3><h4 id=\"4-2-1、描述\"><a href=\"#4-2-1、描述\" class=\"headerlink\" title=\"4.2.1、描述\"></a>4.2.1、描述</h4><p>核心线程数和最大线程数是一样的，所以称之为固定线程数。</p>\n<p>其他参数配置默认为：永不超时（0ms），无界队列（<strong>LinkedBlockingQueue</strong>）、默认线程工厂（<strong>DefaultThreadFactory</strong>）、直接拒绝策略（<strong>AbortPolicy</strong>）。</p>\n<h4 id=\"4-2-2、api\"><a href=\"#4-2-2、api\" class=\"headerlink\" title=\"4.2.2、api\"></a>4.2.2、api</h4><p><strong>Executors.newFixedThreadPool(n);</strong></p>\n<h4 id=\"4-2-3、demo\"><a href=\"#4-2-3、demo\" class=\"headerlink\" title=\"4.2.3、demo\"></a>4.2.3、demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建2个线程来执行10个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newFixedThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从结果中可以发现线程name永远都是两个。不会有第三个。</span></span><br><span class=\"line\">            executorService.execute(() -&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-2-4、问题\"><a href=\"#4-2-4、问题\" class=\"headerlink\" title=\"4.2.4、问题\"></a>4.2.4、问题</h4><p>问题就在于它是<strong>无界队列</strong>，队列里能放int的最大值个任务，并发巨高的情况下极大可能直接OOM了然后任务还在堆积，毕竟直接用的是jvm内存。所以建议自定义线程池，自己按照需求指定合适的队列大小，自定义拒绝策略将超出队列大小的任务放到对外内存做补偿，比如Redis。别把业务系统压垮就行。</p>\n<h4 id=\"4-2-5、源码\"><a href=\"#4-2-5、源码\" class=\"headerlink\" title=\"4.2.5、源码\"></a>4.2.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newFixedThreadPool</span><span class=\"params\">(<span class=\"type\">int</span> nThreads)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"comment\">// 核心线程数和最大线程数都是nThreads</span></span><br><span class=\"line\">                nThreads, nThreads,</span><br><span class=\"line\">                                  <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                                  <span class=\"comment\">// 无界队列！！！致命问题的关键所在。</span></span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3、单个线程\"><a href=\"#4-3、单个线程\" class=\"headerlink\" title=\"4.3、单个线程\"></a>4.3、单个线程</h3><h4 id=\"4-3-1、描述\"><a href=\"#4-3-1、描述\" class=\"headerlink\" title=\"4.3.1、描述\"></a>4.3.1、描述</h4><p>核心线程数和最大线程数是1，内部默认的，不可更改，所以称之为单线程数的线程池。</p>\n<p>类似于<strong>Executors.newFixedThreadPool(1)</strong>;</p>\n<p>其他参数配置默认为：永不超时（0ms），无界队列（<strong>LinkedBlockingQueue</strong>）、默认线程工厂（<strong>DefaultThreadFactory</strong>）、直接拒绝策略（<strong>AbortPolicy</strong>）。</p>\n<h4 id=\"4-3-2、api\"><a href=\"#4-3-2、api\" class=\"headerlink\" title=\"4.3.2、api\"></a>4.3.2、api</h4><p><strong>Executors.newSingleThreadExecutor();</strong></p>\n<h4 id=\"4-3-3、demo\"><a href=\"#4-3-3、demo\" class=\"headerlink\" title=\"4.3.3、demo\"></a>4.3.3、demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建1个线程来执行10个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newSingleThreadExecutor();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从结果中可以发现线程name永远都是pool-1-thread-1。不会有第二个出现。</span></span><br><span class=\"line\">            executorService.execute(() -&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-3-4、问题\"><a href=\"#4-3-4、问题\" class=\"headerlink\" title=\"4.3.4、问题\"></a>4.3.4、问题</h4><p>同【4.2、固定线程数】的问题，都是无界队列惹的祸。</p>\n<h4 id=\"4-3-5、源码\"><a href=\"#4-3-5、源码\" class=\"headerlink\" title=\"4.3.5、源码\"></a>4.3.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newSingleThreadExecutor</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">FinalizableDelegatedExecutorService</span></span><br><span class=\"line\">        (<span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">        <span class=\"comment\">// 核心线程数和最大线程数都是1，写死的，客户端不可更改。</span></span><br><span class=\"line\">                 <span class=\"number\">1</span>, <span class=\"number\">1</span>,</span><br><span class=\"line\">                                <span class=\"number\">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class=\"line\">                 <span class=\"comment\">// 无界队列！！！致命问题的关键所在。</span></span><br><span class=\"line\">                                <span class=\"keyword\">new</span> <span class=\"title class_\">LinkedBlockingQueue</span>&lt;Runnable&gt;()));</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-4、带缓存的线程池\"><a href=\"#4-4、带缓存的线程池\" class=\"headerlink\" title=\"4.4、带缓存的线程池\"></a>4.4、带缓存的线程池</h3><h4 id=\"4-4-1、描述\"><a href=\"#4-4-1、描述\" class=\"headerlink\" title=\"4.4.1、描述\"></a>4.4.1、描述</h4><p>他的功能是来个任务我就开辟个线程去处理，不会进入队列，<strong>SynchronousQueue</strong>队列也不带存储元素的功能。那这意味着来一亿个请求就会开辟一亿个线程去处理，<strong>keepAliveTime</strong>为60S，意味着线程空闲时间超过60S就会被杀死；这就叫带缓存功能的线程池。</p>\n<p>核心线程数是0，最大线程数是int的最大值，内部默认的，不可更改。</p>\n<p>其他参数配置默认为：1min超时（60s），<strong>SynchronousQueue队列</strong>、默认线程工厂（<strong>DefaultThreadFactory</strong>）、直接拒绝策略（<strong>AbortPolicy</strong>）。</p>\n<h4 id=\"4-4-2、api\"><a href=\"#4-4-2、api\" class=\"headerlink\" title=\"4.4.2、api\"></a>4.4.2、api</h4><p><strong>Executors.newCachedThreadPool();</strong></p>\n<h4 id=\"4-4-3、demo\"><a href=\"#4-4-3、demo\" class=\"headerlink\" title=\"4.4.3、demo\"></a>4.4.3、demo</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建个带缓存功能的线程池来执行10个任务。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> TongWei.Chen 2020-07-09 21:28:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ExecutorService</span> <span class=\"variable\">executorService</span> <span class=\"operator\">=</span> Executors.newCachedThreadPool();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 从结果中可以发现线程name有10个。也就是有几个任务就会开辟几个线程。</span></span><br><span class=\"line\">            executorService.execute(() -&gt; System.out.println(Thread.currentThread().getName()));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-4-4、问题\"><a href=\"#4-4-4、问题\" class=\"headerlink\" title=\"4.4.4、问题\"></a>4.4.4、问题</h4><p>问题就在于他的最大线程数是int的最大值，因为他内部采取的队列是<strong>SynchronousQueue</strong>，这个队列没有容纳元素的能力，这将意味着只要来请求我就开启线程去工作，巅峰期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！</p>\n<h4 id=\"4-4-5、源码\"><a href=\"#4-4-5、源码\" class=\"headerlink\" title=\"4.4.5、源码\"></a>4.4.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ExecutorService <span class=\"title function_\">newCachedThreadPool</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(</span><br><span class=\"line\">                <span class=\"comment\">// 核心线程数是0，最大线程数都是Integer.MAX_VALUE，这个可致命了！！！</span></span><br><span class=\"line\">                <span class=\"number\">0</span>, Integer.MAX_VALUE,</span><br><span class=\"line\">                                  <span class=\"number\">60L</span>, TimeUnit.SECONDS,</span><br><span class=\"line\">                                  <span class=\"keyword\">new</span> <span class=\"title class_\">SynchronousQueue</span>&lt;Runnable&gt;());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">````</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">###  <span class=\"number\">4.5</span>、有调度功能的线程池</span><br><span class=\"line\">#### <span class=\"number\">4.5</span><span class=\"number\">.1</span>、描述</span><br><span class=\"line\">RocketMQ内部大量采用了此种线程池来做心跳等任务。</span><br><span class=\"line\"></span><br><span class=\"line\">核心线程数手动传进来，最大线程数是Integer.MAX_VALUE，最大线程数是内部默认的，不可更改。</span><br><span class=\"line\">其他参数配置默认为：永不超时（0ns），带延迟功能的队列（**DelayedWorkQueue**）、默认线程工厂（**DefaultThreadFactory**）、直接拒绝策略（**AbortPolicy**）。</span><br><span class=\"line\"></span><br><span class=\"line\">#### <span class=\"number\">4.5</span><span class=\"number\">.2</span>、api</span><br><span class=\"line\">**Executors.newScheduledThreadPool(n);**</span><br><span class=\"line\">#### <span class=\"number\">4.5</span><span class=\"number\">.3</span>、demo</span><br><span class=\"line\">``` java </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutorService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.Executors;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Description: 创建个带调度功能的线程池来执行任务。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> TongWei.Chen 2020-07-09 21:28:34</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPoolTest</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ScheduledExecutorService</span> <span class=\"variable\">scheduledExecutorService</span> <span class=\"operator\">=</span> Executors.newScheduledThreadPool(<span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 五秒一次</span></span><br><span class=\"line\">        scheduledExecutorService.schedule(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">        <span class=\"comment\">// 首次五秒后执行，其次每隔1s执行一次</span></span><br><span class=\"line\">        scheduledExecutorService.scheduleAtFixedRate(() -&gt; System.out.println(Thread.currentThread().getName()), <span class=\"number\">5</span>, <span class=\"number\">1</span>, TimeUnit.SECONDS);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-5-4、问题\"><a href=\"#4-5-4、问题\" class=\"headerlink\" title=\"4.5.4、问题\"></a>4.5.4、问题</h4><p>【同4.4、带缓存的线程池的问题】</p>\n<p>问题就在于他的最大线程数是int的最大值，这将意味海量并发期能创建二十几亿个线程出来工作，你自己想想多么可怕！！！</p>\n<h4 id=\"4-5-5、源码\"><a href=\"#4-5-5、源码\" class=\"headerlink\" title=\"4.5.5、源码\"></a>4.5.5、源码</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ScheduledThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 致命的问题跟newCachedThreadPool一样，最大线程数能开到几十亿（Integer.MAX_VALUE）！！！</span></span><br><span class=\"line\">    <span class=\"built_in\">super</span>(corePoolSize, Integer.MAX_VALUE, <span class=\"number\">0</span>, NANOSECONDS,</span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">DelayedWorkQueue</span>());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-6、停止线程\"><a href=\"#4-6、停止线程\" class=\"headerlink\" title=\"4.6、停止线程\"></a>4.6、停止线程</h2><h3 id=\"4-6-1、shutdown\"><a href=\"#4-6-1、shutdown\" class=\"headerlink\" title=\"4.6.1、shutdown\"></a>4.6.1、shutdown</h3><p>平缓的结束线程池，比如当前线程池还在执行任务，还没执行完，这时候执行了shutdown的话，线程池并不会立即停止工作，而是会等待线程池中的任务都执行完成后才会shutdown掉，但是如果执行shutdown了，外界还在继续提交任务到线程池，那么线程池会直接采取拒绝策略。</p>\n<h3 id=\"4-6-2、isShutdown\"><a href=\"#4-6-2、isShutdown\" class=\"headerlink\" title=\"4.6.2、isShutdown\"></a>4.6.2、isShutdown</h3><p>判断线程池是否已经shutdown。</p>\n<h3 id=\"4-6-3、shutdownNow\"><a href=\"#4-6-3、shutdownNow\" class=\"headerlink\" title=\"4.6.3、shutdownNow\"></a>4.6.3、shutdownNow</h3><p>暴力结束线程池。不管你当前线程池有没有任务在执行，队列里有没有堆积消息，我都直接让线程池挂掉。但是他的返回值是队列里那些未被执行的任务。有需要的可以记录下log啥的。</p>\n<h3 id=\"4-7、疑问\"><a href=\"#4-7、疑问\" class=\"headerlink\" title=\"4.7、疑问\"></a>4.7、疑问</h3><p>这几种线程池为什么要采取不一样的队列？比如<strong>newFixedThreadPool</strong>为什么采取<strong>LinkedBlockingQueue</strong>，而<strong>newCachedThreadPool</strong>又为什么采取<strong>SynchronousQueue</strong>？</p>\n<p>因为<strong>newFixedThreadPool</strong>线程数量有限，他又不想丢失任务，只能采取无界队列，而<strong>newCachedThreadPool</strong>的话本身自带int最大值个线程数，所以没必要用无界队列，他的宗旨就是我有线程能处理，不需要队列。</p>\n<h2 id=\"5、总结几个问题\"><a href=\"#5、总结几个问题\" class=\"headerlink\" title=\"5、总结几个问题\"></a>5、总结几个问题</h2><h3 id=\"1、线程池的状态\"><a href=\"#1、线程池的状态\" class=\"headerlink\" title=\"1、线程池的状态\"></a>1、线程池的状态</h3><ul>\n<li>RUNNING：接受新任务并处理排队任务。</li>\n<li>SHUTDOWN：不接受新任务，但是会处理排队任务。【见：停止线程的4.6.1、shutdown】</li>\n<li>STOP：不接受新任务，也不处理排队任务，并中端正在进行的任务。</li>\n<li>TIDYING：所有任务都已经完事，工作线程为0的时候 ，线程会进入这个状态并执行terminate()钩子方法。</li>\n<li>TERMINATED：terminate()钩子方法运行完成。</li>\n</ul>\n<h3 id=\"2、线程池自动创建还是手动？\"><a href=\"#2、线程池自动创建还是手动？\" class=\"headerlink\" title=\"2、线程池自动创建还是手动？\"></a>2、线程池自动创建还是手动？</h3><p>那肯定是手动了，因为Executors自动创建的那些线程池都存在致命的问题。手动创建线程池我们能自己控制线程数大小以及队列大小，还可以指定组名称等等个性化配置。重点不会出现致命问题，风险都把控在我们手里。</p>\n<h3 id=\"3、线程数多少合适？\"><a href=\"#3、线程数多少合适？\" class=\"headerlink\" title=\"3、线程数多少合适？\"></a>3、线程数多少合适？</h3><p>CPU密集型（比如加密、各种复杂计算等）：建议设置为CPU核数+1。<br>耗时IO操作（比如读写数据库，压缩解压缩大文件等等）：一般会设置CPU核数的2倍。当然也有个很牛X的计算公式：线程数&#x3D;CPU核数 *（1+平均等待时间&#x2F;平均工作时间）</p>\n<h3 id=\"4、before-after\"><a href=\"#4、before-after\" class=\"headerlink\" title=\"4、before&amp;after\"></a>4、before&amp;after</h3><p>在线程执行前后可以通过两个方法来进行打印log或其他工作。<br>源码如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 执行前的before</span></span><br><span class=\"line\">beforeExecute(wt, task);</span><br><span class=\"line\"><span class=\"type\">Throwable</span> <span class=\"variable\">thrown</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 真正执行</span></span><br><span class=\"line\">    task.run();</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(x);</span><br><span class=\"line\">&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 执行完成后after</span></span><br><span class=\"line\">    afterExecute(task, thrown);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6、核心源码（全）\"><a href=\"#6、核心源码（全）\" class=\"headerlink\" title=\"6、核心源码（全）\"></a>6、核心源码（全）</h2><h3 id=\"1、常用变量的解释\"><a href=\"#1、常用变量的解释\" class=\"headerlink\" title=\"1、常用变量的解释\"></a>1、常用变量的解释</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1. `ctl`，可以看做一个int类型的数字，高3位表示线程池状态，低29位表示worker数量</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"type\">AtomicInteger</span> <span class=\"variable\">ctl</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">AtomicInteger</span>(ctlOf(RUNNING, <span class=\"number\">0</span>));</span><br><span class=\"line\"><span class=\"comment\">// 2. `COUNT_BITS`，`Integer.SIZE`为32，所以`COUNT_BITS`为29</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">COUNT_BITS</span> <span class=\"operator\">=</span> Integer.SIZE - <span class=\"number\">3</span>;</span><br><span class=\"line\"><span class=\"comment\">// 3. `CAPACITY`，线程池允许的最大线程数。1左移29位，然后减1，即为 2^29 - 1</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">CAPACITY</span>   <span class=\"operator\">=</span> (<span class=\"number\">1</span> &lt;&lt; COUNT_BITS) - <span class=\"number\">1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// runState is stored in the high-order bits</span></span><br><span class=\"line\"><span class=\"comment\">// 4. 线程池有5种状态，按大小排序如下：RUNNING &lt; SHUTDOWN &lt; STOP &lt; TIDYING &lt; TERMINATED</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">RUNNING</span>    <span class=\"operator\">=</span> -<span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">SHUTDOWN</span>   <span class=\"operator\">=</span>  <span class=\"number\">0</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">STOP</span>       <span class=\"operator\">=</span>  <span class=\"number\">1</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TIDYING</span>    <span class=\"operator\">=</span>  <span class=\"number\">2</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">TERMINATED</span> <span class=\"operator\">=</span>  <span class=\"number\">3</span> &lt;&lt; COUNT_BITS;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Packing and unpacking ctl</span></span><br><span class=\"line\"><span class=\"comment\">// 5. `runStateOf()`，获取线程池状态，通过按位与操作，低29位将全部变成0</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">runStateOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>     &#123; <span class=\"keyword\">return</span> c &amp; ~CAPACITY; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 6. `workerCountOf()`，获取线程池worker数量，通过按位与操作，高3位将全部变成0</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">workerCountOf</span><span class=\"params\">(<span class=\"type\">int</span> c)</span>  &#123; <span class=\"keyword\">return</span> c &amp; CAPACITY; &#125;</span><br><span class=\"line\"><span class=\"comment\">// 7. `ctlOf()`，根据线程池状态和线程池worker数量，生成ctl值</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">ctlOf</span><span class=\"params\">(<span class=\"type\">int</span> rs, <span class=\"type\">int</span> wc)</span> &#123; <span class=\"keyword\">return</span> rs | wc; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * Bit field accessors that don&#x27;t require unpacking ctl.</span></span><br><span class=\"line\"><span class=\"comment\"> * These depend on the bit layout and on workerCount being never negative.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"comment\">// 8. `runStateLessThan()`，线程池状态小于xx</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateLessThan</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c &lt; s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 9. `runStateAtLeast()`，线程池状态大于等于xx</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">boolean</span> <span class=\"title function_\">runStateAtLeast</span><span class=\"params\">(<span class=\"type\">int</span> c, <span class=\"type\">int</span> s)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> c &gt;= s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2、构造方法\"><a href=\"#2、构造方法\" class=\"headerlink\" title=\"2、构造方法\"></a>2、构造方法</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">ThreadPoolExecutor</span><span class=\"params\">(<span class=\"type\">int</span> corePoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">int</span> maximumPoolSize,</span></span><br><span class=\"line\"><span class=\"params\">                          <span class=\"type\">long</span> keepAliveTime,</span></span><br><span class=\"line\"><span class=\"params\">                          TimeUnit unit,</span></span><br><span class=\"line\"><span class=\"params\">                          BlockingQueue&lt;Runnable&gt; workQueue,</span></span><br><span class=\"line\"><span class=\"params\">                          ThreadFactory threadFactory,</span></span><br><span class=\"line\"><span class=\"params\">                          RejectedExecutionHandler handler)</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 基本类型参数校验</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (corePoolSize &lt; <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt;= <span class=\"number\">0</span> ||</span><br><span class=\"line\">        maximumPoolSize &lt; corePoolSize ||</span><br><span class=\"line\">        keepAliveTime &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalArgumentException</span>();</span><br><span class=\"line\">    <span class=\"comment\">// 空指针校验</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workQueue == <span class=\"literal\">null</span> || threadFactory == <span class=\"literal\">null</span> || handler == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.corePoolSize = corePoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.maximumPoolSize = maximumPoolSize;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.workQueue = workQueue;</span><br><span class=\"line\">    <span class=\"comment\">// 根据传入参数`unit`和`keepAliveTime`，将存活时间转换为纳秒存到变量`keepAliveTime `中</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.keepAliveTime = unit.toNanos(keepAliveTime);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.threadFactory = threadFactory;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.handler = handler;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3、提交执行task的过程\"><a href=\"#3、提交执行task的过程\" class=\"headerlink\" title=\"3、提交执行task的过程\"></a>3、提交执行task的过程</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">execute</span><span class=\"params\">(Runnable command)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (command == <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>();</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Proceed in 3 steps:</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 1. If fewer than corePoolSize threads are running, try to</span></span><br><span class=\"line\"><span class=\"comment\">     * start a new thread with the given command as its first</span></span><br><span class=\"line\"><span class=\"comment\">     * task.  The call to addWorker atomically checks runState and</span></span><br><span class=\"line\"><span class=\"comment\">     * workerCount, and so prevents false alarms that would add</span></span><br><span class=\"line\"><span class=\"comment\">     * threads when it shouldn&#x27;t, by returning false.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 2. If a task can be successfully queued, then we still need</span></span><br><span class=\"line\"><span class=\"comment\">     * to double-check whether we should have added a thread</span></span><br><span class=\"line\"><span class=\"comment\">     * (because existing ones died since last checking) or that</span></span><br><span class=\"line\"><span class=\"comment\">     * the pool shut down since entry into this method. So we</span></span><br><span class=\"line\"><span class=\"comment\">     * recheck state and if necessary roll back the enqueuing if</span></span><br><span class=\"line\"><span class=\"comment\">     * stopped, or start a new thread if there are none.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * 3. If we cannot queue task, then we try to add a new</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.  If it fails, we know we are shut down or saturated</span></span><br><span class=\"line\"><span class=\"comment\">     * and so reject the task.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">    <span class=\"comment\">// worker数量比核心线程数小，直接创建worker执行任务</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (workerCountOf(c) &lt; corePoolSize) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (addWorker(command, <span class=\"literal\">true</span>))</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        c = ctl.get();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// worker数量超过核心线程数，任务直接进入队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (isRunning(c) &amp;&amp; workQueue.offer(command)) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">recheck</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"comment\">// 线程池状态不是RUNNING状态，说明执行过shutdown命令，需要对新加入的任务执行reject()操作。</span></span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要recheck，是因为任务入队列前后，线程池的状态可能会发生变化。</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! isRunning(recheck) &amp;&amp; remove(command))</span><br><span class=\"line\">            reject(command);</span><br><span class=\"line\">        <span class=\"comment\">// 这儿为什么需要判断0值，主要是在线程池构造方法中，核心线程数允许为0</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (workerCountOf(recheck) == <span class=\"number\">0</span>)</span><br><span class=\"line\">            addWorker(<span class=\"literal\">null</span>, <span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 如果线程池不是运行状态，或者任务进入队列失败，则尝试创建worker执行任务。</span></span><br><span class=\"line\">    <span class=\"comment\">// 这儿有3点需要注意：</span></span><br><span class=\"line\">    <span class=\"comment\">// 1. 线程池不是运行状态时，addWorker内部会判断线程池状态</span></span><br><span class=\"line\">    <span class=\"comment\">// 2. addWorker第2个参数表示是否创建核心线程</span></span><br><span class=\"line\">    <span class=\"comment\">// 3. addWorker返回false，则说明任务执行失败，需要执行reject操作</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (!addWorker(command, <span class=\"literal\">false</span>))</span><br><span class=\"line\">        reject(command);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4、addworker源码解析\"><a href=\"#4、addworker源码解析\" class=\"headerlink\" title=\"4、addworker源码解析\"></a>4、addworker源码解析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"type\">boolean</span> <span class=\"title function_\">addWorker</span><span class=\"params\">(Runnable firstTask, <span class=\"type\">boolean</span> core)</span> &#123;</span><br><span class=\"line\">    retry:</span><br><span class=\"line\">    <span class=\"comment\">// 外层自旋</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">c</span> <span class=\"operator\">=</span> ctl.get();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(c);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这个条件写得比较难懂，我对其进行了调整，和下面的条件等价</span></span><br><span class=\"line\">        <span class=\"comment\">// (rs &gt; SHUTDOWN) || </span></span><br><span class=\"line\">        <span class=\"comment\">// (rs == SHUTDOWN &amp;&amp; firstTask != null) || </span></span><br><span class=\"line\">        <span class=\"comment\">// (rs == SHUTDOWN &amp;&amp; workQueue.isEmpty())</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 线程池状态大于SHUTDOWN时，直接返回false</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 线程池状态等于SHUTDOWN，且firstTask不为null，直接返回false</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 线程池状态等于SHUTDOWN，且队列为空，直接返回false</span></span><br><span class=\"line\">        <span class=\"comment\">// Check if queue empty only if necessary.</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rs &gt;= SHUTDOWN &amp;&amp;</span><br><span class=\"line\">            ! (rs == SHUTDOWN &amp;&amp;</span><br><span class=\"line\">               firstTask == <span class=\"literal\">null</span> &amp;&amp;</span><br><span class=\"line\">               ! workQueue.isEmpty()))</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 内层自旋</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">wc</span> <span class=\"operator\">=</span> workerCountOf(c);</span><br><span class=\"line\">            <span class=\"comment\">// worker数量超过容量，直接返回false</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (wc &gt;= CAPACITY ||</span><br><span class=\"line\">                wc &gt;= (core ? corePoolSize : maximumPoolSize))</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            <span class=\"comment\">// 使用CAS的方式增加worker数量。</span></span><br><span class=\"line\">            <span class=\"comment\">// 若增加成功，则直接跳出外层循环进入到第二部分</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (compareAndIncrementWorkerCount(c))</span><br><span class=\"line\">                <span class=\"keyword\">break</span> retry;</span><br><span class=\"line\">            c = ctl.get();  <span class=\"comment\">// Re-read ctl</span></span><br><span class=\"line\">            <span class=\"comment\">// 线程池状态发生变化，对外层循环进行自旋</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (runStateOf(c) != rs)</span><br><span class=\"line\">                <span class=\"keyword\">continue</span> retry;</span><br><span class=\"line\">            <span class=\"comment\">// 其他情况，直接内层循环进行自旋即可</span></span><br><span class=\"line\">            <span class=\"comment\">// else CAS failed due to workerCount change; retry inner loop</span></span><br><span class=\"line\">        &#125; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerStarted</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">workerAdded</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">Worker</span> <span class=\"variable\">w</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        w = <span class=\"keyword\">new</span> <span class=\"title class_\">Worker</span>(firstTask);</span><br><span class=\"line\">        <span class=\"keyword\">final</span> <span class=\"type\">Thread</span> <span class=\"variable\">t</span> <span class=\"operator\">=</span> w.thread;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (t != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">final</span> <span class=\"type\">ReentrantLock</span> <span class=\"variable\">mainLock</span> <span class=\"operator\">=</span> <span class=\"built_in\">this</span>.mainLock;</span><br><span class=\"line\">            <span class=\"comment\">// worker的添加必须是串行的，因此需要加锁</span></span><br><span class=\"line\">            mainLock.lock();</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Recheck while holding lock.</span></span><br><span class=\"line\">                <span class=\"comment\">// Back out on ThreadFactory failure or if</span></span><br><span class=\"line\">                <span class=\"comment\">// shut down before lock acquired.</span></span><br><span class=\"line\">                <span class=\"comment\">// 这儿需要重新检查线程池状态</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">rs</span> <span class=\"operator\">=</span> runStateOf(ctl.get());</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (rs &lt; SHUTDOWN ||</span><br><span class=\"line\">                    (rs == SHUTDOWN &amp;&amp; firstTask == <span class=\"literal\">null</span>)) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">// worker已经调用过了start()方法，则不再创建worker</span></span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (t.isAlive()) <span class=\"comment\">// precheck that t is startable</span></span><br><span class=\"line\">                        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\">                    <span class=\"comment\">// worker创建并添加到workers成功</span></span><br><span class=\"line\">                    workers.add(w);</span><br><span class=\"line\">                    <span class=\"comment\">// 更新`largestPoolSize`变量</span></span><br><span class=\"line\">                    <span class=\"type\">int</span> <span class=\"variable\">s</span> <span class=\"operator\">=</span> workers.size();</span><br><span class=\"line\">                    <span class=\"keyword\">if</span> (s &gt; largestPoolSize)</span><br><span class=\"line\">                        largestPoolSize = s;</span><br><span class=\"line\">                    workerAdded = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                mainLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">// 启动worker线程</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (workerAdded) &#123;</span><br><span class=\"line\">                t.start();</span><br><span class=\"line\">                workerStarted = <span class=\"literal\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// worker线程启动失败，说明线程池状态发生了变化（关闭操作被执行），需要进行shutdown相关操作</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (! workerStarted)</span><br><span class=\"line\">            addWorkerFailed(w);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> workerStarted;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"5、线程池worker任务单元\"><a href=\"#5、线程池worker任务单元\" class=\"headerlink\" title=\"5、线程池worker任务单元\"></a>5、线程池worker任务单元</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Worker</span></span><br><span class=\"line\">    <span class=\"keyword\">extends</span> <span class=\"title class_\">AbstractQueuedSynchronizer</span></span><br><span class=\"line\">    <span class=\"keyword\">implements</span> <span class=\"title class_\">Runnable</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * This class will never be serialized, but we provide a</span></span><br><span class=\"line\"><span class=\"comment\">     * serialVersionUID to suppress a javac warning.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">long</span> <span class=\"variable\">serialVersionUID</span> <span class=\"operator\">=</span> <span class=\"number\">6138294804551838833L</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Thread this worker is running in.  Null if factory fails. */</span></span><br><span class=\"line\">    <span class=\"keyword\">final</span> Thread thread;</span><br><span class=\"line\">    <span class=\"comment\">/** Initial task to run.  Possibly null. */</span></span><br><span class=\"line\">    Runnable firstTask;</span><br><span class=\"line\">    <span class=\"comment\">/** Per-thread task counter */</span></span><br><span class=\"line\">    <span class=\"keyword\">volatile</span> <span class=\"type\">long</span> completedTasks;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Creates with given first task and thread from ThreadFactory.</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> firstTask the first task (null if none)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    Worker(Runnable firstTask) &#123;</span><br><span class=\"line\">        setState(-<span class=\"number\">1</span>); <span class=\"comment\">// inhibit interrupts until runWorker</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.firstTask = firstTask;</span><br><span class=\"line\">        <span class=\"comment\">// 这儿是Worker的关键所在，使用了线程工厂创建了一个线程。传入的参数为当前worker</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.thread = getThreadFactory().newThread(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/** Delegates main run loop to outer runWorker  */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        runWorker(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略代码...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"6、核心线程执行逻辑-runworker\"><a href=\"#6、核心线程执行逻辑-runworker\" class=\"headerlink\" title=\"6、核心线程执行逻辑-runworker\"></a>6、核心线程执行逻辑-runworker</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">final</span> <span class=\"keyword\">void</span> <span class=\"title function_\">runWorker</span><span class=\"params\">(Worker w)</span> &#123;</span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">wt</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">    <span class=\"type\">Runnable</span> <span class=\"variable\">task</span> <span class=\"operator\">=</span> w.firstTask;</span><br><span class=\"line\">    w.firstTask = <span class=\"literal\">null</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 调用unlock()是为了让外部可以中断</span></span><br><span class=\"line\">    w.unlock(); <span class=\"comment\">// allow interrupts</span></span><br><span class=\"line\">    <span class=\"comment\">// 这个变量用于判断是否进入过自旋（while循环）</span></span><br><span class=\"line\">    <span class=\"type\">boolean</span> <span class=\"variable\">completedAbruptly</span> <span class=\"operator\">=</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 这儿是自旋</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. 如果firstTask不为null，则执行firstTask；</span></span><br><span class=\"line\">        <span class=\"comment\">// 2. 如果firstTask为null，则调用getTask()从队列获取任务。</span></span><br><span class=\"line\">        <span class=\"comment\">// 3. 阻塞队列的特性就是：当队列为空时，当前线程会被阻塞等待</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (task != <span class=\"literal\">null</span> || (task = getTask()) != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 这儿对worker进行加锁，是为了达到下面的目的</span></span><br><span class=\"line\">            <span class=\"comment\">// 1. 降低锁范围，提升性能</span></span><br><span class=\"line\">            <span class=\"comment\">// 2. 保证每个worker执行的任务是串行的</span></span><br><span class=\"line\">            w.lock();</span><br><span class=\"line\">            <span class=\"comment\">// If pool is stopping, ensure thread is interrupted;</span></span><br><span class=\"line\">            <span class=\"comment\">// if not, ensure thread is not interrupted.  This</span></span><br><span class=\"line\">            <span class=\"comment\">// requires a recheck in second case to deal with</span></span><br><span class=\"line\">            <span class=\"comment\">// shutdownNow race while clearing interrupt</span></span><br><span class=\"line\">            <span class=\"comment\">// 如果线程池正在停止，则对当前线程进行中断操作</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> ((runStateAtLeast(ctl.get(), STOP) ||</span><br><span class=\"line\">                 (Thread.interrupted() &amp;&amp;</span><br><span class=\"line\">                  runStateAtLeast(ctl.get(), STOP))) &amp;&amp;</span><br><span class=\"line\">                !wt.isInterrupted())</span><br><span class=\"line\">                wt.interrupt();</span><br><span class=\"line\">            <span class=\"comment\">// 执行任务，且在执行前后通过`beforeExecute()`和`afterExecute()`来扩展其功能。</span></span><br><span class=\"line\">            <span class=\"comment\">// 这两个方法在当前类里面为空实现。</span></span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                beforeExecute(wt, task);</span><br><span class=\"line\">                <span class=\"type\">Throwable</span> <span class=\"variable\">thrown</span> <span class=\"operator\">=</span> <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    task.run();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (RuntimeException x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Error x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> x;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (Throwable x) &#123;</span><br><span class=\"line\">                    thrown = x; <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Error</span>(x);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                    afterExecute(task, thrown);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 帮助gc</span></span><br><span class=\"line\">                task = <span class=\"literal\">null</span>;</span><br><span class=\"line\">                <span class=\"comment\">// 已完成任务数加一 </span></span><br><span class=\"line\">                w.completedTasks++;</span><br><span class=\"line\">                w.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        completedAbruptly = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 自旋操作被退出，说明线程池正在结束</span></span><br><span class=\"line\">        processWorkerExit(w, completedAbruptly);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7、自建线程池注意点\"><a href=\"#7、自建线程池注意点\" class=\"headerlink\" title=\"7、自建线程池注意点\"></a>7、自建线程池注意点</h3><ul>\n<li><p>阻塞任务队列数</p>\n</li>\n<li><p>线程池的名字，最好跟业务相关</p>\n</li>\n<li><p>核心线程池大小，看业务实际情况。  </p>\n<p>一般情况：<strong>CPU核数+1</strong>,可以参考【线程数多少合适？】</p>\n</li>\n<li><p>最大线程池大小，看业务实际情况。</p>\n<p>一般情况：<strong>2*CPU核数+1</strong>,可以参考【线程数多少合适？】</p>\n</li>\n<li><p>拒绝策略，我个人一般都是记录log，如果主要的业务我会根据log做补偿。<br>比如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">ThreadPoolExecutor</span> <span class=\"variable\">executor</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadPoolExecutor</span>(CPU核数 + <span class=\"number\">1</span>, <span class=\"number\">2</span> * CPU核数 + <span class=\"number\">1</span>,</span><br><span class=\"line\">      <span class=\"number\">5</span>, TimeUnit.SECONDS, <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayBlockingQueue</span>&lt;&gt;(<span class=\"number\">2000</span>),</span><br><span class=\"line\">         <span class=\"comment\">// 线程池名字pay-account</span></span><br><span class=\"line\">          <span class=\"keyword\">new</span> <span class=\"title class_\">DefaultThreadFactory</span>(<span class=\"string\">&quot;pay-account&quot;</span>), (r1, executor) -&gt; &#123;</span><br><span class=\"line\">         <span class=\"comment\">// 记录log 重新入队列做补偿</span></span><br><span class=\"line\"> &#125;);</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"Ceph 存储引擎—OSD 类型","date":"2024-08-05T12:00:00.000Z","cover":"/images/ceph/ceph.jpg","_content":"\n# Ceph 存储引擎—OSD 类型\n\n> Ceph 是一个分布式存储系统，它可以提供多种存储服务，包括块存储 (RBD), 对象存储 (RADOS Gateway) 和文件系统 (CephFS)。Ceph\n> 的存储后端使用 RADOS (Reliable Autonomic Distributed Object Store) 来管理数据。在 RADOS 层面，有两种不同的存储引擎可以用来存储数据：FileStore\n> 和 BlueStore。\n\n## FileStore\n\nFileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是\nXFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。这种实现方式简单并且易于理解，但有一些局限性，比如写入放大问题（因为数据首先需要写入日志文件再写入数据文件），以及依赖于文件系统的性能。\n\n## BlueStore\n\nBlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。这意味着\nBlueStore 可以更好地控制底层存储，从而优化性能并减少写入放大。BlueStore 提供了一些关键特性，如：\n\n- **直接在裸设备上运行**：这允许 BlueStore 更高效地利用存储资源，并能更精细地控制 I/O 调度。\n- **内存映射缓存**：BlueStore 使用内存映射缓存来加速读取操作。\n- **更快的写入性能**：通过避免额外的日志文件写入，减少了写入放大。\n- **更好的延迟特性**：BlueStore 通过减少 I/O 操作的复杂性和开销来降低延迟。\n- **支持多种存储介质**：例如，它可以将 SSD 用作缓存层，而将 HDD 用作容量层。\n\n## 总结\n\n- **FileStore** 依赖于传统的文件系统，数据和元数据都存储在文件中。\n- **BlueStore** 不依赖于外部文件系统，而是直接管理裸设备，这使得它可以更好地控制存储资源和 I/O 操作，从而提供更高的性能和更低的延迟。\n\n在 Ceph 集群中选择使用 BlueStore 还是 FileStore 主要取决于您的具体需求和环境。对于大多数现代工作负载，BlueStore\n由于其更高的性能和更低的延迟而成为首选。\n\n## 创建OSD\n\n#### 查看磁盘信息\n\n```\n fdisk -l \n```\n\n![image-20240809091353090](ceph-osd-type/image-20240809091353090.png)\n\n### 查看挂载情况\n\n```\nlsblk\n```\n\n![image-20240809091451537](ceph-osd-type/image-20240809091451537.png)\n\n#### 挂载\n\n```\nceph orch daemon add osd node1:/dev/sdb\n```\n\n#### 再次查看挂载\n\n![image-20240809091554465](ceph-osd-type/image-20240809091554465.png)\n\n#### 查看OSD\n\n```\nceph osd tree\n```\n\n![image-20240809091717603](ceph-osd-type/image-20240809091717603.png)\n\n#### 删除磁盘签名，分区表等所有信息\n\n> 将磁盘变成生磁盘、全新磁盘\n\n```\nwipefs -a -f /dev/sdd\n```\n\n####  \n\n## 其他创建OSD方法\n\n> 创建 FileStore 和 BlueStore 存储引擎的过程有所不同，因为它们分别采用了不同的存储机制。\n\n### FileStore 存储引擎\n\nFileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是\nXFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。\n\n#### 创建步骤\n\n1. ##### **准备磁盘**：\n\n    - 确保磁盘没有被使用，并且没有分区表。\n\n    - 如果磁盘上有分区表，需要先删除分区表。\n\n      ```\n      sudo parted -s /dev/sdc mklabel gpt\n      ```\n\n2. **创建文件系统**：\n\n    - 使用`mkfs.xfs`创建 XFS 文件系统。\n\n      ```\n      sudo mkfs.xfs -f /dev/sdc\n      ```\n\n3. **挂载文件系统**：\n\n    - 挂载文件系统到一个临时目录。\n\n      ```\n      sudo mkdir -p /mnt/sdc1\n      sudo mount /dev/sdc /mnt/sdc1\n      ```\n\n4. **初始化 FileStore OSD**：\n\n    - 使用`ceph-volume`来初始化 FileStore。\n\n      ```\n      sudo ceph-volume lvm create --filestore --data /mnt/sdc1\n      ```\n\n5. **卸载文件系统**：\n\n    - 卸载文件系统。\n\n      ```\n      sudo umount /mnt/tmp-sdc\n      sudo rmdir /mnt/tmp-sdc\n      ```\n\n### BlueStore 存储引擎\n\n> BlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。\n\n#### 创建步骤\n\n1. **准备磁盘**：\n\n    - 确保磁盘没有被使用，并且没有分区表。\n\n    - 如果磁盘上有分区表，需要先删除分区表。\n\n      ```\n      sudo parted -s /dev/sdc mklabel gpt\n      ```\n\n2. **创建分区**：\n\n    - 如果需要使用单独的设备来存放 WAL 和 DB，则创建相应的分区。\n\n      ```\n      sudo parted -s /dev/sdc mkpart primary 0% 100%\n      sudo parted -s /dev/sdd mkpart primary 0% 100%\n      sudo parted -s /dev/sde mkpart primary 0% 100%\n      ```\n\n3. **格式化分区**：\n\n    - 如果需要使用单独的设备来存放 WAL 和 DB，则需要格式化这些分区。\n\n      ```\n      sudo mkfs.ext4 /dev/sdd1\n      sudo mkfs.ext4 /dev/sde1\n      ```\n\n4. **初始化 BlueStore OSD**：\n\n    - 使用`ceph-volume`来初始化 BlueStore。\n\n      ```\n      sudo ceph-volume lvm create --bluestore --data /dev/sdc1 --wal /dev/sdd1 --db /dev/sde1\n      ```\n\n    - 如果您只需要一个设备来存放数据，则可以省略 `--wal` 和 `--db` 参数。\n\n5. **激活 OSD**：\n\n    - 初始化完成后，您需要激活新创建的 OSD。\n\n      ```\n      sudo systemctl start ceph-osd@<osd_id>\n      ```\n\n## 实际操作\n\n### 步骤 1: 准备磁盘\n\n#### 对于 `/dev/sdb`:\n\n1. **删除现有的分区表**（如果有的话）:\n\n   ```shell\n   sudo parted -s /dev/sdb mklabel gpt\n   ```\n\n2. **创建分区**:\n\n    - 我们将创建两个分区，一个用于 WAL，另一个用于 DB。\n\n   ```\n   sudo parted -s /dev/sdb mkpart primary 0% 50%\n   sudo parted -s /dev/sdb mkpart primary 50% 100%\n   ```\n\n3. **查看分区表**:\n\n    - 查看分区是否已正确创建。\n\n   ```\n   sudo parted -l /dev/sdb\n   ```\n\n### 步骤 2: 格式化分区\n\n1. **格式化第一个分区**:\n\n    - 我们将使用 ext4 文件系统来格式化第一个分区用于 WAL。\n\n   ```\n   sudo mkfs.ext4 /dev/sdb1\n   ```\n\n2. **格式化第二个分区**:\n\n    - 我们将使用 ext4 文件系统来格式化第二个分区用于 DB。\n\n   ```\n   sudo mkfs.ext4 /dev/sdb2\n   ```\n\n### 步骤 3: 挂载分区\n\n1. 挂载分区:\n\n    - 挂载分区到临时目录。\n\n   ```\n   sudo mkdir -p /mnt/osd-wal /mnt/osd-db\n   sudo mount /dev/sdb1 /mnt/osd-wal\n   sudo mount /dev/sdb2 /mnt/osd-db\n   ```\n\n### 步骤 4: 初始化 BlueStore OSD\n\n1. 使用 `ceph-volume` 初始化 BlueStore:\n\n    - 现在我们可以使用 `ceph-volume` 来初始化 BlueStore，其中 `/dev/sdc1` 作为数据分区，而 `/dev/sdb1` 和 `/dev/sdb2` 作为\n      WAL 和 DB 分区。\n\n   ```\n   sudo ceph-volume lvm create --bluestore --data /dev/sdc --wal /mnt/osd-wal --db /mnt/osd-db\n   ```\n\n### 步骤 5: 清理临时目录\n\n1. **卸载分区**:\n\n    - 卸载分区以便我们可以使用它们。\n\n   ```\n   sudo umount /mnt/tmp-sdb1\n   sudo umount /mnt/tmp-sdb2\n   ```\n\n2. **清理临时目录**:\n\n    - 清理之前创建的临时目录。\n\n   ```\n   sudo rm -rf /mnt/tmp-sdb1 /mnt/tmp-sdb2\n   ```\n\n### 步骤 6: 激活和验证\n\n1. **激活 OSD**:\n\n    - 初始化完成后，您需要激活新创建的 OSD：\n\n   ```\n   sudo systemctl start ceph-osd@<osd_id>\n   ```\n\n    - 其中 `<osd_id>` 是由 `ceph-volume` 在初始化时分配给新 OSD 的 ID。\n\n2. **验证 OSD**:\n\n    - 您可以使用 `ceph osd tree` 或 `ceph osd stat` 命令来验证新添加的 OSD 是否已经被集群识别并处于正常状态：\n\n   ```\n   sudo ceph osd tree\n   ```\n\n以上步骤应该能够帮助您成功配置使用 `/dev/sdb` 的两个分区来分别存放 WAL 和 DB，同时使用 `/dev/sdc`\n作为数据分区。如果您在操作过程中遇到任何问题，请随时告诉我。","source":"_posts/2024/ceph/ceph-osd-type.md","raw":"---\ntitle: Ceph 存储引擎—OSD 类型\ndate: 2024-08-5 20:00:00\ntags:\n  - Ceph\ncategories:\n  - 分布式存储\ncover: /images/ceph/ceph.jpg\n---\n\n# Ceph 存储引擎—OSD 类型\n\n> Ceph 是一个分布式存储系统，它可以提供多种存储服务，包括块存储 (RBD), 对象存储 (RADOS Gateway) 和文件系统 (CephFS)。Ceph\n> 的存储后端使用 RADOS (Reliable Autonomic Distributed Object Store) 来管理数据。在 RADOS 层面，有两种不同的存储引擎可以用来存储数据：FileStore\n> 和 BlueStore。\n\n## FileStore\n\nFileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是\nXFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。这种实现方式简单并且易于理解，但有一些局限性，比如写入放大问题（因为数据首先需要写入日志文件再写入数据文件），以及依赖于文件系统的性能。\n\n## BlueStore\n\nBlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。这意味着\nBlueStore 可以更好地控制底层存储，从而优化性能并减少写入放大。BlueStore 提供了一些关键特性，如：\n\n- **直接在裸设备上运行**：这允许 BlueStore 更高效地利用存储资源，并能更精细地控制 I/O 调度。\n- **内存映射缓存**：BlueStore 使用内存映射缓存来加速读取操作。\n- **更快的写入性能**：通过避免额外的日志文件写入，减少了写入放大。\n- **更好的延迟特性**：BlueStore 通过减少 I/O 操作的复杂性和开销来降低延迟。\n- **支持多种存储介质**：例如，它可以将 SSD 用作缓存层，而将 HDD 用作容量层。\n\n## 总结\n\n- **FileStore** 依赖于传统的文件系统，数据和元数据都存储在文件中。\n- **BlueStore** 不依赖于外部文件系统，而是直接管理裸设备，这使得它可以更好地控制存储资源和 I/O 操作，从而提供更高的性能和更低的延迟。\n\n在 Ceph 集群中选择使用 BlueStore 还是 FileStore 主要取决于您的具体需求和环境。对于大多数现代工作负载，BlueStore\n由于其更高的性能和更低的延迟而成为首选。\n\n## 创建OSD\n\n#### 查看磁盘信息\n\n```\n fdisk -l \n```\n\n![image-20240809091353090](ceph-osd-type/image-20240809091353090.png)\n\n### 查看挂载情况\n\n```\nlsblk\n```\n\n![image-20240809091451537](ceph-osd-type/image-20240809091451537.png)\n\n#### 挂载\n\n```\nceph orch daemon add osd node1:/dev/sdb\n```\n\n#### 再次查看挂载\n\n![image-20240809091554465](ceph-osd-type/image-20240809091554465.png)\n\n#### 查看OSD\n\n```\nceph osd tree\n```\n\n![image-20240809091717603](ceph-osd-type/image-20240809091717603.png)\n\n#### 删除磁盘签名，分区表等所有信息\n\n> 将磁盘变成生磁盘、全新磁盘\n\n```\nwipefs -a -f /dev/sdd\n```\n\n####  \n\n## 其他创建OSD方法\n\n> 创建 FileStore 和 BlueStore 存储引擎的过程有所不同，因为它们分别采用了不同的存储机制。\n\n### FileStore 存储引擎\n\nFileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是\nXFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。\n\n#### 创建步骤\n\n1. ##### **准备磁盘**：\n\n    - 确保磁盘没有被使用，并且没有分区表。\n\n    - 如果磁盘上有分区表，需要先删除分区表。\n\n      ```\n      sudo parted -s /dev/sdc mklabel gpt\n      ```\n\n2. **创建文件系统**：\n\n    - 使用`mkfs.xfs`创建 XFS 文件系统。\n\n      ```\n      sudo mkfs.xfs -f /dev/sdc\n      ```\n\n3. **挂载文件系统**：\n\n    - 挂载文件系统到一个临时目录。\n\n      ```\n      sudo mkdir -p /mnt/sdc1\n      sudo mount /dev/sdc /mnt/sdc1\n      ```\n\n4. **初始化 FileStore OSD**：\n\n    - 使用`ceph-volume`来初始化 FileStore。\n\n      ```\n      sudo ceph-volume lvm create --filestore --data /mnt/sdc1\n      ```\n\n5. **卸载文件系统**：\n\n    - 卸载文件系统。\n\n      ```\n      sudo umount /mnt/tmp-sdc\n      sudo rmdir /mnt/tmp-sdc\n      ```\n\n### BlueStore 存储引擎\n\n> BlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。\n\n#### 创建步骤\n\n1. **准备磁盘**：\n\n    - 确保磁盘没有被使用，并且没有分区表。\n\n    - 如果磁盘上有分区表，需要先删除分区表。\n\n      ```\n      sudo parted -s /dev/sdc mklabel gpt\n      ```\n\n2. **创建分区**：\n\n    - 如果需要使用单独的设备来存放 WAL 和 DB，则创建相应的分区。\n\n      ```\n      sudo parted -s /dev/sdc mkpart primary 0% 100%\n      sudo parted -s /dev/sdd mkpart primary 0% 100%\n      sudo parted -s /dev/sde mkpart primary 0% 100%\n      ```\n\n3. **格式化分区**：\n\n    - 如果需要使用单独的设备来存放 WAL 和 DB，则需要格式化这些分区。\n\n      ```\n      sudo mkfs.ext4 /dev/sdd1\n      sudo mkfs.ext4 /dev/sde1\n      ```\n\n4. **初始化 BlueStore OSD**：\n\n    - 使用`ceph-volume`来初始化 BlueStore。\n\n      ```\n      sudo ceph-volume lvm create --bluestore --data /dev/sdc1 --wal /dev/sdd1 --db /dev/sde1\n      ```\n\n    - 如果您只需要一个设备来存放数据，则可以省略 `--wal` 和 `--db` 参数。\n\n5. **激活 OSD**：\n\n    - 初始化完成后，您需要激活新创建的 OSD。\n\n      ```\n      sudo systemctl start ceph-osd@<osd_id>\n      ```\n\n## 实际操作\n\n### 步骤 1: 准备磁盘\n\n#### 对于 `/dev/sdb`:\n\n1. **删除现有的分区表**（如果有的话）:\n\n   ```shell\n   sudo parted -s /dev/sdb mklabel gpt\n   ```\n\n2. **创建分区**:\n\n    - 我们将创建两个分区，一个用于 WAL，另一个用于 DB。\n\n   ```\n   sudo parted -s /dev/sdb mkpart primary 0% 50%\n   sudo parted -s /dev/sdb mkpart primary 50% 100%\n   ```\n\n3. **查看分区表**:\n\n    - 查看分区是否已正确创建。\n\n   ```\n   sudo parted -l /dev/sdb\n   ```\n\n### 步骤 2: 格式化分区\n\n1. **格式化第一个分区**:\n\n    - 我们将使用 ext4 文件系统来格式化第一个分区用于 WAL。\n\n   ```\n   sudo mkfs.ext4 /dev/sdb1\n   ```\n\n2. **格式化第二个分区**:\n\n    - 我们将使用 ext4 文件系统来格式化第二个分区用于 DB。\n\n   ```\n   sudo mkfs.ext4 /dev/sdb2\n   ```\n\n### 步骤 3: 挂载分区\n\n1. 挂载分区:\n\n    - 挂载分区到临时目录。\n\n   ```\n   sudo mkdir -p /mnt/osd-wal /mnt/osd-db\n   sudo mount /dev/sdb1 /mnt/osd-wal\n   sudo mount /dev/sdb2 /mnt/osd-db\n   ```\n\n### 步骤 4: 初始化 BlueStore OSD\n\n1. 使用 `ceph-volume` 初始化 BlueStore:\n\n    - 现在我们可以使用 `ceph-volume` 来初始化 BlueStore，其中 `/dev/sdc1` 作为数据分区，而 `/dev/sdb1` 和 `/dev/sdb2` 作为\n      WAL 和 DB 分区。\n\n   ```\n   sudo ceph-volume lvm create --bluestore --data /dev/sdc --wal /mnt/osd-wal --db /mnt/osd-db\n   ```\n\n### 步骤 5: 清理临时目录\n\n1. **卸载分区**:\n\n    - 卸载分区以便我们可以使用它们。\n\n   ```\n   sudo umount /mnt/tmp-sdb1\n   sudo umount /mnt/tmp-sdb2\n   ```\n\n2. **清理临时目录**:\n\n    - 清理之前创建的临时目录。\n\n   ```\n   sudo rm -rf /mnt/tmp-sdb1 /mnt/tmp-sdb2\n   ```\n\n### 步骤 6: 激活和验证\n\n1. **激活 OSD**:\n\n    - 初始化完成后，您需要激活新创建的 OSD：\n\n   ```\n   sudo systemctl start ceph-osd@<osd_id>\n   ```\n\n    - 其中 `<osd_id>` 是由 `ceph-volume` 在初始化时分配给新 OSD 的 ID。\n\n2. **验证 OSD**:\n\n    - 您可以使用 `ceph osd tree` 或 `ceph osd stat` 命令来验证新添加的 OSD 是否已经被集群识别并处于正常状态：\n\n   ```\n   sudo ceph osd tree\n   ```\n\n以上步骤应该能够帮助您成功配置使用 `/dev/sdb` 的两个分区来分别存放 WAL 和 DB，同时使用 `/dev/sdc`\n作为数据分区。如果您在操作过程中遇到任何问题，请随时告诉我。","slug":"2024/ceph/ceph-osd-type","published":1,"updated":"2025-01-03T11:15:43.096Z","_id":"clzxxiuyc000x0aib2l7uewof","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Ceph-存储引擎—OSD-类型\"><a href=\"#Ceph-存储引擎—OSD-类型\" class=\"headerlink\" title=\"Ceph 存储引擎—OSD 类型\"></a>Ceph 存储引擎—OSD 类型</h1><blockquote>\n<p>Ceph 是一个分布式存储系统，它可以提供多种存储服务，包括块存储 (RBD), 对象存储 (RADOS Gateway) 和文件系统 (CephFS)。Ceph<br>的存储后端使用 RADOS (Reliable Autonomic Distributed Object Store) 来管理数据。在 RADOS 层面，有两种不同的存储引擎可以用来存储数据：FileStore<br>和 BlueStore。</p>\n</blockquote>\n<h2 id=\"FileStore\"><a href=\"#FileStore\" class=\"headerlink\" title=\"FileStore\"></a>FileStore</h2><p>FileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是<br>XFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。这种实现方式简单并且易于理解，但有一些局限性，比如写入放大问题（因为数据首先需要写入日志文件再写入数据文件），以及依赖于文件系统的性能。</p>\n<h2 id=\"BlueStore\"><a href=\"#BlueStore\" class=\"headerlink\" title=\"BlueStore\"></a>BlueStore</h2><p>BlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。这意味着<br>BlueStore 可以更好地控制底层存储，从而优化性能并减少写入放大。BlueStore 提供了一些关键特性，如：</p>\n<ul>\n<li><strong>直接在裸设备上运行</strong>：这允许 BlueStore 更高效地利用存储资源，并能更精细地控制 I&#x2F;O 调度。</li>\n<li><strong>内存映射缓存</strong>：BlueStore 使用内存映射缓存来加速读取操作。</li>\n<li><strong>更快的写入性能</strong>：通过避免额外的日志文件写入，减少了写入放大。</li>\n<li><strong>更好的延迟特性</strong>：BlueStore 通过减少 I&#x2F;O 操作的复杂性和开销来降低延迟。</li>\n<li><strong>支持多种存储介质</strong>：例如，它可以将 SSD 用作缓存层，而将 HDD 用作容量层。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><strong>FileStore</strong> 依赖于传统的文件系统，数据和元数据都存储在文件中。</li>\n<li><strong>BlueStore</strong> 不依赖于外部文件系统，而是直接管理裸设备，这使得它可以更好地控制存储资源和 I&#x2F;O 操作，从而提供更高的性能和更低的延迟。</li>\n</ul>\n<p>在 Ceph 集群中选择使用 BlueStore 还是 FileStore 主要取决于您的具体需求和环境。对于大多数现代工作负载，BlueStore<br>由于其更高的性能和更低的延迟而成为首选。</p>\n<h2 id=\"创建OSD\"><a href=\"#创建OSD\" class=\"headerlink\" title=\"创建OSD\"></a>创建OSD</h2><h4 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l </span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091353090.png\" class=\"\" title=\"image-20240809091353090\">\n\n<h3 id=\"查看挂载情况\"><a href=\"#查看挂载情况\" class=\"headerlink\" title=\"查看挂载情况\"></a>查看挂载情况</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091451537.png\" class=\"\" title=\"image-20240809091451537\">\n\n<h4 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon add osd node1:/dev/sdb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查看挂载\"><a href=\"#再次查看挂载\" class=\"headerlink\" title=\"再次查看挂载\"></a>再次查看挂载</h4><img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091554465.png\" class=\"\" title=\"image-20240809091554465\">\n\n<h4 id=\"查看OSD\"><a href=\"#查看OSD\" class=\"headerlink\" title=\"查看OSD\"></a>查看OSD</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph osd tree</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091717603.png\" class=\"\" title=\"image-20240809091717603\">\n\n<h4 id=\"删除磁盘签名，分区表等所有信息\"><a href=\"#删除磁盘签名，分区表等所有信息\" class=\"headerlink\" title=\"删除磁盘签名，分区表等所有信息\"></a>删除磁盘签名，分区表等所有信息</h4><blockquote>\n<p>将磁盘变成生磁盘、全新磁盘</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wipefs -a -f /dev/sdd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h2 id=\"其他创建OSD方法\"><a href=\"#其他创建OSD方法\" class=\"headerlink\" title=\"其他创建OSD方法\"></a>其他创建OSD方法</h2><blockquote>\n<p>创建 FileStore 和 BlueStore 存储引擎的过程有所不同，因为它们分别采用了不同的存储机制。</p>\n</blockquote>\n<h3 id=\"FileStore-存储引擎\"><a href=\"#FileStore-存储引擎\" class=\"headerlink\" title=\"FileStore 存储引擎\"></a>FileStore 存储引擎</h3><p>FileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是<br>XFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。</p>\n<h4 id=\"创建步骤\"><a href=\"#创建步骤\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h4><ol>\n<li><h5 id=\"准备磁盘：\"><a href=\"#准备磁盘：\" class=\"headerlink\" title=\"准备磁盘：\"></a><strong>准备磁盘</strong>：</h5><ul>\n<li><p>确保磁盘没有被使用，并且没有分区表。</p>\n</li>\n<li><p>如果磁盘上有分区表，需要先删除分区表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdc mklabel gpt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>创建文件系统</strong>：</p>\n<ul>\n<li><p>使用<code>mkfs.xfs</code>创建 XFS 文件系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.xfs -f /dev/sdc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>挂载文件系统</strong>：</p>\n<ul>\n<li><p>挂载文件系统到一个临时目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /mnt/sdc1</span><br><span class=\"line\">sudo mount /dev/sdc /mnt/sdc1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>初始化 FileStore OSD</strong>：</p>\n<ul>\n<li><p>使用<code>ceph-volume</code>来初始化 FileStore。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph-volume lvm create --filestore --data /mnt/sdc1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>卸载文件系统</strong>：</p>\n<ul>\n<li><p>卸载文件系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /mnt/tmp-sdc</span><br><span class=\"line\">sudo rmdir /mnt/tmp-sdc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"BlueStore-存储引擎\"><a href=\"#BlueStore-存储引擎\" class=\"headerlink\" title=\"BlueStore 存储引擎\"></a>BlueStore 存储引擎</h3><blockquote>\n<p>BlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。</p>\n</blockquote>\n<h4 id=\"创建步骤-1\"><a href=\"#创建步骤-1\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h4><ol>\n<li><p><strong>准备磁盘</strong>：</p>\n<ul>\n<li><p>确保磁盘没有被使用，并且没有分区表。</p>\n</li>\n<li><p>如果磁盘上有分区表，需要先删除分区表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdc mklabel gpt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>创建分区</strong>：</p>\n<ul>\n<li><p>如果需要使用单独的设备来存放 WAL 和 DB，则创建相应的分区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdc mkpart primary 0% 100%</span><br><span class=\"line\">sudo parted -s /dev/sdd mkpart primary 0% 100%</span><br><span class=\"line\">sudo parted -s /dev/sde mkpart primary 0% 100%</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>格式化分区</strong>：</p>\n<ul>\n<li><p>如果需要使用单独的设备来存放 WAL 和 DB，则需要格式化这些分区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sdd1</span><br><span class=\"line\">sudo mkfs.ext4 /dev/sde1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>初始化 BlueStore OSD</strong>：</p>\n<ul>\n<li><p>使用<code>ceph-volume</code>来初始化 BlueStore。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph-volume lvm create --bluestore --data /dev/sdc1 --wal /dev/sdd1 --db /dev/sde1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果您只需要一个设备来存放数据，则可以省略 <code>--wal</code> 和 <code>--db</code> 参数。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>激活 OSD</strong>：</p>\n<ul>\n<li><p>初始化完成后，您需要激活新创建的 OSD。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start ceph-osd@&lt;osd_id&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h2><h3 id=\"步骤-1-准备磁盘\"><a href=\"#步骤-1-准备磁盘\" class=\"headerlink\" title=\"步骤 1: 准备磁盘\"></a>步骤 1: 准备磁盘</h3><h4 id=\"对于-dev-sdb\"><a href=\"#对于-dev-sdb\" class=\"headerlink\" title=\"对于 /dev/sdb:\"></a>对于 <code>/dev/sdb</code>:</h4><ol>\n<li><p><strong>删除现有的分区表</strong>（如果有的话）:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdb mklabel gpt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建分区</strong>:</p>\n<ul>\n<li>我们将创建两个分区，一个用于 WAL，另一个用于 DB。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdb mkpart primary 0% 50%</span><br><span class=\"line\">sudo parted -s /dev/sdb mkpart primary 50% 100%</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看分区表</strong>:</p>\n<ul>\n<li>查看分区是否已正确创建。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -l /dev/sdb</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-2-格式化分区\"><a href=\"#步骤-2-格式化分区\" class=\"headerlink\" title=\"步骤 2: 格式化分区\"></a>步骤 2: 格式化分区</h3><ol>\n<li><p><strong>格式化第一个分区</strong>:</p>\n<ul>\n<li>我们将使用 ext4 文件系统来格式化第一个分区用于 WAL。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>格式化第二个分区</strong>:</p>\n<ul>\n<li>我们将使用 ext4 文件系统来格式化第二个分区用于 DB。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sdb2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-3-挂载分区\"><a href=\"#步骤-3-挂载分区\" class=\"headerlink\" title=\"步骤 3: 挂载分区\"></a>步骤 3: 挂载分区</h3><ol>\n<li><p>挂载分区:</p>\n<ul>\n<li>挂载分区到临时目录。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /mnt/osd-wal /mnt/osd-db</span><br><span class=\"line\">sudo mount /dev/sdb1 /mnt/osd-wal</span><br><span class=\"line\">sudo mount /dev/sdb2 /mnt/osd-db</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-4-初始化-BlueStore-OSD\"><a href=\"#步骤-4-初始化-BlueStore-OSD\" class=\"headerlink\" title=\"步骤 4: 初始化 BlueStore OSD\"></a>步骤 4: 初始化 BlueStore OSD</h3><ol>\n<li><p>使用 <code>ceph-volume</code> 初始化 BlueStore:</p>\n<ul>\n<li>现在我们可以使用 <code>ceph-volume</code> 来初始化 BlueStore，其中 <code>/dev/sdc1</code> 作为数据分区，而 <code>/dev/sdb1</code> 和 <code>/dev/sdb2</code> 作为<br>WAL 和 DB 分区。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph-volume lvm create --bluestore --data /dev/sdc --wal /mnt/osd-wal --db /mnt/osd-db</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-5-清理临时目录\"><a href=\"#步骤-5-清理临时目录\" class=\"headerlink\" title=\"步骤 5: 清理临时目录\"></a>步骤 5: 清理临时目录</h3><ol>\n<li><p><strong>卸载分区</strong>:</p>\n<ul>\n<li>卸载分区以便我们可以使用它们。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /mnt/tmp-sdb1</span><br><span class=\"line\">sudo umount /mnt/tmp-sdb2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>清理临时目录</strong>:</p>\n<ul>\n<li>清理之前创建的临时目录。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /mnt/tmp-sdb1 /mnt/tmp-sdb2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-6-激活和验证\"><a href=\"#步骤-6-激活和验证\" class=\"headerlink\" title=\"步骤 6: 激活和验证\"></a>步骤 6: 激活和验证</h3><ol>\n<li><p><strong>激活 OSD</strong>:</p>\n<ul>\n<li>初始化完成后，您需要激活新创建的 OSD：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start ceph-osd@&lt;osd_id&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 <code>&lt;osd_id&gt;</code> 是由 <code>ceph-volume</code> 在初始化时分配给新 OSD 的 ID。</li>\n</ul>\n</li>\n<li><p><strong>验证 OSD</strong>:</p>\n<ul>\n<li>您可以使用 <code>ceph osd tree</code> 或 <code>ceph osd stat</code> 命令来验证新添加的 OSD 是否已经被集群识别并处于正常状态：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph osd tree</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>以上步骤应该能够帮助您成功配置使用 <code>/dev/sdb</code> 的两个分区来分别存放 WAL 和 DB，同时使用 <code>/dev/sdc</code><br>作为数据分区。如果您在操作过程中遇到任何问题，请随时告诉我。</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"Ceph-存储引擎—OSD-类型\"><a href=\"#Ceph-存储引擎—OSD-类型\" class=\"headerlink\" title=\"Ceph 存储引擎—OSD 类型\"></a>Ceph 存储引擎—OSD 类型</h1><blockquote>\n<p>Ceph 是一个分布式存储系统，它可以提供多种存储服务，包括块存储 (RBD), 对象存储 (RADOS Gateway) 和文件系统 (CephFS)。Ceph<br>的存储后端使用 RADOS (Reliable Autonomic Distributed Object Store) 来管理数据。在 RADOS 层面，有两种不同的存储引擎可以用来存储数据：FileStore<br>和 BlueStore。</p>\n</blockquote>\n<h2 id=\"FileStore\"><a href=\"#FileStore\" class=\"headerlink\" title=\"FileStore\"></a>FileStore</h2><p>FileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是<br>XFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。这种实现方式简单并且易于理解，但有一些局限性，比如写入放大问题（因为数据首先需要写入日志文件再写入数据文件），以及依赖于文件系统的性能。</p>\n<h2 id=\"BlueStore\"><a href=\"#BlueStore\" class=\"headerlink\" title=\"BlueStore\"></a>BlueStore</h2><p>BlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。这意味着<br>BlueStore 可以更好地控制底层存储，从而优化性能并减少写入放大。BlueStore 提供了一些关键特性，如：</p>\n<ul>\n<li><strong>直接在裸设备上运行</strong>：这允许 BlueStore 更高效地利用存储资源，并能更精细地控制 I&#x2F;O 调度。</li>\n<li><strong>内存映射缓存</strong>：BlueStore 使用内存映射缓存来加速读取操作。</li>\n<li><strong>更快的写入性能</strong>：通过避免额外的日志文件写入，减少了写入放大。</li>\n<li><strong>更好的延迟特性</strong>：BlueStore 通过减少 I&#x2F;O 操作的复杂性和开销来降低延迟。</li>\n<li><strong>支持多种存储介质</strong>：例如，它可以将 SSD 用作缓存层，而将 HDD 用作容量层。</li>\n</ul>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><strong>FileStore</strong> 依赖于传统的文件系统，数据和元数据都存储在文件中。</li>\n<li><strong>BlueStore</strong> 不依赖于外部文件系统，而是直接管理裸设备，这使得它可以更好地控制存储资源和 I&#x2F;O 操作，从而提供更高的性能和更低的延迟。</li>\n</ul>\n<p>在 Ceph 集群中选择使用 BlueStore 还是 FileStore 主要取决于您的具体需求和环境。对于大多数现代工作负载，BlueStore<br>由于其更高的性能和更低的延迟而成为首选。</p>\n<h2 id=\"创建OSD\"><a href=\"#创建OSD\" class=\"headerlink\" title=\"创建OSD\"></a>创建OSD</h2><h4 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l </span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091353090.png\" class=\"\" title=\"image-20240809091353090\">\n\n<h3 id=\"查看挂载情况\"><a href=\"#查看挂载情况\" class=\"headerlink\" title=\"查看挂载情况\"></a>查看挂载情况</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsblk</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091451537.png\" class=\"\" title=\"image-20240809091451537\">\n\n<h4 id=\"挂载\"><a href=\"#挂载\" class=\"headerlink\" title=\"挂载\"></a>挂载</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon add osd node1:/dev/sdb</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"再次查看挂载\"><a href=\"#再次查看挂载\" class=\"headerlink\" title=\"再次查看挂载\"></a>再次查看挂载</h4><img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091554465.png\" class=\"\" title=\"image-20240809091554465\">\n\n<h4 id=\"查看OSD\"><a href=\"#查看OSD\" class=\"headerlink\" title=\"查看OSD\"></a>查看OSD</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph osd tree</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2024/ceph/ceph-osd-type/image-20240809091717603.png\" class=\"\" title=\"image-20240809091717603\">\n\n<h4 id=\"删除磁盘签名，分区表等所有信息\"><a href=\"#删除磁盘签名，分区表等所有信息\" class=\"headerlink\" title=\"删除磁盘签名，分区表等所有信息\"></a>删除磁盘签名，分区表等所有信息</h4><blockquote>\n<p>将磁盘变成生磁盘、全新磁盘</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wipefs -a -f /dev/sdd</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"\"><a href=\"#\" class=\"headerlink\" title=\"\"></a></h4><h2 id=\"其他创建OSD方法\"><a href=\"#其他创建OSD方法\" class=\"headerlink\" title=\"其他创建OSD方法\"></a>其他创建OSD方法</h2><blockquote>\n<p>创建 FileStore 和 BlueStore 存储引擎的过程有所不同，因为它们分别采用了不同的存储机制。</p>\n</blockquote>\n<h3 id=\"FileStore-存储引擎\"><a href=\"#FileStore-存储引擎\" class=\"headerlink\" title=\"FileStore 存储引擎\"></a>FileStore 存储引擎</h3><p>FileStore 是 Ceph 较早版本中默认的存储引擎。在 FileStore 中，每个对象存储设备 (OSD) 使用一个标准的文件系统（通常是<br>XFS）来保存数据。这意味着每个对象都被存储为一个文件，而元数据和日志则存储在单独的文件中。</p>\n<h4 id=\"创建步骤\"><a href=\"#创建步骤\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h4><ol>\n<li><h5 id=\"准备磁盘：\"><a href=\"#准备磁盘：\" class=\"headerlink\" title=\"准备磁盘：\"></a><strong>准备磁盘</strong>：</h5><ul>\n<li><p>确保磁盘没有被使用，并且没有分区表。</p>\n</li>\n<li><p>如果磁盘上有分区表，需要先删除分区表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdc mklabel gpt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>创建文件系统</strong>：</p>\n<ul>\n<li><p>使用<code>mkfs.xfs</code>创建 XFS 文件系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.xfs -f /dev/sdc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>挂载文件系统</strong>：</p>\n<ul>\n<li><p>挂载文件系统到一个临时目录。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /mnt/sdc1</span><br><span class=\"line\">sudo mount /dev/sdc /mnt/sdc1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>初始化 FileStore OSD</strong>：</p>\n<ul>\n<li><p>使用<code>ceph-volume</code>来初始化 FileStore。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph-volume lvm create --filestore --data /mnt/sdc1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>卸载文件系统</strong>：</p>\n<ul>\n<li><p>卸载文件系统。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /mnt/tmp-sdc</span><br><span class=\"line\">sudo rmdir /mnt/tmp-sdc</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"BlueStore-存储引擎\"><a href=\"#BlueStore-存储引擎\" class=\"headerlink\" title=\"BlueStore 存储引擎\"></a>BlueStore 存储引擎</h3><blockquote>\n<p>BlueStore 是 Ceph 从 Luminous 版本开始引入的新存储引擎，旨在解决 FileStore 的一些限制。BlueStore 直接在裸设备上运行，不依赖于外部文件系统。</p>\n</blockquote>\n<h4 id=\"创建步骤-1\"><a href=\"#创建步骤-1\" class=\"headerlink\" title=\"创建步骤\"></a>创建步骤</h4><ol>\n<li><p><strong>准备磁盘</strong>：</p>\n<ul>\n<li><p>确保磁盘没有被使用，并且没有分区表。</p>\n</li>\n<li><p>如果磁盘上有分区表，需要先删除分区表。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdc mklabel gpt</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>创建分区</strong>：</p>\n<ul>\n<li><p>如果需要使用单独的设备来存放 WAL 和 DB，则创建相应的分区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdc mkpart primary 0% 100%</span><br><span class=\"line\">sudo parted -s /dev/sdd mkpart primary 0% 100%</span><br><span class=\"line\">sudo parted -s /dev/sde mkpart primary 0% 100%</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>格式化分区</strong>：</p>\n<ul>\n<li><p>如果需要使用单独的设备来存放 WAL 和 DB，则需要格式化这些分区。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sdd1</span><br><span class=\"line\">sudo mkfs.ext4 /dev/sde1</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li><p><strong>初始化 BlueStore OSD</strong>：</p>\n<ul>\n<li><p>使用<code>ceph-volume</code>来初始化 BlueStore。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph-volume lvm create --bluestore --data /dev/sdc1 --wal /dev/sdd1 --db /dev/sde1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果您只需要一个设备来存放数据，则可以省略 <code>--wal</code> 和 <code>--db</code> 参数。</p>\n</li>\n</ul>\n</li>\n<li><p><strong>激活 OSD</strong>：</p>\n<ul>\n<li><p>初始化完成后，您需要激活新创建的 OSD。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start ceph-osd@&lt;osd_id&gt;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"实际操作\"><a href=\"#实际操作\" class=\"headerlink\" title=\"实际操作\"></a>实际操作</h2><h3 id=\"步骤-1-准备磁盘\"><a href=\"#步骤-1-准备磁盘\" class=\"headerlink\" title=\"步骤 1: 准备磁盘\"></a>步骤 1: 准备磁盘</h3><h4 id=\"对于-dev-sdb\"><a href=\"#对于-dev-sdb\" class=\"headerlink\" title=\"对于 /dev/sdb:\"></a>对于 <code>/dev/sdb</code>:</h4><ol>\n<li><p><strong>删除现有的分区表</strong>（如果有的话）:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdb mklabel gpt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>创建分区</strong>:</p>\n<ul>\n<li>我们将创建两个分区，一个用于 WAL，另一个用于 DB。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -s /dev/sdb mkpart primary 0% 50%</span><br><span class=\"line\">sudo parted -s /dev/sdb mkpart primary 50% 100%</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>查看分区表</strong>:</p>\n<ul>\n<li>查看分区是否已正确创建。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo parted -l /dev/sdb</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-2-格式化分区\"><a href=\"#步骤-2-格式化分区\" class=\"headerlink\" title=\"步骤 2: 格式化分区\"></a>步骤 2: 格式化分区</h3><ol>\n<li><p><strong>格式化第一个分区</strong>:</p>\n<ul>\n<li>我们将使用 ext4 文件系统来格式化第一个分区用于 WAL。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sdb1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>格式化第二个分区</strong>:</p>\n<ul>\n<li>我们将使用 ext4 文件系统来格式化第二个分区用于 DB。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkfs.ext4 /dev/sdb2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-3-挂载分区\"><a href=\"#步骤-3-挂载分区\" class=\"headerlink\" title=\"步骤 3: 挂载分区\"></a>步骤 3: 挂载分区</h3><ol>\n<li><p>挂载分区:</p>\n<ul>\n<li>挂载分区到临时目录。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir -p /mnt/osd-wal /mnt/osd-db</span><br><span class=\"line\">sudo mount /dev/sdb1 /mnt/osd-wal</span><br><span class=\"line\">sudo mount /dev/sdb2 /mnt/osd-db</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-4-初始化-BlueStore-OSD\"><a href=\"#步骤-4-初始化-BlueStore-OSD\" class=\"headerlink\" title=\"步骤 4: 初始化 BlueStore OSD\"></a>步骤 4: 初始化 BlueStore OSD</h3><ol>\n<li><p>使用 <code>ceph-volume</code> 初始化 BlueStore:</p>\n<ul>\n<li>现在我们可以使用 <code>ceph-volume</code> 来初始化 BlueStore，其中 <code>/dev/sdc1</code> 作为数据分区，而 <code>/dev/sdb1</code> 和 <code>/dev/sdb2</code> 作为<br>WAL 和 DB 分区。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph-volume lvm create --bluestore --data /dev/sdc --wal /mnt/osd-wal --db /mnt/osd-db</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-5-清理临时目录\"><a href=\"#步骤-5-清理临时目录\" class=\"headerlink\" title=\"步骤 5: 清理临时目录\"></a>步骤 5: 清理临时目录</h3><ol>\n<li><p><strong>卸载分区</strong>:</p>\n<ul>\n<li>卸载分区以便我们可以使用它们。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo umount /mnt/tmp-sdb1</span><br><span class=\"line\">sudo umount /mnt/tmp-sdb2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>清理临时目录</strong>:</p>\n<ul>\n<li>清理之前创建的临时目录。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo rm -rf /mnt/tmp-sdb1 /mnt/tmp-sdb2</span><br></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"步骤-6-激活和验证\"><a href=\"#步骤-6-激活和验证\" class=\"headerlink\" title=\"步骤 6: 激活和验证\"></a>步骤 6: 激活和验证</h3><ol>\n<li><p><strong>激活 OSD</strong>:</p>\n<ul>\n<li>初始化完成后，您需要激活新创建的 OSD：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start ceph-osd@&lt;osd_id&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>其中 <code>&lt;osd_id&gt;</code> 是由 <code>ceph-volume</code> 在初始化时分配给新 OSD 的 ID。</li>\n</ul>\n</li>\n<li><p><strong>验证 OSD</strong>:</p>\n<ul>\n<li>您可以使用 <code>ceph osd tree</code> 或 <code>ceph osd stat</code> 命令来验证新添加的 OSD 是否已经被集群识别并处于正常状态：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ceph osd tree</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p>以上步骤应该能够帮助您成功配置使用 <code>/dev/sdb</code> 的两个分区来分别存放 WAL 和 DB，同时使用 <code>/dev/sdc</code><br>作为数据分区。如果您在操作过程中遇到任何问题，请随时告诉我。</p>\n"},{"title":"Ceph Start ISCSI Daemon","date":"2024-08-17T08:50:18.000Z","cover":"/images/ceph/iscsi.jpg","_content":"\n# Ceph Start ISCSI Daemon\n\n# 查文档\n\n## 查看`ceph orch`命令的帮助文档\n\n```shell\nceph orch --help\n```\n\n查询到有关`ISCSI`的命令：\n\n```shell\norch apply iscsi <pool> <api_user> <api_password>          Scale an iSCSI service\n [<trusted_ip_list>] [<placement>] [--unmanaged] [--dry-   \n run] [--format {plain|json|json-pretty|yaml|xml-pretty|   \n xml}] [--no-overwrite] \n \norch daemon add iscsi <pool> <api_user> <api_password>     Start iscsi daemon(s)\n [<trusted_ip_list>] [<placement>]   \n \norch daemon rm <names>... [--force]                        Remove specific daemon(s)\n\norch daemon start|stop|restart|reconfig <name>             Start, stop, restart, (redeploy,) or reconfig a specific \n                                                            daemon                                                            \norch rm <service_name> [--force]                           Remove a service\n```\n\n## 红帽文档\n\n[第 12 章 使用 Ceph Orchestrator（有限可用性）管理 iSCSI 网关 | Red Hat Product Documentation](https://docs.redhat.com/zh_hans/documentation/red_hat_ceph_storage/5/html/operations_guide/management-of-iscsi-gateway-using-the-ceph-orchestrator)\n\n# 部署ISCSI\n\n## **先决条件**\n\n- 一个正在运行的  Ceph Storage 集群。\n- 主机添加到集群中。\n- 部署所有管理器、监控器和 OSD 守护进程。\n\n\n\n## 创建池\n\n**语法**\n\n```none\nceph osd pool create POOL_NAME\n```\n\n**示例**\n\n```none\nceph osd pool create mypool\n```\n\n## 使用命令行界面部署 iSCSI 网关\n\n**语法**\n\n```none\norch apply iscsi <pool> <api_user> <api_password> [<trusted_ip_list>] [<placement>] [--unmanaged] \n[--dry-run] [--format {plain|json|json-pretty|yaml|xml-pretty| xml}] [--no-overwrite] \n```\n\n**示例**\n\n```none\nceph orch apply iscsi mypool admin admin --placement=\"1 host01\"\n```\n\n**验证**\n\n- 列出服务：\n\n  **示例**\n\n  ```none\n  ceph orch ls\n  ```\n\n\n\n## 使用服务规格部署 iSCSI 网关\n\n### 创建 `iscsi.yml` 配置文件\n\n**示例**\n\n```none\ntouch iscsi.yml\n```\n\n**编辑 `iscsi.yml` 文件，使其包含以下详情：**\n\n**语法**\n\n```none\nservice_type: iscsi\nservice_id: iscsi\nplacement:\n  hosts:\n    - HOST_NAME_1\n    - HOST_NAME_2\nspec:\n  pool: POOL_NAME  # RADOS pool where ceph-iscsi config data is stored.\n  trusted_ip_list: \"IP_ADDRESS_1,IP_ADDRESS_2\" # optional\n  api_port: ... # optional\n  api_user: API_USERNAME # optional\n  api_password: API_PASSWORD # optional\n  api_secure: true/false # optional\n  ssl_cert: | # optional\n  ...\n  ssl_key: | # optional\n  ...\n```\n\n**示例**\n\n```none\nservice_type: iscsi\nservice_id: iscsi\nplacement:\n  hosts:\n    - host01\nspec:\n  pool: mypool\n```\n\n1. **示例**\n\n   ```none\n   cephadm shell --mount iscsi.yaml:/var/lib/ceph/iscsi.yaml\n   ```\n\n2. 进入以下目录：\n\n   **语法**\n\n   ```none\n   cd /var/lib/ceph/DAEMON_PATH/\n   ```\n\n   **示例**\n\n   ```none\n   cd /var/lib/ceph/\n   ```\n\n3. 使用服务规格部署 iSCSI 网关：\n\n   **语法**\n\n   ```none\n   ceph orch apply -i FILE_NAME.yml\n   ```\n\n   **示例**\n\n   ```none\n   ceph orch apply -i iscsi.yml\n   ```\n\n**验证**\n\n- 列出服务：\n\n  **示例**\n\n  ```none\n  ceph orch ls\n  ```\n\n\n\n# 状态查询\n\n## 列出主机、守护进程和进程：\n\n**语法**\n\n```none\nceph orch ps --daemon_type=DAEMON_NAME\n```\n\n**示例**\n\n```none\nceph orch ps --daemon_type=iscsi\n```\n\n# 启动、停止、重启、删除 ISCSI 网关中的某个进程\n\n## 语法\n\n```none\norch daemon start|stop|restart|reconfig <name> \n```\n\n### 先查看进程名称\n\n```shell\nceph orch ps --daemon_type=iscsi\n```\n\n输出结果：\n\n```shell\nNAME                         HOST   PORTS   STATUS         REFRESHED  AGE  MEM USE  MEM LIM  VERSION  IMAGE ID      CONTAINER ID  \niscsi.rbd-pool.node2.aaplvm  node2  *:5000  running (56s)    48s ago  57s    68.2M        -  3.6      4e09faf6bcb2  a11b84946e58  \niscsi.rbd-pool.node3.nmhnko  node3  *:5000  running (59s)    50s ago  60s    45.2M        -  3.6      4e09faf6bcb2  ea84ff4efed7 \n```\n\n\n\n## 启动\n\n```none\nceph orch daemon start iscsi.rbd-pool.node2.aaplvm\n```\n\n## 停止\n\n```none\nceph orch daemon stop iscsi.rbd-pool.node2.aaplvm\n```\n\n## 重启\n\n```none\nceph orch daemon restart iscsi.rbd-pool.node2.aaplvm\n```\n\n## 删除\n\n```shell\nceph orch daemon rm iscsi.rbd-pool.node2.aaplvm\n```\n\n输出结果：\n\n```shell\nRemoved iscsi.rbd-pool.node2.aaplvm from host 'node2'\n```\n\n# 删除 ISCSI 网关\n\n>您可以使用 `ceph 或ch rm` 命令删除 ISCSI 网关守护进程。\n\n## 列出服务：\n\n**示例**\n\n```none\nceph orch ls\n```\n\n## 删除服务\n\n**语法**\n\n```none\nceph orch rm SERVICE_NAME\n```\n\n**示例**\n\n```none\nceph orch rm iscsi.iscsi\n```\n\n## 验证\n\n列出主机、守护进程和进程：\n\n**语法**\n\n```none\nceph orch ps\n```\n\n**示例**\n\n```none\nceph orch ps\n```","source":"_posts/2024/ceph/ceph-start-iscsi-daemo.md","raw":"---\ntitle: Ceph Start ISCSI Daemon\ndate: 2024-08-17 16:50:18\ntags:\n- Ceph\ncategories:\n- 分布式存储\ncover: /images/ceph/iscsi.jpg\n\n---\n\n# Ceph Start ISCSI Daemon\n\n# 查文档\n\n## 查看`ceph orch`命令的帮助文档\n\n```shell\nceph orch --help\n```\n\n查询到有关`ISCSI`的命令：\n\n```shell\norch apply iscsi <pool> <api_user> <api_password>          Scale an iSCSI service\n [<trusted_ip_list>] [<placement>] [--unmanaged] [--dry-   \n run] [--format {plain|json|json-pretty|yaml|xml-pretty|   \n xml}] [--no-overwrite] \n \norch daemon add iscsi <pool> <api_user> <api_password>     Start iscsi daemon(s)\n [<trusted_ip_list>] [<placement>]   \n \norch daemon rm <names>... [--force]                        Remove specific daemon(s)\n\norch daemon start|stop|restart|reconfig <name>             Start, stop, restart, (redeploy,) or reconfig a specific \n                                                            daemon                                                            \norch rm <service_name> [--force]                           Remove a service\n```\n\n## 红帽文档\n\n[第 12 章 使用 Ceph Orchestrator（有限可用性）管理 iSCSI 网关 | Red Hat Product Documentation](https://docs.redhat.com/zh_hans/documentation/red_hat_ceph_storage/5/html/operations_guide/management-of-iscsi-gateway-using-the-ceph-orchestrator)\n\n# 部署ISCSI\n\n## **先决条件**\n\n- 一个正在运行的  Ceph Storage 集群。\n- 主机添加到集群中。\n- 部署所有管理器、监控器和 OSD 守护进程。\n\n\n\n## 创建池\n\n**语法**\n\n```none\nceph osd pool create POOL_NAME\n```\n\n**示例**\n\n```none\nceph osd pool create mypool\n```\n\n## 使用命令行界面部署 iSCSI 网关\n\n**语法**\n\n```none\norch apply iscsi <pool> <api_user> <api_password> [<trusted_ip_list>] [<placement>] [--unmanaged] \n[--dry-run] [--format {plain|json|json-pretty|yaml|xml-pretty| xml}] [--no-overwrite] \n```\n\n**示例**\n\n```none\nceph orch apply iscsi mypool admin admin --placement=\"1 host01\"\n```\n\n**验证**\n\n- 列出服务：\n\n  **示例**\n\n  ```none\n  ceph orch ls\n  ```\n\n\n\n## 使用服务规格部署 iSCSI 网关\n\n### 创建 `iscsi.yml` 配置文件\n\n**示例**\n\n```none\ntouch iscsi.yml\n```\n\n**编辑 `iscsi.yml` 文件，使其包含以下详情：**\n\n**语法**\n\n```none\nservice_type: iscsi\nservice_id: iscsi\nplacement:\n  hosts:\n    - HOST_NAME_1\n    - HOST_NAME_2\nspec:\n  pool: POOL_NAME  # RADOS pool where ceph-iscsi config data is stored.\n  trusted_ip_list: \"IP_ADDRESS_1,IP_ADDRESS_2\" # optional\n  api_port: ... # optional\n  api_user: API_USERNAME # optional\n  api_password: API_PASSWORD # optional\n  api_secure: true/false # optional\n  ssl_cert: | # optional\n  ...\n  ssl_key: | # optional\n  ...\n```\n\n**示例**\n\n```none\nservice_type: iscsi\nservice_id: iscsi\nplacement:\n  hosts:\n    - host01\nspec:\n  pool: mypool\n```\n\n1. **示例**\n\n   ```none\n   cephadm shell --mount iscsi.yaml:/var/lib/ceph/iscsi.yaml\n   ```\n\n2. 进入以下目录：\n\n   **语法**\n\n   ```none\n   cd /var/lib/ceph/DAEMON_PATH/\n   ```\n\n   **示例**\n\n   ```none\n   cd /var/lib/ceph/\n   ```\n\n3. 使用服务规格部署 iSCSI 网关：\n\n   **语法**\n\n   ```none\n   ceph orch apply -i FILE_NAME.yml\n   ```\n\n   **示例**\n\n   ```none\n   ceph orch apply -i iscsi.yml\n   ```\n\n**验证**\n\n- 列出服务：\n\n  **示例**\n\n  ```none\n  ceph orch ls\n  ```\n\n\n\n# 状态查询\n\n## 列出主机、守护进程和进程：\n\n**语法**\n\n```none\nceph orch ps --daemon_type=DAEMON_NAME\n```\n\n**示例**\n\n```none\nceph orch ps --daemon_type=iscsi\n```\n\n# 启动、停止、重启、删除 ISCSI 网关中的某个进程\n\n## 语法\n\n```none\norch daemon start|stop|restart|reconfig <name> \n```\n\n### 先查看进程名称\n\n```shell\nceph orch ps --daemon_type=iscsi\n```\n\n输出结果：\n\n```shell\nNAME                         HOST   PORTS   STATUS         REFRESHED  AGE  MEM USE  MEM LIM  VERSION  IMAGE ID      CONTAINER ID  \niscsi.rbd-pool.node2.aaplvm  node2  *:5000  running (56s)    48s ago  57s    68.2M        -  3.6      4e09faf6bcb2  a11b84946e58  \niscsi.rbd-pool.node3.nmhnko  node3  *:5000  running (59s)    50s ago  60s    45.2M        -  3.6      4e09faf6bcb2  ea84ff4efed7 \n```\n\n\n\n## 启动\n\n```none\nceph orch daemon start iscsi.rbd-pool.node2.aaplvm\n```\n\n## 停止\n\n```none\nceph orch daemon stop iscsi.rbd-pool.node2.aaplvm\n```\n\n## 重启\n\n```none\nceph orch daemon restart iscsi.rbd-pool.node2.aaplvm\n```\n\n## 删除\n\n```shell\nceph orch daemon rm iscsi.rbd-pool.node2.aaplvm\n```\n\n输出结果：\n\n```shell\nRemoved iscsi.rbd-pool.node2.aaplvm from host 'node2'\n```\n\n# 删除 ISCSI 网关\n\n>您可以使用 `ceph 或ch rm` 命令删除 ISCSI 网关守护进程。\n\n## 列出服务：\n\n**示例**\n\n```none\nceph orch ls\n```\n\n## 删除服务\n\n**语法**\n\n```none\nceph orch rm SERVICE_NAME\n```\n\n**示例**\n\n```none\nceph orch rm iscsi.iscsi\n```\n\n## 验证\n\n列出主机、守护进程和进程：\n\n**语法**\n\n```none\nceph orch ps\n```\n\n**示例**\n\n```none\nceph orch ps\n```","slug":"2024/ceph/ceph-start-iscsi-daemo","published":1,"updated":"2025-01-03T11:15:43.080Z","_id":"clzxxiuyd00110aib3jiffjvj","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Ceph-Start-ISCSI-Daemon\"><a href=\"#Ceph-Start-ISCSI-Daemon\" class=\"headerlink\" title=\"Ceph Start ISCSI Daemon\"></a>Ceph Start ISCSI Daemon</h1><h1 id=\"查文档\"><a href=\"#查文档\" class=\"headerlink\" title=\"查文档\"></a>查文档</h1><h2 id=\"查看ceph-orch命令的帮助文档\"><a href=\"#查看ceph-orch命令的帮助文档\" class=\"headerlink\" title=\"查看ceph orch命令的帮助文档\"></a>查看<code>ceph orch</code>命令的帮助文档</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch --help</span><br></pre></td></tr></table></figure>\n\n<p>查询到有关<code>ISCSI</code>的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orch apply iscsi &lt;pool&gt; &lt;api_user&gt; &lt;api_password&gt;          Scale an iSCSI service</span><br><span class=\"line\"> [&lt;trusted_ip_list&gt;] [&lt;placement&gt;] [--unmanaged] [--dry-   </span><br><span class=\"line\"> run] [--format &#123;plain|json|json-pretty|yaml|xml-pretty|   </span><br><span class=\"line\"> xml&#125;] [--no-overwrite] </span><br><span class=\"line\"> </span><br><span class=\"line\">orch daemon add iscsi &lt;pool&gt; &lt;api_user&gt; &lt;api_password&gt;     Start iscsi daemon(s)</span><br><span class=\"line\"> [&lt;trusted_ip_list&gt;] [&lt;placement&gt;]   </span><br><span class=\"line\"> </span><br><span class=\"line\">orch daemon rm &lt;names&gt;... [--force]                        Remove specific daemon(s)</span><br><span class=\"line\"></span><br><span class=\"line\">orch daemon start|stop|restart|reconfig &lt;name&gt;             Start, stop, restart, (redeploy,) or reconfig a specific </span><br><span class=\"line\">                                                            daemon                                                            </span><br><span class=\"line\">orch rm &lt;service_name&gt; [--force]                           Remove a service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"红帽文档\"><a href=\"#红帽文档\" class=\"headerlink\" title=\"红帽文档\"></a>红帽文档</h2><p><a href=\"https://docs.redhat.com/zh_hans/documentation/red_hat_ceph_storage/5/html/operations_guide/management-of-iscsi-gateway-using-the-ceph-orchestrator\">第 12 章 使用 Ceph Orchestrator（有限可用性）管理 iSCSI 网关 | Red Hat Product Documentation</a></p>\n<h1 id=\"部署ISCSI\"><a href=\"#部署ISCSI\" class=\"headerlink\" title=\"部署ISCSI\"></a>部署ISCSI</h1><h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a><strong>先决条件</strong></h2><ul>\n<li>一个正在运行的  Ceph Storage 集群。</li>\n<li>主机添加到集群中。</li>\n<li>部署所有管理器、监控器和 OSD 守护进程。</li>\n</ul>\n<h2 id=\"创建池\"><a href=\"#创建池\" class=\"headerlink\" title=\"创建池\"></a>创建池</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph osd pool create POOL_NAME</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph osd pool create mypool</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用命令行界面部署-iSCSI-网关\"><a href=\"#使用命令行界面部署-iSCSI-网关\" class=\"headerlink\" title=\"使用命令行界面部署 iSCSI 网关\"></a>使用命令行界面部署 iSCSI 网关</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orch apply iscsi &lt;pool&gt; &lt;api_user&gt; &lt;api_password&gt; [&lt;trusted_ip_list&gt;] [&lt;placement&gt;] [--unmanaged] </span><br><span class=\"line\">[--dry-run] [--format &#123;plain|json|json-pretty|yaml|xml-pretty| xml&#125;] [--no-overwrite] </span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch apply iscsi mypool admin admin --placement=&quot;1 host01&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证</strong></p>\n<ul>\n<li><p>列出服务：</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用服务规格部署-iSCSI-网关\"><a href=\"#使用服务规格部署-iSCSI-网关\" class=\"headerlink\" title=\"使用服务规格部署 iSCSI 网关\"></a>使用服务规格部署 iSCSI 网关</h2><h3 id=\"创建-iscsi-yml-配置文件\"><a href=\"#创建-iscsi-yml-配置文件\" class=\"headerlink\" title=\"创建 iscsi.yml 配置文件\"></a>创建 <code>iscsi.yml</code> 配置文件</h3><p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch iscsi.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>编辑 <code>iscsi.yml</code> 文件，使其包含以下详情：</strong></p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service_type: iscsi</span><br><span class=\"line\">service_id: iscsi</span><br><span class=\"line\">placement:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">    - HOST_NAME_1</span><br><span class=\"line\">    - HOST_NAME_2</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  pool: POOL_NAME  # RADOS pool where ceph-iscsi config data is stored.</span><br><span class=\"line\">  trusted_ip_list: &quot;IP_ADDRESS_1,IP_ADDRESS_2&quot; # optional</span><br><span class=\"line\">  api_port: ... # optional</span><br><span class=\"line\">  api_user: API_USERNAME # optional</span><br><span class=\"line\">  api_password: API_PASSWORD # optional</span><br><span class=\"line\">  api_secure: true/false # optional</span><br><span class=\"line\">  ssl_cert: | # optional</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ssl_key: | # optional</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service_type: iscsi</span><br><span class=\"line\">service_id: iscsi</span><br><span class=\"line\">placement:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">    - host01</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  pool: mypool</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cephadm shell --mount iscsi.yaml:/var/lib/ceph/iscsi.yaml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入以下目录：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/lib/ceph/DAEMON_PATH/</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/lib/ceph/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用服务规格部署 iSCSI 网关：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch apply -i FILE_NAME.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch apply -i iscsi.yml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>验证</strong></p>\n<ul>\n<li><p>列出服务：</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"状态查询\"><a href=\"#状态查询\" class=\"headerlink\" title=\"状态查询\"></a>状态查询</h1><h2 id=\"列出主机、守护进程和进程：\"><a href=\"#列出主机、守护进程和进程：\" class=\"headerlink\" title=\"列出主机、守护进程和进程：\"></a>列出主机、守护进程和进程：</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps --daemon_type=DAEMON_NAME</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps --daemon_type=iscsi</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动、停止、重启、删除-ISCSI-网关中的某个进程\"><a href=\"#启动、停止、重启、删除-ISCSI-网关中的某个进程\" class=\"headerlink\" title=\"启动、停止、重启、删除 ISCSI 网关中的某个进程\"></a>启动、停止、重启、删除 ISCSI 网关中的某个进程</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orch daemon start|stop|restart|reconfig &lt;name&gt; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"先查看进程名称\"><a href=\"#先查看进程名称\" class=\"headerlink\" title=\"先查看进程名称\"></a>先查看进程名称</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps --daemon_type=iscsi</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                         HOST   PORTS   STATUS         REFRESHED  AGE  MEM USE  MEM LIM  VERSION  IMAGE ID      CONTAINER ID  </span><br><span class=\"line\">iscsi.rbd-pool.node2.aaplvm  node2  *:5000  running (56s)    48s ago  57s    68.2M        -  3.6      4e09faf6bcb2  a11b84946e58  </span><br><span class=\"line\">iscsi.rbd-pool.node3.nmhnko  node3  *:5000  running (59s)    50s ago  60s    45.2M        -  3.6      4e09faf6bcb2  ea84ff4efed7 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon start iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon stop iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon restart iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon rm iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Removed iscsi.rbd-pool.node2.aaplvm from host &#x27;node2&#x27;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除-ISCSI-网关\"><a href=\"#删除-ISCSI-网关\" class=\"headerlink\" title=\"删除 ISCSI 网关\"></a>删除 ISCSI 网关</h1><blockquote>\n<p>您可以使用 <code>ceph 或ch rm</code> 命令删除 ISCSI 网关守护进程。</p>\n</blockquote>\n<h2 id=\"列出服务：\"><a href=\"#列出服务：\" class=\"headerlink\" title=\"列出服务：\"></a>列出服务：</h2><p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch rm SERVICE_NAME</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch rm iscsi.iscsi</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>列出主机、守护进程和进程：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps</span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h1 id=\"Ceph-Start-ISCSI-Daemon\"><a href=\"#Ceph-Start-ISCSI-Daemon\" class=\"headerlink\" title=\"Ceph Start ISCSI Daemon\"></a>Ceph Start ISCSI Daemon</h1><h1 id=\"查文档\"><a href=\"#查文档\" class=\"headerlink\" title=\"查文档\"></a>查文档</h1><h2 id=\"查看ceph-orch命令的帮助文档\"><a href=\"#查看ceph-orch命令的帮助文档\" class=\"headerlink\" title=\"查看ceph orch命令的帮助文档\"></a>查看<code>ceph orch</code>命令的帮助文档</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch --help</span><br></pre></td></tr></table></figure>\n\n<p>查询到有关<code>ISCSI</code>的命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orch apply iscsi &lt;pool&gt; &lt;api_user&gt; &lt;api_password&gt;          Scale an iSCSI service</span><br><span class=\"line\"> [&lt;trusted_ip_list&gt;] [&lt;placement&gt;] [--unmanaged] [--dry-   </span><br><span class=\"line\"> run] [--format &#123;plain|json|json-pretty|yaml|xml-pretty|   </span><br><span class=\"line\"> xml&#125;] [--no-overwrite] </span><br><span class=\"line\"> </span><br><span class=\"line\">orch daemon add iscsi &lt;pool&gt; &lt;api_user&gt; &lt;api_password&gt;     Start iscsi daemon(s)</span><br><span class=\"line\"> [&lt;trusted_ip_list&gt;] [&lt;placement&gt;]   </span><br><span class=\"line\"> </span><br><span class=\"line\">orch daemon rm &lt;names&gt;... [--force]                        Remove specific daemon(s)</span><br><span class=\"line\"></span><br><span class=\"line\">orch daemon start|stop|restart|reconfig &lt;name&gt;             Start, stop, restart, (redeploy,) or reconfig a specific </span><br><span class=\"line\">                                                            daemon                                                            </span><br><span class=\"line\">orch rm &lt;service_name&gt; [--force]                           Remove a service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"红帽文档\"><a href=\"#红帽文档\" class=\"headerlink\" title=\"红帽文档\"></a>红帽文档</h2><p><a href=\"https://docs.redhat.com/zh_hans/documentation/red_hat_ceph_storage/5/html/operations_guide/management-of-iscsi-gateway-using-the-ceph-orchestrator\">第 12 章 使用 Ceph Orchestrator（有限可用性）管理 iSCSI 网关 | Red Hat Product Documentation</a></p>\n<h1 id=\"部署ISCSI\"><a href=\"#部署ISCSI\" class=\"headerlink\" title=\"部署ISCSI\"></a>部署ISCSI</h1><h2 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a><strong>先决条件</strong></h2><ul>\n<li>一个正在运行的  Ceph Storage 集群。</li>\n<li>主机添加到集群中。</li>\n<li>部署所有管理器、监控器和 OSD 守护进程。</li>\n</ul>\n<h2 id=\"创建池\"><a href=\"#创建池\" class=\"headerlink\" title=\"创建池\"></a>创建池</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph osd pool create POOL_NAME</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph osd pool create mypool</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用命令行界面部署-iSCSI-网关\"><a href=\"#使用命令行界面部署-iSCSI-网关\" class=\"headerlink\" title=\"使用命令行界面部署 iSCSI 网关\"></a>使用命令行界面部署 iSCSI 网关</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orch apply iscsi &lt;pool&gt; &lt;api_user&gt; &lt;api_password&gt; [&lt;trusted_ip_list&gt;] [&lt;placement&gt;] [--unmanaged] </span><br><span class=\"line\">[--dry-run] [--format &#123;plain|json|json-pretty|yaml|xml-pretty| xml&#125;] [--no-overwrite] </span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch apply iscsi mypool admin admin --placement=&quot;1 host01&quot;</span><br></pre></td></tr></table></figure>\n\n<p><strong>验证</strong></p>\n<ul>\n<li><p>列出服务：</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"使用服务规格部署-iSCSI-网关\"><a href=\"#使用服务规格部署-iSCSI-网关\" class=\"headerlink\" title=\"使用服务规格部署 iSCSI 网关\"></a>使用服务规格部署 iSCSI 网关</h2><h3 id=\"创建-iscsi-yml-配置文件\"><a href=\"#创建-iscsi-yml-配置文件\" class=\"headerlink\" title=\"创建 iscsi.yml 配置文件\"></a>创建 <code>iscsi.yml</code> 配置文件</h3><p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch iscsi.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>编辑 <code>iscsi.yml</code> 文件，使其包含以下详情：</strong></p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service_type: iscsi</span><br><span class=\"line\">service_id: iscsi</span><br><span class=\"line\">placement:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">    - HOST_NAME_1</span><br><span class=\"line\">    - HOST_NAME_2</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  pool: POOL_NAME  # RADOS pool where ceph-iscsi config data is stored.</span><br><span class=\"line\">  trusted_ip_list: &quot;IP_ADDRESS_1,IP_ADDRESS_2&quot; # optional</span><br><span class=\"line\">  api_port: ... # optional</span><br><span class=\"line\">  api_user: API_USERNAME # optional</span><br><span class=\"line\">  api_password: API_PASSWORD # optional</span><br><span class=\"line\">  api_secure: true/false # optional</span><br><span class=\"line\">  ssl_cert: | # optional</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  ssl_key: | # optional</span><br><span class=\"line\">  ...</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service_type: iscsi</span><br><span class=\"line\">service_id: iscsi</span><br><span class=\"line\">placement:</span><br><span class=\"line\">  hosts:</span><br><span class=\"line\">    - host01</span><br><span class=\"line\">spec:</span><br><span class=\"line\">  pool: mypool</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li><p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cephadm shell --mount iscsi.yaml:/var/lib/ceph/iscsi.yaml</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>进入以下目录：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/lib/ceph/DAEMON_PATH/</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /var/lib/ceph/</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用服务规格部署 iSCSI 网关：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch apply -i FILE_NAME.yml</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch apply -i iscsi.yml</span><br></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>验证</strong></p>\n<ul>\n<li><p>列出服务：</p>\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ls</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"状态查询\"><a href=\"#状态查询\" class=\"headerlink\" title=\"状态查询\"></a>状态查询</h1><h2 id=\"列出主机、守护进程和进程：\"><a href=\"#列出主机、守护进程和进程：\" class=\"headerlink\" title=\"列出主机、守护进程和进程：\"></a>列出主机、守护进程和进程：</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps --daemon_type=DAEMON_NAME</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps --daemon_type=iscsi</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动、停止、重启、删除-ISCSI-网关中的某个进程\"><a href=\"#启动、停止、重启、删除-ISCSI-网关中的某个进程\" class=\"headerlink\" title=\"启动、停止、重启、删除 ISCSI 网关中的某个进程\"></a>启动、停止、重启、删除 ISCSI 网关中的某个进程</h1><h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">orch daemon start|stop|restart|reconfig &lt;name&gt; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"先查看进程名称\"><a href=\"#先查看进程名称\" class=\"headerlink\" title=\"先查看进程名称\"></a>先查看进程名称</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps --daemon_type=iscsi</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NAME                         HOST   PORTS   STATUS         REFRESHED  AGE  MEM USE  MEM LIM  VERSION  IMAGE ID      CONTAINER ID  </span><br><span class=\"line\">iscsi.rbd-pool.node2.aaplvm  node2  *:5000  running (56s)    48s ago  57s    68.2M        -  3.6      4e09faf6bcb2  a11b84946e58  </span><br><span class=\"line\">iscsi.rbd-pool.node3.nmhnko  node3  *:5000  running (59s)    50s ago  60s    45.2M        -  3.6      4e09faf6bcb2  ea84ff4efed7 </span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon start iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"停止\"><a href=\"#停止\" class=\"headerlink\" title=\"停止\"></a>停止</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon stop iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon restart iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch daemon rm iscsi.rbd-pool.node2.aaplvm</span><br></pre></td></tr></table></figure>\n\n<p>输出结果：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Removed iscsi.rbd-pool.node2.aaplvm from host &#x27;node2&#x27;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"删除-ISCSI-网关\"><a href=\"#删除-ISCSI-网关\" class=\"headerlink\" title=\"删除 ISCSI 网关\"></a>删除 ISCSI 网关</h1><blockquote>\n<p>您可以使用 <code>ceph 或ch rm</code> 命令删除 ISCSI 网关守护进程。</p>\n</blockquote>\n<h2 id=\"列出服务：\"><a href=\"#列出服务：\" class=\"headerlink\" title=\"列出服务：\"></a>列出服务：</h2><p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ls</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h2><p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch rm SERVICE_NAME</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch rm iscsi.iscsi</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"验证\"><a href=\"#验证\" class=\"headerlink\" title=\"验证\"></a>验证</h2><p>列出主机、守护进程和进程：</p>\n<p><strong>语法</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps</span><br></pre></td></tr></table></figure>\n\n<p><strong>示例</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ceph orch ps</span><br></pre></td></tr></table></figure>"},{"title":"Ubuntu Export Offline Packages","date":"2024-08-16T08:50:18.000Z","cover":"/images/ceph/ceph.png","_content":"\n# Ubuntu 离线包制作\n\n## 创建保存目录\n\n```shell\nmkdir /root/offline-depends\n```\n\n\n\n## 安装工具包`apt-rdepends`\n\n>`apt-rdepends` 是一个用于查看软件包依赖关系的工具，它可以帮助你理解一个软件包安装时需要哪些其他软件包作为依赖。\n\n```shell\nsudo apt install apt-rdepends\n```\n\n\n\n## 下载包\n\n>使用以下命令下载主包（我们以 Vim为例子）以及所有依赖项。\n\n```shell\nsudo apt-rdepends vim | grep -v \"^ \"  | xargs -r sudo apt-get download\n```\n\n**`| grep -v \"^ \"`**： 用于过滤掉`^`开头的依赖包\n\n- `|`：管道符号，用于将前一个命令的输出作为后一个命令的输入。\n- `grep -v \"^ \"`：`grep` 是一个文本搜索工具，`-v` 选项用于反转匹配，即选择不匹配给定模式的行。`\"^ \"` 是一个正则表达式，匹配任何以空格开头的行。\n\n![image-20240810105023675](image-20240810105023675.png)\n\n**`| xargs -r sudo apt-get download`**：\n\n- 管道 `|` 将 `apt-rdepends` 的输出传递给 `xargs` 命令。\n\n- `xargs` 命令用于从标准输入构建并执行命令。在这里，它接收 `apt-rdepends` 输出的软件包名列表，并为每个软件包名执行 `sudo apt-get download` 命令。\n\n- `-r` 或 `--no-run-if-empty` 选项告诉 `xargs` 如果输入为空（即没有软件包名传递给它），则不要执行任何命令。这是一个很好的安全特性。\n\n  \n\n### 找不到对于的包时先过滤掉\n\n![image-20240810105145553](image-20240810105145553.png)\n\n\n\n### 过滤\n\n```shell\nsudo apt-rdepends vim | grep -v \"^ \"  |grep -v 'debconf-2.0' | xargs -r sudo apt-get download\n```\n\n![image-20240810105552583](image-20240810105552583.png)\n\n![image-20240810105703217](image-20240810105703217.png)\n\n### 查询过滤掉的包\n\n[Ubuntu Repositories](https://ubuntu.pkgs.org/)  地址：https://ubuntu.pkgs.org/\n\n>有些包全称可能搜索不到，删减一些，保留关键词\n\n\n\n![image-20240810110014734](image-20240810110014734.png)\n\n![image-20240810110058958](image-20240810110058958.png)\n\n### 离线对应的包\n\n```shell\nsudo apt-rdepends debconf | grep -v \"^ \"  | xargs -r sudo apt-get download\n```\n\n![image-20240810110226945](image-20240810110226945.png)\n\n\n\n## 查看离线包\n\n> 拷贝这些包到需要安装的环境中\n\n![image-20240810110427960](image-20240810110427960.png)\n\n\n\n## 安装\n\n>在离线包的同级目录\n\n```shell\nsudo dpkg -i *\n```\n\n\n\n**没错，就这么简单！**","source":"_posts/2024/ceph/ubuntu-export-offline-packages.md","raw":"---\ntitle: Ubuntu Export Offline Packages\ndate: 2024-08-16 16:50:18\ntags:\n- Ceph\ncategories:\n- 分布式存储\ncover: /images/ceph/ceph.png\n\n---\n\n# Ubuntu 离线包制作\n\n## 创建保存目录\n\n```shell\nmkdir /root/offline-depends\n```\n\n\n\n## 安装工具包`apt-rdepends`\n\n>`apt-rdepends` 是一个用于查看软件包依赖关系的工具，它可以帮助你理解一个软件包安装时需要哪些其他软件包作为依赖。\n\n```shell\nsudo apt install apt-rdepends\n```\n\n\n\n## 下载包\n\n>使用以下命令下载主包（我们以 Vim为例子）以及所有依赖项。\n\n```shell\nsudo apt-rdepends vim | grep -v \"^ \"  | xargs -r sudo apt-get download\n```\n\n**`| grep -v \"^ \"`**： 用于过滤掉`^`开头的依赖包\n\n- `|`：管道符号，用于将前一个命令的输出作为后一个命令的输入。\n- `grep -v \"^ \"`：`grep` 是一个文本搜索工具，`-v` 选项用于反转匹配，即选择不匹配给定模式的行。`\"^ \"` 是一个正则表达式，匹配任何以空格开头的行。\n\n![image-20240810105023675](image-20240810105023675.png)\n\n**`| xargs -r sudo apt-get download`**：\n\n- 管道 `|` 将 `apt-rdepends` 的输出传递给 `xargs` 命令。\n\n- `xargs` 命令用于从标准输入构建并执行命令。在这里，它接收 `apt-rdepends` 输出的软件包名列表，并为每个软件包名执行 `sudo apt-get download` 命令。\n\n- `-r` 或 `--no-run-if-empty` 选项告诉 `xargs` 如果输入为空（即没有软件包名传递给它），则不要执行任何命令。这是一个很好的安全特性。\n\n  \n\n### 找不到对于的包时先过滤掉\n\n![image-20240810105145553](image-20240810105145553.png)\n\n\n\n### 过滤\n\n```shell\nsudo apt-rdepends vim | grep -v \"^ \"  |grep -v 'debconf-2.0' | xargs -r sudo apt-get download\n```\n\n![image-20240810105552583](image-20240810105552583.png)\n\n![image-20240810105703217](image-20240810105703217.png)\n\n### 查询过滤掉的包\n\n[Ubuntu Repositories](https://ubuntu.pkgs.org/)  地址：https://ubuntu.pkgs.org/\n\n>有些包全称可能搜索不到，删减一些，保留关键词\n\n\n\n![image-20240810110014734](image-20240810110014734.png)\n\n![image-20240810110058958](image-20240810110058958.png)\n\n### 离线对应的包\n\n```shell\nsudo apt-rdepends debconf | grep -v \"^ \"  | xargs -r sudo apt-get download\n```\n\n![image-20240810110226945](image-20240810110226945.png)\n\n\n\n## 查看离线包\n\n> 拷贝这些包到需要安装的环境中\n\n![image-20240810110427960](image-20240810110427960.png)\n\n\n\n## 安装\n\n>在离线包的同级目录\n\n```shell\nsudo dpkg -i *\n```\n\n\n\n**没错，就这么简单！**","slug":"2024/ceph/ubuntu-export-offline-packages","published":1,"updated":"2024-08-17T09:27:07.276Z","_id":"clzxxiuyd00140aibfj10693j","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Ubuntu-离线包制作\"><a href=\"#Ubuntu-离线包制作\" class=\"headerlink\" title=\"Ubuntu 离线包制作\"></a>Ubuntu 离线包制作</h1><h2 id=\"创建保存目录\"><a href=\"#创建保存目录\" class=\"headerlink\" title=\"创建保存目录\"></a>创建保存目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/offline-depends</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装工具包apt-rdepends\"><a href=\"#安装工具包apt-rdepends\" class=\"headerlink\" title=\"安装工具包apt-rdepends\"></a>安装工具包<code>apt-rdepends</code></h2><blockquote>\n<p><code>apt-rdepends</code> 是一个用于查看软件包依赖关系的工具，它可以帮助你理解一个软件包安装时需要哪些其他软件包作为依赖。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install apt-rdepends</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载包\"><a href=\"#下载包\" class=\"headerlink\" title=\"下载包\"></a>下载包</h2><blockquote>\n<p>使用以下命令下载主包（我们以 Vim为例子）以及所有依赖项。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-rdepends vim | grep -v &quot;^ &quot;  | xargs -r sudo apt-get download</span><br></pre></td></tr></table></figure>\n\n<p>**<code>| grep -v &quot;^ &quot;</code>**： 用于过滤掉<code>^</code>开头的依赖包</p>\n<ul>\n<li><code>|</code>：管道符号，用于将前一个命令的输出作为后一个命令的输入。</li>\n<li><code>grep -v &quot;^ &quot;</code>：<code>grep</code> 是一个文本搜索工具，<code>-v</code> 选项用于反转匹配，即选择不匹配给定模式的行。<code>&quot;^ &quot;</code> 是一个正则表达式，匹配任何以空格开头的行。</li>\n</ul>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105023675.png\" alt=\"image-20240810105023675\"></p>\n<p>**<code>| xargs -r sudo apt-get download</code>**：</p>\n<ul>\n<li><p>管道 <code>|</code> 将 <code>apt-rdepends</code> 的输出传递给 <code>xargs</code> 命令。</p>\n</li>\n<li><p><code>xargs</code> 命令用于从标准输入构建并执行命令。在这里，它接收 <code>apt-rdepends</code> 输出的软件包名列表，并为每个软件包名执行 <code>sudo apt-get download</code> 命令。</p>\n</li>\n<li><p><code>-r</code> 或 <code>--no-run-if-empty</code> 选项告诉 <code>xargs</code> 如果输入为空（即没有软件包名传递给它），则不要执行任何命令。这是一个很好的安全特性。</p>\n</li>\n</ul>\n<h3 id=\"找不到对于的包时先过滤掉\"><a href=\"#找不到对于的包时先过滤掉\" class=\"headerlink\" title=\"找不到对于的包时先过滤掉\"></a>找不到对于的包时先过滤掉</h3><p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105145553.png\" alt=\"image-20240810105145553\"></p>\n<h3 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-rdepends vim | grep -v &quot;^ &quot;  |grep -v &#x27;debconf-2.0&#x27; | xargs -r sudo apt-get download</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105552583.png\" alt=\"image-20240810105552583\"></p>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105703217.png\" alt=\"image-20240810105703217\"></p>\n<h3 id=\"查询过滤掉的包\"><a href=\"#查询过滤掉的包\" class=\"headerlink\" title=\"查询过滤掉的包\"></a>查询过滤掉的包</h3><p><a href=\"https://ubuntu.pkgs.org/\">Ubuntu Repositories</a>  地址：<a href=\"https://ubuntu.pkgs.org/\">https://ubuntu.pkgs.org/</a></p>\n<blockquote>\n<p>有些包全称可能搜索不到，删减一些，保留关键词</p>\n</blockquote>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110014734.png\" alt=\"image-20240810110014734\"></p>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110058958.png\" alt=\"image-20240810110058958\"></p>\n<h3 id=\"离线对应的包\"><a href=\"#离线对应的包\" class=\"headerlink\" title=\"离线对应的包\"></a>离线对应的包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-rdepends debconf | grep -v &quot;^ &quot;  | xargs -r sudo apt-get download</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110226945.png\" alt=\"image-20240810110226945\"></p>\n<h2 id=\"查看离线包\"><a href=\"#查看离线包\" class=\"headerlink\" title=\"查看离线包\"></a>查看离线包</h2><blockquote>\n<p>拷贝这些包到需要安装的环境中</p>\n</blockquote>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110427960.png\" alt=\"image-20240810110427960\"></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>在离线包的同级目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i *</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>没错，就这么简单！</strong></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"Ubuntu-离线包制作\"><a href=\"#Ubuntu-离线包制作\" class=\"headerlink\" title=\"Ubuntu 离线包制作\"></a>Ubuntu 离线包制作</h1><h2 id=\"创建保存目录\"><a href=\"#创建保存目录\" class=\"headerlink\" title=\"创建保存目录\"></a>创建保存目录</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /root/offline-depends</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"安装工具包apt-rdepends\"><a href=\"#安装工具包apt-rdepends\" class=\"headerlink\" title=\"安装工具包apt-rdepends\"></a>安装工具包<code>apt-rdepends</code></h2><blockquote>\n<p><code>apt-rdepends</code> 是一个用于查看软件包依赖关系的工具，它可以帮助你理解一个软件包安装时需要哪些其他软件包作为依赖。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install apt-rdepends</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"下载包\"><a href=\"#下载包\" class=\"headerlink\" title=\"下载包\"></a>下载包</h2><blockquote>\n<p>使用以下命令下载主包（我们以 Vim为例子）以及所有依赖项。</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-rdepends vim | grep -v &quot;^ &quot;  | xargs -r sudo apt-get download</span><br></pre></td></tr></table></figure>\n\n<p>**<code>| grep -v &quot;^ &quot;</code>**： 用于过滤掉<code>^</code>开头的依赖包</p>\n<ul>\n<li><code>|</code>：管道符号，用于将前一个命令的输出作为后一个命令的输入。</li>\n<li><code>grep -v &quot;^ &quot;</code>：<code>grep</code> 是一个文本搜索工具，<code>-v</code> 选项用于反转匹配，即选择不匹配给定模式的行。<code>&quot;^ &quot;</code> 是一个正则表达式，匹配任何以空格开头的行。</li>\n</ul>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105023675.png\" alt=\"image-20240810105023675\"></p>\n<p>**<code>| xargs -r sudo apt-get download</code>**：</p>\n<ul>\n<li><p>管道 <code>|</code> 将 <code>apt-rdepends</code> 的输出传递给 <code>xargs</code> 命令。</p>\n</li>\n<li><p><code>xargs</code> 命令用于从标准输入构建并执行命令。在这里，它接收 <code>apt-rdepends</code> 输出的软件包名列表，并为每个软件包名执行 <code>sudo apt-get download</code> 命令。</p>\n</li>\n<li><p><code>-r</code> 或 <code>--no-run-if-empty</code> 选项告诉 <code>xargs</code> 如果输入为空（即没有软件包名传递给它），则不要执行任何命令。这是一个很好的安全特性。</p>\n</li>\n</ul>\n<h3 id=\"找不到对于的包时先过滤掉\"><a href=\"#找不到对于的包时先过滤掉\" class=\"headerlink\" title=\"找不到对于的包时先过滤掉\"></a>找不到对于的包时先过滤掉</h3><p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105145553.png\" alt=\"image-20240810105145553\"></p>\n<h3 id=\"过滤\"><a href=\"#过滤\" class=\"headerlink\" title=\"过滤\"></a>过滤</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-rdepends vim | grep -v &quot;^ &quot;  |grep -v &#x27;debconf-2.0&#x27; | xargs -r sudo apt-get download</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105552583.png\" alt=\"image-20240810105552583\"></p>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810105703217.png\" alt=\"image-20240810105703217\"></p>\n<h3 id=\"查询过滤掉的包\"><a href=\"#查询过滤掉的包\" class=\"headerlink\" title=\"查询过滤掉的包\"></a>查询过滤掉的包</h3><p><a href=\"https://ubuntu.pkgs.org/\">Ubuntu Repositories</a>  地址：<a href=\"https://ubuntu.pkgs.org/\">https://ubuntu.pkgs.org/</a></p>\n<blockquote>\n<p>有些包全称可能搜索不到，删减一些，保留关键词</p>\n</blockquote>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110014734.png\" alt=\"image-20240810110014734\"></p>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110058958.png\" alt=\"image-20240810110058958\"></p>\n<h3 id=\"离线对应的包\"><a href=\"#离线对应的包\" class=\"headerlink\" title=\"离线对应的包\"></a>离线对应的包</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-rdepends debconf | grep -v &quot;^ &quot;  | xargs -r sudo apt-get download</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110226945.png\" alt=\"image-20240810110226945\"></p>\n<h2 id=\"查看离线包\"><a href=\"#查看离线包\" class=\"headerlink\" title=\"查看离线包\"></a>查看离线包</h2><blockquote>\n<p>拷贝这些包到需要安装的环境中</p>\n</blockquote>\n<p><img src=\"/post/2024/ceph/ubuntu-export-offline-packages/image-20240810110427960.png\" alt=\"image-20240810110427960\"></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>在离线包的同级目录</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo dpkg -i *</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>没错，就这么简单！</strong></p>\n"},{"title":"Ubuntu Install Ceph ISCSI","date":"2024-08-05T12:00:00.000Z","cover":"/images/ceph/ceph2.png","_content":"\n# Ubuntu 在线安装 Ceph-ISCSI服务\n\n## 前提\n\n- 正常的Ceph集群环境\n- 有`rbd`类型名称是`rbd`的存储池\n\n## 添加源\n\n拷贝以下内容到`/etc/apt/sources.list`\n\n```shell\ndeb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse\ndeb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse\ndeb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse\ndeb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\n```\n\n或者执行以下命令\n\n```shell\nsudo printf '%s\\n'  \\\n'deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse' \\\n'deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse'  \\\n'deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse'  \\\n'deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse' \\\n| sudo tee -a /etc/apt/sources.list\n```\n\n\n\n# 更新源\n\n```shell\nsudo apt-get update\n```\n\n\n\n# 安装依赖\n\n> 会自动安装其所需要的依赖包\n\n```shell\nsudo apt-get install -y ceph-iscsi\n```\n\n>查询此包的依赖包可访问 https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html\n>\n>[ceph-iscsi_3.4-0ubuntu2_all.deb Ubuntu 20.04 LTS Download (pkgs.org)](https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html)\n\n# 添加配置文件\n\n```\ntouch /etc/ceph/iscsi-gateway.cfg\n```\n\n```\n[config]\n# Name of the Ceph storage cluster. A suitable Ceph configuration file allowing\n# access to the Ceph storage cluster from the gateway node is required, if not\n# colocated on an OSD node.\ncluster_name = ceph\n\n# Place a copy of the ceph cluster's admin keyring in the gateway's /etc/ceph\n# drectory and reference the filename here\ngateway_keyring = ceph.client.admin.keyring\n\n\n# API settings.\n# The API supports a number of options that allow you to tailor it to your\n# local environment. If you want to run the API under https, you will need to\n# create cert/key files that are compatible for each iSCSI gateway node, that is\n# not locked to a specific node. SSL cert and key files *must* be called\n# 'iscsi-gateway.crt' and 'iscsi-gateway.key' and placed in the '/etc/ceph/' directory\n# on *each* gateway node. With the SSL files in place, you can use 'api_secure = true'\n# to switch to https mode.\n\n# To support the API, the bear minimum settings are:\napi_secure = false\n\n# Additional API configuration options are as follows, defaults shown.\n# api_user = admin\n# api_password = admin\n# api_port = 5001\n# 修改IP为要装ISCSI服务的节点\ntrusted_ip_list = 10.20.41.91\n```\n\n\n\n# 启动服务\n\n```shell\nsystemctl daemon-reload\nsystemctl enable rbd-target-gw\nsystemctl start rbd-target-gw\nsystemctl enable rbd-target-api\nsystemctl start rbd-target-api\n```\n\n\n\n## 查询状态检查是否正常启动\n\n**查看状态**\n\n```shell\nsystemctl status rbd-target-gw\n```\n\n**查看详细日志**\n\n```shell\njournalctl -u rbd-target-gw --no-pager\n```\n\n\n\n**查看状态**\n\n```shell\nsystemctl status rbd-target-api\n```\n\n****查看详细日志****\n\n```shell\njournalctl -u rbd-target-api --no-pager\n```\n\n\n\n>ceph-iscsi的日志文件在`/var/log/rbd-target-api/` `/var/log/rbd-target-gw/` 目录下，\n>\n>详细日志也可以到这里查看！！！\n\n\n\n## 错误解决\n\n### 1.缺少配置文件\n\n#### 错误日志\n\n```\nAug 12 09:50:09 node3 rbd-target-api[741226]: Started Ceph iscsi target configuration API.\nAug 12 09:50:09 node3 rbd-target-api[741226]: Invaid cluster_client_name or setting in /etc/ceph/ceph.conf - [errno 2] RADOS object not found (error calling conf_read_file)\nAug 12 09:50:09 node3 rbd-target-api[741226]: Unable to open/read the configuration object\nAug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a\nAug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\n```\n\n#### 原因\n\n缺少配置文件`/etc/ceph/ceph.conf`\n\n#### 解决方案\n\n从主节点拷贝`/etc/ceph/ceph.conf`到安装目录\n\n>\n>\n>正确的配置目录结构是\n>\n>```shell\n>root@node3:/etc/ceph# ls -l /etc/ceph/\n>total 16\n>-rw------- 1 root root   63 Aug 12 09:43 ceph.client.admin.keyring\n>-rw-r--r-- 1 root root  868 Aug 12 09:51 ceph.conf\n>-rw-r--r-- 1 root root 1156 Aug 12 09:49 iscsi-gateway.cfg\n>```\n>\n>\n\n\n\n### 2.启动太频繁\n\n#### 错误日志\n\n```shell\nroot@node3:/etc/ceph# systemctl status rbd-target-api.service\n● rbd-target-api.service - Ceph iscsi target configuration API\n     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)\n     Active: failed (Result: exit-code) since Mon 2024-08-12 09:50:09 UTC; 7min ago\n   Main PID: 741226 (code=exited, status=16)\n\nAug 12 09:54:19 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\nAug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.\nAug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\nAug 12 09:55:36 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\nAug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.\nAug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\nAug 12 09:55:44 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\nAug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.\nAug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\nAug 12 09:57:01 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\n```\n\n#### 原因\n\n启动太频繁\n\n#### 解决方案\n\n先关闭系统启动时自动启动 `rbd-target-api` 服务\n\n```shell\nsystemctl disable rbd-target-api\n```\n\n再尝试启动\n\n```shell\nsystemctl start rbd-target-api\n```\n\n```shell\nroot@node3:/etc/ceph# systemctl start rbd-target-api\nroot@node3:/etc/ceph# systemctl status rbd-target-api.service\n● rbd-target-api.service - Ceph iscsi target configuration API\n     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)\n     Active: active (running) since Mon 2024-08-12 09:58:04 UTC; 7s ago\n   Main PID: 744312 (rbd-target-api)\n      Tasks: 26 (limit: 19066)\n     Memory: 42.7M\n     CGroup: /system.slice/rbd-target-api.service\n             └─744312 /usr/bin/python3 /usr/bin/rbd-target-api\n\nAug 12 09:58:06 node3 rbd-target-api[744312]: Checking for config object changes every 1s\nAug 12 09:58:06 node3 rbd-target-api[744312]: Processing osd blacklist entries for this node\nAug 12 09:58:07 node3 rbd-target-api[744312]: Reading the configuration object to update local LIO configuration\nAug 12 09:58:07 node3 rbd-target-api[744312]: Configuration does not have an entry for this host(node3) - nothing to define to LIO\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Serving Flask app \"rbd-target-api\" (lazy loading)\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Environment: production\nAug 12 09:58:07 node3 rbd-target-api[744312]:    WARNING: This is a development server. Do not use it in a production deployment.\nAug 12 09:58:07 node3 rbd-target-api[744312]:    Use a production WSGI server instead.\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Debug mode: off\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Running on http://[::]:5000/ (Press CTRL+C to quit)\n```\n\n恢复开机启动\n\n```shell\nsystemctl enable rbd-target-api\n```\n\n\n\n### 3.删除黑名单失败\n\n#### 错误日志\n\n```shell\nAug 09 09:52:49 node1 systemd[1]: Started Ceph iscsi target configuration API.\nAug 09 09:52:50 node1 rbd-target-api[43659]: Started the configuration object watcher\nAug 09 09:52:50 node1 rbd-target-api[43659]: Checking for config object changes every 1s\nAug 09 09:52:50 node1 rbd-target-api[43659]: Processing osd blacklist entries for this node\nAug 09 09:52:51 node1 rbd-target-api[43659]: Removing blacklisted entry for this host : 10.20.41.91:0/3374673318\nAug 09 09:52:53 node1 rbd-target-api[43659]: blacklist removal failed. Run 'ceph -n client.admin --conf /etc/ceph/ceph.conf osd blacklist rm 10.20.41.91:0/3374673318'\nAug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a\nAug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\n\n```\n\n#### 原因\n\n删除黑名单失败\n\n#### 解决方案\n\n在`ceph`客户端中执行`osd blacklist ls`查看黑名单列表\n\n```shell\nroot@node1:/etc/ceph# ceph\nceph>  osd blacklist ls\nlisted 4 entries\n10.20.41.91:6801/984155830 2024-08-12T22:28:10.684517+0000\n10.20.41.91:0/3546845001 2024-08-12T22:28:10.684517+0000\n10.20.41.91:0/3099014955 2024-08-12T22:28:10.684517+0000\n10.20.41.91:6800/984155830 2024-08-12T22:28:10.684517+0000\n\n```\n\n手动删除黑名单\n\n```shell\nceph>  osd blacklist rm 10.20.41.91:6801/984155830\nun-blocklisting 10.20.41.91:6801/984155830\n```\n\n再次查看\n\n```shell\nceph>  osd blacklist ls\nlisted 0 entries\n```\n\n重新启动\n\n\n\n# ISCSI命令行工具\n\n>要重新打开终端才会生效哦（天坑）\n\n```shell\ngwcli\n```\n\n```\nroot@node1:/etc/ceph# gwcli\n/> ls\no- / .............................................................................................. [...]\n  o- cluster .............................................................................. [Clusters: 1]\n  | o- ceph ................................................................................. [HEALTH_OK]\n  |   o- pools ............................................................................... [Pools: 3]\n  |   | o- device_health_metrics ..................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 0.00Y]\n  |   | o- rbd ......................................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 12K]\n  |   | o- rbd-pool ................................. [(x3), Commit: 0.00Y/198574144K (0%), Used: 41594b]\n  |   o- topology ..................................................................... [OSDs: 6,MONs: 1]\n  o- disks ............................................................................ [0.00Y, Disks: 0]\n  o- iscsi-targets .................................................... [DiscoveryAuth: None, Targets: 0]\n/> exit\n```\n\n","source":"_posts/2024/ceph/ubuntu-install-ceph-iscsi.md","raw":"---\ntitle: Ubuntu Install Ceph ISCSI\ndate: 2024-08-5 20:00:00\ntags:\n- Ceph\ncategories:\n- 分布式存储\ncover: /images/ceph/ceph2.png\n---\n\n# Ubuntu 在线安装 Ceph-ISCSI服务\n\n## 前提\n\n- 正常的Ceph集群环境\n- 有`rbd`类型名称是`rbd`的存储池\n\n## 添加源\n\n拷贝以下内容到`/etc/apt/sources.list`\n\n```shell\ndeb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse\ndeb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse\ndeb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse\ndeb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse\n```\n\n或者执行以下命令\n\n```shell\nsudo printf '%s\\n'  \\\n'deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse' \\\n'deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse'  \\\n'deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse'  \\\n'deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse' \\\n| sudo tee -a /etc/apt/sources.list\n```\n\n\n\n# 更新源\n\n```shell\nsudo apt-get update\n```\n\n\n\n# 安装依赖\n\n> 会自动安装其所需要的依赖包\n\n```shell\nsudo apt-get install -y ceph-iscsi\n```\n\n>查询此包的依赖包可访问 https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html\n>\n>[ceph-iscsi_3.4-0ubuntu2_all.deb Ubuntu 20.04 LTS Download (pkgs.org)](https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html)\n\n# 添加配置文件\n\n```\ntouch /etc/ceph/iscsi-gateway.cfg\n```\n\n```\n[config]\n# Name of the Ceph storage cluster. A suitable Ceph configuration file allowing\n# access to the Ceph storage cluster from the gateway node is required, if not\n# colocated on an OSD node.\ncluster_name = ceph\n\n# Place a copy of the ceph cluster's admin keyring in the gateway's /etc/ceph\n# drectory and reference the filename here\ngateway_keyring = ceph.client.admin.keyring\n\n\n# API settings.\n# The API supports a number of options that allow you to tailor it to your\n# local environment. If you want to run the API under https, you will need to\n# create cert/key files that are compatible for each iSCSI gateway node, that is\n# not locked to a specific node. SSL cert and key files *must* be called\n# 'iscsi-gateway.crt' and 'iscsi-gateway.key' and placed in the '/etc/ceph/' directory\n# on *each* gateway node. With the SSL files in place, you can use 'api_secure = true'\n# to switch to https mode.\n\n# To support the API, the bear minimum settings are:\napi_secure = false\n\n# Additional API configuration options are as follows, defaults shown.\n# api_user = admin\n# api_password = admin\n# api_port = 5001\n# 修改IP为要装ISCSI服务的节点\ntrusted_ip_list = 10.20.41.91\n```\n\n\n\n# 启动服务\n\n```shell\nsystemctl daemon-reload\nsystemctl enable rbd-target-gw\nsystemctl start rbd-target-gw\nsystemctl enable rbd-target-api\nsystemctl start rbd-target-api\n```\n\n\n\n## 查询状态检查是否正常启动\n\n**查看状态**\n\n```shell\nsystemctl status rbd-target-gw\n```\n\n**查看详细日志**\n\n```shell\njournalctl -u rbd-target-gw --no-pager\n```\n\n\n\n**查看状态**\n\n```shell\nsystemctl status rbd-target-api\n```\n\n****查看详细日志****\n\n```shell\njournalctl -u rbd-target-api --no-pager\n```\n\n\n\n>ceph-iscsi的日志文件在`/var/log/rbd-target-api/` `/var/log/rbd-target-gw/` 目录下，\n>\n>详细日志也可以到这里查看！！！\n\n\n\n## 错误解决\n\n### 1.缺少配置文件\n\n#### 错误日志\n\n```\nAug 12 09:50:09 node3 rbd-target-api[741226]: Started Ceph iscsi target configuration API.\nAug 12 09:50:09 node3 rbd-target-api[741226]: Invaid cluster_client_name or setting in /etc/ceph/ceph.conf - [errno 2] RADOS object not found (error calling conf_read_file)\nAug 12 09:50:09 node3 rbd-target-api[741226]: Unable to open/read the configuration object\nAug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a\nAug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\n```\n\n#### 原因\n\n缺少配置文件`/etc/ceph/ceph.conf`\n\n#### 解决方案\n\n从主节点拷贝`/etc/ceph/ceph.conf`到安装目录\n\n>\n>\n>正确的配置目录结构是\n>\n>```shell\n>root@node3:/etc/ceph# ls -l /etc/ceph/\n>total 16\n>-rw------- 1 root root   63 Aug 12 09:43 ceph.client.admin.keyring\n>-rw-r--r-- 1 root root  868 Aug 12 09:51 ceph.conf\n>-rw-r--r-- 1 root root 1156 Aug 12 09:49 iscsi-gateway.cfg\n>```\n>\n>\n\n\n\n### 2.启动太频繁\n\n#### 错误日志\n\n```shell\nroot@node3:/etc/ceph# systemctl status rbd-target-api.service\n● rbd-target-api.service - Ceph iscsi target configuration API\n     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)\n     Active: failed (Result: exit-code) since Mon 2024-08-12 09:50:09 UTC; 7min ago\n   Main PID: 741226 (code=exited, status=16)\n\nAug 12 09:54:19 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\nAug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.\nAug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\nAug 12 09:55:36 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\nAug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.\nAug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\nAug 12 09:55:44 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\nAug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.\nAug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\nAug 12 09:57:01 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.\n```\n\n#### 原因\n\n启动太频繁\n\n#### 解决方案\n\n先关闭系统启动时自动启动 `rbd-target-api` 服务\n\n```shell\nsystemctl disable rbd-target-api\n```\n\n再尝试启动\n\n```shell\nsystemctl start rbd-target-api\n```\n\n```shell\nroot@node3:/etc/ceph# systemctl start rbd-target-api\nroot@node3:/etc/ceph# systemctl status rbd-target-api.service\n● rbd-target-api.service - Ceph iscsi target configuration API\n     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)\n     Active: active (running) since Mon 2024-08-12 09:58:04 UTC; 7s ago\n   Main PID: 744312 (rbd-target-api)\n      Tasks: 26 (limit: 19066)\n     Memory: 42.7M\n     CGroup: /system.slice/rbd-target-api.service\n             └─744312 /usr/bin/python3 /usr/bin/rbd-target-api\n\nAug 12 09:58:06 node3 rbd-target-api[744312]: Checking for config object changes every 1s\nAug 12 09:58:06 node3 rbd-target-api[744312]: Processing osd blacklist entries for this node\nAug 12 09:58:07 node3 rbd-target-api[744312]: Reading the configuration object to update local LIO configuration\nAug 12 09:58:07 node3 rbd-target-api[744312]: Configuration does not have an entry for this host(node3) - nothing to define to LIO\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Serving Flask app \"rbd-target-api\" (lazy loading)\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Environment: production\nAug 12 09:58:07 node3 rbd-target-api[744312]:    WARNING: This is a development server. Do not use it in a production deployment.\nAug 12 09:58:07 node3 rbd-target-api[744312]:    Use a production WSGI server instead.\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Debug mode: off\nAug 12 09:58:07 node3 rbd-target-api[744312]:  * Running on http://[::]:5000/ (Press CTRL+C to quit)\n```\n\n恢复开机启动\n\n```shell\nsystemctl enable rbd-target-api\n```\n\n\n\n### 3.删除黑名单失败\n\n#### 错误日志\n\n```shell\nAug 09 09:52:49 node1 systemd[1]: Started Ceph iscsi target configuration API.\nAug 09 09:52:50 node1 rbd-target-api[43659]: Started the configuration object watcher\nAug 09 09:52:50 node1 rbd-target-api[43659]: Checking for config object changes every 1s\nAug 09 09:52:50 node1 rbd-target-api[43659]: Processing osd blacklist entries for this node\nAug 09 09:52:51 node1 rbd-target-api[43659]: Removing blacklisted entry for this host : 10.20.41.91:0/3374673318\nAug 09 09:52:53 node1 rbd-target-api[43659]: blacklist removal failed. Run 'ceph -n client.admin --conf /etc/ceph/ceph.conf osd blacklist rm 10.20.41.91:0/3374673318'\nAug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a\nAug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Failed with result 'exit-code'.\n\n```\n\n#### 原因\n\n删除黑名单失败\n\n#### 解决方案\n\n在`ceph`客户端中执行`osd blacklist ls`查看黑名单列表\n\n```shell\nroot@node1:/etc/ceph# ceph\nceph>  osd blacklist ls\nlisted 4 entries\n10.20.41.91:6801/984155830 2024-08-12T22:28:10.684517+0000\n10.20.41.91:0/3546845001 2024-08-12T22:28:10.684517+0000\n10.20.41.91:0/3099014955 2024-08-12T22:28:10.684517+0000\n10.20.41.91:6800/984155830 2024-08-12T22:28:10.684517+0000\n\n```\n\n手动删除黑名单\n\n```shell\nceph>  osd blacklist rm 10.20.41.91:6801/984155830\nun-blocklisting 10.20.41.91:6801/984155830\n```\n\n再次查看\n\n```shell\nceph>  osd blacklist ls\nlisted 0 entries\n```\n\n重新启动\n\n\n\n# ISCSI命令行工具\n\n>要重新打开终端才会生效哦（天坑）\n\n```shell\ngwcli\n```\n\n```\nroot@node1:/etc/ceph# gwcli\n/> ls\no- / .............................................................................................. [...]\n  o- cluster .............................................................................. [Clusters: 1]\n  | o- ceph ................................................................................. [HEALTH_OK]\n  |   o- pools ............................................................................... [Pools: 3]\n  |   | o- device_health_metrics ..................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 0.00Y]\n  |   | o- rbd ......................................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 12K]\n  |   | o- rbd-pool ................................. [(x3), Commit: 0.00Y/198574144K (0%), Used: 41594b]\n  |   o- topology ..................................................................... [OSDs: 6,MONs: 1]\n  o- disks ............................................................................ [0.00Y, Disks: 0]\n  o- iscsi-targets .................................................... [DiscoveryAuth: None, Targets: 0]\n/> exit\n```\n\n","slug":"2024/ceph/ubuntu-install-ceph-iscsi","published":1,"updated":"2025-01-03T11:15:43.080Z","_id":"clzxxiuyf00190aib4e8c0f86","comments":1,"layout":"post","photos":[],"content":"<h1 id=\"Ubuntu-在线安装-Ceph-ISCSI服务\"><a href=\"#Ubuntu-在线安装-Ceph-ISCSI服务\" class=\"headerlink\" title=\"Ubuntu 在线安装 Ceph-ISCSI服务\"></a>Ubuntu 在线安装 Ceph-ISCSI服务</h1><h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>正常的Ceph集群环境</li>\n<li>有<code>rbd</code>类型名称是<code>rbd</code>的存储池</li>\n</ul>\n<h2 id=\"添加源\"><a href=\"#添加源\" class=\"headerlink\" title=\"添加源\"></a>添加源</h2><p>拷贝以下内容到<code>/etc/apt/sources.list</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>或者执行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo printf &#x27;%s\\n&#x27;  \\</span><br><span class=\"line\">&#x27;deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse&#x27; \\</span><br><span class=\"line\">&#x27;deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse&#x27;  \\</span><br><span class=\"line\">&#x27;deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse&#x27;  \\</span><br><span class=\"line\">&#x27;deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse&#x27; \\</span><br><span class=\"line\">| sudo tee -a /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><blockquote>\n<p>会自动安装其所需要的依赖包</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y ceph-iscsi</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询此包的依赖包可访问 <a href=\"https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html\">https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html</a></p>\n<p><a href=\"https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html\">ceph-iscsi_3.4-0ubuntu2_all.deb Ubuntu 20.04 LTS Download (pkgs.org)</a></p>\n</blockquote>\n<h1 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/ceph/iscsi-gateway.cfg</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[config]</span><br><span class=\"line\"># Name of the Ceph storage cluster. A suitable Ceph configuration file allowing</span><br><span class=\"line\"># access to the Ceph storage cluster from the gateway node is required, if not</span><br><span class=\"line\"># colocated on an OSD node.</span><br><span class=\"line\">cluster_name = ceph</span><br><span class=\"line\"></span><br><span class=\"line\"># Place a copy of the ceph cluster&#x27;s admin keyring in the gateway&#x27;s /etc/ceph</span><br><span class=\"line\"># drectory and reference the filename here</span><br><span class=\"line\">gateway_keyring = ceph.client.admin.keyring</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># API settings.</span><br><span class=\"line\"># The API supports a number of options that allow you to tailor it to your</span><br><span class=\"line\"># local environment. If you want to run the API under https, you will need to</span><br><span class=\"line\"># create cert/key files that are compatible for each iSCSI gateway node, that is</span><br><span class=\"line\"># not locked to a specific node. SSL cert and key files *must* be called</span><br><span class=\"line\"># &#x27;iscsi-gateway.crt&#x27; and &#x27;iscsi-gateway.key&#x27; and placed in the &#x27;/etc/ceph/&#x27; directory</span><br><span class=\"line\"># on *each* gateway node. With the SSL files in place, you can use &#x27;api_secure = true&#x27;</span><br><span class=\"line\"># to switch to https mode.</span><br><span class=\"line\"></span><br><span class=\"line\"># To support the API, the bear minimum settings are:</span><br><span class=\"line\">api_secure = false</span><br><span class=\"line\"></span><br><span class=\"line\"># Additional API configuration options are as follows, defaults shown.</span><br><span class=\"line\"># api_user = admin</span><br><span class=\"line\"># api_password = admin</span><br><span class=\"line\"># api_port = 5001</span><br><span class=\"line\"># 修改IP为要装ISCSI服务的节点</span><br><span class=\"line\">trusted_ip_list = 10.20.41.91</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable rbd-target-gw</span><br><span class=\"line\">systemctl start rbd-target-gw</span><br><span class=\"line\">systemctl enable rbd-target-api</span><br><span class=\"line\">systemctl start rbd-target-api</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查询状态检查是否正常启动\"><a href=\"#查询状态检查是否正常启动\" class=\"headerlink\" title=\"查询状态检查是否正常启动\"></a>查询状态检查是否正常启动</h2><p><strong>查看状态</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status rbd-target-gw</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看详细日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u rbd-target-gw --no-pager</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看状态</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status rbd-target-api</span><br></pre></td></tr></table></figure>\n\n<p><strong><strong>查看详细日志</strong></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u rbd-target-api --no-pager</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>ceph-iscsi的日志文件在<code>/var/log/rbd-target-api/</code> <code>/var/log/rbd-target-gw/</code> 目录下，</p>\n<p>详细日志也可以到这里查看！！！</p>\n</blockquote>\n<h2 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h2><h3 id=\"1-缺少配置文件\"><a href=\"#1-缺少配置文件\" class=\"headerlink\" title=\"1.缺少配置文件\"></a>1.缺少配置文件</h3><h4 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aug 12 09:50:09 node3 rbd-target-api[741226]: Started Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:50:09 node3 rbd-target-api[741226]: Invaid cluster_client_name or setting in /etc/ceph/ceph.conf - [errno 2] RADOS object not found (error calling conf_read_file)</span><br><span class=\"line\">Aug 12 09:50:09 node3 rbd-target-api[741226]: Unable to open/read the configuration object</span><br><span class=\"line\">Aug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a</span><br><span class=\"line\">Aug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>缺少配置文件<code>/etc/ceph/ceph.conf</code></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>从主节点拷贝<code>/etc/ceph/ceph.conf</code>到安装目录</p>\n<blockquote>\n<p>正确的配置目录结构是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">root@node3:/etc/ceph<span class=\"comment\"># ls -l /etc/ceph/</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">total 16</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">-rw------- 1 root root   63 Aug 12 09:43 ceph.client.admin.keyring</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">-rw-r--r-- 1 root root  868 Aug 12 09:51 ceph.conf</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">-rw-r--r-- 1 root root 1156 Aug 12 09:49 iscsi-gateway.cfg</span></span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"2-启动太频繁\"><a href=\"#2-启动太频繁\" class=\"headerlink\" title=\"2.启动太频繁\"></a>2.启动太频繁</h3><h4 id=\"错误日志-1\"><a href=\"#错误日志-1\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node3:/etc/ceph# systemctl status rbd-target-api.service</span><br><span class=\"line\">● rbd-target-api.service - Ceph iscsi target configuration API</span><br><span class=\"line\">     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)</span><br><span class=\"line\">     Active: failed (Result: exit-code) since Mon 2024-08-12 09:50:09 UTC; 7min ago</span><br><span class=\"line\">   Main PID: 741226 (code=exited, status=16)</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 12 09:54:19 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.</span><br><span class=\"line\">Aug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\">Aug 12 09:55:36 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.</span><br><span class=\"line\">Aug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\">Aug 12 09:55:44 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.</span><br><span class=\"line\">Aug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\">Aug 12 09:57:01 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>启动太频繁</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>先关闭系统启动时自动启动 <code>rbd-target-api</code> 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable rbd-target-api</span><br></pre></td></tr></table></figure>\n\n<p>再尝试启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rbd-target-api</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node3:/etc/ceph# systemctl start rbd-target-api</span><br><span class=\"line\">root@node3:/etc/ceph# systemctl status rbd-target-api.service</span><br><span class=\"line\">● rbd-target-api.service - Ceph iscsi target configuration API</span><br><span class=\"line\">     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)</span><br><span class=\"line\">     Active: active (running) since Mon 2024-08-12 09:58:04 UTC; 7s ago</span><br><span class=\"line\">   Main PID: 744312 (rbd-target-api)</span><br><span class=\"line\">      Tasks: 26 (limit: 19066)</span><br><span class=\"line\">     Memory: 42.7M</span><br><span class=\"line\">     CGroup: /system.slice/rbd-target-api.service</span><br><span class=\"line\">             └─744312 /usr/bin/python3 /usr/bin/rbd-target-api</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 12 09:58:06 node3 rbd-target-api[744312]: Checking for config object changes every 1s</span><br><span class=\"line\">Aug 12 09:58:06 node3 rbd-target-api[744312]: Processing osd blacklist entries for this node</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]: Reading the configuration object to update local LIO configuration</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]: Configuration does not have an entry for this host(node3) - nothing to define to LIO</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Serving Flask app &quot;rbd-target-api&quot; (lazy loading)</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Environment: production</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:    WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:    Use a production WSGI server instead.</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Debug mode: off</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Running on http://[::]:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n\n<p>恢复开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable rbd-target-api</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-删除黑名单失败\"><a href=\"#3-删除黑名单失败\" class=\"headerlink\" title=\"3.删除黑名单失败\"></a>3.删除黑名单失败</h3><h4 id=\"错误日志-2\"><a href=\"#错误日志-2\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aug 09 09:52:49 node1 systemd[1]: Started Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 09 09:52:50 node1 rbd-target-api[43659]: Started the configuration object watcher</span><br><span class=\"line\">Aug 09 09:52:50 node1 rbd-target-api[43659]: Checking for config object changes every 1s</span><br><span class=\"line\">Aug 09 09:52:50 node1 rbd-target-api[43659]: Processing osd blacklist entries for this node</span><br><span class=\"line\">Aug 09 09:52:51 node1 rbd-target-api[43659]: Removing blacklisted entry for this host : 10.20.41.91:0/3374673318</span><br><span class=\"line\">Aug 09 09:52:53 node1 rbd-target-api[43659]: blacklist removal failed. Run &#x27;ceph -n client.admin --conf /etc/ceph/ceph.conf osd blacklist rm 10.20.41.91:0/3374673318&#x27;</span><br><span class=\"line\">Aug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a</span><br><span class=\"line\">Aug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原因-2\"><a href=\"#原因-2\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>删除黑名单失败</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>在<code>ceph</code>客户端中执行<code>osd blacklist ls</code>查看黑名单列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node1:/etc/ceph# ceph</span><br><span class=\"line\"><span class=\"meta prompt_\">ceph&gt; </span><span class=\"language-bash\"> osd blacklist <span class=\"built_in\">ls</span></span></span><br><span class=\"line\">listed 4 entries</span><br><span class=\"line\">10.20.41.91:6801/984155830 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\">10.20.41.91:0/3546845001 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\">10.20.41.91:0/3099014955 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\">10.20.41.91:6800/984155830 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>手动删除黑名单</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">ceph&gt; </span><span class=\"language-bash\"> osd blacklist <span class=\"built_in\">rm</span> 10.20.41.91:6801/984155830</span></span><br><span class=\"line\">un-blocklisting 10.20.41.91:6801/984155830</span><br></pre></td></tr></table></figure>\n\n<p>再次查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">ceph&gt; </span><span class=\"language-bash\"> osd blacklist <span class=\"built_in\">ls</span></span></span><br><span class=\"line\">listed 0 entries</span><br></pre></td></tr></table></figure>\n\n<p>重新启动</p>\n<h1 id=\"ISCSI命令行工具\"><a href=\"#ISCSI命令行工具\" class=\"headerlink\" title=\"ISCSI命令行工具\"></a>ISCSI命令行工具</h1><blockquote>\n<p>要重新打开终端才会生效哦（天坑）</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gwcli</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node1:/etc/ceph# gwcli</span><br><span class=\"line\">/&gt; ls</span><br><span class=\"line\">o- / .............................................................................................. [...]</span><br><span class=\"line\">  o- cluster .............................................................................. [Clusters: 1]</span><br><span class=\"line\">  | o- ceph ................................................................................. [HEALTH_OK]</span><br><span class=\"line\">  |   o- pools ............................................................................... [Pools: 3]</span><br><span class=\"line\">  |   | o- device_health_metrics ..................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 0.00Y]</span><br><span class=\"line\">  |   | o- rbd ......................................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 12K]</span><br><span class=\"line\">  |   | o- rbd-pool ................................. [(x3), Commit: 0.00Y/198574144K (0%), Used: 41594b]</span><br><span class=\"line\">  |   o- topology ..................................................................... [OSDs: 6,MONs: 1]</span><br><span class=\"line\">  o- disks ............................................................................ [0.00Y, Disks: 0]</span><br><span class=\"line\">  o- iscsi-targets .................................................... [DiscoveryAuth: None, Targets: 0]</span><br><span class=\"line\">/&gt; exit</span><br></pre></td></tr></table></figure>\n\n","cover_type":"img","excerpt":"","more":"<h1 id=\"Ubuntu-在线安装-Ceph-ISCSI服务\"><a href=\"#Ubuntu-在线安装-Ceph-ISCSI服务\" class=\"headerlink\" title=\"Ubuntu 在线安装 Ceph-ISCSI服务\"></a>Ubuntu 在线安装 Ceph-ISCSI服务</h1><h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><ul>\n<li>正常的Ceph集群环境</li>\n<li>有<code>rbd</code>类型名称是<code>rbd</code>的存储池</li>\n</ul>\n<h2 id=\"添加源\"><a href=\"#添加源\" class=\"headerlink\" title=\"添加源\"></a>添加源</h2><p>拷贝以下内容到<code>/etc/apt/sources.list</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse</span><br></pre></td></tr></table></figure>\n\n<p>或者执行以下命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo printf &#x27;%s\\n&#x27;  \\</span><br><span class=\"line\">&#x27;deb http://archive.ubuntu.com/ubuntu focal main restricted universe multiverse&#x27; \\</span><br><span class=\"line\">&#x27;deb http://archive.ubuntu.com/ubuntu focal-updates main restricted universe multiverse&#x27;  \\</span><br><span class=\"line\">&#x27;deb http://archive.ubuntu.com/ubuntu focal-backports main restricted universe multiverse&#x27;  \\</span><br><span class=\"line\">&#x27;deb http://security.ubuntu.com/ubuntu focal-security main restricted universe multiverse&#x27; \\</span><br><span class=\"line\">| sudo tee -a /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"更新源\"><a href=\"#更新源\" class=\"headerlink\" title=\"更新源\"></a>更新源</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><blockquote>\n<p>会自动安装其所需要的依赖包</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install -y ceph-iscsi</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>查询此包的依赖包可访问 <a href=\"https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html\">https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html</a></p>\n<p><a href=\"https://ubuntu.pkgs.org/20.04/ubuntu-universe-amd64/ceph-iscsi_3.4-0ubuntu2_all.deb.html\">ceph-iscsi_3.4-0ubuntu2_all.deb Ubuntu 20.04 LTS Download (pkgs.org)</a></p>\n</blockquote>\n<h1 id=\"添加配置文件\"><a href=\"#添加配置文件\" class=\"headerlink\" title=\"添加配置文件\"></a>添加配置文件</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /etc/ceph/iscsi-gateway.cfg</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[config]</span><br><span class=\"line\"># Name of the Ceph storage cluster. A suitable Ceph configuration file allowing</span><br><span class=\"line\"># access to the Ceph storage cluster from the gateway node is required, if not</span><br><span class=\"line\"># colocated on an OSD node.</span><br><span class=\"line\">cluster_name = ceph</span><br><span class=\"line\"></span><br><span class=\"line\"># Place a copy of the ceph cluster&#x27;s admin keyring in the gateway&#x27;s /etc/ceph</span><br><span class=\"line\"># drectory and reference the filename here</span><br><span class=\"line\">gateway_keyring = ceph.client.admin.keyring</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># API settings.</span><br><span class=\"line\"># The API supports a number of options that allow you to tailor it to your</span><br><span class=\"line\"># local environment. If you want to run the API under https, you will need to</span><br><span class=\"line\"># create cert/key files that are compatible for each iSCSI gateway node, that is</span><br><span class=\"line\"># not locked to a specific node. SSL cert and key files *must* be called</span><br><span class=\"line\"># &#x27;iscsi-gateway.crt&#x27; and &#x27;iscsi-gateway.key&#x27; and placed in the &#x27;/etc/ceph/&#x27; directory</span><br><span class=\"line\"># on *each* gateway node. With the SSL files in place, you can use &#x27;api_secure = true&#x27;</span><br><span class=\"line\"># to switch to https mode.</span><br><span class=\"line\"></span><br><span class=\"line\"># To support the API, the bear minimum settings are:</span><br><span class=\"line\">api_secure = false</span><br><span class=\"line\"></span><br><span class=\"line\"># Additional API configuration options are as follows, defaults shown.</span><br><span class=\"line\"># api_user = admin</span><br><span class=\"line\"># api_password = admin</span><br><span class=\"line\"># api_port = 5001</span><br><span class=\"line\"># 修改IP为要装ISCSI服务的节点</span><br><span class=\"line\">trusted_ip_list = 10.20.41.91</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h1><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload</span><br><span class=\"line\">systemctl enable rbd-target-gw</span><br><span class=\"line\">systemctl start rbd-target-gw</span><br><span class=\"line\">systemctl enable rbd-target-api</span><br><span class=\"line\">systemctl start rbd-target-api</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"查询状态检查是否正常启动\"><a href=\"#查询状态检查是否正常启动\" class=\"headerlink\" title=\"查询状态检查是否正常启动\"></a>查询状态检查是否正常启动</h2><p><strong>查看状态</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status rbd-target-gw</span><br></pre></td></tr></table></figure>\n\n<p><strong>查看详细日志</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u rbd-target-gw --no-pager</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>查看状态</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status rbd-target-api</span><br></pre></td></tr></table></figure>\n\n<p><strong><strong>查看详细日志</strong></strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u rbd-target-api --no-pager</span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p>ceph-iscsi的日志文件在<code>/var/log/rbd-target-api/</code> <code>/var/log/rbd-target-gw/</code> 目录下，</p>\n<p>详细日志也可以到这里查看！！！</p>\n</blockquote>\n<h2 id=\"错误解决\"><a href=\"#错误解决\" class=\"headerlink\" title=\"错误解决\"></a>错误解决</h2><h3 id=\"1-缺少配置文件\"><a href=\"#1-缺少配置文件\" class=\"headerlink\" title=\"1.缺少配置文件\"></a>1.缺少配置文件</h3><h4 id=\"错误日志\"><a href=\"#错误日志\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aug 12 09:50:09 node3 rbd-target-api[741226]: Started Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:50:09 node3 rbd-target-api[741226]: Invaid cluster_client_name or setting in /etc/ceph/ceph.conf - [errno 2] RADOS object not found (error calling conf_read_file)</span><br><span class=\"line\">Aug 12 09:50:09 node3 rbd-target-api[741226]: Unable to open/read the configuration object</span><br><span class=\"line\">Aug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a</span><br><span class=\"line\">Aug 12 09:50:09 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>缺少配置文件<code>/etc/ceph/ceph.conf</code></p>\n<h4 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>从主节点拷贝<code>/etc/ceph/ceph.conf</code>到安装目录</p>\n<blockquote>\n<p>正确的配置目录结构是</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">root@node3:/etc/ceph<span class=\"comment\"># ls -l /etc/ceph/</span></span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">total 16</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">-rw------- 1 root root   63 Aug 12 09:43 ceph.client.admin.keyring</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">-rw-r--r-- 1 root root  868 Aug 12 09:51 ceph.conf</span></span><br><span class=\"line\"><span class=\"meta prompt_\">&gt;</span><span class=\"language-bash\">-rw-r--r-- 1 root root 1156 Aug 12 09:49 iscsi-gateway.cfg</span></span><br></pre></td></tr></table></figure>\n\n\n</blockquote>\n<h3 id=\"2-启动太频繁\"><a href=\"#2-启动太频繁\" class=\"headerlink\" title=\"2.启动太频繁\"></a>2.启动太频繁</h3><h4 id=\"错误日志-1\"><a href=\"#错误日志-1\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node3:/etc/ceph# systemctl status rbd-target-api.service</span><br><span class=\"line\">● rbd-target-api.service - Ceph iscsi target configuration API</span><br><span class=\"line\">     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)</span><br><span class=\"line\">     Active: failed (Result: exit-code) since Mon 2024-08-12 09:50:09 UTC; 7min ago</span><br><span class=\"line\">   Main PID: 741226 (code=exited, status=16)</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 12 09:54:19 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.</span><br><span class=\"line\">Aug 12 09:55:36 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\">Aug 12 09:55:36 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.</span><br><span class=\"line\">Aug 12 09:55:44 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\">Aug 12 09:55:44 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Start request repeated too quickly.</span><br><span class=\"line\">Aug 12 09:57:01 node3 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\">Aug 12 09:57:01 node3 systemd[1]: Failed to start Ceph iscsi target configuration API.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原因-1\"><a href=\"#原因-1\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>启动太频繁</p>\n<h4 id=\"解决方案-1\"><a href=\"#解决方案-1\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>先关闭系统启动时自动启动 <code>rbd-target-api</code> 服务</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl disable rbd-target-api</span><br></pre></td></tr></table></figure>\n\n<p>再尝试启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start rbd-target-api</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node3:/etc/ceph# systemctl start rbd-target-api</span><br><span class=\"line\">root@node3:/etc/ceph# systemctl status rbd-target-api.service</span><br><span class=\"line\">● rbd-target-api.service - Ceph iscsi target configuration API</span><br><span class=\"line\">     Loaded: loaded (/lib/systemd/system/rbd-target-api.service; disabled; vendor preset: enabled)</span><br><span class=\"line\">     Active: active (running) since Mon 2024-08-12 09:58:04 UTC; 7s ago</span><br><span class=\"line\">   Main PID: 744312 (rbd-target-api)</span><br><span class=\"line\">      Tasks: 26 (limit: 19066)</span><br><span class=\"line\">     Memory: 42.7M</span><br><span class=\"line\">     CGroup: /system.slice/rbd-target-api.service</span><br><span class=\"line\">             └─744312 /usr/bin/python3 /usr/bin/rbd-target-api</span><br><span class=\"line\"></span><br><span class=\"line\">Aug 12 09:58:06 node3 rbd-target-api[744312]: Checking for config object changes every 1s</span><br><span class=\"line\">Aug 12 09:58:06 node3 rbd-target-api[744312]: Processing osd blacklist entries for this node</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]: Reading the configuration object to update local LIO configuration</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]: Configuration does not have an entry for this host(node3) - nothing to define to LIO</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Serving Flask app &quot;rbd-target-api&quot; (lazy loading)</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Environment: production</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:    WARNING: This is a development server. Do not use it in a production deployment.</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:    Use a production WSGI server instead.</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Debug mode: off</span><br><span class=\"line\">Aug 12 09:58:07 node3 rbd-target-api[744312]:  * Running on http://[::]:5000/ (Press CTRL+C to quit)</span><br></pre></td></tr></table></figure>\n\n<p>恢复开机启动</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable rbd-target-api</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"3-删除黑名单失败\"><a href=\"#3-删除黑名单失败\" class=\"headerlink\" title=\"3.删除黑名单失败\"></a>3.删除黑名单失败</h3><h4 id=\"错误日志-2\"><a href=\"#错误日志-2\" class=\"headerlink\" title=\"错误日志\"></a>错误日志</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Aug 09 09:52:49 node1 systemd[1]: Started Ceph iscsi target configuration API.</span><br><span class=\"line\">Aug 09 09:52:50 node1 rbd-target-api[43659]: Started the configuration object watcher</span><br><span class=\"line\">Aug 09 09:52:50 node1 rbd-target-api[43659]: Checking for config object changes every 1s</span><br><span class=\"line\">Aug 09 09:52:50 node1 rbd-target-api[43659]: Processing osd blacklist entries for this node</span><br><span class=\"line\">Aug 09 09:52:51 node1 rbd-target-api[43659]: Removing blacklisted entry for this host : 10.20.41.91:0/3374673318</span><br><span class=\"line\">Aug 09 09:52:53 node1 rbd-target-api[43659]: blacklist removal failed. Run &#x27;ceph -n client.admin --conf /etc/ceph/ceph.conf osd blacklist rm 10.20.41.91:0/3374673318&#x27;</span><br><span class=\"line\">Aug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Main process exited, code=exited, status=16/n/a</span><br><span class=\"line\">Aug 09 09:52:54 node1 systemd[1]: rbd-target-api.service: Failed with result &#x27;exit-code&#x27;.</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"原因-2\"><a href=\"#原因-2\" class=\"headerlink\" title=\"原因\"></a>原因</h4><p>删除黑名单失败</p>\n<h4 id=\"解决方案-2\"><a href=\"#解决方案-2\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h4><p>在<code>ceph</code>客户端中执行<code>osd blacklist ls</code>查看黑名单列表</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node1:/etc/ceph# ceph</span><br><span class=\"line\"><span class=\"meta prompt_\">ceph&gt; </span><span class=\"language-bash\"> osd blacklist <span class=\"built_in\">ls</span></span></span><br><span class=\"line\">listed 4 entries</span><br><span class=\"line\">10.20.41.91:6801/984155830 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\">10.20.41.91:0/3546845001 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\">10.20.41.91:0/3099014955 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\">10.20.41.91:6800/984155830 2024-08-12T22:28:10.684517+0000</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>手动删除黑名单</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">ceph&gt; </span><span class=\"language-bash\"> osd blacklist <span class=\"built_in\">rm</span> 10.20.41.91:6801/984155830</span></span><br><span class=\"line\">un-blocklisting 10.20.41.91:6801/984155830</span><br></pre></td></tr></table></figure>\n\n<p>再次查看</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta prompt_\">ceph&gt; </span><span class=\"language-bash\"> osd blacklist <span class=\"built_in\">ls</span></span></span><br><span class=\"line\">listed 0 entries</span><br></pre></td></tr></table></figure>\n\n<p>重新启动</p>\n<h1 id=\"ISCSI命令行工具\"><a href=\"#ISCSI命令行工具\" class=\"headerlink\" title=\"ISCSI命令行工具\"></a>ISCSI命令行工具</h1><blockquote>\n<p>要重新打开终端才会生效哦（天坑）</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gwcli</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@node1:/etc/ceph# gwcli</span><br><span class=\"line\">/&gt; ls</span><br><span class=\"line\">o- / .............................................................................................. [...]</span><br><span class=\"line\">  o- cluster .............................................................................. [Clusters: 1]</span><br><span class=\"line\">  | o- ceph ................................................................................. [HEALTH_OK]</span><br><span class=\"line\">  |   o- pools ............................................................................... [Pools: 3]</span><br><span class=\"line\">  |   | o- device_health_metrics ..................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 0.00Y]</span><br><span class=\"line\">  |   | o- rbd ......................................... [(x3), Commit: 0.00Y/198574144K (0%), Used: 12K]</span><br><span class=\"line\">  |   | o- rbd-pool ................................. [(x3), Commit: 0.00Y/198574144K (0%), Used: 41594b]</span><br><span class=\"line\">  |   o- topology ..................................................................... [OSDs: 6,MONs: 1]</span><br><span class=\"line\">  o- disks ............................................................................ [0.00Y, Disks: 0]</span><br><span class=\"line\">  o- iscsi-targets .................................................... [DiscoveryAuth: None, Targets: 0]</span><br><span class=\"line\">/&gt; exit</span><br></pre></td></tr></table></figure>\n\n"},{"title":"并发编程","date":"2023-03-20T16:00:00.000Z","_content":"\n# 并发编程\n\n## 进程和线程\n\n### 进程\n\n- 程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU,数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的\n- 当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。\n- 进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程(例如记事本、画图、 浏览器等)，也有的程序只能启动一个实例进程(例如网易云音乐、360 安全卫士等)\n\n### 线程\n\n- 一个进程之内可以分为-到多个线程。\n\n- 一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行。\n\n- Java中，线程作为最小调度单位，进程作为资源分配的最小单位。 在windows中进程是不活动的，只是作为线程的容器。\n\n\n### 二者对比\n\n- 进程基本上相互独立的，而线程存在于进程内，是进程的一个子集。\n- 进程拥有共享的资源，如内存空间等，供其内部的线程共享。\n- 进程间通信较为复杂\n  - 同一台计算机的进程通信称为IPC (Inter-process communication)。\n  - 不同计算机之间的进程通信，需要通过网络，并遵守共同的协议,例如HTTP。\n- 线程通信相对简单，因为它们共享进程内的内存，-个例子是多个线程可以访问同-一个共享变量。\n- 线程更轻量,线程上下文切换成本-般上要比进程上下文切换低。\n\n## 并发与并行\n\n单核cpu下，线程实际还是`串行执行`的。操作系统中有- -个组件叫做任务调度器，将cpu的时间片(windows'下时间片最小约为15毫秒)分给不同的线程使用，只是由于cpu在线程间(时间片很短)的切换\n非常快，人类感觉是`同时运行的`。总结为- -句话就是:`微观串行，宏观并行，`一般会将这种`线程轮流使用`CPU 的做法称为并发，concurrent\n\n| CPU  | 时间片1 | 时间片2 | 时间片3 | 时间片4 |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| core |  线程1  |  线程2  |  线程3  |  线程4  |\n\n![](thread/453affe8-17db-40b3-940f-162e7597336e.png)\n\n多核CPU下，每个核（core）都可以调度运行线程，这时候线程可以是并行的。\n\n|  CPU  | 时间片1 | 时间片2 | 时间片3 | 时间片4 |\n| :---: | :-----: | :-----: | :-----: | :-----: |\n| core1 |  线程1  |  线程1  |  线程3  |  线程3  |\n| core2 |  线程2  |  线程2  |  线程4  |  线程4  |\n\n![](thread/2ed065be-3fb7-4e67-b04e-b8e08980405d.png)\n\n引用Rob Pike的一段描述:\n\n- 并发(concurrent) 是同- -时间应对(dealing with) 多件事情的能力\n- 并行(parallel) 是同- -时间动手做(doing) 多件事情的能力\n\n例子\n\n- 家庭主妇做饭、打扫卫生、给孩子喂奶，她-一个人轮流交替做这多件事,这时就是并发\n- 家庭主妇雇了个保姆，她们一-起这些事，这时既有并发，也有并行(这时会产生竞争，例如锅只有一口,一个人用锅时，另一个人就得等待)\n- 雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行。\n\n## 应用\n\n### 应用之异步调用（案例）\n\n从方法调用的角度来讲，如果需要等待结果返回，才能继续运行就是同步\n，不需要等待结果返回，就能继续运行就是异步\n**注意:同步在多线程中还有另外一层意思，是让多个线程步调一致**\n\n#### 设计\n\n多线程可以让方法执行变为异步的(即不要巴巴干等着)比如说读取磁盘文件时，假设读取操作花费了5秒\n钟，如果没有线程调度机制，这5秒调用者什么都做不了,其代码都得暂停...\n\n``` java\npackage com.wry.concurrent.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\n\n/**\n * <p>\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class FileReaderUtil {\n    \n    public static void read(String path) {\n        log.debug(\"FileReader start .....\");\n        try {\n            FileReader reader = new java.io.FileReader(path);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        log.debug(\"FileReader end .....\");\n    }\n}\n```\n\n``` java\npackage com.wry.concurrent.n2;\n\nimport com.wry.concurrent.constans.Constans;\nimport com.wry.concurrent.util.FileReaderUtil;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\n\n/**\n * <p>\n * 同步等待\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class Sync {\n\n    public static void main(String[] args) {\n        //同步执行，必须等待fileReader方法执行完毕，才能进行其他操作\n        FileReaderUtil.read(Constans.FILE_PATH);\n\n        log.debug(\"do other things .....\");\n    }\n\n\n}\n\n```\n\n``` java\npackage com.wry.concurrent.n2;\n\nimport com.wry.concurrent.constans.Constans;\nimport com.wry.concurrent.util.FileReaderUtil;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * <p>\n * 异步不等待\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class Async {\n\n    public static void main(String[] args) {\n        //创建一个线程去异步执行，不需要等待执行完毕，就可以执行其他操作\n        new Thread(() -> {\n            FileReaderUtil.read(Constans.FILE_PATH);\n        }).start();\n\n        log.debug(\"do other things .....\");\n    }\n}\n\n```\n\n\n\n#### 结论\n\n- 比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程。\n- tomcat 的异步servlet也是类似的目的,让用户线程处理耗时较长的操作，避免阻塞tomcat的工作线程\n- UI程序中，开线程进行其他操作，避免阻塞ui线程\n\n### 应用之提高效率(案例)\n\n充分利用多核cpu的优势，提高运行效率。想象下面的场景,执行3个计算,最后将计算结果汇总。\n\n>计算\t1\t花费\t10ms\n>计算\t2\t花费\t11ms\n>计算\t3\t花费\t9 ms\n>汇总需要\t1 ms\n\n- 如果是串行执行，那么总共花费的时间是10 + 11 + 9 + 1= 31ms\n- 但如果是四核cpu, 各个核心分别使用线程1执行计算1,线程2执行计算2,线程3执行计算3,那么3个线程是并行的，花费时间只取决于最长的那个线程运行的时间，即11ms最后加上汇总时间只会花费12ms\n\n**注意 : 需要在多核cpu才能提高效率，单核仍然时是轮流执行**\n\n#### 设计\n\n``` java\npackage com.wry.concurrent.n2.example;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Arrays;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\n\n/**\n * <p>\n * 用同步和异步两中方式计算数据所消耗的时间\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class MyBenchmark {\n\n    static int[] ARRAY = new int[4000_000_00];\n\n    static {\n        Arrays.fill(ARRAY, 1);\n    }\n\n    /**\n     * 异步计算 ，创建4个线程去同步计算结果，最后合并计算结果\n     */\n    public static void async() throws ExecutionException, InterruptedException {\n        //开始时间\n        Long start = System.currentTimeMillis();\n        int[] array = ARRAY;\n        FutureTask<Integer> task1 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[0 + i];\n            }\n            return sum;\n        });\n        FutureTask<Integer> task2 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[1000_000_00 + i];\n            }\n            return sum;\n        });\n        FutureTask<Integer> task3 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[2000_000_00 + i];\n            }\n            return sum;\n        });\n        FutureTask<Integer> task4 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[3000_000_00 + i];\n            }\n            return sum;\n        });\n\n        new Thread(task1).start();\n        new Thread(task2).start();\n        new Thread(task3).start();\n        new Thread(task4).start();\n        int i = task1.get() + task2.get() + task3.get() + task4.get();\n        //结束时间\n        Long end = System.currentTimeMillis();\n        System.out.println(\"异步计算：计算结果：\" + i + \"\\t总计耗时：\" + (end - start));\n    }\n\n    /**\n     * 同步计算\n     */\n    private static void sync() {\n        //开始时间\n        Long start = System.currentTimeMillis();\n        int[] array = ARRAY;\n        int sum = 0;\n        for (int i = 0; i < 4000_000_00; i++) {\n            sum += array[i];\n        }\n        //结束时间\n        Long end = System.currentTimeMillis();\n        System.out.println(\"同步计算：计算结果：\" + sum + \"\\t总计耗时：\" + (end - start));\n    }\n\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        //同步计算\n        sync();\n        //异步计算\n        async();\n    }\n\n}\n\n```\n\n![](thread/4f22eeff-a017-46f6-bf49-5359e570fe22.png)\n\n#### 结论\n\n1、单核cpu下，多线程不能实际提高程序运行效率,只是为了能够在不同的任务之间切换，不同线程轮流使用cpu,不至于一 个线程总占用cpu,别的线程没法干活\n2、多核cpu可以并行跑多个线程，但能否提高程序运行效率还是要分情况的\n\n    -  有些任务,经过精心设计,将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分(参考后文的[阿姆达尔定律] )\n    -  也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义\n\n3、 IO操作不占用cpu,只是我们一般拷贝文件使用的是[阻塞IO]，这时相当于线程虽然不用cpu,但需要一直等待IO结束，没能充分利用线程。所以才有后面的[非阻塞IO]和[异步I0]优化。\n\n# JAVA线程\n\n## 创建和运行线程\n\njava程序在启动的时候就会常见一个线程，main函数就是一个线程\n\n### 1.直接使用Thread类\n\n``` java\n/**\n * <p>\n * 创建线程的第一种方式 Thread类\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n\n@Slf4j\npublic class Thread1 {\n    public static void main(String[] args) {\n        Thread thread = new Thread() {\n            @Override\n            public void run() {\n                //要执行的任务\n                log.debug(\"runing....\");\n            }\n        };\n        //设置线程名字\n        thread.setName(\"t1\");\n        //启动线程\n        thread.start();\n        \n        log.debug(\"main....\");\n    }\n}\n\n```\n\n### 2.使用Runnable 配合Thread\n\n把`线程`和`任务` （要执行的代码） 分开\n\n- Thread 代表线程\n- Runnable 可运行的任务（线程要执行的代码）\n\n``` java\n/**\n * <p>\n * 创建线程的第二种方式\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n\n@Slf4j\npublic class Thread2 {\n    public static void main(String[] args) {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                //要执行的任务\n                log.debug(\"runing....\");\n            }\n        };\n\n        //创建一个线程(参数1：要执行的任务，参数2：线程的名字)\n        Thread thread = new Thread(runnable,\"t2\");\n        //启动线程\n        thread.start();\n        \n        log.debug(\"main....\");\n    }\n}\n\n```\n\nJAVA 8 以后可以使用`lambda`精简代码\n\n``` java\n       \t//创建任务\n        Runnable lombdaRunnable= () -> {\n            log.debug(\"lombda runging......\"); \n        };\n        //创建线程\n        Thread lombdaThead=new Thread(lombdaRunnable,\"lombdaThead\");\n        //启动线程\n        lombdaThead.start();\n```\n\n可以再次精简\n\n``` java\n new Thread(() -> {\n     log.debug(\"lombda runging......\");\n }, \"lambdaThread\").start();\n```\n\n### 3.FutureTask 配合Thread\n\n``` java\n/**\n * <p>\n * 创建线程的第三种方式\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n\n@Slf4j\npublic class Thread3 {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        FutureTask<Integer> task=new FutureTask<>(new Callable<Integer>() {\n            @Override\n            public Integer call() throws Exception {\n                log.debug(\"running.......\");\n                Thread.sleep(1000);\n                return 100;\n            }\n        });\n\n        //创建一个线程(参数1：要执行的任务，参数2：线程的名字)\n        Thread thread = new Thread(task,\"t3\");\n        //启动线程\n        thread.start();\n        \n        //获取task任务的返回值，主线程会等待task任务完成才会继续执行下边的操作\n        Integer integer = task.get();\n        log.debug(\"task 的返回值：{}\",integer);\n    }\n}\n\n```\n\n\n\n\n\n### 原理之Thread与Runnable的关系\n\n#### Runnable源码\n\n创建线程传递Runnable任务，调用重载init方法。\n\n``` java\n    /**\n     * Allocates a new {@code Thread} object. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (null, target, name)}.\n     *\n     * @param  target\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread's run method is invoked.\n     *\n     * @param  name\n     *         the name of the new thread\n     */\n    public Thread(Runnable target, String name) {\n        init(null, target, name, 0);\n    }\n\n```\n\n调用Init重载方法 \n\n``` java\n /**\n     * Initializes a Thread with the current AccessControlContext.\n     * @see #init(ThreadGroup,Runnable,String,long,AccessControlContext,boolean)\n     */\n    private void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize) {\n        init(g, target, name, stackSize, null, true);\n    }\n```\n\n找到核心init 方法，把`Runable任务`交给成员对象 `target`\n\n``` java\n    /**\n     * Initializes a Thread.\n     *\n     * @param g the Thread group\n     * @param target the object whose run() method gets called\n     * @param name the name of the new Thread\n     * @param stackSize the desired stack size for the new thread, or\n     *        zero to indicate that this parameter is to be ignored.\n     * @param acc the AccessControlContext to inherit, or\n     *            AccessController.getContext() if null\n     * @param inheritThreadLocals if {@code true}, inherit initial values for\n     *            inheritable thread-locals from the constructing thread\n     */\n    private void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize, AccessControlContext acc,\n                      boolean inheritThreadLocals) {\n        if (name == null) {\n            throw new NullPointerException(\"name cannot be null\");\n        }\n\n        this.name = name;\n\n        Thread parent = currentThread();\n        SecurityManager security = System.getSecurityManager();\n        if (g == null) {\n            /* Determine if it's an applet or not */\n\n            /* If there is a security manager, ask the security manager\n               what to do. */\n            if (security != null) {\n                g = security.getThreadGroup();\n            }\n\n            /* If the security doesn't have a strong opinion of the matter\n               use the parent thread group. */\n            if (g == null) {\n                g = parent.getThreadGroup();\n            }\n        }\n\n        /* checkAccess regardless of whether or not threadgroup is\n           explicitly passed in. */\n        g.checkAccess();\n\n        /*\n         * Do we have the required permissions?\n         */\n        if (security != null) {\n            if (isCCLOverridden(getClass())) {\n                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n            }\n        }\n\n        g.addUnstarted();\n\n        this.group = g;\n        this.daemon = parent.isDaemon();\n        this.priority = parent.getPriority();\n        if (security == null || isCCLOverridden(parent.getClass()))\n            this.contextClassLoader = parent.getContextClassLoader();\n        else\n            this.contextClassLoader = parent.contextClassLoader;\n        this.inheritedAccessControlContext =\n                acc != null ? acc : AccessController.getContext();\n        //把Runable 任务保存在成员变量\n        this.target = target;\n        setPriority(priority);\n        if (inheritThreadLocals && parent.inheritableThreadLocals != null)\n            this.inheritableThreadLocals =\n                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n        /* Stash the specified stack size in case the VM cares */\n        this.stackSize = stackSize;\n\n        /* Set thread ID */\n        tid = nextThreadID();\n    }\n```\n\nThread 运行方法,实际调用的还是Thread的`run方法`\n\n``` java\n  /**\n     * If this thread was constructed using a separate\n     * <code>Runnable</code> run object, then that\n     * <code>Runnable</code> object's <code>run</code> method is called;\n     * otherwise, this method does nothing and returns.\n     * <p>\n     * Subclasses of <code>Thread</code> should override this method.\n     *\n     * @see     #start()\n     * @see     #stop()\n     * @see     #Thread(ThreadGroup, Runnable, String)\n     */\n    @Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n\n```\n\n#### 小结\n\n- Thread是把线程和任务合并在了一起。Runnable 是把线程和任务分开。\n- 用Runnable 更容易与线程池等高级API 配合\n- 用Runnable 让任务类脱离了Thread 继承体系，更灵活。\n\n## 多线程同时运行\n\n#### 案例\n\n``` java\n/**\n * <p>\n * 演示多个线程并发交替执行\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class MultiThread {\n    public static void main(String[] args) {\n        new Thread(()->{\n            while (true) {\n                log.debug(\"running.....\");\n            }\n        },\"t1\").start();\n        \n        new Thread(() -> {\n            while (true) {\n                log.debug(\"running.....\");\n            }\n        }, \"t2\").start();\n    }\n}\n\n```\n\n![](thread/e5b813b7-361c-42ec-9326-53b01a2872da.png)\n\n#### 小结\n\n- 多线程交替执行。\n- 谁先谁后，不由我们控制，由底层的任务调度器完成。\n\n\n\n## 查看进程线程的方法\n\n### windows\n\n- 任务管理器可以查看进程和线程数,也可以用来杀死进程\n- tasklist查看进程\n- taskkill杀死进程\n\n### linux\n\n- ps -fe查看所有进程\n- ps -fT -p <PID>查看某个进程(PID) 的所有线程，\n- kill 死进程\n- top按大写H切换是否显示线程\n- top -H -p <PID>查看某个进程(PID) 的所有线程:\n\n### java\n\n- jps 命令查看所有的JAVA 进程\n- jstack <PID> 车看某个Java 进程（PID）的所有线程状态\n- jconsole 来查看某个Java 进程中线程的运行情况（图形界面）\n\n### jconsole远程监控配置\n\n需要以如下方式运行你的java类\n\n>java -Djava. rmi. server . hostname=' ip地址' -Dcom. sun. management . jmxremote -Dcom. sun. management . jmxremote. port=i连接端口-Dcom . sun . management . jmxremote.ssl=是否安全连接-Dcom. sun. management .jmxremote .authenticate=是否认证    java类\n\n修改/etc/hosts文件将127.0.0.1 映射至主机名\n如果要认证访问，还需要做如下步骤\n\n- 复制jmxremote.password 文件\n- 修改jmxremote.password和jmxremote.access文件的权限为600即文件所有者可读写\n- 连接时填入controlRole (用户名)，R&D (密码)\n\n\n\n## 原理之线程运行\n\n### 栈与栈帧\n\nJava Virtual Machine Stacks （Java 虚拟机栈）\n\n我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟\n\n机就会为其分配一块栈内存。\n\n- 每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存\n\n- 每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法\n\n#### 案例\n\n##### 单线程\n\n``` java\n/**\n * <p>\n * 方法调用查看方法栈和栈帧\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class Frames {\n    public static void main(String[] args) {\n        method1(10);\n    }\n\n    private static void method1(int x) {\n        int y = x + 1;\n        Object o = method2();\n        System.out.println(o);\n    }\n\n    private static Object method2() {\n        Object o = new Object();\n        return o;\n    }\n}\n\n```\n\n![](thread/cb65fed7-57dd-404b-b4f1-e365dbe83379.png)\n\n![](thread/210feb5c-150a-43c3-8b3d-440f53e343d1.png)\n\n当方法运行到method2时可以看到栈里有三个栈帧\n![](thread/52ebada9-ad0c-45fc-9482-40b961c20bbf.png)\n\n![](thread/51e456b2-69ca-4039-8ec3-137a74a3e57d.png)\n\n当method2 方法执行完毕后栈中减少method2的栈帧\n![](thread/7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png)\n\n![](thread/ca324ec8-b1a0-419a-a962-640dae424e10.png)\n\n直到所有栈帧运行完毕，程序执行完毕。\n\n![](thread/3ce55a24-aeb0-4055-9925-c69a63ec9053.png)\n\n##### 多线程\n\n``` java\npackage com.wry.concurrent.thread;\n\n/**\n * <p>\n * 多线程情况下 方法调用查看方法栈和栈帧\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class Frames2 {\n    public static void main(String[] args) {\n        new Thread(() -> {\n            //t1线程调用\n            method1(20);\n        }, \"t1\").start();\n        //main线程调用\n        method1(10);\n    }\n\n    private static void method1(int x) {\n        int y = x + 1;\n        Object o = method2();\n        System.out.println(o);\n    }\n\n    private static Object method2() {\n        Object o = new Object();\n        return o;\n    }\n}\n```\n\n在t1 线程出设置断点，切换断点模式。\n\n![](thread/815e324a-777f-4b34-b590-acbb4c624cb0.png)\n\n切换不同的线程\n\n![](thread/d05f71ef-bbbb-4b19-a804-6444a74de835.png)\n\nmain线程的栈帧\n\n![](thread/75442144-d101-4e7a-97ca-c833a2b827fe.png)\nt1线程的栈帧\n![](thread/7bf73e18-7259-45da-93c5-a4183062572e.png)\n\n#### 小结\n\n线程的栈内存是相互独立的，每个线程有独立的栈内存，栈内存中有栈帧，每个线程相互独立，互不干扰。\n\n\n\n### 线程上下文切换（Thread Context Switch）\n\n因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码\n\n- 线程的 cpu 时间片用完\n\n- 垃圾回收\n\n- 有更高优先级的线程需要运行\n\n- 线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法\n\n当 Context Switch 发生时，`需要由操作系统保存当前线程的状态，并恢复另一个线程的状态`，Java 中对应的概念就是`程序计数器【寄存器】（Program Counter Register）`，它的作用是记住下一条 jvm 指令的执行地址，是线程私有的。\n\n- 状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等\n\n- Context Switch 频繁发生会影响性能\n\n## 常见方法\n\n| **方法名**       | **static** | **功能说明**                                                 | **注意**                                                     |\n| :--------------- | :--------: | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| start()          |            | 启动一个新线程，在新的线程运行 run 方法中的代码              | start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateExceptio |\n| run()            |            | 新线程启动后会调用的方法                                     | 如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象，来覆盖默认行为 |\n| join()           |            | 等待线程运行结束                                             |                                                              |\n| join(long n)     |            | 等待线程运行结束,最多等待n毫秒                               |                                                              |\n| getId()          |            | 获取线程长整型的 id                                          | id唯一                                                       |\n| getName()        |            | 获取线程名                                                   |                                                              |\n| setName(String)  |            | 修改线程名                                                   |                                                              |\n| getPriority()    |            | 获取线程优先级                                               |                                                              |\n| setPriority(int) |            | 修改线程优先级                                               | java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率 |\n| getState()       |            | 获取线程状态                                                 | Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING,TIMED_WAITING, TERMINATED |\n| isInterrupted()  |            | 判断是否被打断                                               | 不会清除`打断标记`                                           |\n| isAlive()        |            | 线程是否存活(还没有运行完毕）                                |                                                              |\n| interrupt()      |            | 打断线程                                                     | 如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除`打断标记`；如果打断的正在运行的线程，则会设置`打断标记`；park 的线程被打断，也会设置`打断标记` |\n| interrupted()    |   static   | 判断当前线程是否被打断                                       | 会清除`打断标记`                                             |\n| currentThread()  |   static   | 获取当前正在执行的线程                                       |                                                              |\n| sleep(long n)    |   static   | 让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程 |                                                              |\n| yield()          |   static   | 提示线程调度器让出当前线程对CPU的使用                        | 主要是为了测试和调试                                         |\n\n\n\n## start方法详解\n\n### 调用run\n\n``` java\n/**\n * <p>\n * 创建线程调用 run 方法\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class RunMethod {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            log.debug(Thread.currentThread().getName());\n            FileReaderUtil.read(Constants.FILE_PATH);\n        }, \"t1\");\n\n        t1.run();\n    }\n}\n\n```\n\n发现执行的依然是main 线程，创建的线程并没有执行。\n\n![](thread/4b22adcb-879c-493e-a6dc-7a50426a6db7.png)\n\n### 调用start\n\n``` java\n/**\n * <p>\n * 创建线程调用 run 方法\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class RunMethod {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            log.debug(Thread.currentThread().getName());\n            FileReaderUtil.read(Constants.FILE_PATH);\n        }, \"t1\");\n//        //调用run方法\n//        t1.run();\n        //调用start方法\n        t1.start();\n    }\n}\n```\n\n![](thread/6d0f8427-4068-4a15-a933-cd3f74e28dbf.png)\n\n### 源码分析\n``` java\n\n    /**\n     * If this thread was constructed using a separate\n     * <code>Runnable</code> run object, then that\n     * <code>Runnable</code> object's <code>run</code> method is called;\n     * otherwise, this method does nothing and returns.\n     * <p>\n     * Subclasses of <code>Thread</code> should override this method.\n     *\n     * @see     #start()\n     * @see     #stop()\n     * @see     #Thread(ThreadGroup, Runnable, String)\n     */\n    @Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n```\n``` java\n@FunctionalInterface\npublic interface Runnable {\n    /**\n     * When an object implementing interface <code>Runnable</code> is used\n     * to create a thread, starting the thread causes the object's\n     * <code>run</code> method to be called in that separately executing\n     * thread.\n     * <p>\n     * The general contract of the method <code>run</code> is that it may\n     * take any action whatsoever.\n     *\n     * @see     java.lang.Thread#run()\n     */\n    public abstract void run();\n}\n```\nrun() 方法是抽象方法等待子类去实现。\n\n``` java\n   public synchronized void start() {\n        /**\n         * This method is not invoked for the main method thread or \"system\"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         *\n         * A zero status value corresponds to state \"NEW\".\n         */\n        if (threadStatus != 0)\n            throw new IllegalThreadStateException();\n\n        /* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. */\n        group.add(this);\n\n        boolean started = false;\n        try {\n            start0();\n            started = true;\n        } finally {\n            try {\n                if (!started) {\n                    group.threadStartFailed(this);\n                }\n            } catch (Throwable ignore) {\n                /* do nothing. If start0 threw a Throwable then\n                  it will be passed up the call stack */\n            }\n        }\n    }\n    \n     private native void start0();\n\n```\n在`start()`方法中调用 `start0()`方法正式启动线程。而`start0()`是用`native`修饰得方法，底层调用操作系统的方法实现线程调用。\n\n### 小结\n\n- 直接调用 run 是在主线程中执行了 run，没有启动新的线程\n\n- 使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码\n\n### 查看线程状态\n\n``` java\n/**\n * <p>\n * 查看线程运行状态\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadStatus {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            System.out.println(\"running.....\");\n        }, \"t1\");\n\n        //获取运行前的状态\n        System.out.println(\"运行前的状态:\"+t1.getState());\n        //调用start方法\n        t1.start();\n        //获取运行后的状态\n        System.out.println(\"运行后的状态:\"+t1.getState());\n    }\n}\n```\n\n![](thread/3a071edf-6ded-487b-abbb-d016a9fe6864.png)\n\n### 多次调用start方法会抛java.lang.IllegalThreadStateException\n\n``` java\n//调用start方法\nt1.start();\nt1.start();\n```\n\n![](thread/feed6992-8dff-450c-9010-e2f46caf6243.png)\n\n\n\n## **sleep** **与** **yield**\n\n### sleep\n\n1. 调用 sleep 会让当前线程从 *Running* 进入 *Timed Waiting* 状态（阻塞）\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  sleep\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class ThreadMethod {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\");\n\n        t1.start();\n        log.debug(\"t1 线程的状态：{}\",t1.getState());\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        log.debug(\"t1 线程的状态：{}\",t1.getState());\n    }\n}\n```\n\n![image-20200822234416578](thread/image-20200822234416578.png)\n\n2. 其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 interrupt 打断\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class ThreadMethod2 {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            try {\n                log.debug(\"enter sleep...... \");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                log.debug(\"wake up...... \");\n            }\n        }, \"t1\");\n\n        t1.start();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        t1.interrupt();\n        log.debug(\"interrupt...... \");\n    }\n}\n```\n\n![](thread/81a4db1a-c8d1-47f7-a955-39db726f5173.png)\n\n3. 睡眠结束后的线程未必会立刻得到执行\n\n4. 建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 使用TimeUnit\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class ThreadMethod3 {\n    public static void main(String[] args) throws InterruptedException {\n        log.debug(\"start ......\");\n        TimeUnit.SECONDS.sleep(1);\n        log.debug(\"end ......\");\n    }\n}\n```\n\n![](thread/f78c9ec4-6379-48de-b2e6-f529bb063540.png)\n\n\n\n### yield\n\n1. 调用 yield 会让当前线程从 *Running* 进入 *Runnable* 就绪状态，然后调度执行其它线程\n\n2. 具体的实现依赖于操作系统的任务调度器\n\n##  线程优先级\n\n线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它\n\n如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用\n\n### 未设置优先级和调用yield\n\n``` java\n/**\n * <p>\n * 设置线程的线程优先级\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadPriority {\n    public static void main(String[] args) {\n        Runnable task1 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"---->1 \" + count++);\n            }\n        };\n        Runnable task2 = () -> {\n            int count = 0;\n            for (; ; ) {\n                // Thread.yield();\n                System.out.println(\"        ---->2 \" + count++);\n            }\n        };\n        Thread t1 = new Thread(task1, \"t1\");\n        Thread t2 = new Thread(task2, \"t2\");\n        t1.start();\n        t2.start();\n    }\n}\n```\n\nt1线程和t2 线程打印的数值相差不大。\n\n![](thread/683dd209-d862-46f9-878f-b9e8f4c2db3b.png)\n\n### 调用yield\n\n``` java\n/**\n * <p>\n * 设置线程的线程优先级\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadPriority {\n    public static void main(String[] args) {\n        Runnable task1 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"---->1 \" + count++);\n            }\n        };\n        Runnable task2 = () -> {\n            int count = 0;\n            for (; ; ) {\n                //调用yield,把CPU执行执行时间交给其他线程\n                Thread.yield();\n                System.out.println(\"        ---->2 \" + count++);\n            }\n        };\n        Thread t1 = new Thread(task1, \"t1\");\n        Thread t2 = new Thread(task2, \"t2\");\n        t1.start();\n        t2.start();\n    }\n}\n\n```\n\nt1线程打印的数值远远大于 t2 线程打印的数值。\n\n![](thread/d37e0c1b-1e69-4360-937a-edf5296f47ce.png)\n\n### 设置优先级\n\n``` java\n/**\n * <p>\n * 设置线程的线程优先级\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadPriority {\n    public static void main(String[] args) {\n        Runnable task1 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"---->1 \" + count++);\n            }\n        };\n        Runnable task2 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"        ---->2 \" + count++);\n            }\n        };\n        Thread t1 = new Thread(task1, \"t1\");\n        Thread t2 = new Thread(task2, \"t2\");\n        //t1线程设置最小的线程优先级\n        t1.setPriority(Thread.MIN_PRIORITY);\n        //t2线程设置最大的线程优先级\n        t2.setPriority(Thread.MAX_PRIORITY);\n        \n        t1.start();\n        t2.start();\n    }\n}\n```\n\nt2线程打印的数值远远大于 t1 线程打印的数值。\n\n![](thread/2feee3db-6b39-4e1a-9098-1a5f966742f7.png)\n\n##  案例\n\n### 防止CPU 占用100%\n\n#### sleep 实现\n\n在没有利用cpu来计算时，不要让while(rue)空转浪费cpu,这时可以使用yield或sleep来让出cpu的使用权给其他程序\n\n``` java\nThread t1 = new Thread(() -> {\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }   \n        },\"t1\");\n        t1.start();\n```\n\n\n\n- 可以用wait或条件变量达到类似的效果\n- 不同的是，后两种都需要加锁I并且需要相应的唤醒操作,一般适用于要进行同步的场景\n- sleep适用于无需锁同步的场景\n\n##  join方法详解\n\n下面的代码执行，打印 r 是什么？\n\n### 案例1 ——为什么需要join\n\n未调用Join方法\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod {\n    private static int r = 0;\n\n    private static void test1() {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r = 10;\n        },\"t1\");\n        t1.start();\n        log.debug(\"结果为:{}\", r);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n可以看到`主线程`在`t1线程`还没有给` r `赋值时就已经支持完毕了。打印的r任然是初始值。\n\n![](thread/5cce206b-f24c-4489-afda-57b5a3102172.png)\n\n### 分析\n\n- 因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出` r=10`\n\n- 而主线程一开始就要打印 r 的结果，所以只能打印出 `r=0`\n\n### 解决方法\n\n- 用 sleep 行不行？为什么？\n\n  因为不知道t1程何时运行完毕,所以主线程等待的时间不好设置。\n\n- 用 join，加在 t1.start() 之后即可\n\n  `join()`的作用是：**\"等待该线程终止\"**，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是 **在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行**。\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod {\n    private static int r = 0;\n\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r = 10;\n        },\"t1\");\n        t1.start();\n        //等待t1线程执行结束\n        t1.join();\n        log.debug(\"结果为:{}\", r);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/86d6badd-f76b-4152-8044-bef85f333017.png)\n\n### 案例2 ——同步\n\n以调用方角度来讲，如果\n\n- 需要等待结果返回，才能继续运行就是同步\n\n- 不需要等待结果返回，就能继续运行就是异步\n\n#### 等待多个结果\n\n问，下面代码 cost 大约多少秒？\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join 等待多个结果\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod2 {\n    private static int r1 = 0;\n    private static int r2 = 0;\n\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r1 = 10;\n        }, \"t1\");\n\n        Thread t2 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r2 = 20;\n        }, \"t2\");\n\n        //启动线程\n        t1.start();\n        t2.start();\n\n        //开始时间\n        long start = System.currentTimeMillis();\n        log.debug(\"join begin ......\");\n        t1.join();\n        log.debug(\"t1 join end ......\");\n        t2.join();\n        log.debug(\"t2 join end ......\");\n        //结束时间\n        long end = System.currentTimeMillis();\n        log.debug(\"t1 结果为:{},t2 结果为:{},总耗时：{}\", r1, r2, end - start);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n分析如下\n\n- 第一个 join：等待 t1 时, t2 并没有停止, 而在运行\n\n- 第二个 join：1s 后, 执行到此, t2 也运行了 1s, 因此也只需再等待 1s\n\n![](thread/9372a527-1cf5-4699-9271-f9724c815f24.png)\n\n如果颠倒两个 join 呢？\n\n![](thread/b94de8b0-5933-49dc-b0ff-a29a03280074.png)\n\n### 案例3 ——有时效的等待\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join 有时效的等待\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod3 {\n    private static int r1 = 0;\n\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                //睡2000毫秒\n                TimeUnit.MILLISECONDS.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r1 = 10;\n        }, \"t1\");\n\n        //启动线程\n        t1.start();\n\n        //开始时间\n        long start = System.currentTimeMillis();\n        log.debug(\"join begin ......\");\n        //只等待1500毫秒\n        t1.join(1500);\n        log.debug(\"t1 join end ......\");\n        //结束时间\n        long end = System.currentTimeMillis();\n        log.debug(\"t1 结果为:{},总耗时：{}\", r1,  end - start);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/44fc6f61-2e64-414e-be76-0486d270b52b.png)\n\n如果线程提前结束，join方法设置的时效就会失效，会以线程实际执行的时间为准。\n\n\n\n## interrupt方法详解\n\n### 打断阻塞状态的线程  ：\n\n打断 sleep， wait ， join 的线程 ，这几个方法都会让线程进入阻塞状态\n\n打断 sleep 的线程, 会清空打断状态，以 sleep 为例\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断阻塞线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\");\n        t1.start();\n        log.debug(\"interrupt... \");\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n        log.debug(\" 打断状态: {}\", t1.isInterrupted());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n打断阻塞状态线程后，打断标记会被设置未false。\n\n![](thread/d9550ede-fad3-4675-8791-3a1237fab0de.png)\n\n### 打断正常状态的线程  ：\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断正常状态线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod2 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            while (true) {\n               \n            }\n        }, \"t1\");\n\n        t1.start();\n\n        log.debug(\"interrupt... \");\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n        log.debug(\" 打断状态: {}\", t1.isInterrupted());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n\n```\n\nt1线程被打断之后，任然在运行。\n![](thread/c2203c1e-3091-4832-8061-8ba8bc3b24d1.png)\n\n如果想让被打断的线程停止运行。可以利用被打断线程的打断标记来实现。\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断正常状态线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod2 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            while (true) {\n                boolean isInterrupt = Thread.currentThread().isInterrupted();\n                if (isInterrupt) {\n                    log.debug(\"被打断了，退出循环\");\n                    break;\n                }\n            }\n        }, \"t1\");\n\n        t1.start();\n\n        log.debug(\"interrupt... \");\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n        log.debug(\" 打断状态: {}\", t1.isInterrupted());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n\n![](thread/70691192-ef7e-43b6-b365-d139f036e188.png)\n\n###  打断park线程:\n\n打断 park 线程, 不会清空打断状态\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断park线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod3 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            log.debug(\"park...\");\n            LockSupport.park();\n            log.debug(\"unpark...\");\n            log.debug(\"打断状态：{}\", Thread.currentThread().isInterrupted());\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/f5e5190c-2ca0-4467-8618-c9084b18b26f.png)\n\n值得注意的是park 线程打断后再次park，线程不会再次停下来。\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断park线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod3 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            log.debug(\"park...\");\n            LockSupport.park();\n            log.debug(\"unpark...\");\n            log.debug(\"打断状态：{}\", Thread.currentThread().isInterrupted());\n            //再次park\n            LockSupport.park();\n            log.debug(\"unpark...\");\n\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png)\n\n需要使用Thread 的静态方法Thread.interrupted() 来查看当前的是否被打断，会重置打断状态\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.LockSupport;\n\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断park线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod3 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            log.debug(\"park...\");\n            LockSupport.park();\n            log.debug(\"unpark...\");\n            log.debug(\"打断状态：{}\", Thread.interrupted());\n            //再次park\n            LockSupport.park();\n            log.debug(\"unpark...\");\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n\n```\n\n![](thread/bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png)\n\n## 模式之两阶段终止\n\n### 两阶段终止模式（Two Phase Termination）\n\n在一个线程T1中如何“优雅”终止线程T2?\n\n这里的【优雅】指的是给T2一个料理后事的机会。\n\n#### 错误思路\n\n- 使用线程对象的stop()方法停止线程:\n  - stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁\n-  使用System.exit(int)方法停止线程\n  - 目的仅是停止一个线程，但这种做法会让整个程序都停止\n\n### 案例\n\n有一个计算监控系统，每隔2s记录一下系统状态，有一个停止功能，可以停止整个监控程序，整个流程如下：\n\n![两阶段终止模式](thread/e1c2fc78-6f75-4049-8631-1e2bf400e92b.png)\n\n### 实现\n\n``` java\n/**\n * <p>\n * 利用interrupt实现两阶段停止。\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class TwoPhaseTermination {\n    private Thread monitor;\n\n    /**\n     * 启动监控\n     */\n    private void start() {\n        monitor = new Thread(() -> {\n            while (true) {\n                Thread currentThread = Thread.currentThread();\n                if (currentThread.isInterrupted()){\n                    log.debug(\"料理后事。。。。。。\");\n                    break;\n                }\n                try {\n                    TimeUnit.SECONDS.sleep(1); //打断阻塞的线程  会抛异常，打断标记会被重置\n                    log.debug(\"执行监控记录。。。。。。\"); //打断正常的线程\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    //再次打断,重新设置打断标记\n                    currentThread.interrupt();\n                }\n            }\n        });\n\n        monitor.start();\n    }\n\n    /**\n     * 停止监控\n     */\n    private void stop() {\n        monitor.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        TwoPhaseTermination termination = new TwoPhaseTermination();\n        termination.start();\n\n        TimeUnit.SECONDS.sleep(3);\n        termination.stop();\n    }\n}\n```\n\n![](thread/d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png)\n\n\n\n## 不推荐的方法\n\n还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁。\n\n| 方法名    | 静态 | 功能说明             |\n| --------- | ---- | -------------------- |\n| stop()    |      | 停止线程运行         |\n| suspend() |      | 挂起（暂停）线程运行 |\n| resume()  |      | 恢复线程运行         |\n\n## 主线程与守护线程\n\n默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。\n\n``` java\n\n/**\n * <p>\n * 主线程与守护线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class DaemonThread {\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始运行...\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始运行...\");\n            while (true) {\n                if (Thread.currentThread().isInterrupted()) {\n                    break;\n                }\n            }\n            log.debug(\"运行结束...\");\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        log.debug(\"运行结束...\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n\n```\n\n可以看到当`main线程`执行完毕后，`t1线程`任然在执行，`java 进程`尚未结束。\n![](thread/0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png)\n\n通过`setDaemon(boolean)`方法让t1个线程变为守护线程。\n\n``` java\n/**\n * <p>\n * 主线程与守护线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class DaemonThread {\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始运行...\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始运行...\");\n            while (true) {\n                if (Thread.currentThread().isInterrupted()) {\n                    break;\n                }\n            }\n            log.debug(\"运行结束...\");\n        }, \"t1\");\n        // 设置该线程为守护线程\n        t1.setDaemon(true);\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        log.debug(\"运行结束...\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n当`main线程`运行完毕，尽管`守护线程t1`的代码还没有执行完，也会强制结束。\n\n![](thread/ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png)\n\n>**注意**\n>\n>- 垃圾回收器线程就是一种守护线程\n>\n>- Tomcat 中的` Acceptor `和 `Poller `线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求。\n\n## 五种状态\n\n这是从 **操作系统** 层面来描述的\n\n![](thread/d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png)\n\n- 【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联\n\n- 【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行\n\n- 【运行状态】指获取了 CPU 时间片运行中的状态\n\n  - 当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换\n\n- 【阻塞状态】\n\n  - 如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】\n\n  - 等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】\n\n  - 与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们\n\n- 【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态\n\n## 六种状态\n\n这是从 **Java API** 层面来描述的\n\n根据 Thread.State 枚举，分为六种状态\n\n``` java\n    public enum State {\n        /**\n         * Thread state for a thread which has not yet started.\n         */\n        NEW,\n\n        /**\n         * Thread state for a runnable thread.  A thread in the runnable\n         * state is executing in the Java virtual machine but it may\n         * be waiting for other resources from the operating system\n         * such as processor.\n         */\n        RUNNABLE,\n\n        /**\n         * Thread state for a thread blocked waiting for a monitor lock.\n         * A thread in the blocked state is waiting for a monitor lock\n         * to enter a synchronized block/method or\n         * reenter a synchronized block/method after calling\n         * {@link Object#wait() Object.wait}.\n         */\n        BLOCKED,\n\n        /**\n         * Thread state for a waiting thread.\n         * A thread is in the waiting state due to calling one of the\n         * following methods:\n         * <ul>\n         *   <li>{@link Object#wait() Object.wait} with no timeout</li>\n         *   <li>{@link #join() Thread.join} with no timeout</li>\n         *   <li>{@link LockSupport#park() LockSupport.park}</li>\n         * </ul>\n         *\n         * <p>A thread in the waiting state is waiting for another thread to\n         * perform a particular action.\n         *\n         * For example, a thread that has called <tt>Object.wait()</tt>\n         * on an object is waiting for another thread to call\n         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on\n         * that object. A thread that has called <tt>Thread.join()</tt>\n         * is waiting for a specified thread to terminate.\n         */\n        WAITING,\n\n        /**\n         * Thread state for a waiting thread with a specified waiting time.\n         * A thread is in the timed waiting state due to calling one of\n         * the following methods with a specified positive waiting time:\n         * <ul>\n         *   <li>{@link #sleep Thread.sleep}</li>\n         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>\n         *   <li>{@link #join(long) Thread.join} with timeout</li>\n         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>\n         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>\n         * </ul>\n         */\n        TIMED_WAITING,\n\n        /**\n         * Thread state for a terminated thread.\n         * The thread has completed execution.\n         */\n        TERMINATED;\n    }\n```\n\n\n\n![](thread/0827c261-3195-4bdc-9b78-e0c664037749.png)\n\n- NEW 线程刚被创建，但是还没有调用 start() 方法\n\n- RUNNABLE 当调用了 start() 方法之后，注意，**Java API** 层面的 RUNNABLE 状态涵盖了 **操作系统** 层面的\n  - 【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）\n\n- BLOCKED ， WAITING ， TIMED_WAITING 都是 **Java API** 层面对【阻塞状态】的细分，后面会在状态转换一节详述\n\n- TERMINATED 当线程代码运行结束\n\n``` java\n/**\n * <p>\n * 线程的六种状态\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class ThreadState {\n    private static void test1() {\n        Thread t1 = new Thread(() -> {  //new\n            log.debug(\"runing......\");\n        }, \"t1\");\n\n        Thread t2 = new Thread(() -> {  //running\n           while (true){\n\n           }\n        },\"t2\");\n        t2.start();\n\n        Thread t3 = new Thread(() -> {  //terminted\n            log.debug(\"runing......\");\n        },\"t3\");\n        t3.start();\n\n        Thread t4 = new Thread(() -> {  //timed_waiting\n            synchronized (ThreadState.class) {\n                try {\n                    TimeUnit.SECONDS.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"t4\");\n        t4.start();\n\n        Thread t5 = new Thread(() -> {  //waiting\n                try {\n                    t2.join();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n        },\"t5\");\n        t5.start();\n\n        Thread t6 = new Thread(() -> {  //blocked\n            synchronized (ThreadState.class) {\n                try {\n                    TimeUnit.SECONDS.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"t6\");\n        t6.start();\n\n        log.debug(\"t1 线程的状态： {}\",t1.getState());\n        log.debug(\"t2 线程的状态： {}\",t2.getState());\n        log.debug(\"t3 线程的状态： {}\",t3.getState());\n        log.debug(\"t4 线程的状态： {}\",t4.getState());\n        log.debug(\"t5 线程的状态： {}\",t5.getState());\n        log.debug(\"t6 线程的状态： {}\",t6.getState());\n\n        \n    }\n\n    public static void main(String[] args) {\n        test1();\n    }\n}\n\n```\n\n![](thread/d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png)\n\n## 习题\n\n### 题目\n\n阅读华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案，提示\n\n- 参考图二，用两个线程（两个人协作）模拟烧水泡茶过程\n  - 文中办法乙、丙都相当于任务串行\n  - 而图一相当于启动了 4 个线程，有点浪费\n- 用 sleep(n) 模拟洗茶壶、洗水壶等耗费的时间\n\n附：华罗庚《统筹方法》\n\n>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复\n>\n>杂的科研项目的组织与管理中，都可以应用。\n>\n>怎样应用呢？主要是把工序安排好。\n>\n>洗水壶 1分钟 \n>\n>烧开水 15分钟\n>\n>洗茶壶 1分钟\n>\n>洗茶杯 2分钟\n>\n>拿茶叶 1分钟\n>\n>泡茶\n>\n>比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么\n>\n>办？\n>\n>- 办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开\n>\n>了，泡茶喝。\n>\n>- 办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡\n>\n>茶喝。\n>\n>- 办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡\n>\n>茶喝。\n>\n>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。\n>\n>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。\n>\n>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而\n>\n>这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：\n>\n>![image-20200806070304756](thread/image-20200806070304756.png)\n>\n>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作\n>\n>效率，应当主要抓烧开水这个环节，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大\n>\n>可利用“等水开”的时间来做。\n>\n>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但\n>\n>稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这\n>\n>么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱\n>\n>备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关\n>\n>键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。\n>\n>洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：\n>\n>![image-20200806070323056](thread/image-20200806070323056.png)\n>\n>看来这是“小题大做”，但在工作环节太多的时候，这样做就非常必要了。\n>\n>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接\n>\n>解决所有问题，但是，我们利用这种方法来考虑问题，也是不无裨益的。\n\n### 实现\n\n``` java\n/**\n * <p>\n * 洗好水壶，灌上凉水，放在火上,在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class MakingTea {\n    /**\n     * t2 等待 t1 执行完毕 进行后续任务\n     */\n    private static void t1() {\n        Thread t1 = new Thread(() -> {\n            log.info(\"洗好水壶，灌上凉水，放在火上\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.info(\"烧开水\");\n            try {\n                TimeUnit.SECONDS.sleep(5);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            try {\n                log.info(\"洗茶壶、洗茶杯、拿茶叶\");\n                TimeUnit.SECONDS.sleep(5);\n\n                //等待t1线程执行完毕\n                t1.join();\n                log.info(\"等水开了，泡茶喝。\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t2\");\n        t2.start();\n    }\n\n    public static void main(String[] args) {\n        t1();\n    }\n}\n\n```\n\n![image-20200806072602725](thread/image-20200806072602725.png)\n\n## 本章小结\n\n本章的重点在于掌握\n\n- 线程创建\n\n- 线程重要 api，如 start，run，sleep，join，interrupt 等\n\n- 线程状态\n\n- 应用方面\n\n  - 异步调用：主线程执行期间，其它线程异步执行耗时操作\n\n  - 提高效率：并行计算，缩短运算时间\n\n  - 同步等待：join\n\n  - 统筹规划：合理使用线程，得到最优效果\n\n- 原理方面\n\n  - 线程运行流程：栈、栈帧、上下文切换、程序计数器\n\n  - Thread 两种创建方式 的源码\n\n- 模式方面\n  - 终止模式之两阶段终止\n\n\n\n# 共享模型之管程\n\n## 共享带来的问题\n\n### 小故事\n\n- 老王（操作系统）有一个功能强大的算盘（CPU），现在想把它租出去，赚一点外快\n\n  ![image-20200806080136510](thread/image-20200806080136510.png)\n\n- 小南、小女（线程）来使用这个算盘来进行一些计算，并按照时间给老王支付费用\n\n- 但小南不能一天24小时使用算盘，他经常要小憩一会（sleep），又或是去吃饭上厕所（阻塞 io 操作），有时还需要一根烟，没烟时思路全无（wait）这些情况统称为（阻塞）\n\n  ![image-20200806080218070](thread/image-20200806080218070.png)\n\n- 在这些时候，算盘没利用起来（不能收钱了），老王觉得有点不划算\n\n- 另外，小女也想用用算盘，如果总是小南占着算盘，让小女觉得不公平\n\n- 于是，老王灵机一动，想了个办法 [ 让他们每人用一会，轮流使用算盘 ]\n\n- 这样，当小南阻塞的时候，算盘可以分给小女使用，不会浪费，反之亦然\n\n- 最近执行的计算比较复杂，需要存储一些中间结果，而学生们的脑容量（工作内存）不够，所以老王申请了\n\n  一个笔记本（主存），把一些中间结果先记在本上。\n\n- 计算流程是这样的：\n\n  ![image-20200806080338819](thread/image-20200806080338819.png)\n\n- 但是由于分时系统，有一天还是发生了事故\n\n- 小南刚读取了初始值 0 做了个 +1 运算，还没来得及写回结果\n\n- 老王说 [ 小南，你的时间到了，该别人了，记住结果走吧 ]，于是小南念叨着 [ 结果是1，结果是1...] 不甘心地到一边待着去了（上下文切换）\n\n- 老王说 [ 小女，该你了 ]，小女看到了笔记本上还写着 0 做了一个 -1 运算，将结果 -1 写入笔记本\n\n- 这时小女的时间也用完了，老王又叫醒了小南：[小南，把你上次的题目算完吧]，小南将他脑海中的结果 1 写入了笔记本\n\n  ![image-20200806080425078](thread/image-20200806080425078.png)\n\n- 小南和小女都觉得自己没做错，但笔记本里的结果是 1 而不是 0\n\n### Java的体现\n\n两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？\n\n``` java\n/**\n * <p>\n * 共享变量问题\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class SharedVariables {\n    private static int counter = 0;\n    \n    /**\n     * 当两个线程操作同一个共享变量时，会出现问题\n     */\n    private static void t1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                counter++;\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                counter--;\n            }\n        }, \"t2\");\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        log.info(\"counter:{}\", counter);\n    }\n\n    public static void main(String[] args) {\n        t1();\n    }\n}\n```\n\n\n\n### 问题分析\n\n以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理解，必须从字节码来进行分析。\n\n例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：\n\n```\ngetstatic i // 获取静态变量i的值\niconst_1 // 准备常量1\niadd // 自增\nputstatic i // 将修改后的值存入静态变量i\n```\n\n而对应 i-- 也是类似:\n\n```\ngetstatic i // 获取静态变量i的值\niconst_1 // 准备常量1\nisub // 自减\nputstatic i // 将修改后的值存入静态变量i\n```\n\n而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：\n\n![image-20200806081215362](thread/image-20200806081215362.png)\n\n如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：\n\n![image-20200806081309415](thread/image-20200806081309415.png)\n\n但多线程下这 8 行代码可能交错运行：\n\n出现负数的情况\n\n![image-20200806081339039](thread/image-20200806081339039.png)\n\n出现正数的情况：\n\n![image-20200806081409317](thread/image-20200806081409317.png)\n\n### 临界区(Critical Section)\n\n- 一个程序运行多个线程本身是没有问题的\n\n- 问题出在多个线程访问**共享资源**\n\n  - 多个线程读**共享资源**其实也没有问题\n\n  - 在多个线程对**共享资源**读写操作时发生指令交错，就会出现问题\n\n- 一段代码块内如果存在对**共享资源**的多线程读写操作，称这段代码块为**临界区**\n\n例如，下面代码中的临界区:\n\n``` java\nstatic int counter = 0;\nstatic void increment() \n// 临界区\n{ \n counter++; \n}\nstatic void decrement() \n// 临界区\n{ \n counter--; \n}\n```\n\n### 竞态条件(Race Condition)\n\n多个线程在临界区内执行，由于代码的**执行序列不同**而导致结果无法预测，称之为发生了**竞态条件**\n\n##  synchronized解决方案\n\n### ***** **应用之互斥**\n\n为了避免临界区的竞态条件发生，有多种手段可以达到目的。\n\n- 阻塞式的解决方案：synchronized，Lock\n\n- 非阻塞式的解决方案：原子变量\n\n本次课使用阻塞式的解决方案：synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一\n\n时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁\n\n的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。\n\n>**注意**\n>\n>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：\n>\n>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码\n>\n>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点\n\n### synchronized\n\n#### 语法\n\n``` java\nsynchronized(对象) // 线程1， 线程2(blocked)\n{\n 临界区\n}\n```\n\n#### 解决\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * <p>\n * 共享变量问题\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class SharedVariables {\n    private static int counter = 0;\n    private static Object lock = new Object();\n\n    /**\n     * 当两个线程操作同一个共享变量时，会出现问题\n     * 使用synchronized解决\n     */\n    private static void t2() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                synchronized (lock) {\n                    counter++;\n                }\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                synchronized (lock) {\n                    counter--;\n                }\n            }\n        }, \"t2\");\n        t2.start();\n\n        t1.join();\n        t2.join();\n        log.info(\"counter:{}\", counter);\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        t2();\n    }\n}\n\n```\n\n使用面向对象思想解决 ：\n\n``` java\n/**\n * <p>\n * 共享变量问题,使用面向对象思想解决\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class Room {\n    private int counter = 0;\n\n    public void increment() {\n        synchronized (this) {\n            counter++;\n        }\n    }\n\n    public void decrement() {\n        synchronized (this) {\n            counter--;\n        }\n    }\n\n    public int getCounter() {\n        synchronized (this) {\n            return counter;\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Room room = new Room();\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                room.increment();\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                room.decrement();\n            }\n        }, \"t2\");\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        log.info(\"counter:{}\", room.getCounter());\n    }\n}\n```\n\n\n\n![image-20200806093605366](thread/image-20200806093605366.png)\n\n你可以做这样的类比：\n\n- `synchronized(对象)` 中的对象，可以想象为一个房间（room），有唯一入口（门）房间只能一次进入一人进行计算，线程 t1，t2 想象成两个人\n\n- 当线程 t1 执行到 `synchronized(room)` 时就好比 t1 进入了这个房间，并锁住了门拿走了钥匙，在门内执行`count++` 代码\n\n- 这时候如果 t2 也运行到了 `synchronized(room)` 时，它发现门被锁住了，只能在门外等待，发生了上下文切换，阻塞住了\n\n- 这中间即使 t1 的 cpu 时间片不幸用完，被踢出了门外（不要错误理解为锁住了对象就能一直执行下去哦），这时门还是锁住的，t1 仍拿着钥匙，t2 线程还在阻塞状态进不来，只有下次轮到 t1 自己再次获得时间片时才能开门进入。\n\n- 当 t1 执行完 `synchronized{}` 块内的代码，这时候才会从 obj 房间出来并解开门上的锁，唤醒 t2 线程把钥匙给他。t2 线程这时才可以进入 obj 房间，锁住了门拿上钥匙，执行它的 `count--` 代码\n\n\n\n用图来表示:\n\n![image-20200806093649652](thread/image-20200806093649652.png)\n\n### 思考\n\n`synchronized` 实际是用**对象锁**保证了**临界区内代码的原子性**，临界区内的代码对外是不可分割的，不会被线程切换所打断。\n\n为了加深理解，请思考下面的问题:\n\n- 如果把 synchronized(obj) 放在 for 循环的外面，如何理解？-- 原子性\n\n- 如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？-- 锁对象\n\n- 如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？-- 锁对象\n\n\n\n## 方法上的synchronized\n\n`synchronized`修饰成员方法，锁住的是当前类的`实例对象`\n\n``` java\nclass Test {\n    public synchronized void test() {\n\n    }\n}\n\n//等价于\n\nclass Test {\n    public void test() {\n        synchronized (this) {\n\n        }\n    }\n}\n```\n\n`synchronized`修饰静态方法，锁住的是当前类的`类对象`\n\n``` java\n\nclass Test{\n    public synchronized static void test() {\n    }\n}\n\n//等价于\n\nclass Test {\n    public static void test() {\n        synchronized (Test.class) {\n\n        }\n    }\n}\n```\n\n### 不加synchronized的方法\n\n不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队（好比翻窗户进去的）\n\n### 所谓的“线程八锁”\n\n其实就是考察 synchronized 锁住的是哪个对象\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * <p>\n * 线程 8锁\n * </p>\n * <p>\n * <strong> synchronized </strong>实际是用\n * <strong> 对象锁 </strong>保证了<strong>临界区内代码的原子性</strong>，\n * 临界区内的代码对外是不可分割的，不会被线程切换所打断。\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class Thread8Locks {\n    public static void main(String[] args) {\n//        t1();\n//        t2();\n//        t3();\n//        t4();\n//        t5();\n//        t6();\n//        t7();\n//        t8();\n    }\n\n    /**\n     * 锁的是当前类的实例对象\n     * 如果线程先调用t1,会打印 1 ，2\n     * 如果线程先调用t2,会打印 2 ，1\n     */\n    private static void t1() {\n        Number1 n = new Number1();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.a();\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n    /**\n     * 锁的是当前类的实例对象\n     * 如果线程先调用t1,会先睡1s后再打印 1 ，2\n     * 如果线程先调用t2,会先打印 2 ，再睡1s后再打印 1\n     */\n    private static void t2() {\n        Number2 n = new Number2();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n    /**\n     * 锁的是当前类的实例对象\n     * 因为c方法没有被锁住，所以不用遵守排队规则\n     * 每次t3线程都会打印 3\n     * 如果线程先调用t1,再调用t3,t2,会先睡1s后再打印 1 ，2  ; 3,1s,1,2\n     * 如果线程先调用t2,再调用t3,t1,会先打印 2 ，再睡1s后再打印 1; 2,3,1s,1\n     * 如果线程先调用t3,再调用t1,t2,会先睡1s后再打印2 1; 3,1s,1,2\n     * 如果线程先调用t3,再调用t2,t1，会先打印 2 ，再睡1s后再打印 1; 3,2,1s,1\n     */\n    private static void t3() {\n        Number3 n = new Number3();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.c();\n        }, \"t3\").start();\n    }\n\n\n    /**\n     * 锁的是当前类的实例对象\n     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象\n     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t4() {\n        Number4 n1 = new Number4();\n        Number4 n2 = new Number4();\n        new Thread(() -> {\n            try {\n                n1.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            n2.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * a方法锁的是当前类的类对象\n     * b方法锁的是当前类的实例对象\n     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象\n     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t5() {\n        Number5 n = new Number5();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                Number5.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * 锁的是当前类的类对象\n     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t6() {\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                Number6.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            Number6.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * a方法锁的是当前类的类对象\n     * b方法锁的是当前类的实例对象\n     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象\n     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t7() {\n        Number7 n1 = new Number7();\n        Number7 n2 = new Number7();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n1.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n2.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * 锁的是当前类的类对象\n     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t8() {\n        Number8 n = new Number8();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number1\")\nclass Number1 {\n    public synchronized void a() {\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number2\")\nclass Number2 {\n    public synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number3\")\nclass Number3 {\n    public synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n\n    public void c() {\n        log.debug(\"3\");\n    }\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number4\")\nclass Number4 {\n    public synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n\n}\n\n/**\n * a方法锁的是当前类的类对象\n * b方法锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number5\")\nclass Number5 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的类对象\n */\n@Slf4j(topic = \"c.Number6\")\nclass Number6 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public static synchronized void b() {\n        log.debug(\"2\");\n    }\n\n}\n\n/**\n * a方法锁的是当前类的类对象\n * b方法锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number7\")\nclass Number7 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的类对象\n */\n@Slf4j(topic = \"c.Number8\")\nclass Number8 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public static synchronized void b() {\n        log.debug(\"2\");\n    }\n\n}\n\n```\n\n\n\n## 变量的线程安全分析\n\n#### 成员变量和静态变量是否线程安全？\n\n- 如果它们没有共享，则线程安全\n\n- 如果它们被共享了，根据它们的状态是否能够改变，又分两种情况\n\n  - 如果只有读操作，则线程安全\n\n  - 如果有读写操作，则这段代码是临界区，需要考虑线程安全\n\n#### 局部变量是否线程安全？\n\n- 局部变量是线程安全的\n\n- 但局部变量引用的对象则未必\n\n  - 如果该对象没有逃离方法的作用访问，它是线程安全的\n\n  - 如果该对象逃离方法的作用范围，需要考虑线程安全\n\n``` java\npublic static void test1() {\n\tint i = 10;\n\ti++; \n}\n```\n\n每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享.\n\n```\npublic static void test1();\n descriptor: ()V\n flags: ACC_PUBLIC, ACC_STATIC\n Code:\n stack=1, locals=1, args_size=0\n 0: bipush 10\n 2: istore_0\n 3: iinc 0, 1\n 6: return\n LineNumberTable:\n line 10: 0\n line 11: 3\n line 12: 6\n LocalVariableTable:\n Start Length Slot Name Signature\n 3 4 0 i I\n```\n\n![image-20200806112353892](thread/image-20200806112353892.png)\n\n\n\n**局部变量的引用稍有不同,先看一个成员变量的例子**\n\n``` java\n/**\n * <p>\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\npublic class ThreadSecurity {\n    static final int THREAD_NUMBER = 2;\n    static final int LOOP_NUMBER = 200;\n\n    public static void main(String[] args) {\n        ThreadUnsafe test = new ThreadUnsafe();\n        for (int i = 0; i < THREAD_NUMBER; i++) {\n            new Thread(() -> {\n                test.method1(LOOP_NUMBER);\n            }, \"Thread\" + i).start();\n        }\n    }\n}\nclass ThreadUnsafe {\n    ArrayList<String> list = new ArrayList<>();\n    public void method1(int loopNumber) {\n        for (int i = 0; i < loopNumber; i++) {\n            // { 临界区, 会产生竞态条件\n            method2();\n            method3();\n            // } 临界区\n        }\n    }\n    private void method2() {\n        list.add(\"1\");\n    }\n    private void method3() {\n        list.remove(0);\n    }\n}\n```\n\n**其中一种情况是，如果线程2 还未 add，线程1 remove 就会报错：**\n\n![image-20200806113017975](thread/image-20200806113017975.png)\n\n分析：\n\n- 无论哪个线程中的 method2 引用的都是同一个对象中的 list 成员变量\n\n- method3 与 method2 分析相同\n\n  ![image-20200806113212737](thread/image-20200806113212737.png)\n\n  **将 list 修改为局部变量**\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport java.util.ArrayList;\n\n/**\n * <p>\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\npublic class ThreadSecurity {\n    static final int THREAD_NUMBER = 2;\n    static final int LOOP_NUMBER = 200;\n\n    public static void main(String[] args) {\n        Threadsafe test = new Threadsafe();\n        for (int i = 0; i < THREAD_NUMBER; i++) {\n            new Thread(() -> {\n                test.method1(LOOP_NUMBER);\n            }, \"Thread\" + i).start();\n        }\n    }\n}\nclass Threadsafe {\n\n    public void method1(int loopNumber) {\n        ArrayList<String> list = new ArrayList<>();\n        for (int i = 0; i < loopNumber; i++) {\n            // { 临界区, 会产生竞态条件\n            method2(list);\n            method3(list);\n            // } 临界区\n        }\n    }\n    private void method2(ArrayList<String> list) {\n        list.add(\"1\");\n    }\n    private void method3(ArrayList<String> list) {\n        list.remove(0);\n    }\n}\n```\n\n那么就不会有上述问题了\n\n分析：\n\n- list 是局部变量，每个线程调用时会创建其不同实例，没有共享\n\n- 而 method2 的参数是从 method1 中传递过来的，与 method1 中引用同一个对象\n\n- method3 的参数分析与 method2 相同\n\n![image-20200806113622053](thread/image-20200806113622053.png)\n\n方法访问修饰符带来的思考，如果把 method2 和 method3 的方法修改为 public 会不会代理线程安全问题？\n\n- 情况1：有其它线程调用 method2 和 method3\n\n  ``` java\n  /**\n   * <p>\n   *\n   * </p>\n   *\n   * @author wangruiyu\n   * @since 2020/8/6\n   */\n  public class ThreadSecurity2 {\n      static final int THREAD_NUMBER = 2;\n      static final int LOOP_NUMBER = 200;\n  \n      public static void main(String[] args) {\n  \n          Threadsafe2 test = new Threadsafe2();\n          for (int i = 0; i < THREAD_NUMBER; i++) {\n              new Thread(() -> {\n                  test.method1(LOOP_NUMBER);\n              }, \"Thread\" + i).start();\n          }\n      }\n  }\n  \n  class Threadsafe2 {\n  \n      public void method1(int loopNumber) {\n          ArrayList<String> list = new ArrayList<>();\n          for (int i = 0; i < loopNumber; i++) {\n              // { 临界区, 会产生竞态条件\n              method2(list);\n              method3(list);\n              // } 临界区\n          }\n      }\n      public void method2(ArrayList<String> list) {\n          list.add(\"1\");\n      }\n      public void method3(ArrayList<String> list) {\n          list.remove(0);\n      }\n  }\n  ```\n\n  其他线程调用`method2`和`method3`方法和`method1`的list 肯定不是一个对象。所以线程安全\n\n- 情况2：在 情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，即\n\n  ``` java\n  \n  /**\n   * <p>\n   *\n   * </p>\n   *\n   * @author wangruiyu\n   * @since 2020/8/6\n   */\n  public class ThreadSecurity2 {\n      static final int THREAD_NUMBER = 2;\n      static final int LOOP_NUMBER = 200;\n  \n      public static void main(String[] args) {\n  \n          ThreadSafeSubClass test = new ThreadSafeSubClass();\n          for (int i = 0; i < THREAD_NUMBER; i++) {\n              new Thread(() -> {\n                  test.method1(LOOP_NUMBER);\n              }, \"Thread\" + i).start();\n          }\n      }\n  }\n  \n  class Threadsafe2 {\n  \n      public void method1(int loopNumber) {\n          ArrayList<String> list = new ArrayList<>();\n          for (int i = 0; i < loopNumber; i++) {\n              // { 临界区, 会产生竞态条件\n              method2(list);\n              method3(list);\n              // } 临界区\n          }\n      }\n      public void method2(ArrayList<String> list) {\n          list.add(\"1\");\n      }\n      public void method3(ArrayList<String> list) {\n          list.remove(0);\n      }\n  }\n  \n  class ThreadSafeSubClass extends Threadsafe2{\n      @Override\n      public void method3(ArrayList<String> list) {\n          new Thread(() -> {\n              list.remove(0);\n          }).start();\n      }\n  }\n  ```\n\n- ![image-20200806115634318](thread/image-20200806115634318.png)\n\n\n\n**从这个例子可以看出 private 或 final 提供【安全】的意义所在，请体会开闭原则中的【闭】**\n\n#### 常见线程安全类\n\n- String\n\n- Integer\n\n- StringBuffffer\n\n- Random\n\n- Vector\n\n- Hashtable\n\n- JAVA.util.concurrent 包下的类\n\n这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为\n\n``` java\nHashtable table = new Hashtable();\n\nnew Thread(()->{\n table.put(\"key\", \"value1\");\n}).start();\n\nnew Thread(()->{\n table.put(\"key\", \"value2\");\n}).start()\n```\n\n- 它们的每个方法是原子的\n\n- 但**注意**它们多个方法的组合不是原子的，见后面分析\n\n##### 线程安全类方法的组合\n\n分析下面代码是否线程安全？\n\n``` java\nHashtable table = new Hashtable();\n// 线程1，线程2\nif( table.get(\"key\") == null) {\n table.put(\"key\", value);\n}\n```\n\n![image-20200818213438504](thread/image-20200818213438504.png)\n\n##### 不可变类线程安全性\n\nString、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的\n\n有同学或许有疑问，String 有 replace，substring 等方法【可以】改变值啊，那么这些方法又是如何保证线程安\n\n全的呢？\n\n``` java\npublic class Immutable{\n    \n private int value = 0;\n    \n public Immutable(int value){\n \tthis.value = value;\n }\n public int getValue(){\n \treturn this.value;\n }\n}\n```\n\n如果想增加一个增加的方法呢？\n\n``` java\npublic class Immutable{\n    \n private int value = 0;\n    \n public Immutable(int value){\n \tthis.value = value;\n }\n public int getValue(){\n \treturn this.value;\n }\n \n public Immutable add(int v){\n \treturn new Immutable(this.value + v);\n } \n}\n```\n\n#### 习题\n\n##### 卖票练习\n\n测试下面代码是否存在线程安全问题，并尝试改正\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\n/**\n * <p>\n *  线程安全测试  -   买票\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\n@Slf4j\npublic class ExerciseSell {\n    public static void main(String[] args) {\n        //模拟多人买票\n        TicketWindows ticketWindows = new TicketWindows(2000);\n        //统计卖出的票数\n        List<Integer> list = new CopyOnWriteArrayList<>();\n        //所有线程的集合\n        List<Thread> threadList = new ArrayList<>();\n        for (int i = 0; i < 4000; i++) {\n            Thread thread = new Thread(() -> {\n                //卖出的票数\n                int sell = ticketWindows.sell(randomAmount());\n                list.add(sell);\n            });\n            thread.start();\n            threadList.add(thread);\n        }\n\n        //等待所有线程运行完毕\n        threadList.forEach(thread -> {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        //统计卖出的票和剩余的票\n        log.info(\"余票：{}\", ticketWindows.getCount());\n        log.info(\"已售：{}\", list.stream().mapToInt(Integer::intValue).sum());\n    }\n\n    //Random 线程安全\n    static Random random = new Random();\n\n    //生成1到5的随机数\n    private static int randomAmount() {\n        return random.nextInt(5) + 1;\n    }\n}\n\n/**\n * <p>\n * 卖票窗口类\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\nclass TicketWindows {\n    private int count;\n\n    public TicketWindows(int count) {\n        this.count = count;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public int sell(int amount) {\n\n        if (count >= amount) {\n            synchronized (this) {\n                count -= amount;\n            }\n            return amount;\n        }\n        return 0;\n\n    }\n}\n\n```\n\n##### 转账练习\n\n测试下面代码是否存在线程安全问题，并尝试改正\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Random;\n\n/**\n * <p>\n * 线程安全测试  -   转账\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\n@Slf4j\npublic class ExceriseTransfer {\n    public static void main(String[] args) throws InterruptedException {\n        Account a = new Account(1000);\n        Account b = new Account(1000);\n        Thread threadA = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                a.transfer(b, randomAmount());\n            }\n        });\n        Thread threadB = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                b.transfer(a, randomAmount());\n            }\n        });\n        threadA.start();\n        threadB.start();\n        threadA.join();\n        threadB.join();\n        //转账后的金额\n        log.info(\"A 账户的金额：{}\", a.getMoney());\n        log.info(\"B 账户的金额：{}\", b.getMoney());\n    }\n\n\n    //Random 线程安全\n    static Random random = new Random();\n\n    //生成1到100的随机数\n    private static int randomAmount() {\n        return random.nextInt(100) + 1;\n    }\n}\n\n/**\n * <p>\n * 账户类\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\nclass Account {\n    private int money;\n\n    public Account(int money) {\n        this.money = money;\n    }\n\n    public int getMoney() {\n        return money;\n    }\n\n    public void setMoney(int money) {\n        this.money = money;\n    }\n\n    /**\n     * 转账\n     *\n     * @param account 账户\n     * @param money   金额\n     */\n    public void transfer(Account account, int money) {\n        synchronized (Account.class) {\n            if (this.money >= money) {\n                account.setMoney(account.getMoney() + money);\n                this.setMoney(this.getMoney() - money);\n            }\n        }\n    }\n//    //多个对象使用synchronized 加锁 是两个不同的对象，所以无法实现加速的效果\n//    public synchronized  void transfer(Account account, int money) {\n//          if (this.money >= money) {\n//              account.setMoney(account.getMoney() + money);\n//              this.setMoney(this.getMoney() - money);\n//          }\n//    }\n}\n\n```\n\n## Monitor概念\n\n### Java对象头\n\n以 32 位虚拟机为例\n\n#### 普通对象\n\n```ruby\n|--------------------------------------------------------------| \n| \t\t\t\t\tObject Header (64 bits)\t\t \t\t       |\n|------------------------------------|-------------------------| \n|\t\t Mark Word (32 bits) \t     | Klass Word (32 bits)    |\n|------------------------------------|-------------------------|\n```\n\n#### 数组对象\n\n```ruby\n|---------------------------------------------------------------------------------|\n| \t\t\t\t\t\t\t\tObject Header (96 bits)\t\t\t \t\t\t\t  |\n|--------------------------------|-----------------------|------------------------|\n| \t\t\tMark Word(32bits) \t | \tKlass Word(32bits)   | array length(32bits)   |\n|--------------------------------|-----------------------|------------------------|\n```\n\n其中 Mark Word 结构为\n\n```ruby\n|-------------------------------------------------------|--------------------|\n| \t\t\t\t\tMark Word (32 bits)\t\t\t\t\t| \t\tState\t\t |\n|-------------------------------------------------------|--------------------|\n| \t\t  hashcode:25 | age:4 | biased_lock:0 \t| 01\t| \t\tNormal\t\t |\n|-------------------------------------------------------|--------------------|\n| thread:23 | epoch:2 | age:4 | biased_lock:1 \t| 01\t| \t\tBiased\t\t |\n|-------------------------------------------------------|--------------------|\n| \t\tptr_to_lock_record:30 \t\t\t\t\t| 00 \t| Lightweight Locked |\n|-------------------------------------------------------|--------------------|\n| \t\tptr_to_heavyweight_monitor:30 \t\t\t| 10 \t| Heavyweight Locked |\n|-------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\t\t\t\t\t\t| 11\t|\t Marked for GC\t |\n|-------------------------------------------------------|--------------------|\n```\n\n\n\n64 位虚拟机 Mark Word\n\n```ruby\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\tMark Word (64 bits) \t\t\t\t\t | \t\t  State  \t  |\n|--------------------------------------------------------------------|--------------------|\n|  unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 |  01  | \t\t  Normal\t  |\n|--------------------------------------------------------------------|--------------------|\n|  thread:54 | epoch:2     | unused:1 | age:4 | biased_lock:1 |  01  | \t\t  Biased\t  |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_lock_record:62\t\t\t\t\t\t\t\t  |  00  | Lightweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  |  10  | Heavyweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |  11  | \tMarked for GC\t  |\n|--------------------------------------------------------------------|--------------------|\n```\n\n**参考资料**\n\nhttps://stackoverflflow.com/questions/26357186/what-is-in-java-object-header\n\n## 原理之Monitor(锁)\n\n### Monitor原理\n\nMonitor 被翻译为**监视器**或**管程**\n\n每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针Monitor 结构如下\n\n![image-20200819064936628](thread/image-20200819064936628.png)\n\n\n\n- 刚开始 Monitor 中 Owner 为 null\n\n- 当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner\n\n- 在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED\n\n- Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的\n\n- 图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析\n\n>**注意：**\n>\n>synchronized 必须是进入同一个对象的 monitor 才有上述的效果\n>\n>不加 synchronized 的对象不会关联监视器，不遵从以上规则\n\n##  原理之synchronized\n\n**小故事**\n\n故事角色\n\n- 老王 - JVM\n\n- 小南 - 线程\n\n- 小女 - 线程\n\n- 房间 - 对象\n\n- 房间门上 - 防盗锁 - Monitor\n\n- 房间门上 - 小南书包 - 轻量级锁\n\n- 房间门上 - 刻上小南大名 - 偏向锁\n\n- 批量重刻名 - 一个类的偏向锁撤销到达 20 阈值\n\n- 不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向\n\n小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，即使他离开了，别人也进不了门，他的工作就是安全的。\n\n但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女晚上用。每次上锁太麻烦了，有没有更简单的办法呢？\n\n小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是自己的，那么就在门外等，并通知对方下次用锁门的方式。\n\n后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍然觉得麻烦。\n\n于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦掉，升级为挂书包的方式。\n\n同学们都放假回老家了，小南就膨胀了，在 20 个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包。\n\n### synchronized原理\n\n``` java\nstatic final Object lock = new Object();\n\nstatic int counter = 0;\n\npublic static void main(String[] args) {\n synchronized (lock) {\n \tcounter++;\n }\n}\n```\n\n对应的字节码为\n\n``` java\npublic static void main(java.lang.String[]);\n descriptor: ([Ljava/lang/String;)V\n flags: ACC_PUBLIC, ACC_STATIC\n Code:\n stack=2, locals=3, args_size=1\n 0: getstatic #2 // <- lock引用 （synchronized开始）\n 3: dup\n 4: astore_1 // lock引用 -> slot 1\n 5: monitorenter // 将 lock对象 MarkWord 置为 Monitor 指针\n 6: getstatic #3 // <- i\n 9: iconst_1 // 准备常数 1\n 10: iadd // +1\n 11: putstatic #3 // -> i\n 14: aload_1 // <- lock引用\n 15: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList\n 16: goto 24\n 19: astore_2 // e -> slot 2 \n 20: aload_1 // <- lock引用\n 21: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList\n 22: aload_2 // <- slot 2 (e)\n 23: athrow // throw e\n 24: return\n Exception table:\n from to target type\n 6 16 19 any\n 19 22 19 any\n LineNumberTable:\n line 8: 0\n line 9: 6\n line 10: 14\n line 11: 24\n LocalVariableTable:\n Start Length Slot Name Signature\n 0 25 0 args [Ljava/lang/String;\n StackMapTable: number_of_entries = 2\n frame_type = 255 /* full_frame */\n offset_delta = 19\n locals = [ class \"[Ljava/lang/String;\", class java/lang/Object ]\n stack = [ class java/lang/Throwable ]\n frame_type = 250 /* chop */\n offset_delta = 4              \n```\n\n\n\n>**注意**\n>\n>方法级别的 synchronized 不会在字节码指令中有所体现\n\n### synchronized原理进阶\n\n#### 1.轻量级锁\n\n轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。\n\n轻量级锁对使用者是透明的，即语法仍然是 `synchronized`\n\n假设有两个方法同步块，利用同一个对象加锁\n\n``` java\nstatic final Object obj = new Object();\n\npublic static void method1() {\n synchronized( obj ) {\n // 同步块 A\n method2();\n }\n}\npublic static void method2() {\n synchronized( obj ) {\n // 同步块 B\n }\n}\n```\n\n- 创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word\n\n![image-20200819065515918](thread/image-20200819065515918.png)\n\n- 让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录\n\n  ![image-20200819065601188](thread/image-20200819065601188.png)\n\n - 如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下\n\n   ![image-20200819065708766](thread/image-20200819065708766.png)\n\n- 如果 cas 失败，有两种情况\n\n  - 如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程\n  - 如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数\n\n  ![image-20200819065835524](thread/image-20200819065835524.png)\n\n- 当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一\n\n  ![image-20200819065931928](thread/image-20200819065931928.png)\n\n- 当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头\n\n  - 成功，则解锁成功\n  - 失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程\n\n#### 2.锁膨胀\n\n如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。\n\n``` java\nstatic Object obj = new Object();\n\npublic static void method1() {\n synchronized( obj ) {\n // 同步块\n }\n}\n```\n\n- 当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁\n\n  ![image-20200819071006301](thread/image-20200819071006301.png)\n\n- 这时 Thread-1 加轻量级锁失败，进入锁膨胀流程\n\n  - 即为 Object 对象申请 `Monitor` 锁，让 Object 指向重量级锁地址\n  - 然后自己进入 `Monitor` 的 `EntryList` BLOCKED\n\n![image-20200819071139042](thread/image-20200819071139042.png)\n\n- 当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程\n\n#### 3.自旋优化\n\n重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。\n\n自旋重试成功的情况\n\n| **线程** **1** **（****core 1** **上）** | **对象** **Mark**      | **线程** **2** **（****core 2** **上）** |\n| ---------------------------------------- | ---------------------- | ---------------------------------------- |\n| -                                        | 10（重量锁）           | -                                        |\n| 访问同步块，获取 monitor                 | 10（重量锁）重量锁指针 | -                                        |\n| 成功（加锁）                             | 10（重量锁）重量锁指针 | -                                        |\n| 执行同步块                               | 10（重量锁）重量锁指针 |                                          |\n| 执行同步块                               | 10（重量锁）重量锁指针 | 访问同步块，获取 monitor                 |\n| 执行同步块                               | 10（重量锁）重量锁指针 | 自旋重试                                 |\n| 执行完毕                                 | 10（重量锁）重量锁指针 | 自旋重试                                 |\n| 成功（解锁）                             | 01（无锁）             | 自旋重试                                 |\n| -                                        | 10（重量锁）重量锁指针 | 成功（加锁）                             |\n| -                                        | 10（重量锁）重量锁指针 | 执行同步块                               |\n| -                                        | 10（重量锁）重量锁指针 | 执行同步块                               |\n| ...                                      | ....                   | ....                                     |\n\n自旋重试失败的情况\n\n| **线程** **1** **（****core 1** **上）** | **对象** **Mark**        | **线程** **2** **（****core 2** **上）** |\n| ---------------------------------------- | ------------------------ | ---------------------------------------- |\n| -                                        | 10（重量锁）             | -                                        |\n| 访问同步块，获取 monitor                 | 10（重量锁）重量锁指针   | -                                        |\n| 成功（加锁）                             | 10（重量锁）重量锁指针   | -                                        |\n| 执行同步块                               | 10（重量锁）重量锁指针   |                                          |\n| 执行同步块                               | 10（重量锁）重量锁指针   | 访问同步块，获取 monitor                 |\n| 执行同步块                               | 10（重量锁）重量锁指针   | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针   | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 阻塞                                     |\n| ...                                      | ...                      | ...                                      |\n\n- 自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。\n\n- 在 Java 6 之后**自旋锁是自适应的**，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。\n\n- Java 7 之后不能控制是否开启自旋功能\n\n#### 4.偏向锁\n\n轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。\n\nJava 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有\n\n例如：\n\n``` java\nstatic final Object obj = new Object();\n\npublic static void m1() {\n synchronized( obj ) {\n \t// 同步块 A\n \tm2();\n }\n}\npublic static void m2() {\n synchronized( obj ) {\n \t// 同步块 B\n \tm3();\n }\n}\npublic static void m3() {\n synchronized( obj ) {\n \t// 同步块 C\n }\n}\n```\n\n![image-20200819072452480](thread/image-20200819072452480.png)\n\n![image-20200819072504262](thread/image-20200819072504262.png)\n\n**偏向状态**\n\n回忆一下对象头格式\n\n```ruby\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\tMark Word (64 bits) \t\t\t\t\t | \t\t  State  \t  |\n|--------------------------------------------------------------------|--------------------|\n|  unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 |  01  | \t\t  Normal\t  |\n|--------------------------------------------------------------------|--------------------|\n|  thread:54 | epoch:2     | unused:1 | age:4 | biased_lock:1 |  01  | \t\t  Biased\t  |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_lock_record:62\t\t\t\t\t\t\t\t  |  00  | Lightweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  |  10  | Heavyweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |  11  | \tMarked for GC\t  |\n|--------------------------------------------------------------------|--------------------|\n```\n\n一个对象创建时：\n\n- 如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0\n\n- 偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数\n\n   `-XX:BiasedLockingStartupDelay=0` 来禁用延迟\n\n- 如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值\n\n1） 测试延迟特性\n\n2） 测试偏向锁\n\n``` java\nclass Dog {\n    \n}\n```\n\n利用 jol 第三方工具来查看对象头信息（注意这里我扩展了 jol 让它输出更为简洁）\n\n``` java\n// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 \npublic static void main(String[] args) throws IOException {\n \tDog d = new Dog();\n \tClassLayout classLayout = ClassLayout.parseInstance(d);\n \tnew Thread(() -> {\n \t\tlog.debug(\"synchronized 前\");\n \t\tSystem.out.println(classLayout.toPrintableSimple(true));\n \t\tsynchronized (d) {\n \t\t\tlog.debug(\"synchronized 中\");\n \t\t\tSystem.out.println(classLayout.toPrintableSimple(true));\n \t\t}\n \t\tlog.debug(\"synchronized 后\");\n \t\tSystem.out.println(classLayout.toPrintableSimple(true));\n \t}, \"t1\").start();\n}\n```\n\n输出\n\n```\n11:08:58.117 c.TestBiased [t1] - synchronized 前\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 \n11:08:58.121 c.TestBiased [t1] - synchronized 中\n00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101 \n11:08:58.121 c.TestBiased [t1] - synchronized 后\n00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101\n```\n\n>**注意**\n>\n>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中\n\n3）测试禁用\n\n在上面测试代码运行时在添加 VM 参数 `-XX:-UseBiasedLocking` 禁用偏向锁\n\n输出\n\n```\n11:13:10.018 c.TestBiased [t1] - synchronized 前\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n11:13:10.021 c.TestBiased [t1] - synchronized 中\n00000000 00000000 00000000 00000000 00100000 00010100 11110011 10001000 \n11:13:10.021 c.TestBiased [t1] - synchronized 后\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001\n```\n\n4) 测试 hashCode\n\n正常状态对象一开始是没有 hashCode 的，第一次调用才生成\n\n#### 撤销 **-** 调用对象hashCode\n\n调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销\n\n- 轻量级锁会在锁记录中记录 hashCode\n\n- 重量级锁会在 Monitor 中记录 hashCode\n\n在调用 hashCode 后使用偏向锁，记得去掉 `-XX:-UseBiasedLocking`\n\n输出\n\n```\n11:22:10.386 c.TestBiased [main] - 调用 hashCode:1778535015 \n11:22:10.391 c.TestBiased [t1] - synchronized 前\n00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001 \n11:22:10.393 c.TestBiased [t1] - synchronized 中\n00000000 00000000 00000000 00000000 00100000 11000011 11110011 01101000 \n11:22:10.393 c.TestBiased [t1] - synchronized 后\n00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001\n```\n\n#### 撤销 **-** 其它线程使用对象\n\n当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁\n\n``` java\nprivate static void test2() throws InterruptedException {\n \tDog d = new Dog();\n \tThread t1 = new Thread(() -> {\n\t\t synchronized (d) {\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t\tsynchronized (TestBiased.class) {\n \t\t\tTestBiased.class.notify();\n \t\t}\n \t\t// 如果不用 wait/notify 使用 join 必须打开下面的注释\n \t\t// 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的\n         /*try {\n         System.in.read();\n         } catch (IOException e) {\n         e.printStackTrace();\n         }*/\n \t}, \"t1\");\n \tt1.start();\n    \n \tThread t2 = new Thread(() -> {\n \t\tsynchronized (TestBiased.class) {\n \t\t\ttry {\n \t\t\t\tTestBiased.class.wait();\n \t\t\t} catch (InterruptedException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\tsynchronized (d) {\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t}, \"t2\");\n \tt2.start();\n}\n```\n\n输出\n\n```\n[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 \n\n[t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 \n\n[t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 \n\n[t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n```\n\n#### 撤销 - 调用 wait/notify \n\n``` java\npublic static void main(String[] args) throws InterruptedException {\n \tDog d = new Dog();\n \tThread t1 = new Thread(() -> {\n \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\tsynchronized (d) {\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\ttry {\n \t\t\t\td.wait();\n \t\t\t} catch (InterruptedException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t}, \"t1\");\n \tt1.start();\n    \n \tnew Thread(() -> {\n \t\ttry {\n \t\t\tThread.sleep(6000);\n \t\t} catch (InterruptedException e) {\n \t\t\te.printStackTrace();\n \t\t}\n\t\tsynchronized (d) {\n \t\t\tlog.debug(\"notify\");\n \t\t\td.notify();\n \t\t}\n \t}, \"t2\").start();\n}\n```\n\n输出\n\n```\n[t1] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 \n[t1] - 00000000 00000000 00000000 00000000 00011111 10110011 11111000 00000101 \n[t2] - notify \n[t1] - 00000000 00000000 00000000 00000000 00011100 11010100 00001101 11001010\n```\n\n#### 批量重偏向\n\n如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID\n\n当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程\n\n``` java\nprivate static void test3() throws InterruptedException {\n \tVector<Dog> list = new Vector<>();\n \tThread t1 = new Thread(() -> {\n \t\tfor (int i = 0; i < 30; i++) {\n \t\t\tDog d = new Dog();\n \t\t\tlist.add(d);\n \t\t\tsynchronized (d) {\n \t\t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\t}\n \t\t}\n \t\tsynchronized (list) {\n \t\t\tlist.notify();\n \t\t} \n \t}, \"t1\");\n \tt1.start();\n \n \tThread t2 = new Thread(() -> {\n \t\tsynchronized (list) {\n \t\t\ttry {\n\t\t\t\tlist.wait();\n \t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t\tlog.debug(\"===============> \");\n \t\tfor (int i = 0; i < 30; i++) {\n \t\t\tDog d = list.get(i);\n \t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\tsynchronized (d) {\n \t\t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\t}\n \t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t}, \"t2\");\n \tt2.start();\n}\n```\n\n输出\n\n```\n[t1] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - ===============> \n[t2] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 0 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 1 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 2 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 3 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 4 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 5 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 5 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 6 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 6 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 7 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 7 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 8 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 8 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 9 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 9 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 10 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 11 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 12 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 12 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 13 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 13 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 14 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 14 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 15 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 15 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 16 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 16 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 17 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 17 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 18 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 18 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101\n```\n\n#### 批量撤销\n\n当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的\n\n``` java\n\n    static Thread t1, t2, t3;\n\n    private static void test4() throws InterruptedException {\n        Vector<Dog> list = new Vector<>();\n        int loopNumber = 39;\n        t1 = new Thread(() -> {\n            for (int i = 0; i < loopNumber; i++) {\n                Dog d = new Dog();\n                list.add(d);\n                synchronized (d) {\n                    log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n                }\n            }\n            LockSupport.unpark(t2);\n        }, \"t1\");\n        t1.start();\n        t2 = new Thread(() -> {\n            LockSupport.park();\n            log.debug(\"===============> \");\n            for (int i = 0; i < loopNumber; i++) {\n                Dog d = list.get(i);\n                log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n                synchronized (d) {\n                    log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n                }\n                log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n            }\n            LockSupport.unpark(t3);\n        }, \"t2\");\n    }\n```\n\n>**参考资料**\n>\n>https://github.com/farmerjohngit/myblog/issues/12\n>\n>https://www.cnblogs.com/LemonFive/p/11246086.html\n>\n>https://www.cnblogs.com/LemonFive/p/11248248.html\n>\n>偏向锁论文\n\n#### 5.锁消除\n\n锁消除\n\n``` java\n@Fork(1)\n@BenchmarkMode(Mode.AverageTime)\n@Warmup(iterations=3)\n@Measurement(iterations=5)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\npublic class MyBenchmark {\n    static int x = 0;\n    @Benchmark\n    public void a() throws Exception {\n        x++;\n    }\n    @Benchmark\n    public void b() throws Exception {\n        Object o = new Object();\n        synchronized (o) {\n            x++;\n        }\n    }\n}\n```\n\n`java -jar benchmarks.jar`\n\n```\nBenchmark\t\t\tMode\t Samples \tScore\t Score error \tUnits \nc.i.MyBenchmark.a \tavgt \t\t5 \t\t1.542 \t\t0.056 \t\tns/op \nc.i.MyBenchmark.b \tavgt \t\t5 \t\t1.518 \t\t0.091 \t\tns/op\n```\n\n`java -XX:-EliminateLocks -jar benchmarks.jar`\n\n```\nBenchmark \t\t\tMode \tSamples \tScore \tScore error \tUnits \nc.i.MyBenchmark.a \tavgt \t\t5 \t\t1.507 \t\t0.108 \t\tns/op \nc.i.MyBenchmark.b \tavgt \t\t5 \t\t16.976 \t\t1.572 \t\tns/op\n```\n\n**锁粗化**\n\n对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。\n","source":"_posts/2023/thread.md","raw":"---\ntitle: 并发编程\ndate: 2023-03-21\ntags:\n- thread\ncategories:\n- JAVA\n---\n\n# 并发编程\n\n## 进程和线程\n\n### 进程\n\n- 程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU,数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的\n- 当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。\n- 进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程(例如记事本、画图、 浏览器等)，也有的程序只能启动一个实例进程(例如网易云音乐、360 安全卫士等)\n\n### 线程\n\n- 一个进程之内可以分为-到多个线程。\n\n- 一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行。\n\n- Java中，线程作为最小调度单位，进程作为资源分配的最小单位。 在windows中进程是不活动的，只是作为线程的容器。\n\n\n### 二者对比\n\n- 进程基本上相互独立的，而线程存在于进程内，是进程的一个子集。\n- 进程拥有共享的资源，如内存空间等，供其内部的线程共享。\n- 进程间通信较为复杂\n  - 同一台计算机的进程通信称为IPC (Inter-process communication)。\n  - 不同计算机之间的进程通信，需要通过网络，并遵守共同的协议,例如HTTP。\n- 线程通信相对简单，因为它们共享进程内的内存，-个例子是多个线程可以访问同-一个共享变量。\n- 线程更轻量,线程上下文切换成本-般上要比进程上下文切换低。\n\n## 并发与并行\n\n单核cpu下，线程实际还是`串行执行`的。操作系统中有- -个组件叫做任务调度器，将cpu的时间片(windows'下时间片最小约为15毫秒)分给不同的线程使用，只是由于cpu在线程间(时间片很短)的切换\n非常快，人类感觉是`同时运行的`。总结为- -句话就是:`微观串行，宏观并行，`一般会将这种`线程轮流使用`CPU 的做法称为并发，concurrent\n\n| CPU  | 时间片1 | 时间片2 | 时间片3 | 时间片4 |\n| :--: | :-----: | :-----: | :-----: | :-----: |\n| core |  线程1  |  线程2  |  线程3  |  线程4  |\n\n![](thread/453affe8-17db-40b3-940f-162e7597336e.png)\n\n多核CPU下，每个核（core）都可以调度运行线程，这时候线程可以是并行的。\n\n|  CPU  | 时间片1 | 时间片2 | 时间片3 | 时间片4 |\n| :---: | :-----: | :-----: | :-----: | :-----: |\n| core1 |  线程1  |  线程1  |  线程3  |  线程3  |\n| core2 |  线程2  |  线程2  |  线程4  |  线程4  |\n\n![](thread/2ed065be-3fb7-4e67-b04e-b8e08980405d.png)\n\n引用Rob Pike的一段描述:\n\n- 并发(concurrent) 是同- -时间应对(dealing with) 多件事情的能力\n- 并行(parallel) 是同- -时间动手做(doing) 多件事情的能力\n\n例子\n\n- 家庭主妇做饭、打扫卫生、给孩子喂奶，她-一个人轮流交替做这多件事,这时就是并发\n- 家庭主妇雇了个保姆，她们一-起这些事，这时既有并发，也有并行(这时会产生竞争，例如锅只有一口,一个人用锅时，另一个人就得等待)\n- 雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行。\n\n## 应用\n\n### 应用之异步调用（案例）\n\n从方法调用的角度来讲，如果需要等待结果返回，才能继续运行就是同步\n，不需要等待结果返回，就能继续运行就是异步\n**注意:同步在多线程中还有另外一层意思，是让多个线程步调一致**\n\n#### 设计\n\n多线程可以让方法执行变为异步的(即不要巴巴干等着)比如说读取磁盘文件时，假设读取操作花费了5秒\n钟，如果没有线程调度机制，这5秒调用者什么都做不了,其代码都得暂停...\n\n``` java\npackage com.wry.concurrent.util;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\n\n/**\n * <p>\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class FileReaderUtil {\n    \n    public static void read(String path) {\n        log.debug(\"FileReader start .....\");\n        try {\n            FileReader reader = new java.io.FileReader(path);\n        } catch (FileNotFoundException e) {\n            e.printStackTrace();\n        }\n        log.debug(\"FileReader end .....\");\n    }\n}\n```\n\n``` java\npackage com.wry.concurrent.n2;\n\nimport com.wry.concurrent.constans.Constans;\nimport com.wry.concurrent.util.FileReaderUtil;\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\n\n/**\n * <p>\n * 同步等待\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class Sync {\n\n    public static void main(String[] args) {\n        //同步执行，必须等待fileReader方法执行完毕，才能进行其他操作\n        FileReaderUtil.read(Constans.FILE_PATH);\n\n        log.debug(\"do other things .....\");\n    }\n\n\n}\n\n```\n\n``` java\npackage com.wry.concurrent.n2;\n\nimport com.wry.concurrent.constans.Constans;\nimport com.wry.concurrent.util.FileReaderUtil;\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * <p>\n * 异步不等待\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class Async {\n\n    public static void main(String[] args) {\n        //创建一个线程去异步执行，不需要等待执行完毕，就可以执行其他操作\n        new Thread(() -> {\n            FileReaderUtil.read(Constans.FILE_PATH);\n        }).start();\n\n        log.debug(\"do other things .....\");\n    }\n}\n\n```\n\n\n\n#### 结论\n\n- 比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程。\n- tomcat 的异步servlet也是类似的目的,让用户线程处理耗时较长的操作，避免阻塞tomcat的工作线程\n- UI程序中，开线程进行其他操作，避免阻塞ui线程\n\n### 应用之提高效率(案例)\n\n充分利用多核cpu的优势，提高运行效率。想象下面的场景,执行3个计算,最后将计算结果汇总。\n\n>计算\t1\t花费\t10ms\n>计算\t2\t花费\t11ms\n>计算\t3\t花费\t9 ms\n>汇总需要\t1 ms\n\n- 如果是串行执行，那么总共花费的时间是10 + 11 + 9 + 1= 31ms\n- 但如果是四核cpu, 各个核心分别使用线程1执行计算1,线程2执行计算2,线程3执行计算3,那么3个线程是并行的，花费时间只取决于最长的那个线程运行的时间，即11ms最后加上汇总时间只会花费12ms\n\n**注意 : 需要在多核cpu才能提高效率，单核仍然时是轮流执行**\n\n#### 设计\n\n``` java\npackage com.wry.concurrent.n2.example;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Arrays;\nimport java.util.concurrent.ExecutionException;\nimport java.util.concurrent.FutureTask;\n\n/**\n * <p>\n * 用同步和异步两中方式计算数据所消耗的时间\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/26\n */\n@Slf4j\npublic class MyBenchmark {\n\n    static int[] ARRAY = new int[4000_000_00];\n\n    static {\n        Arrays.fill(ARRAY, 1);\n    }\n\n    /**\n     * 异步计算 ，创建4个线程去同步计算结果，最后合并计算结果\n     */\n    public static void async() throws ExecutionException, InterruptedException {\n        //开始时间\n        Long start = System.currentTimeMillis();\n        int[] array = ARRAY;\n        FutureTask<Integer> task1 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[0 + i];\n            }\n            return sum;\n        });\n        FutureTask<Integer> task2 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[1000_000_00 + i];\n            }\n            return sum;\n        });\n        FutureTask<Integer> task3 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[2000_000_00 + i];\n            }\n            return sum;\n        });\n        FutureTask<Integer> task4 = new FutureTask<Integer>(() -> {\n            int sum = 0;\n            for (int i = 0; i < 1000_000_00; i++) {\n                sum += array[3000_000_00 + i];\n            }\n            return sum;\n        });\n\n        new Thread(task1).start();\n        new Thread(task2).start();\n        new Thread(task3).start();\n        new Thread(task4).start();\n        int i = task1.get() + task2.get() + task3.get() + task4.get();\n        //结束时间\n        Long end = System.currentTimeMillis();\n        System.out.println(\"异步计算：计算结果：\" + i + \"\\t总计耗时：\" + (end - start));\n    }\n\n    /**\n     * 同步计算\n     */\n    private static void sync() {\n        //开始时间\n        Long start = System.currentTimeMillis();\n        int[] array = ARRAY;\n        int sum = 0;\n        for (int i = 0; i < 4000_000_00; i++) {\n            sum += array[i];\n        }\n        //结束时间\n        Long end = System.currentTimeMillis();\n        System.out.println(\"同步计算：计算结果：\" + sum + \"\\t总计耗时：\" + (end - start));\n    }\n\n\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        //同步计算\n        sync();\n        //异步计算\n        async();\n    }\n\n}\n\n```\n\n![](thread/4f22eeff-a017-46f6-bf49-5359e570fe22.png)\n\n#### 结论\n\n1、单核cpu下，多线程不能实际提高程序运行效率,只是为了能够在不同的任务之间切换，不同线程轮流使用cpu,不至于一 个线程总占用cpu,别的线程没法干活\n2、多核cpu可以并行跑多个线程，但能否提高程序运行效率还是要分情况的\n\n    -  有些任务,经过精心设计,将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分(参考后文的[阿姆达尔定律] )\n    -  也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义\n\n3、 IO操作不占用cpu,只是我们一般拷贝文件使用的是[阻塞IO]，这时相当于线程虽然不用cpu,但需要一直等待IO结束，没能充分利用线程。所以才有后面的[非阻塞IO]和[异步I0]优化。\n\n# JAVA线程\n\n## 创建和运行线程\n\njava程序在启动的时候就会常见一个线程，main函数就是一个线程\n\n### 1.直接使用Thread类\n\n``` java\n/**\n * <p>\n * 创建线程的第一种方式 Thread类\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n\n@Slf4j\npublic class Thread1 {\n    public static void main(String[] args) {\n        Thread thread = new Thread() {\n            @Override\n            public void run() {\n                //要执行的任务\n                log.debug(\"runing....\");\n            }\n        };\n        //设置线程名字\n        thread.setName(\"t1\");\n        //启动线程\n        thread.start();\n        \n        log.debug(\"main....\");\n    }\n}\n\n```\n\n### 2.使用Runnable 配合Thread\n\n把`线程`和`任务` （要执行的代码） 分开\n\n- Thread 代表线程\n- Runnable 可运行的任务（线程要执行的代码）\n\n``` java\n/**\n * <p>\n * 创建线程的第二种方式\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n\n@Slf4j\npublic class Thread2 {\n    public static void main(String[] args) {\n        Runnable runnable = new Runnable() {\n            @Override\n            public void run() {\n                //要执行的任务\n                log.debug(\"runing....\");\n            }\n        };\n\n        //创建一个线程(参数1：要执行的任务，参数2：线程的名字)\n        Thread thread = new Thread(runnable,\"t2\");\n        //启动线程\n        thread.start();\n        \n        log.debug(\"main....\");\n    }\n}\n\n```\n\nJAVA 8 以后可以使用`lambda`精简代码\n\n``` java\n       \t//创建任务\n        Runnable lombdaRunnable= () -> {\n            log.debug(\"lombda runging......\"); \n        };\n        //创建线程\n        Thread lombdaThead=new Thread(lombdaRunnable,\"lombdaThead\");\n        //启动线程\n        lombdaThead.start();\n```\n\n可以再次精简\n\n``` java\n new Thread(() -> {\n     log.debug(\"lombda runging......\");\n }, \"lambdaThread\").start();\n```\n\n### 3.FutureTask 配合Thread\n\n``` java\n/**\n * <p>\n * 创建线程的第三种方式\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n\n@Slf4j\npublic class Thread3 {\n    public static void main(String[] args) throws ExecutionException, InterruptedException {\n        FutureTask<Integer> task=new FutureTask<>(new Callable<Integer>() {\n            @Override\n            public Integer call() throws Exception {\n                log.debug(\"running.......\");\n                Thread.sleep(1000);\n                return 100;\n            }\n        });\n\n        //创建一个线程(参数1：要执行的任务，参数2：线程的名字)\n        Thread thread = new Thread(task,\"t3\");\n        //启动线程\n        thread.start();\n        \n        //获取task任务的返回值，主线程会等待task任务完成才会继续执行下边的操作\n        Integer integer = task.get();\n        log.debug(\"task 的返回值：{}\",integer);\n    }\n}\n\n```\n\n\n\n\n\n### 原理之Thread与Runnable的关系\n\n#### Runnable源码\n\n创建线程传递Runnable任务，调用重载init方法。\n\n``` java\n    /**\n     * Allocates a new {@code Thread} object. This constructor has the same\n     * effect as {@linkplain #Thread(ThreadGroup,Runnable,String) Thread}\n     * {@code (null, target, name)}.\n     *\n     * @param  target\n     *         the object whose {@code run} method is invoked when this thread\n     *         is started. If {@code null}, this thread's run method is invoked.\n     *\n     * @param  name\n     *         the name of the new thread\n     */\n    public Thread(Runnable target, String name) {\n        init(null, target, name, 0);\n    }\n\n```\n\n调用Init重载方法 \n\n``` java\n /**\n     * Initializes a Thread with the current AccessControlContext.\n     * @see #init(ThreadGroup,Runnable,String,long,AccessControlContext,boolean)\n     */\n    private void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize) {\n        init(g, target, name, stackSize, null, true);\n    }\n```\n\n找到核心init 方法，把`Runable任务`交给成员对象 `target`\n\n``` java\n    /**\n     * Initializes a Thread.\n     *\n     * @param g the Thread group\n     * @param target the object whose run() method gets called\n     * @param name the name of the new Thread\n     * @param stackSize the desired stack size for the new thread, or\n     *        zero to indicate that this parameter is to be ignored.\n     * @param acc the AccessControlContext to inherit, or\n     *            AccessController.getContext() if null\n     * @param inheritThreadLocals if {@code true}, inherit initial values for\n     *            inheritable thread-locals from the constructing thread\n     */\n    private void init(ThreadGroup g, Runnable target, String name,\n                      long stackSize, AccessControlContext acc,\n                      boolean inheritThreadLocals) {\n        if (name == null) {\n            throw new NullPointerException(\"name cannot be null\");\n        }\n\n        this.name = name;\n\n        Thread parent = currentThread();\n        SecurityManager security = System.getSecurityManager();\n        if (g == null) {\n            /* Determine if it's an applet or not */\n\n            /* If there is a security manager, ask the security manager\n               what to do. */\n            if (security != null) {\n                g = security.getThreadGroup();\n            }\n\n            /* If the security doesn't have a strong opinion of the matter\n               use the parent thread group. */\n            if (g == null) {\n                g = parent.getThreadGroup();\n            }\n        }\n\n        /* checkAccess regardless of whether or not threadgroup is\n           explicitly passed in. */\n        g.checkAccess();\n\n        /*\n         * Do we have the required permissions?\n         */\n        if (security != null) {\n            if (isCCLOverridden(getClass())) {\n                security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);\n            }\n        }\n\n        g.addUnstarted();\n\n        this.group = g;\n        this.daemon = parent.isDaemon();\n        this.priority = parent.getPriority();\n        if (security == null || isCCLOverridden(parent.getClass()))\n            this.contextClassLoader = parent.getContextClassLoader();\n        else\n            this.contextClassLoader = parent.contextClassLoader;\n        this.inheritedAccessControlContext =\n                acc != null ? acc : AccessController.getContext();\n        //把Runable 任务保存在成员变量\n        this.target = target;\n        setPriority(priority);\n        if (inheritThreadLocals && parent.inheritableThreadLocals != null)\n            this.inheritableThreadLocals =\n                ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);\n        /* Stash the specified stack size in case the VM cares */\n        this.stackSize = stackSize;\n\n        /* Set thread ID */\n        tid = nextThreadID();\n    }\n```\n\nThread 运行方法,实际调用的还是Thread的`run方法`\n\n``` java\n  /**\n     * If this thread was constructed using a separate\n     * <code>Runnable</code> run object, then that\n     * <code>Runnable</code> object's <code>run</code> method is called;\n     * otherwise, this method does nothing and returns.\n     * <p>\n     * Subclasses of <code>Thread</code> should override this method.\n     *\n     * @see     #start()\n     * @see     #stop()\n     * @see     #Thread(ThreadGroup, Runnable, String)\n     */\n    @Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n\n```\n\n#### 小结\n\n- Thread是把线程和任务合并在了一起。Runnable 是把线程和任务分开。\n- 用Runnable 更容易与线程池等高级API 配合\n- 用Runnable 让任务类脱离了Thread 继承体系，更灵活。\n\n## 多线程同时运行\n\n#### 案例\n\n``` java\n/**\n * <p>\n * 演示多个线程并发交替执行\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class MultiThread {\n    public static void main(String[] args) {\n        new Thread(()->{\n            while (true) {\n                log.debug(\"running.....\");\n            }\n        },\"t1\").start();\n        \n        new Thread(() -> {\n            while (true) {\n                log.debug(\"running.....\");\n            }\n        }, \"t2\").start();\n    }\n}\n\n```\n\n![](thread/e5b813b7-361c-42ec-9326-53b01a2872da.png)\n\n#### 小结\n\n- 多线程交替执行。\n- 谁先谁后，不由我们控制，由底层的任务调度器完成。\n\n\n\n## 查看进程线程的方法\n\n### windows\n\n- 任务管理器可以查看进程和线程数,也可以用来杀死进程\n- tasklist查看进程\n- taskkill杀死进程\n\n### linux\n\n- ps -fe查看所有进程\n- ps -fT -p <PID>查看某个进程(PID) 的所有线程，\n- kill 死进程\n- top按大写H切换是否显示线程\n- top -H -p <PID>查看某个进程(PID) 的所有线程:\n\n### java\n\n- jps 命令查看所有的JAVA 进程\n- jstack <PID> 车看某个Java 进程（PID）的所有线程状态\n- jconsole 来查看某个Java 进程中线程的运行情况（图形界面）\n\n### jconsole远程监控配置\n\n需要以如下方式运行你的java类\n\n>java -Djava. rmi. server . hostname=' ip地址' -Dcom. sun. management . jmxremote -Dcom. sun. management . jmxremote. port=i连接端口-Dcom . sun . management . jmxremote.ssl=是否安全连接-Dcom. sun. management .jmxremote .authenticate=是否认证    java类\n\n修改/etc/hosts文件将127.0.0.1 映射至主机名\n如果要认证访问，还需要做如下步骤\n\n- 复制jmxremote.password 文件\n- 修改jmxremote.password和jmxremote.access文件的权限为600即文件所有者可读写\n- 连接时填入controlRole (用户名)，R&D (密码)\n\n\n\n## 原理之线程运行\n\n### 栈与栈帧\n\nJava Virtual Machine Stacks （Java 虚拟机栈）\n\n我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟\n\n机就会为其分配一块栈内存。\n\n- 每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存\n\n- 每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法\n\n#### 案例\n\n##### 单线程\n\n``` java\n/**\n * <p>\n * 方法调用查看方法栈和栈帧\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class Frames {\n    public static void main(String[] args) {\n        method1(10);\n    }\n\n    private static void method1(int x) {\n        int y = x + 1;\n        Object o = method2();\n        System.out.println(o);\n    }\n\n    private static Object method2() {\n        Object o = new Object();\n        return o;\n    }\n}\n\n```\n\n![](thread/cb65fed7-57dd-404b-b4f1-e365dbe83379.png)\n\n![](thread/210feb5c-150a-43c3-8b3d-440f53e343d1.png)\n\n当方法运行到method2时可以看到栈里有三个栈帧\n![](thread/52ebada9-ad0c-45fc-9482-40b961c20bbf.png)\n\n![](thread/51e456b2-69ca-4039-8ec3-137a74a3e57d.png)\n\n当method2 方法执行完毕后栈中减少method2的栈帧\n![](thread/7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png)\n\n![](thread/ca324ec8-b1a0-419a-a962-640dae424e10.png)\n\n直到所有栈帧运行完毕，程序执行完毕。\n\n![](thread/3ce55a24-aeb0-4055-9925-c69a63ec9053.png)\n\n##### 多线程\n\n``` java\npackage com.wry.concurrent.thread;\n\n/**\n * <p>\n * 多线程情况下 方法调用查看方法栈和栈帧\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class Frames2 {\n    public static void main(String[] args) {\n        new Thread(() -> {\n            //t1线程调用\n            method1(20);\n        }, \"t1\").start();\n        //main线程调用\n        method1(10);\n    }\n\n    private static void method1(int x) {\n        int y = x + 1;\n        Object o = method2();\n        System.out.println(o);\n    }\n\n    private static Object method2() {\n        Object o = new Object();\n        return o;\n    }\n}\n```\n\n在t1 线程出设置断点，切换断点模式。\n\n![](thread/815e324a-777f-4b34-b590-acbb4c624cb0.png)\n\n切换不同的线程\n\n![](thread/d05f71ef-bbbb-4b19-a804-6444a74de835.png)\n\nmain线程的栈帧\n\n![](thread/75442144-d101-4e7a-97ca-c833a2b827fe.png)\nt1线程的栈帧\n![](thread/7bf73e18-7259-45da-93c5-a4183062572e.png)\n\n#### 小结\n\n线程的栈内存是相互独立的，每个线程有独立的栈内存，栈内存中有栈帧，每个线程相互独立，互不干扰。\n\n\n\n### 线程上下文切换（Thread Context Switch）\n\n因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码\n\n- 线程的 cpu 时间片用完\n\n- 垃圾回收\n\n- 有更高优先级的线程需要运行\n\n- 线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法\n\n当 Context Switch 发生时，`需要由操作系统保存当前线程的状态，并恢复另一个线程的状态`，Java 中对应的概念就是`程序计数器【寄存器】（Program Counter Register）`，它的作用是记住下一条 jvm 指令的执行地址，是线程私有的。\n\n- 状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等\n\n- Context Switch 频繁发生会影响性能\n\n## 常见方法\n\n| **方法名**       | **static** | **功能说明**                                                 | **注意**                                                     |\n| :--------------- | :--------: | :----------------------------------------------------------- | :----------------------------------------------------------- |\n| start()          |            | 启动一个新线程，在新的线程运行 run 方法中的代码              | start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateExceptio |\n| run()            |            | 新线程启动后会调用的方法                                     | 如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象，来覆盖默认行为 |\n| join()           |            | 等待线程运行结束                                             |                                                              |\n| join(long n)     |            | 等待线程运行结束,最多等待n毫秒                               |                                                              |\n| getId()          |            | 获取线程长整型的 id                                          | id唯一                                                       |\n| getName()        |            | 获取线程名                                                   |                                                              |\n| setName(String)  |            | 修改线程名                                                   |                                                              |\n| getPriority()    |            | 获取线程优先级                                               |                                                              |\n| setPriority(int) |            | 修改线程优先级                                               | java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率 |\n| getState()       |            | 获取线程状态                                                 | Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING,TIMED_WAITING, TERMINATED |\n| isInterrupted()  |            | 判断是否被打断                                               | 不会清除`打断标记`                                           |\n| isAlive()        |            | 线程是否存活(还没有运行完毕）                                |                                                              |\n| interrupt()      |            | 打断线程                                                     | 如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除`打断标记`；如果打断的正在运行的线程，则会设置`打断标记`；park 的线程被打断，也会设置`打断标记` |\n| interrupted()    |   static   | 判断当前线程是否被打断                                       | 会清除`打断标记`                                             |\n| currentThread()  |   static   | 获取当前正在执行的线程                                       |                                                              |\n| sleep(long n)    |   static   | 让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程 |                                                              |\n| yield()          |   static   | 提示线程调度器让出当前线程对CPU的使用                        | 主要是为了测试和调试                                         |\n\n\n\n## start方法详解\n\n### 调用run\n\n``` java\n/**\n * <p>\n * 创建线程调用 run 方法\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class RunMethod {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            log.debug(Thread.currentThread().getName());\n            FileReaderUtil.read(Constants.FILE_PATH);\n        }, \"t1\");\n\n        t1.run();\n    }\n}\n\n```\n\n发现执行的依然是main 线程，创建的线程并没有执行。\n\n![](thread/4b22adcb-879c-493e-a6dc-7a50426a6db7.png)\n\n### 调用start\n\n``` java\n/**\n * <p>\n * 创建线程调用 run 方法\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class RunMethod {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            log.debug(Thread.currentThread().getName());\n            FileReaderUtil.read(Constants.FILE_PATH);\n        }, \"t1\");\n//        //调用run方法\n//        t1.run();\n        //调用start方法\n        t1.start();\n    }\n}\n```\n\n![](thread/6d0f8427-4068-4a15-a933-cd3f74e28dbf.png)\n\n### 源码分析\n``` java\n\n    /**\n     * If this thread was constructed using a separate\n     * <code>Runnable</code> run object, then that\n     * <code>Runnable</code> object's <code>run</code> method is called;\n     * otherwise, this method does nothing and returns.\n     * <p>\n     * Subclasses of <code>Thread</code> should override this method.\n     *\n     * @see     #start()\n     * @see     #stop()\n     * @see     #Thread(ThreadGroup, Runnable, String)\n     */\n    @Override\n    public void run() {\n        if (target != null) {\n            target.run();\n        }\n    }\n```\n``` java\n@FunctionalInterface\npublic interface Runnable {\n    /**\n     * When an object implementing interface <code>Runnable</code> is used\n     * to create a thread, starting the thread causes the object's\n     * <code>run</code> method to be called in that separately executing\n     * thread.\n     * <p>\n     * The general contract of the method <code>run</code> is that it may\n     * take any action whatsoever.\n     *\n     * @see     java.lang.Thread#run()\n     */\n    public abstract void run();\n}\n```\nrun() 方法是抽象方法等待子类去实现。\n\n``` java\n   public synchronized void start() {\n        /**\n         * This method is not invoked for the main method thread or \"system\"\n         * group threads created/set up by the VM. Any new functionality added\n         * to this method in the future may have to also be added to the VM.\n         *\n         * A zero status value corresponds to state \"NEW\".\n         */\n        if (threadStatus != 0)\n            throw new IllegalThreadStateException();\n\n        /* Notify the group that this thread is about to be started\n         * so that it can be added to the group's list of threads\n         * and the group's unstarted count can be decremented. */\n        group.add(this);\n\n        boolean started = false;\n        try {\n            start0();\n            started = true;\n        } finally {\n            try {\n                if (!started) {\n                    group.threadStartFailed(this);\n                }\n            } catch (Throwable ignore) {\n                /* do nothing. If start0 threw a Throwable then\n                  it will be passed up the call stack */\n            }\n        }\n    }\n    \n     private native void start0();\n\n```\n在`start()`方法中调用 `start0()`方法正式启动线程。而`start0()`是用`native`修饰得方法，底层调用操作系统的方法实现线程调用。\n\n### 小结\n\n- 直接调用 run 是在主线程中执行了 run，没有启动新的线程\n\n- 使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码\n\n### 查看线程状态\n\n``` java\n/**\n * <p>\n * 查看线程运行状态\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadStatus {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            System.out.println(\"running.....\");\n        }, \"t1\");\n\n        //获取运行前的状态\n        System.out.println(\"运行前的状态:\"+t1.getState());\n        //调用start方法\n        t1.start();\n        //获取运行后的状态\n        System.out.println(\"运行后的状态:\"+t1.getState());\n    }\n}\n```\n\n![](thread/3a071edf-6ded-487b-abbb-d016a9fe6864.png)\n\n### 多次调用start方法会抛java.lang.IllegalThreadStateException\n\n``` java\n//调用start方法\nt1.start();\nt1.start();\n```\n\n![](thread/feed6992-8dff-450c-9010-e2f46caf6243.png)\n\n\n\n## **sleep** **与** **yield**\n\n### sleep\n\n1. 调用 sleep 会让当前线程从 *Running* 进入 *Timed Waiting* 状态（阻塞）\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  sleep\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class ThreadMethod {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            try {\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\");\n\n        t1.start();\n        log.debug(\"t1 线程的状态：{}\",t1.getState());\n\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        log.debug(\"t1 线程的状态：{}\",t1.getState());\n    }\n}\n```\n\n![image-20200822234416578](thread/image-20200822234416578.png)\n\n2. 其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 interrupt 打断\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class ThreadMethod2 {\n    public static void main(String[] args) {\n        Thread t1 = new Thread(() -> {\n            try {\n                log.debug(\"enter sleep...... \");\n                Thread.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n                log.debug(\"wake up...... \");\n            }\n        }, \"t1\");\n\n        t1.start();\n        try {\n            Thread.sleep(1000);\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        t1.interrupt();\n        log.debug(\"interrupt...... \");\n    }\n}\n```\n\n![](thread/81a4db1a-c8d1-47f7-a955-39db726f5173.png)\n\n3. 睡眠结束后的线程未必会立刻得到执行\n\n4. 建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 使用TimeUnit\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\n@Slf4j\npublic class ThreadMethod3 {\n    public static void main(String[] args) throws InterruptedException {\n        log.debug(\"start ......\");\n        TimeUnit.SECONDS.sleep(1);\n        log.debug(\"end ......\");\n    }\n}\n```\n\n![](thread/f78c9ec4-6379-48de-b2e6-f529bb063540.png)\n\n\n\n### yield\n\n1. 调用 yield 会让当前线程从 *Running* 进入 *Runnable* 就绪状态，然后调度执行其它线程\n\n2. 具体的实现依赖于操作系统的任务调度器\n\n##  线程优先级\n\n线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它\n\n如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用\n\n### 未设置优先级和调用yield\n\n``` java\n/**\n * <p>\n * 设置线程的线程优先级\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadPriority {\n    public static void main(String[] args) {\n        Runnable task1 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"---->1 \" + count++);\n            }\n        };\n        Runnable task2 = () -> {\n            int count = 0;\n            for (; ; ) {\n                // Thread.yield();\n                System.out.println(\"        ---->2 \" + count++);\n            }\n        };\n        Thread t1 = new Thread(task1, \"t1\");\n        Thread t2 = new Thread(task2, \"t2\");\n        t1.start();\n        t2.start();\n    }\n}\n```\n\nt1线程和t2 线程打印的数值相差不大。\n\n![](thread/683dd209-d862-46f9-878f-b9e8f4c2db3b.png)\n\n### 调用yield\n\n``` java\n/**\n * <p>\n * 设置线程的线程优先级\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadPriority {\n    public static void main(String[] args) {\n        Runnable task1 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"---->1 \" + count++);\n            }\n        };\n        Runnable task2 = () -> {\n            int count = 0;\n            for (; ; ) {\n                //调用yield,把CPU执行执行时间交给其他线程\n                Thread.yield();\n                System.out.println(\"        ---->2 \" + count++);\n            }\n        };\n        Thread t1 = new Thread(task1, \"t1\");\n        Thread t2 = new Thread(task2, \"t2\");\n        t1.start();\n        t2.start();\n    }\n}\n\n```\n\nt1线程打印的数值远远大于 t2 线程打印的数值。\n\n![](thread/d37e0c1b-1e69-4360-937a-edf5296f47ce.png)\n\n### 设置优先级\n\n``` java\n/**\n * <p>\n * 设置线程的线程优先级\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/27\n */\npublic class ThreadPriority {\n    public static void main(String[] args) {\n        Runnable task1 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"---->1 \" + count++);\n            }\n        };\n        Runnable task2 = () -> {\n            int count = 0;\n            for (; ; ) {\n                System.out.println(\"        ---->2 \" + count++);\n            }\n        };\n        Thread t1 = new Thread(task1, \"t1\");\n        Thread t2 = new Thread(task2, \"t2\");\n        //t1线程设置最小的线程优先级\n        t1.setPriority(Thread.MIN_PRIORITY);\n        //t2线程设置最大的线程优先级\n        t2.setPriority(Thread.MAX_PRIORITY);\n        \n        t1.start();\n        t2.start();\n    }\n}\n```\n\nt2线程打印的数值远远大于 t1 线程打印的数值。\n\n![](thread/2feee3db-6b39-4e1a-9098-1a5f966742f7.png)\n\n##  案例\n\n### 防止CPU 占用100%\n\n#### sleep 实现\n\n在没有利用cpu来计算时，不要让while(rue)空转浪费cpu,这时可以使用yield或sleep来让出cpu的使用权给其他程序\n\n``` java\nThread t1 = new Thread(() -> {\n            try {\n                Thread.sleep(500);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }   \n        },\"t1\");\n        t1.start();\n```\n\n\n\n- 可以用wait或条件变量达到类似的效果\n- 不同的是，后两种都需要加锁I并且需要相应的唤醒操作,一般适用于要进行同步的场景\n- sleep适用于无需锁同步的场景\n\n##  join方法详解\n\n下面的代码执行，打印 r 是什么？\n\n### 案例1 ——为什么需要join\n\n未调用Join方法\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod {\n    private static int r = 0;\n\n    private static void test1() {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r = 10;\n        },\"t1\");\n        t1.start();\n        log.debug(\"结果为:{}\", r);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n可以看到`主线程`在`t1线程`还没有给` r `赋值时就已经支持完毕了。打印的r任然是初始值。\n\n![](thread/5cce206b-f24c-4489-afda-57b5a3102172.png)\n\n### 分析\n\n- 因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出` r=10`\n\n- 而主线程一开始就要打印 r 的结果，所以只能打印出 `r=0`\n\n### 解决方法\n\n- 用 sleep 行不行？为什么？\n\n  因为不知道t1程何时运行完毕,所以主线程等待的时间不好设置。\n\n- 用 join，加在 t1.start() 之后即可\n\n  `join()`的作用是：**\"等待该线程终止\"**，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是 **在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行**。\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod {\n    private static int r = 0;\n\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r = 10;\n        },\"t1\");\n        t1.start();\n        //等待t1线程执行结束\n        t1.join();\n        log.debug(\"结果为:{}\", r);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/86d6badd-f76b-4152-8044-bef85f333017.png)\n\n### 案例2 ——同步\n\n以调用方角度来讲，如果\n\n- 需要等待结果返回，才能继续运行就是同步\n\n- 不需要等待结果返回，就能继续运行就是异步\n\n#### 等待多个结果\n\n问，下面代码 cost 大约多少秒？\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join 等待多个结果\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod2 {\n    private static int r1 = 0;\n    private static int r2 = 0;\n\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r1 = 10;\n        }, \"t1\");\n\n        Thread t2 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r2 = 20;\n        }, \"t2\");\n\n        //启动线程\n        t1.start();\n        t2.start();\n\n        //开始时间\n        long start = System.currentTimeMillis();\n        log.debug(\"join begin ......\");\n        t1.join();\n        log.debug(\"t1 join end ......\");\n        t2.join();\n        log.debug(\"t2 join end ......\");\n        //结束时间\n        long end = System.currentTimeMillis();\n        log.debug(\"t1 结果为:{},t2 结果为:{},总耗时：{}\", r1, r2, end - start);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n分析如下\n\n- 第一个 join：等待 t1 时, t2 并没有停止, 而在运行\n\n- 第二个 join：1s 后, 执行到此, t2 也运行了 1s, 因此也只需再等待 1s\n\n![](thread/9372a527-1cf5-4699-9271-f9724c815f24.png)\n\n如果颠倒两个 join 呢？\n\n![](thread/b94de8b0-5933-49dc-b0ff-a29a03280074.png)\n\n### 案例3 ——有时效的等待\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法 join 有时效的等待\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class JoinMethod3 {\n    private static int r1 = 0;\n\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始......\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始......\");\n            try {\n                //睡2000毫秒\n                TimeUnit.MILLISECONDS.sleep(2000);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.debug(\"结束......\");\n            r1 = 10;\n        }, \"t1\");\n\n        //启动线程\n        t1.start();\n\n        //开始时间\n        long start = System.currentTimeMillis();\n        log.debug(\"join begin ......\");\n        //只等待1500毫秒\n        t1.join(1500);\n        log.debug(\"t1 join end ......\");\n        //结束时间\n        long end = System.currentTimeMillis();\n        log.debug(\"t1 结果为:{},总耗时：{}\", r1,  end - start);\n        log.debug(\"结束......\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/44fc6f61-2e64-414e-be76-0486d270b52b.png)\n\n如果线程提前结束，join方法设置的时效就会失效，会以线程实际执行的时间为准。\n\n\n\n## interrupt方法详解\n\n### 打断阻塞状态的线程  ：\n\n打断 sleep， wait ， join 的线程 ，这几个方法都会让线程进入阻塞状态\n\n打断 sleep 的线程, 会清空打断状态，以 sleep 为例\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.TimeUnit;\n\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断阻塞线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            try {\n                TimeUnit.SECONDS.sleep(2);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\");\n        t1.start();\n        log.debug(\"interrupt... \");\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n        log.debug(\" 打断状态: {}\", t1.isInterrupted());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n打断阻塞状态线程后，打断标记会被设置未false。\n\n![](thread/d9550ede-fad3-4675-8791-3a1237fab0de.png)\n\n### 打断正常状态的线程  ：\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断正常状态线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod2 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            while (true) {\n               \n            }\n        }, \"t1\");\n\n        t1.start();\n\n        log.debug(\"interrupt... \");\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n        log.debug(\" 打断状态: {}\", t1.isInterrupted());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n\n```\n\nt1线程被打断之后，任然在运行。\n![](thread/c2203c1e-3091-4832-8061-8ba8bc3b24d1.png)\n\n如果想让被打断的线程停止运行。可以利用被打断线程的打断标记来实现。\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断正常状态线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod2 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            while (true) {\n                boolean isInterrupt = Thread.currentThread().isInterrupted();\n                if (isInterrupt) {\n                    log.debug(\"被打断了，退出循环\");\n                    break;\n                }\n            }\n        }, \"t1\");\n\n        t1.start();\n\n        log.debug(\"interrupt... \");\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n        log.debug(\" 打断状态: {}\", t1.isInterrupted());\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n\n![](thread/70691192-ef7e-43b6-b365-d139f036e188.png)\n\n###  打断park线程:\n\n打断 park 线程, 不会清空打断状态\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断park线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod3 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            log.debug(\"park...\");\n            LockSupport.park();\n            log.debug(\"unpark...\");\n            log.debug(\"打断状态：{}\", Thread.currentThread().isInterrupted());\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/f5e5190c-2ca0-4467-8618-c9084b18b26f.png)\n\n值得注意的是park 线程打断后再次park，线程不会再次停下来。\n\n``` java\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断park线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod3 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            log.debug(\"park...\");\n            LockSupport.park();\n            log.debug(\"unpark...\");\n            log.debug(\"打断状态：{}\", Thread.currentThread().isInterrupted());\n            //再次park\n            LockSupport.park();\n            log.debug(\"unpark...\");\n\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n![](thread/a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png)\n\n需要使用Thread 的静态方法Thread.interrupted() 来查看当前的是否被打断，会重置打断状态\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.locks.LockSupport;\n\n/**\n * <p>\n * 测试线程的常用方法  interrupt 打断park线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class InterruptMethod3 {\n    private static void test1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            log.debug(\"park...\");\n            LockSupport.park();\n            log.debug(\"unpark...\");\n            log.debug(\"打断状态：{}\", Thread.interrupted());\n            //再次park\n            LockSupport.park();\n            log.debug(\"unpark...\");\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n\n        TimeUnit.SECONDS.sleep(1);\n        t1.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n\n```\n\n![](thread/bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png)\n\n## 模式之两阶段终止\n\n### 两阶段终止模式（Two Phase Termination）\n\n在一个线程T1中如何“优雅”终止线程T2?\n\n这里的【优雅】指的是给T2一个料理后事的机会。\n\n#### 错误思路\n\n- 使用线程对象的stop()方法停止线程:\n  - stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁\n-  使用System.exit(int)方法停止线程\n  - 目的仅是停止一个线程，但这种做法会让整个程序都停止\n\n### 案例\n\n有一个计算监控系统，每隔2s记录一下系统状态，有一个停止功能，可以停止整个监控程序，整个流程如下：\n\n![两阶段终止模式](thread/e1c2fc78-6f75-4049-8631-1e2bf400e92b.png)\n\n### 实现\n\n``` java\n/**\n * <p>\n * 利用interrupt实现两阶段停止。\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class TwoPhaseTermination {\n    private Thread monitor;\n\n    /**\n     * 启动监控\n     */\n    private void start() {\n        monitor = new Thread(() -> {\n            while (true) {\n                Thread currentThread = Thread.currentThread();\n                if (currentThread.isInterrupted()){\n                    log.debug(\"料理后事。。。。。。\");\n                    break;\n                }\n                try {\n                    TimeUnit.SECONDS.sleep(1); //打断阻塞的线程  会抛异常，打断标记会被重置\n                    log.debug(\"执行监控记录。。。。。。\"); //打断正常的线程\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                    //再次打断,重新设置打断标记\n                    currentThread.interrupt();\n                }\n            }\n        });\n\n        monitor.start();\n    }\n\n    /**\n     * 停止监控\n     */\n    private void stop() {\n        monitor.interrupt();\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        TwoPhaseTermination termination = new TwoPhaseTermination();\n        termination.start();\n\n        TimeUnit.SECONDS.sleep(3);\n        termination.stop();\n    }\n}\n```\n\n![](thread/d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png)\n\n\n\n## 不推荐的方法\n\n还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁。\n\n| 方法名    | 静态 | 功能说明             |\n| --------- | ---- | -------------------- |\n| stop()    |      | 停止线程运行         |\n| suspend() |      | 挂起（暂停）线程运行 |\n| resume()  |      | 恢复线程运行         |\n\n## 主线程与守护线程\n\n默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。\n\n``` java\n\n/**\n * <p>\n * 主线程与守护线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class DaemonThread {\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始运行...\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始运行...\");\n            while (true) {\n                if (Thread.currentThread().isInterrupted()) {\n                    break;\n                }\n            }\n            log.debug(\"运行结束...\");\n        }, \"t1\");\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        log.debug(\"运行结束...\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n\n```\n\n可以看到当`main线程`执行完毕后，`t1线程`任然在执行，`java 进程`尚未结束。\n![](thread/0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png)\n\n通过`setDaemon(boolean)`方法让t1个线程变为守护线程。\n\n``` java\n/**\n * <p>\n * 主线程与守护线程\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class DaemonThread {\n    private static void test1() throws InterruptedException {\n        log.debug(\"开始运行...\");\n        Thread t1 = new Thread(() -> {\n            log.debug(\"开始运行...\");\n            while (true) {\n                if (Thread.currentThread().isInterrupted()) {\n                    break;\n                }\n            }\n            log.debug(\"运行结束...\");\n        }, \"t1\");\n        // 设置该线程为守护线程\n        t1.setDaemon(true);\n        t1.start();\n        TimeUnit.SECONDS.sleep(1);\n        log.debug(\"运行结束...\");\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        test1();\n    }\n}\n```\n\n当`main线程`运行完毕，尽管`守护线程t1`的代码还没有执行完，也会强制结束。\n\n![](thread/ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png)\n\n>**注意**\n>\n>- 垃圾回收器线程就是一种守护线程\n>\n>- Tomcat 中的` Acceptor `和 `Poller `线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求。\n\n## 五种状态\n\n这是从 **操作系统** 层面来描述的\n\n![](thread/d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png)\n\n- 【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联\n\n- 【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行\n\n- 【运行状态】指获取了 CPU 时间片运行中的状态\n\n  - 当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换\n\n- 【阻塞状态】\n\n  - 如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】\n\n  - 等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】\n\n  - 与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们\n\n- 【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态\n\n## 六种状态\n\n这是从 **Java API** 层面来描述的\n\n根据 Thread.State 枚举，分为六种状态\n\n``` java\n    public enum State {\n        /**\n         * Thread state for a thread which has not yet started.\n         */\n        NEW,\n\n        /**\n         * Thread state for a runnable thread.  A thread in the runnable\n         * state is executing in the Java virtual machine but it may\n         * be waiting for other resources from the operating system\n         * such as processor.\n         */\n        RUNNABLE,\n\n        /**\n         * Thread state for a thread blocked waiting for a monitor lock.\n         * A thread in the blocked state is waiting for a monitor lock\n         * to enter a synchronized block/method or\n         * reenter a synchronized block/method after calling\n         * {@link Object#wait() Object.wait}.\n         */\n        BLOCKED,\n\n        /**\n         * Thread state for a waiting thread.\n         * A thread is in the waiting state due to calling one of the\n         * following methods:\n         * <ul>\n         *   <li>{@link Object#wait() Object.wait} with no timeout</li>\n         *   <li>{@link #join() Thread.join} with no timeout</li>\n         *   <li>{@link LockSupport#park() LockSupport.park}</li>\n         * </ul>\n         *\n         * <p>A thread in the waiting state is waiting for another thread to\n         * perform a particular action.\n         *\n         * For example, a thread that has called <tt>Object.wait()</tt>\n         * on an object is waiting for another thread to call\n         * <tt>Object.notify()</tt> or <tt>Object.notifyAll()</tt> on\n         * that object. A thread that has called <tt>Thread.join()</tt>\n         * is waiting for a specified thread to terminate.\n         */\n        WAITING,\n\n        /**\n         * Thread state for a waiting thread with a specified waiting time.\n         * A thread is in the timed waiting state due to calling one of\n         * the following methods with a specified positive waiting time:\n         * <ul>\n         *   <li>{@link #sleep Thread.sleep}</li>\n         *   <li>{@link Object#wait(long) Object.wait} with timeout</li>\n         *   <li>{@link #join(long) Thread.join} with timeout</li>\n         *   <li>{@link LockSupport#parkNanos LockSupport.parkNanos}</li>\n         *   <li>{@link LockSupport#parkUntil LockSupport.parkUntil}</li>\n         * </ul>\n         */\n        TIMED_WAITING,\n\n        /**\n         * Thread state for a terminated thread.\n         * The thread has completed execution.\n         */\n        TERMINATED;\n    }\n```\n\n\n\n![](thread/0827c261-3195-4bdc-9b78-e0c664037749.png)\n\n- NEW 线程刚被创建，但是还没有调用 start() 方法\n\n- RUNNABLE 当调用了 start() 方法之后，注意，**Java API** 层面的 RUNNABLE 状态涵盖了 **操作系统** 层面的\n  - 【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）\n\n- BLOCKED ， WAITING ， TIMED_WAITING 都是 **Java API** 层面对【阻塞状态】的细分，后面会在状态转换一节详述\n\n- TERMINATED 当线程代码运行结束\n\n``` java\n/**\n * <p>\n * 线程的六种状态\n * </p>\n *\n * @author wangruiyu\n * @since 2020/7/28\n */\n@Slf4j\npublic class ThreadState {\n    private static void test1() {\n        Thread t1 = new Thread(() -> {  //new\n            log.debug(\"runing......\");\n        }, \"t1\");\n\n        Thread t2 = new Thread(() -> {  //running\n           while (true){\n\n           }\n        },\"t2\");\n        t2.start();\n\n        Thread t3 = new Thread(() -> {  //terminted\n            log.debug(\"runing......\");\n        },\"t3\");\n        t3.start();\n\n        Thread t4 = new Thread(() -> {  //timed_waiting\n            synchronized (ThreadState.class) {\n                try {\n                    TimeUnit.SECONDS.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"t4\");\n        t4.start();\n\n        Thread t5 = new Thread(() -> {  //waiting\n                try {\n                    t2.join();\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n        },\"t5\");\n        t5.start();\n\n        Thread t6 = new Thread(() -> {  //blocked\n            synchronized (ThreadState.class) {\n                try {\n                    TimeUnit.SECONDS.sleep(100);\n                } catch (InterruptedException e) {\n                    e.printStackTrace();\n                }\n            }\n        },\"t6\");\n        t6.start();\n\n        log.debug(\"t1 线程的状态： {}\",t1.getState());\n        log.debug(\"t2 线程的状态： {}\",t2.getState());\n        log.debug(\"t3 线程的状态： {}\",t3.getState());\n        log.debug(\"t4 线程的状态： {}\",t4.getState());\n        log.debug(\"t5 线程的状态： {}\",t5.getState());\n        log.debug(\"t6 线程的状态： {}\",t6.getState());\n\n        \n    }\n\n    public static void main(String[] args) {\n        test1();\n    }\n}\n\n```\n\n![](thread/d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png)\n\n## 习题\n\n### 题目\n\n阅读华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案，提示\n\n- 参考图二，用两个线程（两个人协作）模拟烧水泡茶过程\n  - 文中办法乙、丙都相当于任务串行\n  - 而图一相当于启动了 4 个线程，有点浪费\n- 用 sleep(n) 模拟洗茶壶、洗水壶等耗费的时间\n\n附：华罗庚《统筹方法》\n\n>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复\n>\n>杂的科研项目的组织与管理中，都可以应用。\n>\n>怎样应用呢？主要是把工序安排好。\n>\n>洗水壶 1分钟 \n>\n>烧开水 15分钟\n>\n>洗茶壶 1分钟\n>\n>洗茶杯 2分钟\n>\n>拿茶叶 1分钟\n>\n>泡茶\n>\n>比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么\n>\n>办？\n>\n>- 办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开\n>\n>了，泡茶喝。\n>\n>- 办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡\n>\n>茶喝。\n>\n>- 办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡\n>\n>茶喝。\n>\n>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。\n>\n>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。\n>\n>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而\n>\n>这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：\n>\n>![image-20200806070304756](thread/image-20200806070304756.png)\n>\n>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作\n>\n>效率，应当主要抓烧开水这个环节，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大\n>\n>可利用“等水开”的时间来做。\n>\n>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但\n>\n>稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这\n>\n>么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱\n>\n>备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关\n>\n>键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。\n>\n>洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：\n>\n>![image-20200806070323056](thread/image-20200806070323056.png)\n>\n>看来这是“小题大做”，但在工作环节太多的时候，这样做就非常必要了。\n>\n>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接\n>\n>解决所有问题，但是，我们利用这种方法来考虑问题，也是不无裨益的。\n\n### 实现\n\n``` java\n/**\n * <p>\n * 洗好水壶，灌上凉水，放在火上,在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class MakingTea {\n    /**\n     * t2 等待 t1 执行完毕 进行后续任务\n     */\n    private static void t1() {\n        Thread t1 = new Thread(() -> {\n            log.info(\"洗好水壶，灌上凉水，放在火上\");\n            try {\n                TimeUnit.SECONDS.sleep(1);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n            log.info(\"烧开水\");\n            try {\n                TimeUnit.SECONDS.sleep(5);\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            try {\n                log.info(\"洗茶壶、洗茶杯、拿茶叶\");\n                TimeUnit.SECONDS.sleep(5);\n\n                //等待t1线程执行完毕\n                t1.join();\n                log.info(\"等水开了，泡茶喝。\");\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t2\");\n        t2.start();\n    }\n\n    public static void main(String[] args) {\n        t1();\n    }\n}\n\n```\n\n![image-20200806072602725](thread/image-20200806072602725.png)\n\n## 本章小结\n\n本章的重点在于掌握\n\n- 线程创建\n\n- 线程重要 api，如 start，run，sleep，join，interrupt 等\n\n- 线程状态\n\n- 应用方面\n\n  - 异步调用：主线程执行期间，其它线程异步执行耗时操作\n\n  - 提高效率：并行计算，缩短运算时间\n\n  - 同步等待：join\n\n  - 统筹规划：合理使用线程，得到最优效果\n\n- 原理方面\n\n  - 线程运行流程：栈、栈帧、上下文切换、程序计数器\n\n  - Thread 两种创建方式 的源码\n\n- 模式方面\n  - 终止模式之两阶段终止\n\n\n\n# 共享模型之管程\n\n## 共享带来的问题\n\n### 小故事\n\n- 老王（操作系统）有一个功能强大的算盘（CPU），现在想把它租出去，赚一点外快\n\n  ![image-20200806080136510](thread/image-20200806080136510.png)\n\n- 小南、小女（线程）来使用这个算盘来进行一些计算，并按照时间给老王支付费用\n\n- 但小南不能一天24小时使用算盘，他经常要小憩一会（sleep），又或是去吃饭上厕所（阻塞 io 操作），有时还需要一根烟，没烟时思路全无（wait）这些情况统称为（阻塞）\n\n  ![image-20200806080218070](thread/image-20200806080218070.png)\n\n- 在这些时候，算盘没利用起来（不能收钱了），老王觉得有点不划算\n\n- 另外，小女也想用用算盘，如果总是小南占着算盘，让小女觉得不公平\n\n- 于是，老王灵机一动，想了个办法 [ 让他们每人用一会，轮流使用算盘 ]\n\n- 这样，当小南阻塞的时候，算盘可以分给小女使用，不会浪费，反之亦然\n\n- 最近执行的计算比较复杂，需要存储一些中间结果，而学生们的脑容量（工作内存）不够，所以老王申请了\n\n  一个笔记本（主存），把一些中间结果先记在本上。\n\n- 计算流程是这样的：\n\n  ![image-20200806080338819](thread/image-20200806080338819.png)\n\n- 但是由于分时系统，有一天还是发生了事故\n\n- 小南刚读取了初始值 0 做了个 +1 运算，还没来得及写回结果\n\n- 老王说 [ 小南，你的时间到了，该别人了，记住结果走吧 ]，于是小南念叨着 [ 结果是1，结果是1...] 不甘心地到一边待着去了（上下文切换）\n\n- 老王说 [ 小女，该你了 ]，小女看到了笔记本上还写着 0 做了一个 -1 运算，将结果 -1 写入笔记本\n\n- 这时小女的时间也用完了，老王又叫醒了小南：[小南，把你上次的题目算完吧]，小南将他脑海中的结果 1 写入了笔记本\n\n  ![image-20200806080425078](thread/image-20200806080425078.png)\n\n- 小南和小女都觉得自己没做错，但笔记本里的结果是 1 而不是 0\n\n### Java的体现\n\n两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？\n\n``` java\n/**\n * <p>\n * 共享变量问题\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class SharedVariables {\n    private static int counter = 0;\n    \n    /**\n     * 当两个线程操作同一个共享变量时，会出现问题\n     */\n    private static void t1() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                counter++;\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                counter--;\n            }\n        }, \"t2\");\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        log.info(\"counter:{}\", counter);\n    }\n\n    public static void main(String[] args) {\n        t1();\n    }\n}\n```\n\n\n\n### 问题分析\n\n以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理解，必须从字节码来进行分析。\n\n例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：\n\n```\ngetstatic i // 获取静态变量i的值\niconst_1 // 准备常量1\niadd // 自增\nputstatic i // 将修改后的值存入静态变量i\n```\n\n而对应 i-- 也是类似:\n\n```\ngetstatic i // 获取静态变量i的值\niconst_1 // 准备常量1\nisub // 自减\nputstatic i // 将修改后的值存入静态变量i\n```\n\n而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：\n\n![image-20200806081215362](thread/image-20200806081215362.png)\n\n如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：\n\n![image-20200806081309415](thread/image-20200806081309415.png)\n\n但多线程下这 8 行代码可能交错运行：\n\n出现负数的情况\n\n![image-20200806081339039](thread/image-20200806081339039.png)\n\n出现正数的情况：\n\n![image-20200806081409317](thread/image-20200806081409317.png)\n\n### 临界区(Critical Section)\n\n- 一个程序运行多个线程本身是没有问题的\n\n- 问题出在多个线程访问**共享资源**\n\n  - 多个线程读**共享资源**其实也没有问题\n\n  - 在多个线程对**共享资源**读写操作时发生指令交错，就会出现问题\n\n- 一段代码块内如果存在对**共享资源**的多线程读写操作，称这段代码块为**临界区**\n\n例如，下面代码中的临界区:\n\n``` java\nstatic int counter = 0;\nstatic void increment() \n// 临界区\n{ \n counter++; \n}\nstatic void decrement() \n// 临界区\n{ \n counter--; \n}\n```\n\n### 竞态条件(Race Condition)\n\n多个线程在临界区内执行，由于代码的**执行序列不同**而导致结果无法预测，称之为发生了**竞态条件**\n\n##  synchronized解决方案\n\n### ***** **应用之互斥**\n\n为了避免临界区的竞态条件发生，有多种手段可以达到目的。\n\n- 阻塞式的解决方案：synchronized，Lock\n\n- 非阻塞式的解决方案：原子变量\n\n本次课使用阻塞式的解决方案：synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一\n\n时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁\n\n的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。\n\n>**注意**\n>\n>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：\n>\n>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码\n>\n>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点\n\n### synchronized\n\n#### 语法\n\n``` java\nsynchronized(对象) // 线程1， 线程2(blocked)\n{\n 临界区\n}\n```\n\n#### 解决\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * <p>\n * 共享变量问题\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class SharedVariables {\n    private static int counter = 0;\n    private static Object lock = new Object();\n\n    /**\n     * 当两个线程操作同一个共享变量时，会出现问题\n     * 使用synchronized解决\n     */\n    private static void t2() throws InterruptedException {\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                synchronized (lock) {\n                    counter++;\n                }\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                synchronized (lock) {\n                    counter--;\n                }\n            }\n        }, \"t2\");\n        t2.start();\n\n        t1.join();\n        t2.join();\n        log.info(\"counter:{}\", counter);\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        t2();\n    }\n}\n\n```\n\n使用面向对象思想解决 ：\n\n``` java\n/**\n * <p>\n * 共享变量问题,使用面向对象思想解决\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class Room {\n    private int counter = 0;\n\n    public void increment() {\n        synchronized (this) {\n            counter++;\n        }\n    }\n\n    public void decrement() {\n        synchronized (this) {\n            counter--;\n        }\n    }\n\n    public int getCounter() {\n        synchronized (this) {\n            return counter;\n        }\n    }\n\n    public static void main(String[] args) throws InterruptedException {\n        Room room = new Room();\n        Thread t1 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                room.increment();\n            }\n        }, \"t1\");\n        t1.start();\n\n        Thread t2 = new Thread(() -> {\n            for (int i = 0; i < 5000; i++) {\n                room.decrement();\n            }\n        }, \"t2\");\n        t2.start();\n\n        t1.join();\n        t2.join();\n\n        log.info(\"counter:{}\", room.getCounter());\n    }\n}\n```\n\n\n\n![image-20200806093605366](thread/image-20200806093605366.png)\n\n你可以做这样的类比：\n\n- `synchronized(对象)` 中的对象，可以想象为一个房间（room），有唯一入口（门）房间只能一次进入一人进行计算，线程 t1，t2 想象成两个人\n\n- 当线程 t1 执行到 `synchronized(room)` 时就好比 t1 进入了这个房间，并锁住了门拿走了钥匙，在门内执行`count++` 代码\n\n- 这时候如果 t2 也运行到了 `synchronized(room)` 时，它发现门被锁住了，只能在门外等待，发生了上下文切换，阻塞住了\n\n- 这中间即使 t1 的 cpu 时间片不幸用完，被踢出了门外（不要错误理解为锁住了对象就能一直执行下去哦），这时门还是锁住的，t1 仍拿着钥匙，t2 线程还在阻塞状态进不来，只有下次轮到 t1 自己再次获得时间片时才能开门进入。\n\n- 当 t1 执行完 `synchronized{}` 块内的代码，这时候才会从 obj 房间出来并解开门上的锁，唤醒 t2 线程把钥匙给他。t2 线程这时才可以进入 obj 房间，锁住了门拿上钥匙，执行它的 `count--` 代码\n\n\n\n用图来表示:\n\n![image-20200806093649652](thread/image-20200806093649652.png)\n\n### 思考\n\n`synchronized` 实际是用**对象锁**保证了**临界区内代码的原子性**，临界区内的代码对外是不可分割的，不会被线程切换所打断。\n\n为了加深理解，请思考下面的问题:\n\n- 如果把 synchronized(obj) 放在 for 循环的外面，如何理解？-- 原子性\n\n- 如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？-- 锁对象\n\n- 如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？-- 锁对象\n\n\n\n## 方法上的synchronized\n\n`synchronized`修饰成员方法，锁住的是当前类的`实例对象`\n\n``` java\nclass Test {\n    public synchronized void test() {\n\n    }\n}\n\n//等价于\n\nclass Test {\n    public void test() {\n        synchronized (this) {\n\n        }\n    }\n}\n```\n\n`synchronized`修饰静态方法，锁住的是当前类的`类对象`\n\n``` java\n\nclass Test{\n    public synchronized static void test() {\n    }\n}\n\n//等价于\n\nclass Test {\n    public static void test() {\n        synchronized (Test.class) {\n\n        }\n    }\n}\n```\n\n### 不加synchronized的方法\n\n不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队（好比翻窗户进去的）\n\n### 所谓的“线程八锁”\n\n其实就是考察 synchronized 锁住的是哪个对象\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\n/**\n * <p>\n * 线程 8锁\n * </p>\n * <p>\n * <strong> synchronized </strong>实际是用\n * <strong> 对象锁 </strong>保证了<strong>临界区内代码的原子性</strong>，\n * 临界区内的代码对外是不可分割的，不会被线程切换所打断。\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\n@Slf4j\npublic class Thread8Locks {\n    public static void main(String[] args) {\n//        t1();\n//        t2();\n//        t3();\n//        t4();\n//        t5();\n//        t6();\n//        t7();\n//        t8();\n    }\n\n    /**\n     * 锁的是当前类的实例对象\n     * 如果线程先调用t1,会打印 1 ，2\n     * 如果线程先调用t2,会打印 2 ，1\n     */\n    private static void t1() {\n        Number1 n = new Number1();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.a();\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n    /**\n     * 锁的是当前类的实例对象\n     * 如果线程先调用t1,会先睡1s后再打印 1 ，2\n     * 如果线程先调用t2,会先打印 2 ，再睡1s后再打印 1\n     */\n    private static void t2() {\n        Number2 n = new Number2();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n    /**\n     * 锁的是当前类的实例对象\n     * 因为c方法没有被锁住，所以不用遵守排队规则\n     * 每次t3线程都会打印 3\n     * 如果线程先调用t1,再调用t3,t2,会先睡1s后再打印 1 ，2  ; 3,1s,1,2\n     * 如果线程先调用t2,再调用t3,t1,会先打印 2 ，再睡1s后再打印 1; 2,3,1s,1\n     * 如果线程先调用t3,再调用t1,t2,会先睡1s后再打印2 1; 3,1s,1,2\n     * 如果线程先调用t3,再调用t2,t1，会先打印 2 ，再睡1s后再打印 1; 3,2,1s,1\n     */\n    private static void t3() {\n        Number3 n = new Number3();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.c();\n        }, \"t3\").start();\n    }\n\n\n    /**\n     * 锁的是当前类的实例对象\n     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象\n     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t4() {\n        Number4 n1 = new Number4();\n        Number4 n2 = new Number4();\n        new Thread(() -> {\n            try {\n                n1.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            n2.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * a方法锁的是当前类的类对象\n     * b方法锁的是当前类的实例对象\n     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象\n     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t5() {\n        Number5 n = new Number5();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                Number5.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * 锁的是当前类的类对象\n     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t6() {\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                Number6.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            Number6.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * a方法锁的是当前类的类对象\n     * b方法锁的是当前类的实例对象\n     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象\n     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t7() {\n        Number7 n1 = new Number7();\n        Number7 n2 = new Number7();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n1.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n2.b();\n        }, \"t2\").start();\n    }\n\n\n    /**\n     * 锁的是当前类的类对象\n     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2\n     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1\n     */\n    private static void t8() {\n        Number8 n = new Number8();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            try {\n                n.a();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        }, \"t1\").start();\n        new Thread(() -> {\n            log.debug(\"begin....\");\n            n.b();\n        }, \"t2\").start();\n    }\n\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number1\")\nclass Number1 {\n    public synchronized void a() {\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number2\")\nclass Number2 {\n    public synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number3\")\nclass Number3 {\n    public synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n\n    public void c() {\n        log.debug(\"3\");\n    }\n}\n\n/**\n * 锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number4\")\nclass Number4 {\n    public synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n\n}\n\n/**\n * a方法锁的是当前类的类对象\n * b方法锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number5\")\nclass Number5 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的类对象\n */\n@Slf4j(topic = \"c.Number6\")\nclass Number6 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public static synchronized void b() {\n        log.debug(\"2\");\n    }\n\n}\n\n/**\n * a方法锁的是当前类的类对象\n * b方法锁的是当前类的实例对象\n */\n@Slf4j(topic = \"c.Number7\")\nclass Number7 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public synchronized void b() {\n        log.debug(\"2\");\n    }\n}\n\n/**\n * 锁的是当前类的类对象\n */\n@Slf4j(topic = \"c.Number8\")\nclass Number8 {\n    public static synchronized void a() throws InterruptedException {\n        Thread.sleep(1000);\n        log.debug(\"1\");\n    }\n\n    public static synchronized void b() {\n        log.debug(\"2\");\n    }\n\n}\n\n```\n\n\n\n## 变量的线程安全分析\n\n#### 成员变量和静态变量是否线程安全？\n\n- 如果它们没有共享，则线程安全\n\n- 如果它们被共享了，根据它们的状态是否能够改变，又分两种情况\n\n  - 如果只有读操作，则线程安全\n\n  - 如果有读写操作，则这段代码是临界区，需要考虑线程安全\n\n#### 局部变量是否线程安全？\n\n- 局部变量是线程安全的\n\n- 但局部变量引用的对象则未必\n\n  - 如果该对象没有逃离方法的作用访问，它是线程安全的\n\n  - 如果该对象逃离方法的作用范围，需要考虑线程安全\n\n``` java\npublic static void test1() {\n\tint i = 10;\n\ti++; \n}\n```\n\n每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享.\n\n```\npublic static void test1();\n descriptor: ()V\n flags: ACC_PUBLIC, ACC_STATIC\n Code:\n stack=1, locals=1, args_size=0\n 0: bipush 10\n 2: istore_0\n 3: iinc 0, 1\n 6: return\n LineNumberTable:\n line 10: 0\n line 11: 3\n line 12: 6\n LocalVariableTable:\n Start Length Slot Name Signature\n 3 4 0 i I\n```\n\n![image-20200806112353892](thread/image-20200806112353892.png)\n\n\n\n**局部变量的引用稍有不同,先看一个成员变量的例子**\n\n``` java\n/**\n * <p>\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\npublic class ThreadSecurity {\n    static final int THREAD_NUMBER = 2;\n    static final int LOOP_NUMBER = 200;\n\n    public static void main(String[] args) {\n        ThreadUnsafe test = new ThreadUnsafe();\n        for (int i = 0; i < THREAD_NUMBER; i++) {\n            new Thread(() -> {\n                test.method1(LOOP_NUMBER);\n            }, \"Thread\" + i).start();\n        }\n    }\n}\nclass ThreadUnsafe {\n    ArrayList<String> list = new ArrayList<>();\n    public void method1(int loopNumber) {\n        for (int i = 0; i < loopNumber; i++) {\n            // { 临界区, 会产生竞态条件\n            method2();\n            method3();\n            // } 临界区\n        }\n    }\n    private void method2() {\n        list.add(\"1\");\n    }\n    private void method3() {\n        list.remove(0);\n    }\n}\n```\n\n**其中一种情况是，如果线程2 还未 add，线程1 remove 就会报错：**\n\n![image-20200806113017975](thread/image-20200806113017975.png)\n\n分析：\n\n- 无论哪个线程中的 method2 引用的都是同一个对象中的 list 成员变量\n\n- method3 与 method2 分析相同\n\n  ![image-20200806113212737](thread/image-20200806113212737.png)\n\n  **将 list 修改为局部变量**\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport java.util.ArrayList;\n\n/**\n * <p>\n *\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/6\n */\npublic class ThreadSecurity {\n    static final int THREAD_NUMBER = 2;\n    static final int LOOP_NUMBER = 200;\n\n    public static void main(String[] args) {\n        Threadsafe test = new Threadsafe();\n        for (int i = 0; i < THREAD_NUMBER; i++) {\n            new Thread(() -> {\n                test.method1(LOOP_NUMBER);\n            }, \"Thread\" + i).start();\n        }\n    }\n}\nclass Threadsafe {\n\n    public void method1(int loopNumber) {\n        ArrayList<String> list = new ArrayList<>();\n        for (int i = 0; i < loopNumber; i++) {\n            // { 临界区, 会产生竞态条件\n            method2(list);\n            method3(list);\n            // } 临界区\n        }\n    }\n    private void method2(ArrayList<String> list) {\n        list.add(\"1\");\n    }\n    private void method3(ArrayList<String> list) {\n        list.remove(0);\n    }\n}\n```\n\n那么就不会有上述问题了\n\n分析：\n\n- list 是局部变量，每个线程调用时会创建其不同实例，没有共享\n\n- 而 method2 的参数是从 method1 中传递过来的，与 method1 中引用同一个对象\n\n- method3 的参数分析与 method2 相同\n\n![image-20200806113622053](thread/image-20200806113622053.png)\n\n方法访问修饰符带来的思考，如果把 method2 和 method3 的方法修改为 public 会不会代理线程安全问题？\n\n- 情况1：有其它线程调用 method2 和 method3\n\n  ``` java\n  /**\n   * <p>\n   *\n   * </p>\n   *\n   * @author wangruiyu\n   * @since 2020/8/6\n   */\n  public class ThreadSecurity2 {\n      static final int THREAD_NUMBER = 2;\n      static final int LOOP_NUMBER = 200;\n  \n      public static void main(String[] args) {\n  \n          Threadsafe2 test = new Threadsafe2();\n          for (int i = 0; i < THREAD_NUMBER; i++) {\n              new Thread(() -> {\n                  test.method1(LOOP_NUMBER);\n              }, \"Thread\" + i).start();\n          }\n      }\n  }\n  \n  class Threadsafe2 {\n  \n      public void method1(int loopNumber) {\n          ArrayList<String> list = new ArrayList<>();\n          for (int i = 0; i < loopNumber; i++) {\n              // { 临界区, 会产生竞态条件\n              method2(list);\n              method3(list);\n              // } 临界区\n          }\n      }\n      public void method2(ArrayList<String> list) {\n          list.add(\"1\");\n      }\n      public void method3(ArrayList<String> list) {\n          list.remove(0);\n      }\n  }\n  ```\n\n  其他线程调用`method2`和`method3`方法和`method1`的list 肯定不是一个对象。所以线程安全\n\n- 情况2：在 情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，即\n\n  ``` java\n  \n  /**\n   * <p>\n   *\n   * </p>\n   *\n   * @author wangruiyu\n   * @since 2020/8/6\n   */\n  public class ThreadSecurity2 {\n      static final int THREAD_NUMBER = 2;\n      static final int LOOP_NUMBER = 200;\n  \n      public static void main(String[] args) {\n  \n          ThreadSafeSubClass test = new ThreadSafeSubClass();\n          for (int i = 0; i < THREAD_NUMBER; i++) {\n              new Thread(() -> {\n                  test.method1(LOOP_NUMBER);\n              }, \"Thread\" + i).start();\n          }\n      }\n  }\n  \n  class Threadsafe2 {\n  \n      public void method1(int loopNumber) {\n          ArrayList<String> list = new ArrayList<>();\n          for (int i = 0; i < loopNumber; i++) {\n              // { 临界区, 会产生竞态条件\n              method2(list);\n              method3(list);\n              // } 临界区\n          }\n      }\n      public void method2(ArrayList<String> list) {\n          list.add(\"1\");\n      }\n      public void method3(ArrayList<String> list) {\n          list.remove(0);\n      }\n  }\n  \n  class ThreadSafeSubClass extends Threadsafe2{\n      @Override\n      public void method3(ArrayList<String> list) {\n          new Thread(() -> {\n              list.remove(0);\n          }).start();\n      }\n  }\n  ```\n\n- ![image-20200806115634318](thread/image-20200806115634318.png)\n\n\n\n**从这个例子可以看出 private 或 final 提供【安全】的意义所在，请体会开闭原则中的【闭】**\n\n#### 常见线程安全类\n\n- String\n\n- Integer\n\n- StringBuffffer\n\n- Random\n\n- Vector\n\n- Hashtable\n\n- JAVA.util.concurrent 包下的类\n\n这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为\n\n``` java\nHashtable table = new Hashtable();\n\nnew Thread(()->{\n table.put(\"key\", \"value1\");\n}).start();\n\nnew Thread(()->{\n table.put(\"key\", \"value2\");\n}).start()\n```\n\n- 它们的每个方法是原子的\n\n- 但**注意**它们多个方法的组合不是原子的，见后面分析\n\n##### 线程安全类方法的组合\n\n分析下面代码是否线程安全？\n\n``` java\nHashtable table = new Hashtable();\n// 线程1，线程2\nif( table.get(\"key\") == null) {\n table.put(\"key\", value);\n}\n```\n\n![image-20200818213438504](thread/image-20200818213438504.png)\n\n##### 不可变类线程安全性\n\nString、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的\n\n有同学或许有疑问，String 有 replace，substring 等方法【可以】改变值啊，那么这些方法又是如何保证线程安\n\n全的呢？\n\n``` java\npublic class Immutable{\n    \n private int value = 0;\n    \n public Immutable(int value){\n \tthis.value = value;\n }\n public int getValue(){\n \treturn this.value;\n }\n}\n```\n\n如果想增加一个增加的方法呢？\n\n``` java\npublic class Immutable{\n    \n private int value = 0;\n    \n public Immutable(int value){\n \tthis.value = value;\n }\n public int getValue(){\n \treturn this.value;\n }\n \n public Immutable add(int v){\n \treturn new Immutable(this.value + v);\n } \n}\n```\n\n#### 习题\n\n##### 卖票练习\n\n测试下面代码是否存在线程安全问题，并尝试改正\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Random;\nimport java.util.concurrent.CopyOnWriteArrayList;\n\n/**\n * <p>\n *  线程安全测试  -   买票\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\n@Slf4j\npublic class ExerciseSell {\n    public static void main(String[] args) {\n        //模拟多人买票\n        TicketWindows ticketWindows = new TicketWindows(2000);\n        //统计卖出的票数\n        List<Integer> list = new CopyOnWriteArrayList<>();\n        //所有线程的集合\n        List<Thread> threadList = new ArrayList<>();\n        for (int i = 0; i < 4000; i++) {\n            Thread thread = new Thread(() -> {\n                //卖出的票数\n                int sell = ticketWindows.sell(randomAmount());\n                list.add(sell);\n            });\n            thread.start();\n            threadList.add(thread);\n        }\n\n        //等待所有线程运行完毕\n        threadList.forEach(thread -> {\n            try {\n                thread.join();\n            } catch (InterruptedException e) {\n                e.printStackTrace();\n            }\n        });\n        //统计卖出的票和剩余的票\n        log.info(\"余票：{}\", ticketWindows.getCount());\n        log.info(\"已售：{}\", list.stream().mapToInt(Integer::intValue).sum());\n    }\n\n    //Random 线程安全\n    static Random random = new Random();\n\n    //生成1到5的随机数\n    private static int randomAmount() {\n        return random.nextInt(5) + 1;\n    }\n}\n\n/**\n * <p>\n * 卖票窗口类\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\nclass TicketWindows {\n    private int count;\n\n    public TicketWindows(int count) {\n        this.count = count;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public int sell(int amount) {\n\n        if (count >= amount) {\n            synchronized (this) {\n                count -= amount;\n            }\n            return amount;\n        }\n        return 0;\n\n    }\n}\n\n```\n\n##### 转账练习\n\n测试下面代码是否存在线程安全问题，并尝试改正\n\n``` java\npackage com.wry.concurrent.thread;\n\nimport lombok.extern.slf4j.Slf4j;\n\nimport java.util.Random;\n\n/**\n * <p>\n * 线程安全测试  -   转账\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\n@Slf4j\npublic class ExceriseTransfer {\n    public static void main(String[] args) throws InterruptedException {\n        Account a = new Account(1000);\n        Account b = new Account(1000);\n        Thread threadA = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                a.transfer(b, randomAmount());\n            }\n        });\n        Thread threadB = new Thread(() -> {\n            for (int i = 0; i < 1000; i++) {\n                b.transfer(a, randomAmount());\n            }\n        });\n        threadA.start();\n        threadB.start();\n        threadA.join();\n        threadB.join();\n        //转账后的金额\n        log.info(\"A 账户的金额：{}\", a.getMoney());\n        log.info(\"B 账户的金额：{}\", b.getMoney());\n    }\n\n\n    //Random 线程安全\n    static Random random = new Random();\n\n    //生成1到100的随机数\n    private static int randomAmount() {\n        return random.nextInt(100) + 1;\n    }\n}\n\n/**\n * <p>\n * 账户类\n * </p>\n *\n * @author wangruiyu\n * @since 2020/8/17\n */\nclass Account {\n    private int money;\n\n    public Account(int money) {\n        this.money = money;\n    }\n\n    public int getMoney() {\n        return money;\n    }\n\n    public void setMoney(int money) {\n        this.money = money;\n    }\n\n    /**\n     * 转账\n     *\n     * @param account 账户\n     * @param money   金额\n     */\n    public void transfer(Account account, int money) {\n        synchronized (Account.class) {\n            if (this.money >= money) {\n                account.setMoney(account.getMoney() + money);\n                this.setMoney(this.getMoney() - money);\n            }\n        }\n    }\n//    //多个对象使用synchronized 加锁 是两个不同的对象，所以无法实现加速的效果\n//    public synchronized  void transfer(Account account, int money) {\n//          if (this.money >= money) {\n//              account.setMoney(account.getMoney() + money);\n//              this.setMoney(this.getMoney() - money);\n//          }\n//    }\n}\n\n```\n\n## Monitor概念\n\n### Java对象头\n\n以 32 位虚拟机为例\n\n#### 普通对象\n\n```ruby\n|--------------------------------------------------------------| \n| \t\t\t\t\tObject Header (64 bits)\t\t \t\t       |\n|------------------------------------|-------------------------| \n|\t\t Mark Word (32 bits) \t     | Klass Word (32 bits)    |\n|------------------------------------|-------------------------|\n```\n\n#### 数组对象\n\n```ruby\n|---------------------------------------------------------------------------------|\n| \t\t\t\t\t\t\t\tObject Header (96 bits)\t\t\t \t\t\t\t  |\n|--------------------------------|-----------------------|------------------------|\n| \t\t\tMark Word(32bits) \t | \tKlass Word(32bits)   | array length(32bits)   |\n|--------------------------------|-----------------------|------------------------|\n```\n\n其中 Mark Word 结构为\n\n```ruby\n|-------------------------------------------------------|--------------------|\n| \t\t\t\t\tMark Word (32 bits)\t\t\t\t\t| \t\tState\t\t |\n|-------------------------------------------------------|--------------------|\n| \t\t  hashcode:25 | age:4 | biased_lock:0 \t| 01\t| \t\tNormal\t\t |\n|-------------------------------------------------------|--------------------|\n| thread:23 | epoch:2 | age:4 | biased_lock:1 \t| 01\t| \t\tBiased\t\t |\n|-------------------------------------------------------|--------------------|\n| \t\tptr_to_lock_record:30 \t\t\t\t\t| 00 \t| Lightweight Locked |\n|-------------------------------------------------------|--------------------|\n| \t\tptr_to_heavyweight_monitor:30 \t\t\t| 10 \t| Heavyweight Locked |\n|-------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\t\t\t\t\t\t| 11\t|\t Marked for GC\t |\n|-------------------------------------------------------|--------------------|\n```\n\n\n\n64 位虚拟机 Mark Word\n\n```ruby\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\tMark Word (64 bits) \t\t\t\t\t | \t\t  State  \t  |\n|--------------------------------------------------------------------|--------------------|\n|  unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 |  01  | \t\t  Normal\t  |\n|--------------------------------------------------------------------|--------------------|\n|  thread:54 | epoch:2     | unused:1 | age:4 | biased_lock:1 |  01  | \t\t  Biased\t  |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_lock_record:62\t\t\t\t\t\t\t\t  |  00  | Lightweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  |  10  | Heavyweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |  11  | \tMarked for GC\t  |\n|--------------------------------------------------------------------|--------------------|\n```\n\n**参考资料**\n\nhttps://stackoverflflow.com/questions/26357186/what-is-in-java-object-header\n\n## 原理之Monitor(锁)\n\n### Monitor原理\n\nMonitor 被翻译为**监视器**或**管程**\n\n每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针Monitor 结构如下\n\n![image-20200819064936628](thread/image-20200819064936628.png)\n\n\n\n- 刚开始 Monitor 中 Owner 为 null\n\n- 当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner\n\n- 在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED\n\n- Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的\n\n- 图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析\n\n>**注意：**\n>\n>synchronized 必须是进入同一个对象的 monitor 才有上述的效果\n>\n>不加 synchronized 的对象不会关联监视器，不遵从以上规则\n\n##  原理之synchronized\n\n**小故事**\n\n故事角色\n\n- 老王 - JVM\n\n- 小南 - 线程\n\n- 小女 - 线程\n\n- 房间 - 对象\n\n- 房间门上 - 防盗锁 - Monitor\n\n- 房间门上 - 小南书包 - 轻量级锁\n\n- 房间门上 - 刻上小南大名 - 偏向锁\n\n- 批量重刻名 - 一个类的偏向锁撤销到达 20 阈值\n\n- 不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向\n\n小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，即使他离开了，别人也进不了门，他的工作就是安全的。\n\n但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女晚上用。每次上锁太麻烦了，有没有更简单的办法呢？\n\n小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是自己的，那么就在门外等，并通知对方下次用锁门的方式。\n\n后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍然觉得麻烦。\n\n于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦掉，升级为挂书包的方式。\n\n同学们都放假回老家了，小南就膨胀了，在 20 个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包。\n\n### synchronized原理\n\n``` java\nstatic final Object lock = new Object();\n\nstatic int counter = 0;\n\npublic static void main(String[] args) {\n synchronized (lock) {\n \tcounter++;\n }\n}\n```\n\n对应的字节码为\n\n``` java\npublic static void main(java.lang.String[]);\n descriptor: ([Ljava/lang/String;)V\n flags: ACC_PUBLIC, ACC_STATIC\n Code:\n stack=2, locals=3, args_size=1\n 0: getstatic #2 // <- lock引用 （synchronized开始）\n 3: dup\n 4: astore_1 // lock引用 -> slot 1\n 5: monitorenter // 将 lock对象 MarkWord 置为 Monitor 指针\n 6: getstatic #3 // <- i\n 9: iconst_1 // 准备常数 1\n 10: iadd // +1\n 11: putstatic #3 // -> i\n 14: aload_1 // <- lock引用\n 15: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList\n 16: goto 24\n 19: astore_2 // e -> slot 2 \n 20: aload_1 // <- lock引用\n 21: monitorexit // 将 lock对象 MarkWord 重置, 唤醒 EntryList\n 22: aload_2 // <- slot 2 (e)\n 23: athrow // throw e\n 24: return\n Exception table:\n from to target type\n 6 16 19 any\n 19 22 19 any\n LineNumberTable:\n line 8: 0\n line 9: 6\n line 10: 14\n line 11: 24\n LocalVariableTable:\n Start Length Slot Name Signature\n 0 25 0 args [Ljava/lang/String;\n StackMapTable: number_of_entries = 2\n frame_type = 255 /* full_frame */\n offset_delta = 19\n locals = [ class \"[Ljava/lang/String;\", class java/lang/Object ]\n stack = [ class java/lang/Throwable ]\n frame_type = 250 /* chop */\n offset_delta = 4              \n```\n\n\n\n>**注意**\n>\n>方法级别的 synchronized 不会在字节码指令中有所体现\n\n### synchronized原理进阶\n\n#### 1.轻量级锁\n\n轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。\n\n轻量级锁对使用者是透明的，即语法仍然是 `synchronized`\n\n假设有两个方法同步块，利用同一个对象加锁\n\n``` java\nstatic final Object obj = new Object();\n\npublic static void method1() {\n synchronized( obj ) {\n // 同步块 A\n method2();\n }\n}\npublic static void method2() {\n synchronized( obj ) {\n // 同步块 B\n }\n}\n```\n\n- 创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word\n\n![image-20200819065515918](thread/image-20200819065515918.png)\n\n- 让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录\n\n  ![image-20200819065601188](thread/image-20200819065601188.png)\n\n - 如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下\n\n   ![image-20200819065708766](thread/image-20200819065708766.png)\n\n- 如果 cas 失败，有两种情况\n\n  - 如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程\n  - 如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数\n\n  ![image-20200819065835524](thread/image-20200819065835524.png)\n\n- 当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一\n\n  ![image-20200819065931928](thread/image-20200819065931928.png)\n\n- 当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头\n\n  - 成功，则解锁成功\n  - 失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程\n\n#### 2.锁膨胀\n\n如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。\n\n``` java\nstatic Object obj = new Object();\n\npublic static void method1() {\n synchronized( obj ) {\n // 同步块\n }\n}\n```\n\n- 当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁\n\n  ![image-20200819071006301](thread/image-20200819071006301.png)\n\n- 这时 Thread-1 加轻量级锁失败，进入锁膨胀流程\n\n  - 即为 Object 对象申请 `Monitor` 锁，让 Object 指向重量级锁地址\n  - 然后自己进入 `Monitor` 的 `EntryList` BLOCKED\n\n![image-20200819071139042](thread/image-20200819071139042.png)\n\n- 当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程\n\n#### 3.自旋优化\n\n重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。\n\n自旋重试成功的情况\n\n| **线程** **1** **（****core 1** **上）** | **对象** **Mark**      | **线程** **2** **（****core 2** **上）** |\n| ---------------------------------------- | ---------------------- | ---------------------------------------- |\n| -                                        | 10（重量锁）           | -                                        |\n| 访问同步块，获取 monitor                 | 10（重量锁）重量锁指针 | -                                        |\n| 成功（加锁）                             | 10（重量锁）重量锁指针 | -                                        |\n| 执行同步块                               | 10（重量锁）重量锁指针 |                                          |\n| 执行同步块                               | 10（重量锁）重量锁指针 | 访问同步块，获取 monitor                 |\n| 执行同步块                               | 10（重量锁）重量锁指针 | 自旋重试                                 |\n| 执行完毕                                 | 10（重量锁）重量锁指针 | 自旋重试                                 |\n| 成功（解锁）                             | 01（无锁）             | 自旋重试                                 |\n| -                                        | 10（重量锁）重量锁指针 | 成功（加锁）                             |\n| -                                        | 10（重量锁）重量锁指针 | 执行同步块                               |\n| -                                        | 10（重量锁）重量锁指针 | 执行同步块                               |\n| ...                                      | ....                   | ....                                     |\n\n自旋重试失败的情况\n\n| **线程** **1** **（****core 1** **上）** | **对象** **Mark**        | **线程** **2** **（****core 2** **上）** |\n| ---------------------------------------- | ------------------------ | ---------------------------------------- |\n| -                                        | 10（重量锁）             | -                                        |\n| 访问同步块，获取 monitor                 | 10（重量锁）重量锁指针   | -                                        |\n| 成功（加锁）                             | 10（重量锁）重量锁指针   | -                                        |\n| 执行同步块                               | 10（重量锁）重量锁指针   |                                          |\n| 执行同步块                               | 10（重量锁）重量锁指针   | 访问同步块，获取 monitor                 |\n| 执行同步块                               | 10（重量锁）重量锁指针   | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针   | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 自旋重试                                 |\n| 执行同步块                               | 10（重量锁）重量锁指针） | 阻塞                                     |\n| ...                                      | ...                      | ...                                      |\n\n- 自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。\n\n- 在 Java 6 之后**自旋锁是自适应的**，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。\n\n- Java 7 之后不能控制是否开启自旋功能\n\n#### 4.偏向锁\n\n轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。\n\nJava 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有\n\n例如：\n\n``` java\nstatic final Object obj = new Object();\n\npublic static void m1() {\n synchronized( obj ) {\n \t// 同步块 A\n \tm2();\n }\n}\npublic static void m2() {\n synchronized( obj ) {\n \t// 同步块 B\n \tm3();\n }\n}\npublic static void m3() {\n synchronized( obj ) {\n \t// 同步块 C\n }\n}\n```\n\n![image-20200819072452480](thread/image-20200819072452480.png)\n\n![image-20200819072504262](thread/image-20200819072504262.png)\n\n**偏向状态**\n\n回忆一下对象头格式\n\n```ruby\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\tMark Word (64 bits) \t\t\t\t\t | \t\t  State  \t  |\n|--------------------------------------------------------------------|--------------------|\n|  unused:25 | hashcode:31 | unused:1 | age:4 | biased_lock:0 |  01  | \t\t  Normal\t  |\n|--------------------------------------------------------------------|--------------------|\n|  thread:54 | epoch:2     | unused:1 | age:4 | biased_lock:1 |  01  | \t\t  Biased\t  |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_lock_record:62\t\t\t\t\t\t\t\t  |  00  | Lightweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  |  10  | Heavyweight Locked |\n|--------------------------------------------------------------------|--------------------|\n| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |  11  | \tMarked for GC\t  |\n|--------------------------------------------------------------------|--------------------|\n```\n\n一个对象创建时：\n\n- 如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0\n\n- 偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数\n\n   `-XX:BiasedLockingStartupDelay=0` 来禁用延迟\n\n- 如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值\n\n1） 测试延迟特性\n\n2） 测试偏向锁\n\n``` java\nclass Dog {\n    \n}\n```\n\n利用 jol 第三方工具来查看对象头信息（注意这里我扩展了 jol 让它输出更为简洁）\n\n``` java\n// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 \npublic static void main(String[] args) throws IOException {\n \tDog d = new Dog();\n \tClassLayout classLayout = ClassLayout.parseInstance(d);\n \tnew Thread(() -> {\n \t\tlog.debug(\"synchronized 前\");\n \t\tSystem.out.println(classLayout.toPrintableSimple(true));\n \t\tsynchronized (d) {\n \t\t\tlog.debug(\"synchronized 中\");\n \t\t\tSystem.out.println(classLayout.toPrintableSimple(true));\n \t\t}\n \t\tlog.debug(\"synchronized 后\");\n \t\tSystem.out.println(classLayout.toPrintableSimple(true));\n \t}, \"t1\").start();\n}\n```\n\n输出\n\n```\n11:08:58.117 c.TestBiased [t1] - synchronized 前\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 \n11:08:58.121 c.TestBiased [t1] - synchronized 中\n00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101 \n11:08:58.121 c.TestBiased [t1] - synchronized 后\n00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101\n```\n\n>**注意**\n>\n>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中\n\n3）测试禁用\n\n在上面测试代码运行时在添加 VM 参数 `-XX:-UseBiasedLocking` 禁用偏向锁\n\n输出\n\n```\n11:13:10.018 c.TestBiased [t1] - synchronized 前\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n11:13:10.021 c.TestBiased [t1] - synchronized 中\n00000000 00000000 00000000 00000000 00100000 00010100 11110011 10001000 \n11:13:10.021 c.TestBiased [t1] - synchronized 后\n00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001\n```\n\n4) 测试 hashCode\n\n正常状态对象一开始是没有 hashCode 的，第一次调用才生成\n\n#### 撤销 **-** 调用对象hashCode\n\n调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销\n\n- 轻量级锁会在锁记录中记录 hashCode\n\n- 重量级锁会在 Monitor 中记录 hashCode\n\n在调用 hashCode 后使用偏向锁，记得去掉 `-XX:-UseBiasedLocking`\n\n输出\n\n```\n11:22:10.386 c.TestBiased [main] - 调用 hashCode:1778535015 \n11:22:10.391 c.TestBiased [t1] - synchronized 前\n00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001 \n11:22:10.393 c.TestBiased [t1] - synchronized 中\n00000000 00000000 00000000 00000000 00100000 11000011 11110011 01101000 \n11:22:10.393 c.TestBiased [t1] - synchronized 后\n00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001\n```\n\n#### 撤销 **-** 其它线程使用对象\n\n当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁\n\n``` java\nprivate static void test2() throws InterruptedException {\n \tDog d = new Dog();\n \tThread t1 = new Thread(() -> {\n\t\t synchronized (d) {\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t\tsynchronized (TestBiased.class) {\n \t\t\tTestBiased.class.notify();\n \t\t}\n \t\t// 如果不用 wait/notify 使用 join 必须打开下面的注释\n \t\t// 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的\n         /*try {\n         System.in.read();\n         } catch (IOException e) {\n         e.printStackTrace();\n         }*/\n \t}, \"t1\");\n \tt1.start();\n    \n \tThread t2 = new Thread(() -> {\n \t\tsynchronized (TestBiased.class) {\n \t\t\ttry {\n \t\t\t\tTestBiased.class.wait();\n \t\t\t} catch (InterruptedException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\tsynchronized (d) {\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t}, \"t2\");\n \tt2.start();\n}\n```\n\n输出\n\n```\n[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 \n\n[t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 \n\n[t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 \n\n[t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n```\n\n#### 撤销 - 调用 wait/notify \n\n``` java\npublic static void main(String[] args) throws InterruptedException {\n \tDog d = new Dog();\n \tThread t1 = new Thread(() -> {\n \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\tsynchronized (d) {\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\ttry {\n \t\t\t\td.wait();\n \t\t\t} catch (InterruptedException e) {\n \t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t}, \"t1\");\n \tt1.start();\n    \n \tnew Thread(() -> {\n \t\ttry {\n \t\t\tThread.sleep(6000);\n \t\t} catch (InterruptedException e) {\n \t\t\te.printStackTrace();\n \t\t}\n\t\tsynchronized (d) {\n \t\t\tlog.debug(\"notify\");\n \t\t\td.notify();\n \t\t}\n \t}, \"t2\").start();\n}\n```\n\n输出\n\n```\n[t1] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 \n[t1] - 00000000 00000000 00000000 00000000 00011111 10110011 11111000 00000101 \n[t2] - notify \n[t1] - 00000000 00000000 00000000 00000000 00011100 11010100 00001101 11001010\n```\n\n#### 批量重偏向\n\n如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID\n\n当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程\n\n``` java\nprivate static void test3() throws InterruptedException {\n \tVector<Dog> list = new Vector<>();\n \tThread t1 = new Thread(() -> {\n \t\tfor (int i = 0; i < 30; i++) {\n \t\t\tDog d = new Dog();\n \t\t\tlist.add(d);\n \t\t\tsynchronized (d) {\n \t\t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\t}\n \t\t}\n \t\tsynchronized (list) {\n \t\t\tlist.notify();\n \t\t} \n \t}, \"t1\");\n \tt1.start();\n \n \tThread t2 = new Thread(() -> {\n \t\tsynchronized (list) {\n \t\t\ttry {\n\t\t\t\tlist.wait();\n \t\t\t} catch (InterruptedException e) {\n\t\t\t\te.printStackTrace();\n \t\t\t}\n \t\t}\n \t\tlog.debug(\"===============> \");\n \t\tfor (int i = 0; i < 30; i++) {\n \t\t\tDog d = list.get(i);\n \t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\tsynchronized (d) {\n \t\t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t\t}\n \t\t\tlog.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n \t\t}\n \t}, \"t2\");\n \tt2.start();\n}\n```\n\n输出\n\n```\n[t1] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t1] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - ===============> \n[t2] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 0 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 1 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 2 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 3 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 4 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 5 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 5 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 6 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 6 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 7 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 7 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 8 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 8 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 9 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 9 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 10 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 11 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 12 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 12 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 13 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 13 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 14 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 14 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 15 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 15 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 16 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 16 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 17 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 17 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 18 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 \n[t2] - 18 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 \n[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 \n[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 \n[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101\n```\n\n#### 批量撤销\n\n当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的\n\n``` java\n\n    static Thread t1, t2, t3;\n\n    private static void test4() throws InterruptedException {\n        Vector<Dog> list = new Vector<>();\n        int loopNumber = 39;\n        t1 = new Thread(() -> {\n            for (int i = 0; i < loopNumber; i++) {\n                Dog d = new Dog();\n                list.add(d);\n                synchronized (d) {\n                    log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n                }\n            }\n            LockSupport.unpark(t2);\n        }, \"t1\");\n        t1.start();\n        t2 = new Thread(() -> {\n            LockSupport.park();\n            log.debug(\"===============> \");\n            for (int i = 0; i < loopNumber; i++) {\n                Dog d = list.get(i);\n                log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n                synchronized (d) {\n                    log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n                }\n                log.debug(i + \"\\t\" + ClassLayout.parseInstance(d).toPrintableSimple(true));\n            }\n            LockSupport.unpark(t3);\n        }, \"t2\");\n    }\n```\n\n>**参考资料**\n>\n>https://github.com/farmerjohngit/myblog/issues/12\n>\n>https://www.cnblogs.com/LemonFive/p/11246086.html\n>\n>https://www.cnblogs.com/LemonFive/p/11248248.html\n>\n>偏向锁论文\n\n#### 5.锁消除\n\n锁消除\n\n``` java\n@Fork(1)\n@BenchmarkMode(Mode.AverageTime)\n@Warmup(iterations=3)\n@Measurement(iterations=5)\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\npublic class MyBenchmark {\n    static int x = 0;\n    @Benchmark\n    public void a() throws Exception {\n        x++;\n    }\n    @Benchmark\n    public void b() throws Exception {\n        Object o = new Object();\n        synchronized (o) {\n            x++;\n        }\n    }\n}\n```\n\n`java -jar benchmarks.jar`\n\n```\nBenchmark\t\t\tMode\t Samples \tScore\t Score error \tUnits \nc.i.MyBenchmark.a \tavgt \t\t5 \t\t1.542 \t\t0.056 \t\tns/op \nc.i.MyBenchmark.b \tavgt \t\t5 \t\t1.518 \t\t0.091 \t\tns/op\n```\n\n`java -XX:-EliminateLocks -jar benchmarks.jar`\n\n```\nBenchmark \t\t\tMode \tSamples \tScore \tScore error \tUnits \nc.i.MyBenchmark.a \tavgt \t\t5 \t\t1.507 \t\t0.108 \t\tns/op \nc.i.MyBenchmark.b \tavgt \t\t5 \t\t16.976 \t\t1.572 \t\tns/op\n```\n\n**锁粗化**\n\n对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。\n","slug":"2023/thread","published":1,"updated":"2024-08-05T11:07:24.367Z","comments":1,"layout":"post","photos":[],"_id":"clzxxiuyn002e0aiban7j8sxh","content":"<h1 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h1><h2 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h2><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><ul>\n<li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU,数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的</li>\n<li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li>\n<li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程(例如记事本、画图、 浏览器等)，也有的程序只能启动一个实例进程(例如网易云音乐、360 安全卫士等)</li>\n</ul>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li><p>一个进程之内可以分为-到多个线程。</p>\n</li>\n<li><p>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行。</p>\n</li>\n<li><p>Java中，线程作为最小调度单位，进程作为资源分配的最小单位。 在windows中进程是不活动的，只是作为线程的容器。</p>\n</li>\n</ul>\n<h3 id=\"二者对比\"><a href=\"#二者对比\" class=\"headerlink\" title=\"二者对比\"></a>二者对比</h3><ul>\n<li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集。</li>\n<li>进程拥有共享的资源，如内存空间等，供其内部的线程共享。</li>\n<li>进程间通信较为复杂<ul>\n<li>同一台计算机的进程通信称为IPC (Inter-process communication)。</li>\n<li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议,例如HTTP。</li>\n</ul>\n</li>\n<li>线程通信相对简单，因为它们共享进程内的内存，-个例子是多个线程可以访问同-一个共享变量。</li>\n<li>线程更轻量,线程上下文切换成本-般上要比进程上下文切换低。</li>\n</ul>\n<h2 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h2><p>单核cpu下，线程实际还是<code>串行执行</code>的。操作系统中有- -个组件叫做任务调度器，将cpu的时间片(windows’下时间片最小约为15毫秒)分给不同的线程使用，只是由于cpu在线程间(时间片很短)的切换<br>非常快，人类感觉是<code>同时运行的</code>。总结为- -句话就是:<code>微观串行，宏观并行，</code>一般会将这种<code>线程轮流使用</code>CPU 的做法称为并发，concurrent</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">CPU</th>\n<th align=\"center\">时间片1</th>\n<th align=\"center\">时间片2</th>\n<th align=\"center\">时间片3</th>\n<th align=\"center\">时间片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">core</td>\n<td align=\"center\">线程1</td>\n<td align=\"center\">线程2</td>\n<td align=\"center\">线程3</td>\n<td align=\"center\">线程4</td>\n</tr>\n</tbody></table>\n<img src=\"/post/2023/thread/453affe8-17db-40b3-940f-162e7597336e.png\" class=\"\">\n\n<p>多核CPU下，每个核（core）都可以调度运行线程，这时候线程可以是并行的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">CPU</th>\n<th align=\"center\">时间片1</th>\n<th align=\"center\">时间片2</th>\n<th align=\"center\">时间片3</th>\n<th align=\"center\">时间片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">core1</td>\n<td align=\"center\">线程1</td>\n<td align=\"center\">线程1</td>\n<td align=\"center\">线程3</td>\n<td align=\"center\">线程3</td>\n</tr>\n<tr>\n<td align=\"center\">core2</td>\n<td align=\"center\">线程2</td>\n<td align=\"center\">线程2</td>\n<td align=\"center\">线程4</td>\n<td align=\"center\">线程4</td>\n</tr>\n</tbody></table>\n<img src=\"/post/2023/thread/2ed065be-3fb7-4e67-b04e-b8e08980405d.png\" class=\"\">\n\n<p>引用Rob Pike的一段描述:</p>\n<ul>\n<li>并发(concurrent) 是同- -时间应对(dealing with) 多件事情的能力</li>\n<li>并行(parallel) 是同- -时间动手做(doing) 多件事情的能力</li>\n</ul>\n<p>例子</p>\n<ul>\n<li>家庭主妇做饭、打扫卫生、给孩子喂奶，她-一个人轮流交替做这多件事,这时就是并发</li>\n<li>家庭主妇雇了个保姆，她们一-起这些事，这时既有并发，也有并行(这时会产生竞争，例如锅只有一口,一个人用锅时，另一个人就得等待)</li>\n<li>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行。</li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"应用之异步调用（案例）\"><a href=\"#应用之异步调用（案例）\" class=\"headerlink\" title=\"应用之异步调用（案例）\"></a>应用之异步调用（案例）</h3><p>从方法调用的角度来讲，如果需要等待结果返回，才能继续运行就是同步<br>，不需要等待结果返回，就能继续运行就是异步<br><strong>注意:同步在多线程中还有另外一层意思，是让多个线程步调一致</strong></p>\n<h4 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h4><p>多线程可以让方法执行变为异步的(即不要巴巴干等着)比如说读取磁盘文件时，假设读取操作花费了5秒<br>钟，如果没有线程调度机制，这5秒调用者什么都做不了,其代码都得暂停…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileReaderUtil</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">(String path)</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;FileReader start .....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">FileReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.io.FileReader(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;FileReader end .....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.n2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.constans.Constans;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.util.FileReaderUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 同步等待</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同步执行，必须等待fileReader方法执行完毕，才能进行其他操作</span></span><br><span class=\"line\">        FileReaderUtil.read(Constans.FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;do other things .....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.n2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.constans.Constans;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.util.FileReaderUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步不等待</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Async</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程去异步执行，不需要等待执行完毕，就可以执行其他操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            FileReaderUtil.read(Constans.FILE_PATH);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;do other things .....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程。</li>\n<li>tomcat 的异步servlet也是类似的目的,让用户线程处理耗时较长的操作，避免阻塞tomcat的工作线程</li>\n<li>UI程序中，开线程进行其他操作，避免阻塞ui线程</li>\n</ul>\n<h3 id=\"应用之提高效率-案例\"><a href=\"#应用之提高效率-案例\" class=\"headerlink\" title=\"应用之提高效率(案例)\"></a>应用之提高效率(案例)</h3><p>充分利用多核cpu的优势，提高运行效率。想象下面的场景,执行3个计算,最后将计算结果汇总。</p>\n<blockquote>\n<p>计算\t1\t花费\t10ms<br>计算\t2\t花费\t11ms<br>计算\t3\t花费\t9 ms<br>汇总需要\t1 ms</p>\n</blockquote>\n<ul>\n<li>如果是串行执行，那么总共花费的时间是10 + 11 + 9 + 1&#x3D; 31ms</li>\n<li>但如果是四核cpu, 各个核心分别使用线程1执行计算1,线程2执行计算2,线程3执行计算3,那么3个线程是并行的，花费时间只取决于最长的那个线程运行的时间，即11ms最后加上汇总时间只会花费12ms</li>\n</ul>\n<p><strong>注意 : 需要在多核cpu才能提高效率，单核仍然时是轮流执行</strong></p>\n<h4 id=\"设计-1\"><a href=\"#设计-1\" class=\"headerlink\" title=\"设计\"></a>设计</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.n2.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 用同步和异步两中方式计算数据所消耗的时间</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBenchmark</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] ARRAY = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4000_000_00</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Arrays.fill(ARRAY, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异步计算 ，创建4个线程去同步计算结果，最后合并计算结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">async</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = ARRAY;</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task1 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">0</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task2 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">1000_000_00</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task3 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">2000_000_00</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task4 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">3000_000_00</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task3).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task4).start();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> task1.get() + task2.get() + task3.get() + task4.get();</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异步计算：计算结果：&quot;</span> + i + <span class=\"string\">&quot;\\t总计耗时：&quot;</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步计算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sync</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = ARRAY;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4000_000_00</span>; i++) &#123;</span><br><span class=\"line\">            sum += array[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;同步计算：计算结果：&quot;</span> + sum + <span class=\"string\">&quot;\\t总计耗时：&quot;</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同步计算</span></span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        <span class=\"comment\">//异步计算</span></span><br><span class=\"line\">        async();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/4f22eeff-a017-46f6-bf49-5359e570fe22.png\" class=\"\">\n\n<h4 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>1、单核cpu下，多线程不能实际提高程序运行效率,只是为了能够在不同的任务之间切换，不同线程轮流使用cpu,不至于一 个线程总占用cpu,别的线程没法干活<br>2、多核cpu可以并行跑多个线程，但能否提高程序运行效率还是要分情况的</p>\n<pre><code>-  有些任务,经过精心设计,将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分(参考后文的[阿姆达尔定律] )\n-  也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义\n</code></pre>\n<p>3、 IO操作不占用cpu,只是我们一般拷贝文件使用的是[阻塞IO]，这时相当于线程虽然不用cpu,但需要一直等待IO结束，没能充分利用线程。所以才有后面的[非阻塞IO]和[异步I0]优化。</p>\n<h1 id=\"JAVA线程\"><a href=\"#JAVA线程\" class=\"headerlink\" title=\"JAVA线程\"></a>JAVA线程</h1><h2 id=\"创建和运行线程\"><a href=\"#创建和运行线程\" class=\"headerlink\" title=\"创建和运行线程\"></a>创建和运行线程</h2><p>java程序在启动的时候就会常见一个线程，main函数就是一个线程</p>\n<h3 id=\"1-直接使用Thread类\"><a href=\"#1-直接使用Thread类\" class=\"headerlink\" title=\"1.直接使用Thread类\"></a>1.直接使用Thread类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程的第一种方式 Thread类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;runing....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//设置线程名字</span></span><br><span class=\"line\">        thread.setName(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;main....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用Runnable-配合Thread\"><a href=\"#2-使用Runnable-配合Thread\" class=\"headerlink\" title=\"2.使用Runnable 配合Thread\"></a>2.使用Runnable 配合Thread</h3><p>把<code>线程</code>和<code>任务</code> （要执行的代码） 分开</p>\n<ul>\n<li>Thread 代表线程</li>\n<li>Runnable 可运行的任务（线程要执行的代码）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;runing....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程(参数1：要执行的任务，参数2：线程的名字)</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable,<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;main....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JAVA 8 以后可以使用<code>lambda</code>精简代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建任务</span></span><br><span class=\"line\">Runnable lombdaRunnable= () -&gt; &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;lombda runging......&quot;</span>); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//创建线程</span></span><br><span class=\"line\">Thread lombdaThead=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(lombdaRunnable,<span class=\"string\">&quot;lombdaThead&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//启动线程</span></span><br><span class=\"line\">lombdaThead.start();</span><br></pre></td></tr></table></figure>\n\n<p>可以再次精简</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;lombda runging......&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"string\">&quot;lambdaThread&quot;</span>).start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-FutureTask-配合Thread\"><a href=\"#3-FutureTask-配合Thread\" class=\"headerlink\" title=\"3.FutureTask 配合Thread\"></a>3.FutureTask 配合Thread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程的第三种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task=<span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;running.......&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程(参数1：要执行的任务，参数2：线程的名字)</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task,<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//获取task任务的返回值，主线程会等待task任务完成才会继续执行下边的操作</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> task.get();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;task 的返回值：&#123;&#125;&quot;</span>,integer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"原理之Thread与Runnable的关系\"><a href=\"#原理之Thread与Runnable的关系\" class=\"headerlink\" title=\"原理之Thread与Runnable的关系\"></a>原理之Thread与Runnable的关系</h3><h4 id=\"Runnable源码\"><a href=\"#Runnable源码\" class=\"headerlink\" title=\"Runnable源码\"></a>Runnable源码</h4><p>创建线程传递Runnable任务，调用重载init方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Allocates a new &#123;<span class=\"doctag\">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class=\"line\"><span class=\"comment\"> * effect as &#123;<span class=\"doctag\">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> (null, target, name)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  target</span></span><br><span class=\"line\"><span class=\"comment\"> *         the object whose &#123;<span class=\"doctag\">@code</span> run&#125; method is invoked when this thread</span></span><br><span class=\"line\"><span class=\"comment\"> *         is started. If &#123;<span class=\"doctag\">@code</span> null&#125;, this thread&#x27;s run method is invoked.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  name</span></span><br><span class=\"line\"><span class=\"comment\"> *         the name of the new thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Thread</span><span class=\"params\">(Runnable target, String name)</span> &#123;</span><br><span class=\"line\">    init(<span class=\"literal\">null</span>, target, name, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>调用Init重载方法 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Initializes a Thread with the current AccessControlContext.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #init(ThreadGroup,Runnable,String,long,AccessControlContext,boolean)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">long</span> stackSize)</span> &#123;</span><br><span class=\"line\">       init(g, target, name, stackSize, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到核心init 方法，把<code>Runable任务</code>交给成员对象 <code>target</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> g the Thread group</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target the object whose run() method gets called</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> name the name of the new Thread</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> stackSize the desired stack size for the new thread, or</span></span><br><span class=\"line\"><span class=\"comment\"> *        zero to indicate that this parameter is to be ignored.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> acc the AccessControlContext to inherit, or</span></span><br><span class=\"line\"><span class=\"comment\"> *            AccessController.getContext() if null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> inheritThreadLocals if &#123;<span class=\"doctag\">@code</span> true&#125;, inherit initial values for</span></span><br><span class=\"line\"><span class=\"comment\"> *            inheritable thread-locals from the constructing thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span><br><span class=\"line\"><span class=\"params\">                  <span class=\"type\">long</span> stackSize, AccessControlContext acc,</span></span><br><span class=\"line\"><span class=\"params\">                  <span class=\"type\">boolean</span> inheritThreadLocals)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;name cannot be null&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> currentThread();</span><br><span class=\"line\">    <span class=\"type\">SecurityManager</span> <span class=\"variable\">security</span> <span class=\"operator\">=</span> System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (g == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Determine if it&#x27;s an applet or not */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* If there is a security manager, ask the security manager</span></span><br><span class=\"line\"><span class=\"comment\">           what to do. */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (security != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            g = security.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* If the security doesn&#x27;t have a strong opinion of the matter</span></span><br><span class=\"line\"><span class=\"comment\">           use the parent thread group. */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            g = parent.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* checkAccess regardless of whether or not threadgroup is</span></span><br><span class=\"line\"><span class=\"comment\">       explicitly passed in. */</span></span><br><span class=\"line\">    g.checkAccess();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Do we have the required permissions?</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (security != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class=\"line\">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    g.addUnstarted();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.group = g;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.daemon = parent.isDaemon();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.priority = parent.getPriority();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (security == <span class=\"literal\">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.inheritedAccessControlContext =</span><br><span class=\"line\">            acc != <span class=\"literal\">null</span> ? acc : AccessController.getContext();</span><br><span class=\"line\">    <span class=\"comment\">//把Runable 任务保存在成员变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    setPriority(priority);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.inheritableThreadLocals =</span><br><span class=\"line\">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class=\"line\">    <span class=\"comment\">/* Stash the specified stack size in case the VM cares */</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.stackSize = stackSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set thread ID */</span></span><br><span class=\"line\">    tid = nextThreadID();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Thread 运行方法,实际调用的还是Thread的<code>run方法</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * If this thread was constructed using a separate</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class=\"line\"><span class=\"comment\">   * otherwise, this method does nothing and returns.</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span>     #start()</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span>     #stop()</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          target.run();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>Thread是把线程和任务合并在了一起。Runnable 是把线程和任务分开。</li>\n<li>用Runnable 更容易与线程池等高级API 配合</li>\n<li>用Runnable 让任务类脱离了Thread 继承体系，更灵活。</li>\n</ul>\n<h2 id=\"多线程同时运行\"><a href=\"#多线程同时运行\" class=\"headerlink\" title=\"多线程同时运行\"></a>多线程同时运行</h2><h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示多个线程并发交替执行</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MultiThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;running.....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;running.....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/e5b813b7-361c-42ec-9326-53b01a2872da.png\" class=\"\">\n\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>多线程交替执行。</li>\n<li>谁先谁后，不由我们控制，由底层的任务调度器完成。</li>\n</ul>\n<h2 id=\"查看进程线程的方法\"><a href=\"#查看进程线程的方法\" class=\"headerlink\" title=\"查看进程线程的方法\"></a>查看进程线程的方法</h2><h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><ul>\n<li>任务管理器可以查看进程和线程数,也可以用来杀死进程</li>\n<li>tasklist查看进程</li>\n<li>taskkill杀死进程</li>\n</ul>\n<h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><ul>\n<li>ps -fe查看所有进程</li>\n<li>ps -fT -p <PID>查看某个进程(PID) 的所有线程，</li>\n<li>kill 死进程</li>\n<li>top按大写H切换是否显示线程</li>\n<li>top -H -p <PID>查看某个进程(PID) 的所有线程:</li>\n</ul>\n<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><ul>\n<li>jps 命令查看所有的JAVA 进程</li>\n<li>jstack <PID> 车看某个Java 进程（PID）的所有线程状态</li>\n<li>jconsole 来查看某个Java 进程中线程的运行情况（图形界面）</li>\n</ul>\n<h3 id=\"jconsole远程监控配置\"><a href=\"#jconsole远程监控配置\" class=\"headerlink\" title=\"jconsole远程监控配置\"></a>jconsole远程监控配置</h3><p>需要以如下方式运行你的java类</p>\n<blockquote>\n<p>java -Djava. rmi. server . hostname&#x3D;’ ip地址’ -Dcom. sun. management . jmxremote -Dcom. sun. management . jmxremote. port&#x3D;i连接端口-Dcom . sun . management . jmxremote.ssl&#x3D;是否安全连接-Dcom. sun. management .jmxremote .authenticate&#x3D;是否认证    java类</p>\n</blockquote>\n<p>修改&#x2F;etc&#x2F;hosts文件将127.0.0.1 映射至主机名<br>如果要认证访问，还需要做如下步骤</p>\n<ul>\n<li>复制jmxremote.password 文件</li>\n<li>修改jmxremote.password和jmxremote.access文件的权限为600即文件所有者可读写</li>\n<li>连接时填入controlRole (用户名)，R&amp;D (密码)</li>\n</ul>\n<h2 id=\"原理之线程运行\"><a href=\"#原理之线程运行\" class=\"headerlink\" title=\"原理之线程运行\"></a>原理之线程运行</h2><h3 id=\"栈与栈帧\"><a href=\"#栈与栈帧\" class=\"headerlink\" title=\"栈与栈帧\"></a>栈与栈帧</h3><p>Java Virtual Machine Stacks （Java 虚拟机栈）</p>\n<p>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟</p>\n<p>机就会为其分配一块栈内存。</p>\n<ul>\n<li><p>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存</p>\n</li>\n<li><p>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</p>\n</li>\n</ul>\n<h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h4><h5 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法调用查看方法栈和栈帧</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Frames</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        method1(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> method2();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/cb65fed7-57dd-404b-b4f1-e365dbe83379.png\" class=\"\">\n\n<img src=\"/post/2023/thread/210feb5c-150a-43c3-8b3d-440f53e343d1.png\" class=\"\">\n\n<p>当方法运行到method2时可以看到栈里有三个栈帧</p>\n<img src=\"/post/2023/thread/52ebada9-ad0c-45fc-9482-40b961c20bbf.png\" class=\"\">\n\n<img src=\"/post/2023/thread/51e456b2-69ca-4039-8ec3-137a74a3e57d.png\" class=\"\">\n\n<p>当method2 方法执行完毕后栈中减少method2的栈帧</p>\n<img src=\"/post/2023/thread/7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png\" class=\"\">\n\n<img src=\"/post/2023/thread/ca324ec8-b1a0-419a-a962-640dae424e10.png\" class=\"\">\n\n<p>直到所有栈帧运行完毕，程序执行完毕。</p>\n<img src=\"/post/2023/thread/3ce55a24-aeb0-4055-9925-c69a63ec9053.png\" class=\"\">\n\n<h5 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 多线程情况下 方法调用查看方法栈和栈帧</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Frames2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//t1线程调用</span></span><br><span class=\"line\">            method1(<span class=\"number\">20</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//main线程调用</span></span><br><span class=\"line\">        method1(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> method2();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在t1 线程出设置断点，切换断点模式。</p>\n<img src=\"/post/2023/thread/815e324a-777f-4b34-b590-acbb4c624cb0.png\" class=\"\">\n\n<p>切换不同的线程</p>\n<img src=\"/post/2023/thread/d05f71ef-bbbb-4b19-a804-6444a74de835.png\" class=\"\">\n\n<p>main线程的栈帧</p>\n<img src=\"/post/2023/thread/75442144-d101-4e7a-97ca-c833a2b827fe.png\" class=\"\">\n<p>t1线程的栈帧</p>\n<img src=\"/post/2023/thread/7bf73e18-7259-45da-93c5-a4183062572e.png\" class=\"\">\n\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>线程的栈内存是相互独立的，每个线程有独立的栈内存，栈内存中有栈帧，每个线程相互独立，互不干扰。</p>\n<h3 id=\"线程上下文切换（Thread-Context-Switch）\"><a href=\"#线程上下文切换（Thread-Context-Switch）\" class=\"headerlink\" title=\"线程上下文切换（Thread Context Switch）\"></a>线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p>\n<ul>\n<li><p>线程的 cpu 时间片用完</p>\n</li>\n<li><p>垃圾回收</p>\n</li>\n<li><p>有更高优先级的线程需要运行</p>\n</li>\n<li><p>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</p>\n</li>\n</ul>\n<p>当 Context Switch 发生时，<code>需要由操作系统保存当前线程的状态，并恢复另一个线程的状态</code>，Java 中对应的概念就是<code>程序计数器【寄存器】（Program Counter Register）</code>，它的作用是记住下一条 jvm 指令的执行地址，是线程私有的。</p>\n<ul>\n<li><p>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</p>\n</li>\n<li><p>Context Switch 频繁发生会影响性能</p>\n</li>\n</ul>\n<h2 id=\"常见方法\"><a href=\"#常见方法\" class=\"headerlink\" title=\"常见方法\"></a>常见方法</h2><table>\n<thead>\n<tr>\n<th align=\"left\"><strong>方法名</strong></th>\n<th align=\"center\"><strong>static</strong></th>\n<th align=\"left\"><strong>功能说明</strong></th>\n<th align=\"left\"><strong>注意</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">start()</td>\n<td align=\"center\"></td>\n<td align=\"left\">启动一个新线程，在新的线程运行 run 方法中的代码</td>\n<td align=\"left\">start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateExceptio</td>\n</tr>\n<tr>\n<td align=\"left\">run()</td>\n<td align=\"center\"></td>\n<td align=\"left\">新线程启动后会调用的方法</td>\n<td align=\"left\">如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象，来覆盖默认行为</td>\n</tr>\n<tr>\n<td align=\"left\">join()</td>\n<td align=\"center\"></td>\n<td align=\"left\">等待线程运行结束</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">join(long n)</td>\n<td align=\"center\"></td>\n<td align=\"left\">等待线程运行结束,最多等待n毫秒</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">getId()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程长整型的 id</td>\n<td align=\"left\">id唯一</td>\n</tr>\n<tr>\n<td align=\"left\">getName()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程名</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">setName(String)</td>\n<td align=\"center\"></td>\n<td align=\"left\">修改线程名</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">getPriority()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程优先级</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">setPriority(int)</td>\n<td align=\"center\"></td>\n<td align=\"left\">修改线程优先级</td>\n<td align=\"left\">java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率</td>\n</tr>\n<tr>\n<td align=\"left\">getState()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程状态</td>\n<td align=\"left\">Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING,TIMED_WAITING, TERMINATED</td>\n</tr>\n<tr>\n<td align=\"left\">isInterrupted()</td>\n<td align=\"center\"></td>\n<td align=\"left\">判断是否被打断</td>\n<td align=\"left\">不会清除<code>打断标记</code></td>\n</tr>\n<tr>\n<td align=\"left\">isAlive()</td>\n<td align=\"center\"></td>\n<td align=\"left\">线程是否存活(还没有运行完毕）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">interrupt()</td>\n<td align=\"center\"></td>\n<td align=\"left\">打断线程</td>\n<td align=\"left\">如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除<code>打断标记</code>；如果打断的正在运行的线程，则会设置<code>打断标记</code>；park 的线程被打断，也会设置<code>打断标记</code></td>\n</tr>\n<tr>\n<td align=\"left\">interrupted()</td>\n<td align=\"center\">static</td>\n<td align=\"left\">判断当前线程是否被打断</td>\n<td align=\"left\">会清除<code>打断标记</code></td>\n</tr>\n<tr>\n<td align=\"left\">currentThread()</td>\n<td align=\"center\">static</td>\n<td align=\"left\">获取当前正在执行的线程</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">sleep(long n)</td>\n<td align=\"center\">static</td>\n<td align=\"left\">让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">yield()</td>\n<td align=\"center\">static</td>\n<td align=\"left\">提示线程调度器让出当前线程对CPU的使用</td>\n<td align=\"left\">主要是为了测试和调试</td>\n</tr>\n</tbody></table>\n<h2 id=\"start方法详解\"><a href=\"#start方法详解\" class=\"headerlink\" title=\"start方法详解\"></a>start方法详解</h2><h3 id=\"调用run\"><a href=\"#调用run\" class=\"headerlink\" title=\"调用run\"></a>调用run</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程调用 run 方法</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(Thread.currentThread().getName());</span><br><span class=\"line\">            FileReaderUtil.read(Constants.FILE_PATH);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>发现执行的依然是main 线程，创建的线程并没有执行。</p>\n<img src=\"/post/2023/thread/4b22adcb-879c-493e-a6dc-7a50426a6db7.png\" class=\"\">\n\n<h3 id=\"调用start\"><a href=\"#调用start\" class=\"headerlink\" title=\"调用start\"></a>调用start</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程调用 run 方法</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(Thread.currentThread().getName());</span><br><span class=\"line\">            FileReaderUtil.read(Constants.FILE_PATH);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        //调用run方法</span></span><br><span class=\"line\"><span class=\"comment\">//        t1.run();</span></span><br><span class=\"line\">        <span class=\"comment\">//调用start方法</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/6d0f8427-4068-4a15-a933-cd3f74e28dbf.png\" class=\"\">\n\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * If this thread was constructed using a separate</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class=\"line\"><span class=\"comment\"> * otherwise, this method does nothing and returns.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     #start()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     #stop()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        target.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class=\"line\"><span class=\"comment\">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class=\"line\"><span class=\"comment\">     * take any action whatsoever.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span>     java.lang.Thread#run()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>run() 方法是抽象方法等待子类去实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class=\"line\"><span class=\"comment\">      * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">      * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">      * so that it can be added to the group&#x27;s list of threads</span></span><br><span class=\"line\"><span class=\"comment\">      * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class=\"line\">     group.add(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         start0();</span><br><span class=\"line\">         started = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                 group.threadStartFailed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">             <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">               it will be passed up the call stack */</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>start()</code>方法中调用 <code>start0()</code>方法正式启动线程。而<code>start0()</code>是用<code>native</code>修饰得方法，底层调用操作系统的方法实现线程调用。</p>\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>直接调用 run 是在主线程中执行了 run，没有启动新的线程</p>\n</li>\n<li><p>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码</p>\n</li>\n</ul>\n<h3 id=\"查看线程状态\"><a href=\"#查看线程状态\" class=\"headerlink\" title=\"查看线程状态\"></a>查看线程状态</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看线程运行状态</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadStatus</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;running.....&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取运行前的状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行前的状态:&quot;</span>+t1.getState());</span><br><span class=\"line\">        <span class=\"comment\">//调用start方法</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//获取运行后的状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行后的状态:&quot;</span>+t1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/3a071edf-6ded-487b-abbb-d016a9fe6864.png\" class=\"\">\n\n<h3 id=\"多次调用start方法会抛java-lang-IllegalThreadStateException\"><a href=\"#多次调用start方法会抛java-lang-IllegalThreadStateException\" class=\"headerlink\" title=\"多次调用start方法会抛java.lang.IllegalThreadStateException\"></a>多次调用start方法会抛java.lang.IllegalThreadStateException</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用start方法</span></span><br><span class=\"line\">t1.start();</span><br><span class=\"line\">t1.start();</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/feed6992-8dff-450c-9010-e2f46caf6243.png\" class=\"\">\n\n\n\n<h2 id=\"sleep-与-yield\"><a href=\"#sleep-与-yield\" class=\"headerlink\" title=\"sleep 与 yield\"></a><strong>sleep</strong> <strong>与</strong> <strong>yield</strong></h2><h3 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h3><ol>\n<li>调用 sleep 会让当前线程从 <em>Running</em> 进入 <em>Timed Waiting</em> 状态（阻塞）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  sleep</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 线程的状态：&#123;&#125;&quot;</span>,t1.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 线程的状态：&#123;&#125;&quot;</span>,t1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200822234416578.png\" class=\"\" title=\"image-20200822234416578\">\n\n<ol start=\"2\">\n<li>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 interrupt 打断</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;enter sleep...... &quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;wake up...... &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt...... &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/81a4db1a-c8d1-47f7-a955-39db726f5173.png\" class=\"\">\n\n<ol start=\"3\">\n<li><p>睡眠结束后的线程未必会立刻得到执行</p>\n</li>\n<li><p>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 使用TimeUnit</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;start ......&quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;end ......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/f78c9ec4-6379-48de-b2e6-f529bb063540.png\" class=\"\">\n\n\n\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><ol>\n<li><p>调用 yield 会让当前线程从 <em>Running</em> 进入 <em>Runnable</em> 就绪状态，然后调度执行其它线程</p>\n</li>\n<li><p>具体的实现依赖于操作系统的任务调度器</p>\n</li>\n</ol>\n<h2 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h2><p>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</p>\n<p>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p>\n<h3 id=\"未设置优先级和调用yield\"><a href=\"#未设置优先级和调用yield\" class=\"headerlink\" title=\"未设置优先级和调用yield\"></a>未设置优先级和调用yield</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置线程的线程优先级</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPriority</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Thread.yield();</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;        ----&gt;2 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>t1线程和t2 线程打印的数值相差不大。</p>\n<img src=\"/post/2023/thread/683dd209-d862-46f9-878f-b9e8f4c2db3b.png\" class=\"\">\n\n<h3 id=\"调用yield\"><a href=\"#调用yield\" class=\"headerlink\" title=\"调用yield\"></a>调用yield</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置线程的线程优先级</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPriority</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用yield,把CPU执行执行时间交给其他线程</span></span><br><span class=\"line\">                Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;        ----&gt;2 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>t1线程打印的数值远远大于 t2 线程打印的数值。</p>\n<img src=\"/post/2023/thread/d37e0c1b-1e69-4360-937a-edf5296f47ce.png\" class=\"\">\n\n<h3 id=\"设置优先级\"><a href=\"#设置优先级\" class=\"headerlink\" title=\"设置优先级\"></a>设置优先级</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置线程的线程优先级</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPriority</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;        ----&gt;2 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t1线程设置最小的线程优先级</span></span><br><span class=\"line\">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class=\"line\">        <span class=\"comment\">//t2线程设置最大的线程优先级</span></span><br><span class=\"line\">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        </span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>t2线程打印的数值远远大于 t1 线程打印的数值。</p>\n<img src=\"/post/2023/thread/2feee3db-6b39-4e1a-9098-1a5f966742f7.png\" class=\"\">\n\n<h2 id=\"案例-2\"><a href=\"#案例-2\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"防止CPU-占用100\"><a href=\"#防止CPU-占用100\" class=\"headerlink\" title=\"防止CPU 占用100%\"></a>防止CPU 占用100%</h3><h4 id=\"sleep-实现\"><a href=\"#sleep-实现\" class=\"headerlink\" title=\"sleep 实现\"></a>sleep 实现</h4><p>在没有利用cpu来计算时，不要让while(rue)空转浪费cpu,这时可以使用yield或sleep来让出cpu的使用权给其他程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>可以用wait或条件变量达到类似的效果</li>\n<li>不同的是，后两种都需要加锁I并且需要相应的唤醒操作,一般适用于要进行同步的场景</li>\n<li>sleep适用于无需锁同步的场景</li>\n</ul>\n<h2 id=\"join方法详解\"><a href=\"#join方法详解\" class=\"headerlink\" title=\"join方法详解\"></a>join方法详解</h2><p>下面的代码执行，打印 r 是什么？</p>\n<h3 id=\"案例1-——为什么需要join\"><a href=\"#案例1-——为什么需要join\" class=\"headerlink\" title=\"案例1 ——为什么需要join\"></a>案例1 ——为什么需要join</h3><p>未调用Join方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>主线程</code>在<code>t1线程</code>还没有给<code>r</code>赋值时就已经支持完毕了。打印的r任然是初始值。</p>\n<img src=\"/post/2023/thread/5cce206b-f24c-4489-afda-57b5a3102172.png\" class=\"\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li><p>因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出<code> r=10</code></p>\n</li>\n<li><p>而主线程一开始就要打印 r 的结果，所以只能打印出 <code>r=0</code></p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>用 sleep 行不行？为什么？</p>\n<p>因为不知道t1程何时运行完毕,所以主线程等待的时间不好设置。</p>\n</li>\n<li><p>用 join，加在 t1.start() 之后即可</p>\n<p><code>join()</code>的作用是：**”等待该线程终止”**，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是 <strong>在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行</strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//等待t1线程执行结束</span></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/86d6badd-f76b-4152-8044-bef85f333017.png\" class=\"\">\n\n<h3 id=\"案例2-——同步\"><a href=\"#案例2-——同步\" class=\"headerlink\" title=\"案例2 ——同步\"></a>案例2 ——同步</h3><p>以调用方角度来讲，如果</p>\n<ul>\n<li><p>需要等待结果返回，才能继续运行就是同步</p>\n</li>\n<li><p>不需要等待结果返回，就能继续运行就是异步</p>\n</li>\n</ul>\n<h4 id=\"等待多个结果\"><a href=\"#等待多个结果\" class=\"headerlink\" title=\"等待多个结果\"></a>等待多个结果</h4><p>问，下面代码 cost 大约多少秒？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join 等待多个结果</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;join begin ......&quot;</span>);</span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 join end ......&quot;</span>);</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t2 join end ......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 结果为:&#123;&#125;,t2 结果为:&#123;&#125;,总耗时：&#123;&#125;&quot;</span>, r1, r2, end - start);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析如下</p>\n<ul>\n<li><p>第一个 join：等待 t1 时, t2 并没有停止, 而在运行</p>\n</li>\n<li><p>第二个 join：1s 后, 执行到此, t2 也运行了 1s, 因此也只需再等待 1s</p>\n</li>\n</ul>\n<img src=\"/post/2023/thread/9372a527-1cf5-4699-9271-f9724c815f24.png\" class=\"\">\n\n<p>如果颠倒两个 join 呢？</p>\n<img src=\"/post/2023/thread/b94de8b0-5933-49dc-b0ff-a29a03280074.png\" class=\"\">\n\n<h3 id=\"案例3-——有时效的等待\"><a href=\"#案例3-——有时效的等待\" class=\"headerlink\" title=\"案例3 ——有时效的等待\"></a>案例3 ——有时效的等待</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join 有时效的等待</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//睡2000毫秒</span></span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;join begin ......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//只等待1500毫秒</span></span><br><span class=\"line\">        t1.join(<span class=\"number\">1500</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 join end ......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 结果为:&#123;&#125;,总耗时：&#123;&#125;&quot;</span>, r1,  end - start);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/44fc6f61-2e64-414e-be76-0486d270b52b.png\" class=\"\">\n\n<p>如果线程提前结束，join方法设置的时效就会失效，会以线程实际执行的时间为准。</p>\n<h2 id=\"interrupt方法详解\"><a href=\"#interrupt方法详解\" class=\"headerlink\" title=\"interrupt方法详解\"></a>interrupt方法详解</h2><h3 id=\"打断阻塞状态的线程-：\"><a href=\"#打断阻塞状态的线程-：\" class=\"headerlink\" title=\"打断阻塞状态的线程  ：\"></a>打断阻塞状态的线程  ：</h3><p>打断 sleep， wait ， join 的线程 ，这几个方法都会让线程进入阻塞状态</p>\n<p>打断 sleep 的线程, 会清空打断状态，以 sleep 为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断阻塞线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt... &quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打断阻塞状态线程后，打断标记会被设置未false。</p>\n<img src=\"/post/2023/thread/d9550ede-fad3-4675-8791-3a1237fab0de.png\" class=\"\">\n\n<h3 id=\"打断正常状态的线程-：\"><a href=\"#打断正常状态的线程-：\" class=\"headerlink\" title=\"打断正常状态的线程  ：\"></a>打断正常状态的线程  ：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断正常状态线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt... &quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>t1线程被打断之后，任然在运行。</p>\n<img src=\"/post/2023/thread/c2203c1e-3091-4832-8061-8ba8bc3b24d1.png\" class=\"\">\n\n<p>如果想让被打断的线程停止运行。可以利用被打断线程的打断标记来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断正常状态线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">isInterrupt</span> <span class=\"operator\">=</span> Thread.currentThread().isInterrupted();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isInterrupt) &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;被打断了，退出循环&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt... &quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<img src=\"/post/2023/thread/70691192-ef7e-43b6-b365-d139f036e188.png\" class=\"\">\n\n<h3 id=\"打断park线程\"><a href=\"#打断park线程\" class=\"headerlink\" title=\"打断park线程:\"></a>打断park线程:</h3><p>打断 park 线程, 不会清空打断状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断park线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;park...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/f5e5190c-2ca0-4467-8618-c9084b18b26f.png\" class=\"\">\n\n<p>值得注意的是park 线程打断后再次park，线程不会再次停下来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断park线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;park...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class=\"line\">            <span class=\"comment\">//再次park</span></span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png\" class=\"\">\n\n<p>需要使用Thread 的静态方法Thread.interrupted() 来查看当前的是否被打断，会重置打断状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断park线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;park...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.interrupted());</span><br><span class=\"line\">            <span class=\"comment\">//再次park</span></span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png\" class=\"\">\n\n<h2 id=\"模式之两阶段终止\"><a href=\"#模式之两阶段终止\" class=\"headerlink\" title=\"模式之两阶段终止\"></a>模式之两阶段终止</h2><h3 id=\"两阶段终止模式（Two-Phase-Termination）\"><a href=\"#两阶段终止模式（Two-Phase-Termination）\" class=\"headerlink\" title=\"两阶段终止模式（Two Phase Termination）\"></a>两阶段终止模式（Two Phase Termination）</h3><p>在一个线程T1中如何“优雅”终止线程T2?</p>\n<p>这里的【优雅】指的是给T2一个料理后事的机会。</p>\n<h4 id=\"错误思路\"><a href=\"#错误思路\" class=\"headerlink\" title=\"错误思路\"></a>错误思路</h4><ul>\n<li>使用线程对象的stop()方法停止线程:<ul>\n<li>stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁</li>\n</ul>\n</li>\n<li>使用System.exit(int)方法停止线程</li>\n<li>目的仅是停止一个线程，但这种做法会让整个程序都停止</li>\n</ul>\n<h3 id=\"案例-3\"><a href=\"#案例-3\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>有一个计算监控系统，每隔2s记录一下系统状态，有一个停止功能，可以停止整个监控程序，整个流程如下：</p>\n<img src=\"/post/2023/thread/e1c2fc78-6f75-4049-8631-1e2bf400e92b.png\" class=\"\" title=\"两阶段终止模式\">\n\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用interrupt实现两阶段停止。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoPhaseTermination</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Thread monitor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动监控</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        monitor = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">Thread</span> <span class=\"variable\">currentThread</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentThread.isInterrupted())&#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;料理后事。。。。。。&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>); <span class=\"comment\">//打断阻塞的线程  会抛异常，打断标记会被重置</span></span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;执行监控记录。。。。。。&quot;</span>); <span class=\"comment\">//打断正常的线程</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    <span class=\"comment\">//再次打断,重新设置打断标记</span></span><br><span class=\"line\">                    currentThread.interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        monitor.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止监控</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        monitor.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">TwoPhaseTermination</span> <span class=\"variable\">termination</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TwoPhaseTermination</span>();</span><br><span class=\"line\">        termination.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">        termination.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png\" class=\"\">\n\n\n\n<h2 id=\"不推荐的方法\"><a href=\"#不推荐的方法\" class=\"headerlink\" title=\"不推荐的方法\"></a>不推荐的方法</h2><p>还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>静态</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stop()</td>\n<td></td>\n<td>停止线程运行</td>\n</tr>\n<tr>\n<td>suspend()</td>\n<td></td>\n<td>挂起（暂停）线程运行</td>\n</tr>\n<tr>\n<td>resume()</td>\n<td></td>\n<td>恢复线程运行</td>\n</tr>\n</tbody></table>\n<h2 id=\"主线程与守护线程\"><a href=\"#主线程与守护线程\" class=\"headerlink\" title=\"主线程与守护线程\"></a>主线程与守护线程</h2><p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 主线程与守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaemonThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到当<code>main线程</code>执行完毕后，<code>t1线程</code>任然在执行，<code>java 进程</code>尚未结束。</p>\n<img src=\"/post/2023/thread/0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png\" class=\"\">\n\n<p>通过<code>setDaemon(boolean)</code>方法让t1个线程变为守护线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 主线程与守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaemonThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置该线程为守护线程</span></span><br><span class=\"line\">        t1.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当<code>main线程</code>运行完毕，尽管<code>守护线程t1</code>的代码还没有执行完，也会强制结束。</p>\n<img src=\"/post/2023/thread/ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png\" class=\"\">\n\n<blockquote>\n<p><strong>注意</strong></p>\n<ul>\n<li><p>垃圾回收器线程就是一种守护线程</p>\n</li>\n<li><p>Tomcat 中的<code>Acceptor</code>和 <code>Poller </code>线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"五种状态\"><a href=\"#五种状态\" class=\"headerlink\" title=\"五种状态\"></a>五种状态</h2><p>这是从 <strong>操作系统</strong> 层面来描述的</p>\n<img src=\"/post/2023/thread/d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png\" class=\"\">\n\n<ul>\n<li><p>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</p>\n</li>\n<li><p>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p>\n</li>\n<li><p>【运行状态】指获取了 CPU 时间片运行中的状态</p>\n<ul>\n<li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li>\n</ul>\n</li>\n<li><p>【阻塞状态】</p>\n<ul>\n<li><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</p>\n</li>\n<li><p>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</p>\n</li>\n<li><p>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p>\n</li>\n</ul>\n</li>\n<li><p>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p>\n</li>\n</ul>\n<h2 id=\"六种状态\"><a href=\"#六种状态\" class=\"headerlink\" title=\"六种状态\"></a>六种状态</h2><p>这是从 <strong>Java API</strong> 层面来描述的</p>\n<p>根据 Thread.State 枚举，分为六种状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    NEW,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class=\"line\"><span class=\"comment\">     * state is executing in the Java virtual machine but it may</span></span><br><span class=\"line\"><span class=\"comment\">     * be waiting for other resources from the operating system</span></span><br><span class=\"line\"><span class=\"comment\">     * such as processor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNNABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class=\"line\"><span class=\"comment\">     * to enter a synchronized block/method or</span></span><br><span class=\"line\"><span class=\"comment\">     * reenter a synchronized block/method after calling</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    BLOCKED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread is in the waiting state due to calling one of the</span></span><br><span class=\"line\"><span class=\"comment\">     * following methods:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class=\"line\"><span class=\"comment\">     * perform a particular action.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * on an object is waiting for another thread to call</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class=\"line\"><span class=\"comment\">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * is waiting for a specified thread to terminate.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class=\"line\"><span class=\"comment\">     * the following methods with a specified positive waiting time:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TIMED_WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a terminated thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * The thread has completed execution.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TERMINATED;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/post/2023/thread/0827c261-3195-4bdc-9b78-e0c664037749.png\" class=\"\">\n\n<ul>\n<li><p>NEW 线程刚被创建，但是还没有调用 start() 方法</p>\n</li>\n<li><p>RUNNABLE 当调用了 start() 方法之后，注意，<strong>Java API</strong> 层面的 RUNNABLE 状态涵盖了 <strong>操作系统</strong> 层面的</p>\n<ul>\n<li>【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</li>\n</ul>\n</li>\n<li><p>BLOCKED ， WAITING ， TIMED_WAITING 都是 <strong>Java API</strong> 层面对【阻塞状态】的细分，后面会在状态转换一节详述</p>\n</li>\n<li><p>TERMINATED 当线程代码运行结束</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程的六种状态</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadState</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//new</span></span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;runing......&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//running</span></span><br><span class=\"line\">           <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//terminted</span></span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;runing......&quot;</span>);</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//timed_waiting</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (ThreadState.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t4&quot;</span>);</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//waiting</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    t2.join();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t5&quot;</span>);</span><br><span class=\"line\">        t5.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//blocked</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (ThreadState.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t6&quot;</span>);</span><br><span class=\"line\">        t6.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 线程的状态： &#123;&#125;&quot;</span>,t1.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t2 线程的状态： &#123;&#125;&quot;</span>,t2.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t3 线程的状态： &#123;&#125;&quot;</span>,t3.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t4 线程的状态： &#123;&#125;&quot;</span>,t4.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t5 线程的状态： &#123;&#125;&quot;</span>,t5.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t6 线程的状态： &#123;&#125;&quot;</span>,t6.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png\" class=\"\">\n\n<h2 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>阅读华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案，提示</p>\n<ul>\n<li>参考图二，用两个线程（两个人协作）模拟烧水泡茶过程<ul>\n<li>文中办法乙、丙都相当于任务串行</li>\n<li>而图一相当于启动了 4 个线程，有点浪费</li>\n</ul>\n</li>\n<li>用 sleep(n) 模拟洗茶壶、洗水壶等耗费的时间</li>\n</ul>\n<p>附：华罗庚《统筹方法》</p>\n<blockquote>\n<p>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复</p>\n<p>杂的科研项目的组织与管理中，都可以应用。</p>\n<p>怎样应用呢？主要是把工序安排好。</p>\n<p>洗水壶 1分钟 </p>\n<p>烧开水 15分钟</p>\n<p>洗茶壶 1分钟</p>\n<p>洗茶杯 2分钟</p>\n<p>拿茶叶 1分钟</p>\n<p>泡茶</p>\n<p>比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么</p>\n<p>办？</p>\n<ul>\n<li>办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开</li>\n</ul>\n<p>了，泡茶喝。</p>\n<ul>\n<li>办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡</li>\n</ul>\n<p>茶喝。</p>\n<ul>\n<li>办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡</li>\n</ul>\n<p>茶喝。</p>\n<p>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。</p>\n<p>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。</p>\n<p>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而</p>\n<p>这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：</p>\n<img src=\"/post/2023/thread/image-20200806070304756.png\" class=\"\" title=\"image-20200806070304756\">\n\n<p>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作</p>\n<p>效率，应当主要抓烧开水这个环节，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大</p>\n<p>可利用“等水开”的时间来做。</p>\n<p>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但</p>\n<p>稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这</p>\n<p>么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱</p>\n<p>备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关</p>\n<p>键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。</p>\n<p>洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：</p>\n<img src=\"/post/2023/thread/image-20200806070323056.png\" class=\"\" title=\"image-20200806070323056\">\n\n<p>看来这是“小题大做”，但在工作环节太多的时候，这样做就非常必要了。</p>\n<p>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接</p>\n<p>解决所有问题，但是，我们利用这种方法来考虑问题，也是不无裨益的。</p>\n</blockquote>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 洗好水壶，灌上凉水，放在火上,在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MakingTea</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * t2 等待 t1 执行完毕 进行后续任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;洗好水壶，灌上凉水，放在火上&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;烧开水&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;洗茶壶、洗茶杯、拿茶叶&quot;</span>);</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//等待t1线程执行完毕</span></span><br><span class=\"line\">                t1.join();</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;等水开了，泡茶喝。&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        t1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200806072602725.png\" class=\"\" title=\"image-20200806072602725\">\n\n<h2 id=\"本章小结\"><a href=\"#本章小结\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h2><p>本章的重点在于掌握</p>\n<ul>\n<li><p>线程创建</p>\n</li>\n<li><p>线程重要 api，如 start，run，sleep，join，interrupt 等</p>\n</li>\n<li><p>线程状态</p>\n</li>\n<li><p>应用方面</p>\n<ul>\n<li><p>异步调用：主线程执行期间，其它线程异步执行耗时操作</p>\n</li>\n<li><p>提高效率：并行计算，缩短运算时间</p>\n</li>\n<li><p>同步等待：join</p>\n</li>\n<li><p>统筹规划：合理使用线程，得到最优效果</p>\n</li>\n</ul>\n</li>\n<li><p>原理方面</p>\n<ul>\n<li><p>线程运行流程：栈、栈帧、上下文切换、程序计数器</p>\n</li>\n<li><p>Thread 两种创建方式 的源码</p>\n</li>\n</ul>\n</li>\n<li><p>模式方面</p>\n<ul>\n<li>终止模式之两阶段终止</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"共享模型之管程\"><a href=\"#共享模型之管程\" class=\"headerlink\" title=\"共享模型之管程\"></a>共享模型之管程</h1><h2 id=\"共享带来的问题\"><a href=\"#共享带来的问题\" class=\"headerlink\" title=\"共享带来的问题\"></a>共享带来的问题</h2><h3 id=\"小故事\"><a href=\"#小故事\" class=\"headerlink\" title=\"小故事\"></a>小故事</h3><ul>\n<li><p>老王（操作系统）有一个功能强大的算盘（CPU），现在想把它租出去，赚一点外快</p>\n<img src=\"/post/2023/thread/image-20200806080136510.png\" class=\"\" title=\"image-20200806080136510\">\n</li>\n<li><p>小南、小女（线程）来使用这个算盘来进行一些计算，并按照时间给老王支付费用</p>\n</li>\n<li><p>但小南不能一天24小时使用算盘，他经常要小憩一会（sleep），又或是去吃饭上厕所（阻塞 io 操作），有时还需要一根烟，没烟时思路全无（wait）这些情况统称为（阻塞）</p>\n<img src=\"/post/2023/thread/image-20200806080218070.png\" class=\"\" title=\"image-20200806080218070\">\n</li>\n<li><p>在这些时候，算盘没利用起来（不能收钱了），老王觉得有点不划算</p>\n</li>\n<li><p>另外，小女也想用用算盘，如果总是小南占着算盘，让小女觉得不公平</p>\n</li>\n<li><p>于是，老王灵机一动，想了个办法 [ 让他们每人用一会，轮流使用算盘 ]</p>\n</li>\n<li><p>这样，当小南阻塞的时候，算盘可以分给小女使用，不会浪费，反之亦然</p>\n</li>\n<li><p>最近执行的计算比较复杂，需要存储一些中间结果，而学生们的脑容量（工作内存）不够，所以老王申请了</p>\n<p>一个笔记本（主存），把一些中间结果先记在本上。</p>\n</li>\n<li><p>计算流程是这样的：</p>\n<img src=\"/post/2023/thread/image-20200806080338819.png\" class=\"\" title=\"image-20200806080338819\">\n</li>\n<li><p>但是由于分时系统，有一天还是发生了事故</p>\n</li>\n<li><p>小南刚读取了初始值 0 做了个 +1 运算，还没来得及写回结果</p>\n</li>\n<li><p>老王说 [ 小南，你的时间到了，该别人了，记住结果走吧 ]，于是小南念叨着 [ 结果是1，结果是1…] 不甘心地到一边待着去了（上下文切换）</p>\n</li>\n<li><p>老王说 [ 小女，该你了 ]，小女看到了笔记本上还写着 0 做了一个 -1 运算，将结果 -1 写入笔记本</p>\n</li>\n<li><p>这时小女的时间也用完了，老王又叫醒了小南：[小南，把你上次的题目算完吧]，小南将他脑海中的结果 1 写入了笔记本</p>\n<img src=\"/post/2023/thread/image-20200806080425078.png\" class=\"\" title=\"image-20200806080425078\">\n</li>\n<li><p>小南和小女都觉得自己没做错，但笔记本里的结果是 1 而不是 0</p>\n</li>\n</ul>\n<h3 id=\"Java的体现\"><a href=\"#Java的体现\" class=\"headerlink\" title=\"Java的体现\"></a>Java的体现</h3><p>两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享变量问题</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedVariables</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当两个线程操作同一个共享变量时，会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                counter++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                counter--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;counter:&#123;&#125;&quot;</span>, counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        t1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理解，必须从字节码来进行分析。</p>\n<p>例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic i // 获取静态变量i的值</span><br><span class=\"line\">iconst_1 // 准备常量1</span><br><span class=\"line\">iadd // 自增</span><br><span class=\"line\">putstatic i // 将修改后的值存入静态变量i</span><br></pre></td></tr></table></figure>\n\n<p>而对应 i– 也是类似:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic i // 获取静态变量i的值</span><br><span class=\"line\">iconst_1 // 准备常量1</span><br><span class=\"line\">isub // 自减</span><br><span class=\"line\">putstatic i // 将修改后的值存入静态变量i</span><br></pre></td></tr></table></figure>\n\n<p>而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：</p>\n<img src=\"/post/2023/thread/image-20200806081215362.png\" class=\"\" title=\"image-20200806081215362\">\n\n<p>如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：</p>\n<img src=\"/post/2023/thread/image-20200806081309415.png\" class=\"\" title=\"image-20200806081309415\">\n\n<p>但多线程下这 8 行代码可能交错运行：</p>\n<p>出现负数的情况</p>\n<img src=\"/post/2023/thread/image-20200806081339039.png\" class=\"\" title=\"image-20200806081339039\">\n\n<p>出现正数的情况：</p>\n<img src=\"/post/2023/thread/image-20200806081409317.png\" class=\"\" title=\"image-20200806081409317\">\n\n<h3 id=\"临界区-Critical-Section\"><a href=\"#临界区-Critical-Section\" class=\"headerlink\" title=\"临界区(Critical Section)\"></a>临界区(Critical Section)</h3><ul>\n<li><p>一个程序运行多个线程本身是没有问题的</p>\n</li>\n<li><p>问题出在多个线程访问<strong>共享资源</strong></p>\n<ul>\n<li><p>多个线程读<strong>共享资源</strong>其实也没有问题</p>\n</li>\n<li><p>在多个线程对<strong>共享资源</strong>读写操作时发生指令交错，就会出现问题</p>\n</li>\n</ul>\n</li>\n<li><p>一段代码块内如果存在对<strong>共享资源</strong>的多线程读写操作，称这段代码块为<strong>临界区</strong></p>\n</li>\n</ul>\n<p>例如，下面代码中的临界区:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> </span><br><span class=\"line\"><span class=\"comment\">// 临界区</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> counter++; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> </span><br><span class=\"line\"><span class=\"comment\">// 临界区</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> counter--; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"竞态条件-Race-Condition\"><a href=\"#竞态条件-Race-Condition\" class=\"headerlink\" title=\"竞态条件(Race Condition)\"></a>竞态条件(Race Condition)</h3><p>多个线程在临界区内执行，由于代码的<strong>执行序列不同</strong>而导致结果无法预测，称之为发生了<strong>竞态条件</strong></p>\n<h2 id=\"synchronized解决方案\"><a href=\"#synchronized解决方案\" class=\"headerlink\" title=\"synchronized解决方案\"></a>synchronized解决方案</h2><h3 id=\"应用之互斥\"><a href=\"#应用之互斥\" class=\"headerlink\" title=\"***** 应用之互斥\"></a>***** <strong>应用之互斥</strong></h3><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。</p>\n<ul>\n<li><p>阻塞式的解决方案：synchronized，Lock</p>\n</li>\n<li><p>非阻塞式的解决方案：原子变量</p>\n</li>\n</ul>\n<p>本次课使用阻塞式的解决方案：synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一</p>\n<p>时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁</p>\n<p>的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。</p>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：</p>\n<p>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</p>\n<p>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</p>\n</blockquote>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象) <span class=\"comment\">// 线程1， 线程2(blocked)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> 临界区</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享变量问题</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedVariables</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当两个线程操作同一个共享变量时，会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用synchronized解决</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    counter++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    counter--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;counter:&#123;&#125;&quot;</span>, counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        t2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用面向对象思想解决 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享变量问题,使用面向对象思想解决</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Room</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            counter--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCounter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Room</span> <span class=\"variable\">room</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Room</span>();</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                room.increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                room.decrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;counter:&#123;&#125;&quot;</span>, room.getCounter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/post/2023/thread/image-20200806093605366.png\" class=\"\" title=\"image-20200806093605366\">\n\n<p>你可以做这样的类比：</p>\n<ul>\n<li><p><code>synchronized(对象)</code> 中的对象，可以想象为一个房间（room），有唯一入口（门）房间只能一次进入一人进行计算，线程 t1，t2 想象成两个人</p>\n</li>\n<li><p>当线程 t1 执行到 <code>synchronized(room)</code> 时就好比 t1 进入了这个房间，并锁住了门拿走了钥匙，在门内执行<code>count++</code> 代码</p>\n</li>\n<li><p>这时候如果 t2 也运行到了 <code>synchronized(room)</code> 时，它发现门被锁住了，只能在门外等待，发生了上下文切换，阻塞住了</p>\n</li>\n<li><p>这中间即使 t1 的 cpu 时间片不幸用完，被踢出了门外（不要错误理解为锁住了对象就能一直执行下去哦），这时门还是锁住的，t1 仍拿着钥匙，t2 线程还在阻塞状态进不来，只有下次轮到 t1 自己再次获得时间片时才能开门进入。</p>\n</li>\n<li><p>当 t1 执行完 <code>synchronized&#123;&#125;</code> 块内的代码，这时候才会从 obj 房间出来并解开门上的锁，唤醒 t2 线程把钥匙给他。t2 线程这时才可以进入 obj 房间，锁住了门拿上钥匙，执行它的 <code>count--</code> 代码</p>\n</li>\n</ul>\n<p>用图来表示:</p>\n<img src=\"/post/2023/thread/image-20200806093649652.png\" class=\"\" title=\"image-20200806093649652\">\n\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p><code>synchronized</code> 实际是用<strong>对象锁</strong>保证了<strong>临界区内代码的原子性</strong>，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p>\n<p>为了加深理解，请思考下面的问题:</p>\n<ul>\n<li><p>如果把 synchronized(obj) 放在 for 循环的外面，如何理解？– 原子性</p>\n</li>\n<li><p>如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？– 锁对象</p>\n</li>\n<li><p>如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？– 锁对象</p>\n</li>\n</ul>\n<h2 id=\"方法上的synchronized\"><a href=\"#方法上的synchronized\" class=\"headerlink\" title=\"方法上的synchronized\"></a>方法上的synchronized</h2><p><code>synchronized</code>修饰成员方法，锁住的是当前类的<code>实例对象</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>synchronized</code>修饰静态方法，锁住的是当前类的<code>类对象</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Test.class) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不加synchronized的方法\"><a href=\"#不加synchronized的方法\" class=\"headerlink\" title=\"不加synchronized的方法\"></a>不加synchronized的方法</h3><p>不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队（好比翻窗户进去的）</p>\n<h3 id=\"所谓的“线程八锁”\"><a href=\"#所谓的“线程八锁”\" class=\"headerlink\" title=\"所谓的“线程八锁”\"></a>所谓的“线程八锁”</h3><p>其实就是考察 synchronized 锁住的是哪个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程 8锁</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;strong&gt; synchronized &lt;/strong&gt;实际是用</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;strong&gt; 对象锁 &lt;/strong&gt;保证了&lt;strong&gt;临界区内代码的原子性&lt;/strong&gt;，</span></span><br><span class=\"line\"><span class=\"comment\"> * 临界区内的代码对外是不可分割的，不会被线程切换所打断。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread8Locks</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        t1();</span></span><br><span class=\"line\"><span class=\"comment\">//        t2();</span></span><br><span class=\"line\"><span class=\"comment\">//        t3();</span></span><br><span class=\"line\"><span class=\"comment\">//        t4();</span></span><br><span class=\"line\"><span class=\"comment\">//        t5();</span></span><br><span class=\"line\"><span class=\"comment\">//        t6();</span></span><br><span class=\"line\"><span class=\"comment\">//        t7();</span></span><br><span class=\"line\"><span class=\"comment\">//        t8();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,会打印 1 ，2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,会打印 2 ，1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number1</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.a();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,会先睡1s后再打印 1 ，2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,会先打印 2 ，再睡1s后再打印 1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number2</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number2</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 因为c方法没有被锁住，所以不用遵守排队规则</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次t3线程都会打印 3</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t3,t2,会先睡1s后再打印 1 ，2  ; 3,1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t3,t1,会先打印 2 ，再睡1s后再打印 1; 2,3,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t3,再调用t1,t2,会先睡1s后再打印2 1; 3,1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t3,再调用t2,t1，会先打印 2 ，再睡1s后再打印 1; 3,2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number3</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number3</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.c();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t3&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number4</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number4</span>();</span><br><span class=\"line\">        <span class=\"type\">Number4</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number4</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n1.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            n2.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number5</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number5</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Number5.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Number6.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            Number6.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number7</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number7</span>();</span><br><span class=\"line\">        <span class=\"type\">Number7</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number7</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n1.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n2.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t8</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number8</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number8</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number2&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number3&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">c</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number4&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number5&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number5</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number6&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number6</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number7&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number7</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number8&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"变量的线程安全分析\"><a href=\"#变量的线程安全分析\" class=\"headerlink\" title=\"变量的线程安全分析\"></a>变量的线程安全分析</h2><h4 id=\"成员变量和静态变量是否线程安全？\"><a href=\"#成员变量和静态变量是否线程安全？\" class=\"headerlink\" title=\"成员变量和静态变量是否线程安全？\"></a>成员变量和静态变量是否线程安全？</h4><ul>\n<li><p>如果它们没有共享，则线程安全</p>\n</li>\n<li><p>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况</p>\n<ul>\n<li><p>如果只有读操作，则线程安全</p>\n</li>\n<li><p>如果有读写操作，则这段代码是临界区，需要考虑线程安全</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"局部变量是否线程安全？\"><a href=\"#局部变量是否线程安全？\" class=\"headerlink\" title=\"局部变量是否线程安全？\"></a>局部变量是否线程安全？</h4><ul>\n<li><p>局部变量是线程安全的</p>\n</li>\n<li><p>但局部变量引用的对象则未必</p>\n<ul>\n<li><p>如果该对象没有逃离方法的作用访问，它是线程安全的</p>\n</li>\n<li><p>如果该对象逃离方法的作用范围，需要考虑线程安全</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\ti++; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void test1();</span><br><span class=\"line\"> descriptor: ()V</span><br><span class=\"line\"> flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"> Code:</span><br><span class=\"line\"> stack=1, locals=1, args_size=0</span><br><span class=\"line\"> 0: bipush 10</span><br><span class=\"line\"> 2: istore_0</span><br><span class=\"line\"> 3: iinc 0, 1</span><br><span class=\"line\"> 6: return</span><br><span class=\"line\"> LineNumberTable:</span><br><span class=\"line\"> line 10: 0</span><br><span class=\"line\"> line 11: 3</span><br><span class=\"line\"> line 12: 6</span><br><span class=\"line\"> LocalVariableTable:</span><br><span class=\"line\"> Start Length Slot Name Signature</span><br><span class=\"line\"> 3 4 0 i I</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200806112353892.png\" class=\"\" title=\"image-20200806112353892\">\n\n\n\n<p><strong>局部变量的引用稍有不同,先看一个成员变量的例子</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ThreadUnsafe</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadUnsafe</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreadUnsafe</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2();</span><br><span class=\"line\">            method3();</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>其中一种情况是，如果线程2 还未 add，线程1 remove 就会报错：</strong></p>\n<img src=\"/post/2023/thread/image-20200806113017975.png\" class=\"\" title=\"image-20200806113017975\">\n\n<p>分析：</p>\n<ul>\n<li><p>无论哪个线程中的 method2 引用的都是同一个对象中的 list 成员变量</p>\n</li>\n<li><p>method3 与 method2 分析相同</p>\n<img src=\"/post/2023/thread/image-20200806113212737.png\" class=\"\" title=\"image-20200806113212737\">\n\n<p><strong>将 list 修改为局部变量</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Threadsafe</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Threadsafe</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Threadsafe</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2(list);</span><br><span class=\"line\">            method3(list);</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么就不会有上述问题了</p>\n<p>分析：</p>\n<ul>\n<li><p>list 是局部变量，每个线程调用时会创建其不同实例，没有共享</p>\n</li>\n<li><p>而 method2 的参数是从 method1 中传递过来的，与 method1 中引用同一个对象</p>\n</li>\n<li><p>method3 的参数分析与 method2 相同</p>\n</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200806113622053.png\" class=\"\" title=\"image-20200806113622053\">\n\n<p>方法访问修饰符带来的思考，如果把 method2 和 method3 的方法修改为 public 会不会代理线程安全问题？</p>\n<ul>\n<li><p>情况1：有其它线程调用 method2 和 method3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Threadsafe2</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Threadsafe2</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Threadsafe2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2(list);</span><br><span class=\"line\">            method3(list);</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他线程调用<code>method2</code>和<code>method3</code>方法和<code>method1</code>的list 肯定不是一个对象。所以线程安全</p>\n</li>\n<li><p>情况2：在 情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，即</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadSafeSubClass</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadSafeSubClass</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Threadsafe2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2(list);</span><br><span class=\"line\">            method3(list);</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSafeSubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Threadsafe2</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><img src=\"/post/2023/thread/image-20200806115634318.png\" class=\"\" title=\"image-20200806115634318\"></li>\n</ul>\n<p><strong>从这个例子可以看出 private 或 final 提供【安全】的意义所在，请体会开闭原则中的【闭】</strong></p>\n<h4 id=\"常见线程安全类\"><a href=\"#常见线程安全类\" class=\"headerlink\" title=\"常见线程安全类\"></a>常见线程安全类</h4><ul>\n<li><p>String</p>\n</li>\n<li><p>Integer</p>\n</li>\n<li><p>StringBuffffer</p>\n</li>\n<li><p>Random</p>\n</li>\n<li><p>Vector</p>\n</li>\n<li><p>Hashtable</p>\n</li>\n<li><p>JAVA.util.concurrent 包下的类</p>\n</li>\n</ul>\n<p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hashtable</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>);</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>它们的每个方法是原子的</p>\n</li>\n<li><p>但<strong>注意</strong>它们多个方法的组合不是原子的，见后面分析</p>\n</li>\n</ul>\n<h5 id=\"线程安全类方法的组合\"><a href=\"#线程安全类方法的组合\" class=\"headerlink\" title=\"线程安全类方法的组合\"></a>线程安全类方法的组合</h5><p>分析下面代码是否线程安全？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hashtable</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\"><span class=\"comment\">// 线程1，线程2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>( table.get(<span class=\"string\">&quot;key&quot;</span>) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200818213438504.png\" class=\"\" title=\"image-20200818213438504\">\n\n<h5 id=\"不可变类线程安全性\"><a href=\"#不可变类线程安全性\" class=\"headerlink\" title=\"不可变类线程安全性\"></a>不可变类线程安全性</h5><p>String、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的</p>\n<p>有同学或许有疑问，String 有 replace，substring 等方法【可以】改变值啊，那么这些方法又是如何保证线程安</p>\n<p>全的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Immutable</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">Immutable</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想增加一个增加的方法呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Immutable</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">Immutable</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Immutable <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> v)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Immutable</span>(<span class=\"built_in\">this</span>.value + v);</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"习题-1\"><a href=\"#习题-1\" class=\"headerlink\" title=\"习题\"></a>习题</h4><h5 id=\"卖票练习\"><a href=\"#卖票练习\" class=\"headerlink\" title=\"卖票练习\"></a>卖票练习</h5><p>测试下面代码是否存在线程安全问题，并尝试改正</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  线程安全测试  -   买票</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExerciseSell</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//模拟多人买票</span></span><br><span class=\"line\">        <span class=\"type\">TicketWindows</span> <span class=\"variable\">ticketWindows</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TicketWindows</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//统计卖出的票数</span></span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//所有线程的集合</span></span><br><span class=\"line\">        List&lt;Thread&gt; threadList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//卖出的票数</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">sell</span> <span class=\"operator\">=</span> ticketWindows.sell(randomAmount());</span><br><span class=\"line\">                list.add(sell);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">            threadList.add(thread);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待所有线程运行完毕</span></span><br><span class=\"line\">        threadList.forEach(thread -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                thread.join();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//统计卖出的票和剩余的票</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;余票：&#123;&#125;&quot;</span>, ticketWindows.getCount());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;已售：&#123;&#125;&quot;</span>, list.stream().mapToInt(Integer::intValue).sum());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Random 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成1到5的随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">randomAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(<span class=\"number\">5</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 卖票窗口类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TicketWindows</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TicketWindows</span><span class=\"params\">(<span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.count = count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sell</span><span class=\"params\">(<span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt;= amount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">                count -= amount;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"转账练习\"><a href=\"#转账练习\" class=\"headerlink\" title=\"转账练习\"></a>转账练习</h5><p>测试下面代码是否存在线程安全问题，并尝试改正</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程安全测试  -   转账</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceriseTransfer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">threadA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">                a.transfer(b, randomAmount());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">threadB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">                b.transfer(a, randomAmount());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        threadA.start();</span><br><span class=\"line\">        threadB.start();</span><br><span class=\"line\">        threadA.join();</span><br><span class=\"line\">        threadB.join();</span><br><span class=\"line\">        <span class=\"comment\">//转账后的金额</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;A 账户的金额：&#123;&#125;&quot;</span>, a.getMoney());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;B 账户的金额：&#123;&#125;&quot;</span>, b.getMoney());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Random 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成1到100的随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">randomAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(<span class=\"number\">100</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 账户类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Account</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> money;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(<span class=\"type\">int</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMoney</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMoney</span><span class=\"params\">(<span class=\"type\">int</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转账</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> account 账户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> money   金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Account account, <span class=\"type\">int</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Account.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.money &gt;= money) &#123;</span><br><span class=\"line\">                account.setMoney(account.getMoney() + money);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setMoney(<span class=\"built_in\">this</span>.getMoney() - money);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//    //多个对象使用synchronized 加锁 是两个不同的对象，所以无法实现加速的效果</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized  void transfer(Account account, int money) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          if (this.money &gt;= money) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//              account.setMoney(account.getMoney() + money);</span></span><br><span class=\"line\"><span class=\"comment\">//              this.setMoney(this.getMoney() - money);</span></span><br><span class=\"line\"><span class=\"comment\">//          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Monitor概念\"><a href=\"#Monitor概念\" class=\"headerlink\" title=\"Monitor概念\"></a>Monitor概念</h2><h3 id=\"Java对象头\"><a href=\"#Java对象头\" class=\"headerlink\" title=\"Java对象头\"></a>Java对象头</h3><p>以 32 位虚拟机为例</p>\n<h4 id=\"普通对象\"><a href=\"#普通对象\" class=\"headerlink\" title=\"普通对象\"></a>普通对象</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------</span>| </span><br><span class=\"line\">|<span class=\"params\"> \t\t\t\t\tObject Header (64 bits)\t\t \t\t       </span>|</span><br><span class=\"line\">|<span class=\"params\">------------------------------------</span>|-------------------------|<span class=\"params\"> </span></span><br><span class=\"line\"><span class=\"params\"></span>|\t\t <span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">32</span> bits) \t     |<span class=\"params\"> Klass Word (32 bits)    </span>|</span><br><span class=\"line\">|<span class=\"params\">------------------------------------</span>|-------------------------|<span class=\"params\"></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组对象\"><a href=\"#数组对象\" class=\"headerlink\" title=\"数组对象\"></a>数组对象</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">---------------------------------------------------------------------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\t\t\t\t\t\t\tObject Header (96 bits)\t\t\t \t\t\t\t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------</span>|-----------------------|<span class=\"params\">------------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\t\tMark Word(32bits) \t </span>| \t<span class=\"title class_\">Klass</span> <span class=\"title class_\">Word</span>(32bits)   |<span class=\"params\"> array length(32bits)   </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------</span>|-----------------------|<span class=\"params\">------------------------</span>|</span><br></pre></td></tr></table></figure>\n\n<p>其中 Mark Word 结构为</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t<span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">32</span> bits)\t\t\t\t\t|<span class=\"params\"> \t\tState\t\t </span>|</span><br><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t  <span class=\"symbol\">hashcode:</span><span class=\"number\">25</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">0</span> \t|<span class=\"params\"> 01\t</span>| \t\t<span class=\"title class_\">Normal</span>\t\t |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|-------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> thread:23 </span>| <span class=\"symbol\">epoch:</span><span class=\"number\">2</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">1</span> \t|<span class=\"params\"> 01\t</span>| \t\t<span class=\"title class_\">Biased</span>\t\t |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|-------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\tptr_to_lock_record:30 \t\t\t\t\t</span>| <span class=\"number\">00</span> \t|<span class=\"params\"> Lightweight Locked </span>|</span><br><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t<span class=\"symbol\">ptr_to_heavyweight_monitor:</span><span class=\"number\">30</span> \t\t\t|<span class=\"params\"> 10 \t</span>| <span class=\"title class_\">Heavyweight</span> <span class=\"title class_\">Locked</span> |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|-------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\t\t\t\t\t\t\t\t\t\t\t</span>| <span class=\"number\">11</span>\t|<span class=\"params\">\t Marked <span class=\"keyword\">for</span> GC\t </span>|</span><br><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>64 位虚拟机 Mark Word</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t<span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">64</span> bits) \t\t\t\t\t |<span class=\"params\"> \t\t  State  \t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|  <span class=\"symbol\">unused:</span><span class=\"number\">25</span> |<span class=\"params\"> hashcode:31 </span>| <span class=\"symbol\">unused:</span><span class=\"number\">1</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">0</span> |<span class=\"params\">  01  </span>| \t\t  <span class=\"title class_\">Normal</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\">  thread:54 </span>| <span class=\"symbol\">epoch:</span><span class=\"number\">2</span>     |<span class=\"params\"> unused:1 </span>| <span class=\"symbol\">age:</span><span class=\"number\">4</span> |<span class=\"params\"> biased_lock:1 </span>|  <span class=\"number\">01</span>  |<span class=\"params\"> \t\t  Biased\t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t<span class=\"symbol\">ptr_to_lock_record:</span><span class=\"number\">62</span>\t\t\t\t\t\t\t\t  |<span class=\"params\">  00  </span>| <span class=\"title class_\">Lightweight</span> <span class=\"title class_\">Locked</span> |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  </span>|  <span class=\"number\">10</span>  |<span class=\"params\"> Heavyweight Locked </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |<span class=\"params\">  11  </span>| \t<span class=\"title class_\">Marked</span> <span class=\"keyword\">for</span> <span class=\"variable constant_\">GC</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://stackoverflflow.com/questions/26357186/what-is-in-java-object-header\">https://stackoverflflow.com/questions/26357186/what-is-in-java-object-header</a></p>\n<h2 id=\"原理之Monitor-锁\"><a href=\"#原理之Monitor-锁\" class=\"headerlink\" title=\"原理之Monitor(锁)\"></a>原理之Monitor(锁)</h2><h3 id=\"Monitor原理\"><a href=\"#Monitor原理\" class=\"headerlink\" title=\"Monitor原理\"></a>Monitor原理</h3><p>Monitor 被翻译为<strong>监视器</strong>或<strong>管程</strong></p>\n<p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针Monitor 结构如下</p>\n<img src=\"/post/2023/thread/image-20200819064936628.png\" class=\"\" title=\"image-20200819064936628\">\n\n\n\n<ul>\n<li><p>刚开始 Monitor 中 Owner 为 null</p>\n</li>\n<li><p>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner</p>\n</li>\n<li><p>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED</p>\n</li>\n<li><p>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</p>\n</li>\n<li><p>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong></p>\n<p>synchronized 必须是进入同一个对象的 monitor 才有上述的效果</p>\n<p>不加 synchronized 的对象不会关联监视器，不遵从以上规则</p>\n</blockquote>\n<h2 id=\"原理之synchronized\"><a href=\"#原理之synchronized\" class=\"headerlink\" title=\"原理之synchronized\"></a>原理之synchronized</h2><p><strong>小故事</strong></p>\n<p>故事角色</p>\n<ul>\n<li><p>老王 - JVM</p>\n</li>\n<li><p>小南 - 线程</p>\n</li>\n<li><p>小女 - 线程</p>\n</li>\n<li><p>房间 - 对象</p>\n</li>\n<li><p>房间门上 - 防盗锁 - Monitor</p>\n</li>\n<li><p>房间门上 - 小南书包 - 轻量级锁</p>\n</li>\n<li><p>房间门上 - 刻上小南大名 - 偏向锁</p>\n</li>\n<li><p>批量重刻名 - 一个类的偏向锁撤销到达 20 阈值</p>\n</li>\n<li><p>不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向</p>\n</li>\n</ul>\n<p>小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，即使他离开了，别人也进不了门，他的工作就是安全的。</p>\n<p>但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女晚上用。每次上锁太麻烦了，有没有更简单的办法呢？</p>\n<p>小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是自己的，那么就在门外等，并通知对方下次用锁门的方式。</p>\n<p>后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍然觉得麻烦。</p>\n<p>于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦掉，升级为挂书包的方式。</p>\n<p>同学们都放假回老家了，小南就膨胀了，在 20 个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包。</p>\n<h3 id=\"synchronized原理\"><a href=\"#synchronized原理\" class=\"headerlink\" title=\"synchronized原理\"></a>synchronized原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\"> \tcounter++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应的字节码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(java.lang.String[])</span>;</span><br><span class=\"line\"> descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\"> flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"> Code:</span><br><span class=\"line\"> stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"number\">0</span>: getstatic #<span class=\"number\">2</span> <span class=\"comment\">// &lt;- lock引用 （synchronized开始）</span></span><br><span class=\"line\"> <span class=\"number\">3</span>: dup</span><br><span class=\"line\"> <span class=\"number\">4</span>: astore_1 <span class=\"comment\">// lock引用 -&gt; slot 1</span></span><br><span class=\"line\"> <span class=\"number\">5</span>: monitorenter <span class=\"comment\">// 将 lock对象 MarkWord 置为 Monitor 指针</span></span><br><span class=\"line\"> <span class=\"number\">6</span>: getstatic #<span class=\"number\">3</span> <span class=\"comment\">// &lt;- i</span></span><br><span class=\"line\"> <span class=\"number\">9</span>: iconst_1 <span class=\"comment\">// 准备常数 1</span></span><br><span class=\"line\"> <span class=\"number\">10</span>: iadd <span class=\"comment\">// +1</span></span><br><span class=\"line\"> <span class=\"number\">11</span>: putstatic #<span class=\"number\">3</span> <span class=\"comment\">// -&gt; i</span></span><br><span class=\"line\"> <span class=\"number\">14</span>: aload_1 <span class=\"comment\">// &lt;- lock引用</span></span><br><span class=\"line\"> <span class=\"number\">15</span>: monitorexit <span class=\"comment\">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class=\"line\"> <span class=\"number\">16</span>: goto <span class=\"number\">24</span></span><br><span class=\"line\"> <span class=\"number\">19</span>: astore_2 <span class=\"comment\">// e -&gt; slot 2 </span></span><br><span class=\"line\"> <span class=\"number\">20</span>: aload_1 <span class=\"comment\">// &lt;- lock引用</span></span><br><span class=\"line\"> <span class=\"number\">21</span>: monitorexit <span class=\"comment\">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class=\"line\"> <span class=\"number\">22</span>: aload_2 <span class=\"comment\">// &lt;- slot 2 (e)</span></span><br><span class=\"line\"> <span class=\"number\">23</span>: athrow <span class=\"comment\">// throw e</span></span><br><span class=\"line\"> <span class=\"number\">24</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"> Exception table:</span><br><span class=\"line\"> from to target type</span><br><span class=\"line\"> <span class=\"number\">6</span> <span class=\"number\">16</span> <span class=\"number\">19</span> any</span><br><span class=\"line\"> <span class=\"number\">19</span> <span class=\"number\">22</span> <span class=\"number\">19</span> any</span><br><span class=\"line\"> LineNumberTable:</span><br><span class=\"line\"> line <span class=\"number\">8</span>: <span class=\"number\">0</span></span><br><span class=\"line\"> line <span class=\"number\">9</span>: <span class=\"number\">6</span></span><br><span class=\"line\"> line <span class=\"number\">10</span>: <span class=\"number\">14</span></span><br><span class=\"line\"> line <span class=\"number\">11</span>: <span class=\"number\">24</span></span><br><span class=\"line\"> LocalVariableTable:</span><br><span class=\"line\"> Start Length Slot Name Signature</span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">25</span> <span class=\"number\">0</span> args [Ljava/lang/String;</span><br><span class=\"line\"> StackMapTable: number_of_entries = <span class=\"number\">2</span></span><br><span class=\"line\"> frame_type = <span class=\"number\">255</span> <span class=\"comment\">/* full_frame */</span></span><br><span class=\"line\"> offset_delta = <span class=\"number\">19</span></span><br><span class=\"line\"> locals = [ class <span class=\"string\">&quot;[Ljava/lang/String;&quot;</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">java</span>/lang/Object ]</span><br><span class=\"line\"> stack = [ <span class=\"keyword\">class</span> <span class=\"title class_\">java</span>/lang/Throwable ]</span><br><span class=\"line\"> frame_type = <span class=\"number\">250</span> <span class=\"comment\">/* chop */</span></span><br><span class=\"line\"> offset_delta = <span class=\"number\">4</span>              </span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong>注意</strong></p>\n<p>方法级别的 synchronized 不会在字节码指令中有所体现</p>\n</blockquote>\n<h3 id=\"synchronized原理进阶\"><a href=\"#synchronized原理进阶\" class=\"headerlink\" title=\"synchronized原理进阶\"></a>synchronized原理进阶</h3><h4 id=\"1-轻量级锁\"><a href=\"#1-轻量级锁\" class=\"headerlink\" title=\"1.轻量级锁\"></a>1.轻量级锁</h4><p>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。</p>\n<p>轻量级锁对使用者是透明的，即语法仍然是 <code>synchronized</code></p>\n<p>假设有两个方法同步块，利用同一个对象加锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 同步块 A</span></span><br><span class=\"line\"> method2();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 同步块 B</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200819065515918.png\" class=\"\" title=\"image-20200819065515918\">\n\n<ul>\n<li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录</p>\n<img src=\"/post/2023/thread/image-20200819065601188.png\" class=\"\" title=\"image-20200819065601188\">\n</li>\n<li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p>\n<img src=\"/post/2023/thread/image-20200819065708766.png\" class=\"\" title=\"image-20200819065708766\">\n</li>\n<li><p>如果 cas 失败，有两种情况</p>\n<ul>\n<li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li>\n<li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200819065835524.png\" class=\"\" title=\"image-20200819065835524\">\n</li>\n<li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</p>\n<img src=\"/post/2023/thread/image-20200819065931928.png\" class=\"\" title=\"image-20200819065931928\">\n</li>\n<li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p>\n<ul>\n<li>成功，则解锁成功</li>\n<li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-锁膨胀\"><a href=\"#2-锁膨胀\" class=\"headerlink\" title=\"2.锁膨胀\"></a>2.锁膨胀</h4><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 同步块</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</p>\n<img src=\"/post/2023/thread/image-20200819071006301.png\" class=\"\" title=\"image-20200819071006301\">\n</li>\n<li><p>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程</p>\n<ul>\n<li>即为 Object 对象申请 <code>Monitor</code> 锁，让 Object 指向重量级锁地址</li>\n<li>然后自己进入 <code>Monitor</code> 的 <code>EntryList</code> BLOCKED</li>\n</ul>\n</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200819071139042.png\" class=\"\" title=\"image-20200819071139042\">\n\n<ul>\n<li>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</li>\n</ul>\n<h4 id=\"3-自旋优化\"><a href=\"#3-自旋优化\" class=\"headerlink\" title=\"3.自旋优化\"></a>3.自旋优化</h4><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。</p>\n<p>自旋重试成功的情况</p>\n<table>\n<thead>\n<tr>\n<th><strong>线程</strong> <strong>1</strong> <strong>（****core 1</strong> <strong>上）</strong></th>\n<th><strong>对象</strong> <strong>Mark</strong></th>\n<th><strong>线程</strong> <strong>2</strong> <strong>（****core 2</strong> <strong>上）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-</td>\n<td>10（重量锁）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>访问同步块，获取 monitor</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>成功（加锁）</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td></td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>访问同步块，获取 monitor</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行完毕</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>成功（解锁）</td>\n<td>01（无锁）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>-</td>\n<td>10（重量锁）重量锁指针</td>\n<td>成功（加锁）</td>\n</tr>\n<tr>\n<td>-</td>\n<td>10（重量锁）重量锁指针</td>\n<td>执行同步块</td>\n</tr>\n<tr>\n<td>-</td>\n<td>10（重量锁）重量锁指针</td>\n<td>执行同步块</td>\n</tr>\n<tr>\n<td>…</td>\n<td>….</td>\n<td>….</td>\n</tr>\n</tbody></table>\n<p>自旋重试失败的情况</p>\n<table>\n<thead>\n<tr>\n<th><strong>线程</strong> <strong>1</strong> <strong>（****core 1</strong> <strong>上）</strong></th>\n<th><strong>对象</strong> <strong>Mark</strong></th>\n<th><strong>线程</strong> <strong>2</strong> <strong>（****core 2</strong> <strong>上）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-</td>\n<td>10（重量锁）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>访问同步块，获取 monitor</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>成功（加锁）</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td></td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>访问同步块，获取 monitor</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>阻塞</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</p>\n</li>\n<li><p>在 Java 6 之后<strong>自旋锁是自适应的</strong>，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</p>\n</li>\n<li><p>Java 7 之后不能控制是否开启自旋功能</p>\n</li>\n</ul>\n<h4 id=\"4-偏向锁\"><a href=\"#4-偏向锁\" class=\"headerlink\" title=\"4.偏向锁\"></a>4.偏向锁</h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。</p>\n<p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 同步块 A</span></span><br><span class=\"line\"> \tm2();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 同步块 B</span></span><br><span class=\"line\"> \tm3();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 同步块 C</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200819072452480.png\" class=\"\" title=\"image-20200819072452480\">\n\n<img src=\"/post/2023/thread/image-20200819072504262.png\" class=\"\" title=\"image-20200819072504262\">\n\n<p><strong>偏向状态</strong></p>\n<p>回忆一下对象头格式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t<span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">64</span> bits) \t\t\t\t\t |<span class=\"params\"> \t\t  State  \t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|  <span class=\"symbol\">unused:</span><span class=\"number\">25</span> |<span class=\"params\"> hashcode:31 </span>| <span class=\"symbol\">unused:</span><span class=\"number\">1</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">0</span> |<span class=\"params\">  01  </span>| \t\t  <span class=\"title class_\">Normal</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\">  thread:54 </span>| <span class=\"symbol\">epoch:</span><span class=\"number\">2</span>     |<span class=\"params\"> unused:1 </span>| <span class=\"symbol\">age:</span><span class=\"number\">4</span> |<span class=\"params\"> biased_lock:1 </span>|  <span class=\"number\">01</span>  |<span class=\"params\"> \t\t  Biased\t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t<span class=\"symbol\">ptr_to_lock_record:</span><span class=\"number\">62</span>\t\t\t\t\t\t\t\t  |<span class=\"params\">  00  </span>| <span class=\"title class_\">Lightweight</span> <span class=\"title class_\">Locked</span> |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  </span>|  <span class=\"number\">10</span>  |<span class=\"params\"> Heavyweight Locked </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |<span class=\"params\">  11  </span>| \t<span class=\"title class_\">Marked</span> <span class=\"keyword\">for</span> <span class=\"variable constant_\">GC</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br></pre></td></tr></table></figure>\n\n<p>一个对象创建时：</p>\n<ul>\n<li><p>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0</p>\n</li>\n<li><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数</p>\n<p> <code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟</p>\n</li>\n<li><p>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</p>\n</li>\n</ul>\n<p>1） 测试延迟特性</p>\n<p>2） 测试偏向锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用 jol 第三方工具来查看对象头信息（注意这里我扩展了 jol 让它输出更为简洁）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"> \t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t<span class=\"type\">ClassLayout</span> <span class=\"variable\">classLayout</span> <span class=\"operator\">=</span> ClassLayout.parseInstance(d);</span><br><span class=\"line\"> \t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\tlog.debug(<span class=\"string\">&quot;synchronized 前&quot;</span>);</span><br><span class=\"line\"> \t\tSystem.out.println(classLayout.toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(<span class=\"string\">&quot;synchronized 中&quot;</span>);</span><br><span class=\"line\"> \t\t\tSystem.out.println(classLayout.toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(<span class=\"string\">&quot;synchronized 后&quot;</span>);</span><br><span class=\"line\"> \t\tSystem.out.println(classLayout.toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11:08:58.117 c.TestBiased [t1] - synchronized 前</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 </span><br><span class=\"line\">11:08:58.121 c.TestBiased [t1] - synchronized 中</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101 </span><br><span class=\"line\">11:08:58.121 c.TestBiased [t1] - synchronized 后</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong></p>\n<p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p>\n</blockquote>\n<p>3）测试禁用</p>\n<p>在上面测试代码运行时在添加 VM 参数 <code>-XX:-UseBiasedLocking</code> 禁用偏向锁</p>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11:13:10.018 c.TestBiased [t1] - synchronized 前</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">11:13:10.021 c.TestBiased [t1] - synchronized 中</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00100000 00010100 11110011 10001000 </span><br><span class=\"line\">11:13:10.021 c.TestBiased [t1] - synchronized 后</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>测试 hashCode</li>\n</ol>\n<p>正常状态对象一开始是没有 hashCode 的，第一次调用才生成</p>\n<h4 id=\"撤销-调用对象hashCode\"><a href=\"#撤销-调用对象hashCode\" class=\"headerlink\" title=\"撤销 - 调用对象hashCode\"></a>撤销 <strong>-</strong> 调用对象hashCode</h4><p>调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销</p>\n<ul>\n<li><p>轻量级锁会在锁记录中记录 hashCode</p>\n</li>\n<li><p>重量级锁会在 Monitor 中记录 hashCode</p>\n</li>\n</ul>\n<p>在调用 hashCode 后使用偏向锁，记得去掉 <code>-XX:-UseBiasedLocking</code></p>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11:22:10.386 c.TestBiased [main] - 调用 hashCode:1778535015 </span><br><span class=\"line\">11:22:10.391 c.TestBiased [t1] - synchronized 前</span><br><span class=\"line\">00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001 </span><br><span class=\"line\">11:22:10.393 c.TestBiased [t1] - synchronized 中</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00100000 11000011 11110011 01101000 </span><br><span class=\"line\">11:22:10.393 c.TestBiased [t1] - synchronized 后</span><br><span class=\"line\">00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"撤销-其它线程使用对象\"><a href=\"#撤销-其它线程使用对象\" class=\"headerlink\" title=\"撤销 - 其它线程使用对象\"></a>撤销 <strong>-</strong> 其它线程使用对象</h4><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"> \t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (TestBiased.class) &#123;</span><br><span class=\"line\"> \t\t\tTestBiased.class.notify();</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"comment\">// 如果不用 wait/notify 使用 join 必须打开下面的注释</span></span><br><span class=\"line\"> \t\t<span class=\"comment\">// 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的</span></span><br><span class=\"line\">         <span class=\"comment\">/*try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         System.in.read();</span></span><br><span class=\"line\"><span class=\"comment\">         &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">         &#125;*/</span></span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"> \tt1.start();</span><br><span class=\"line\">    </span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (TestBiased.class) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> \t\t\t\tTestBiased.class.wait();</span><br><span class=\"line\"> \t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\"> \t\t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"> \tt2.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 </span><br><span class=\"line\"></span><br><span class=\"line\">[t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 </span><br><span class=\"line\"></span><br><span class=\"line\">[t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 </span><br><span class=\"line\"></span><br><span class=\"line\">[t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"撤销-调用-wait-notify\"><a href=\"#撤销-调用-wait-notify\" class=\"headerlink\" title=\"撤销 - 调用 wait&#x2F;notify\"></a>撤销 - 调用 wait&#x2F;notify</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"> \t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> \t\t\t\td.wait();</span><br><span class=\"line\"> \t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\"> \t\t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"> \tt1.start();</span><br><span class=\"line\">    </span><br><span class=\"line\"> \t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> \t\t\tThread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\"> \t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\"> \t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(<span class=\"string\">&quot;notify&quot;</span>);</span><br><span class=\"line\"> \t\t\td.notify();</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 </span><br><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00011111 10110011 11111000 00000101 </span><br><span class=\"line\">[t2] - notify </span><br><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00011100 11010100 00001101 11001010</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量重偏向\"><a href=\"#批量重偏向\" class=\"headerlink\" title=\"批量重偏向\"></a>批量重偏向</h4><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID</p>\n<p>当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"> \tVector&lt;Dog&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;&gt;();</span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t\t\tlist.add(d);</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (list) &#123;</span><br><span class=\"line\"> \t\t\tlist.notify();</span><br><span class=\"line\"> \t\t&#125; </span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"> \tt1.start();</span><br><span class=\"line\"> </span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (list) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tlist.wait();</span><br><span class=\"line\"> \t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(<span class=\"string\">&quot;===============&gt; &quot;</span>);</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\"> \t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"> \tt2.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[t1] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - ===============&gt; </span><br><span class=\"line\">[t2] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 0 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 1 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 2 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 3 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 4 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 5 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 5 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 6 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 6 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 7 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 7 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 8 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 8 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 9 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 9 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 10 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 11 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 12 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 12 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 13 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 13 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 14 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 14 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 15 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 15 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 16 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 16 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 17 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 17 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 18 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 18 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量撤销\"><a href=\"#批量撤销\" class=\"headerlink\" title=\"批量撤销\"></a>批量撤销</h4><p>当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> Thread t1, t2, t3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    Vector&lt;Dog&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">loopNumber</span> <span class=\"operator\">=</span> <span class=\"number\">39</span>;</span><br><span class=\"line\">    t1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">            list.add(d);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\">                log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LockSupport.unpark(t2);</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\">    t2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;===============&gt; &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\">            log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\">                log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LockSupport.unpark(t3);</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://github.com/farmerjohngit/myblog/issues/12\">https://github.com/farmerjohngit/myblog/issues/12</a></p>\n<p><a href=\"https://www.cnblogs.com/LemonFive/p/11246086.html\">https://www.cnblogs.com/LemonFive/p/11246086.html</a></p>\n<p><a href=\"https://www.cnblogs.com/LemonFive/p/11248248.html\">https://www.cnblogs.com/LemonFive/p/11248248.html</a></p>\n<p>偏向锁论文</p>\n</blockquote>\n<h4 id=\"5-锁消除\"><a href=\"#5-锁消除\" class=\"headerlink\" title=\"5.锁消除\"></a>5.锁消除</h4><p>锁消除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Fork(1)</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class=\"line\"><span class=\"meta\">@Warmup(iterations=3)</span></span><br><span class=\"line\"><span class=\"meta\">@Measurement(iterations=5)</span></span><br><span class=\"line\"><span class=\"meta\">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBenchmark</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        x++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (o) &#123;</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>java -jar benchmarks.jar</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark\t\t\tMode\t Samples \tScore\t Score error \tUnits </span><br><span class=\"line\">c.i.MyBenchmark.a \tavgt \t\t5 \t\t1.542 \t\t0.056 \t\tns/op </span><br><span class=\"line\">c.i.MyBenchmark.b \tavgt \t\t5 \t\t1.518 \t\t0.091 \t\tns/op</span><br></pre></td></tr></table></figure>\n\n<p><code>java -XX:-EliminateLocks -jar benchmarks.jar</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark \t\t\tMode \tSamples \tScore \tScore error \tUnits </span><br><span class=\"line\">c.i.MyBenchmark.a \tavgt \t\t5 \t\t1.507 \t\t0.108 \t\tns/op </span><br><span class=\"line\">c.i.MyBenchmark.b \tavgt \t\t5 \t\t16.976 \t\t1.572 \t\tns/op</span><br></pre></td></tr></table></figure>\n\n<p><strong>锁粗化</strong></p>\n<p>对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。</p>\n","cover":false,"excerpt":"","more":"<h1 id=\"并发编程\"><a href=\"#并发编程\" class=\"headerlink\" title=\"并发编程\"></a>并发编程</h1><h2 id=\"进程和线程\"><a href=\"#进程和线程\" class=\"headerlink\" title=\"进程和线程\"></a>进程和线程</h2><h3 id=\"进程\"><a href=\"#进程\" class=\"headerlink\" title=\"进程\"></a>进程</h3><ul>\n<li>程序由指令和数据组成，但这些指令要运行，数据要读写，就必须将指令加载至CPU,数据加载至内存。在指令运行过程中还需要用到磁盘、网络等设备。进程就是用来加载指令、管理内存、管理IO的</li>\n<li>当一个程序被运行，从磁盘加载这个程序的代码至内存，这时就开启了一个进程。</li>\n<li>进程就可以视为程序的一个实例。大部分程序可以同时运行多个实例进程(例如记事本、画图、 浏览器等)，也有的程序只能启动一个实例进程(例如网易云音乐、360 安全卫士等)</li>\n</ul>\n<h3 id=\"线程\"><a href=\"#线程\" class=\"headerlink\" title=\"线程\"></a>线程</h3><ul>\n<li><p>一个进程之内可以分为-到多个线程。</p>\n</li>\n<li><p>一个线程就是一个指令流，将指令流中的一条条指令以一定的顺序交给CPU执行。</p>\n</li>\n<li><p>Java中，线程作为最小调度单位，进程作为资源分配的最小单位。 在windows中进程是不活动的，只是作为线程的容器。</p>\n</li>\n</ul>\n<h3 id=\"二者对比\"><a href=\"#二者对比\" class=\"headerlink\" title=\"二者对比\"></a>二者对比</h3><ul>\n<li>进程基本上相互独立的，而线程存在于进程内，是进程的一个子集。</li>\n<li>进程拥有共享的资源，如内存空间等，供其内部的线程共享。</li>\n<li>进程间通信较为复杂<ul>\n<li>同一台计算机的进程通信称为IPC (Inter-process communication)。</li>\n<li>不同计算机之间的进程通信，需要通过网络，并遵守共同的协议,例如HTTP。</li>\n</ul>\n</li>\n<li>线程通信相对简单，因为它们共享进程内的内存，-个例子是多个线程可以访问同-一个共享变量。</li>\n<li>线程更轻量,线程上下文切换成本-般上要比进程上下文切换低。</li>\n</ul>\n<h2 id=\"并发与并行\"><a href=\"#并发与并行\" class=\"headerlink\" title=\"并发与并行\"></a>并发与并行</h2><p>单核cpu下，线程实际还是<code>串行执行</code>的。操作系统中有- -个组件叫做任务调度器，将cpu的时间片(windows’下时间片最小约为15毫秒)分给不同的线程使用，只是由于cpu在线程间(时间片很短)的切换<br>非常快，人类感觉是<code>同时运行的</code>。总结为- -句话就是:<code>微观串行，宏观并行，</code>一般会将这种<code>线程轮流使用</code>CPU 的做法称为并发，concurrent</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">CPU</th>\n<th align=\"center\">时间片1</th>\n<th align=\"center\">时间片2</th>\n<th align=\"center\">时间片3</th>\n<th align=\"center\">时间片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">core</td>\n<td align=\"center\">线程1</td>\n<td align=\"center\">线程2</td>\n<td align=\"center\">线程3</td>\n<td align=\"center\">线程4</td>\n</tr>\n</tbody></table>\n<img src=\"/post/2023/thread/453affe8-17db-40b3-940f-162e7597336e.png\" class=\"\">\n\n<p>多核CPU下，每个核（core）都可以调度运行线程，这时候线程可以是并行的。</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">CPU</th>\n<th align=\"center\">时间片1</th>\n<th align=\"center\">时间片2</th>\n<th align=\"center\">时间片3</th>\n<th align=\"center\">时间片4</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">core1</td>\n<td align=\"center\">线程1</td>\n<td align=\"center\">线程1</td>\n<td align=\"center\">线程3</td>\n<td align=\"center\">线程3</td>\n</tr>\n<tr>\n<td align=\"center\">core2</td>\n<td align=\"center\">线程2</td>\n<td align=\"center\">线程2</td>\n<td align=\"center\">线程4</td>\n<td align=\"center\">线程4</td>\n</tr>\n</tbody></table>\n<img src=\"/post/2023/thread/2ed065be-3fb7-4e67-b04e-b8e08980405d.png\" class=\"\">\n\n<p>引用Rob Pike的一段描述:</p>\n<ul>\n<li>并发(concurrent) 是同- -时间应对(dealing with) 多件事情的能力</li>\n<li>并行(parallel) 是同- -时间动手做(doing) 多件事情的能力</li>\n</ul>\n<p>例子</p>\n<ul>\n<li>家庭主妇做饭、打扫卫生、给孩子喂奶，她-一个人轮流交替做这多件事,这时就是并发</li>\n<li>家庭主妇雇了个保姆，她们一-起这些事，这时既有并发，也有并行(这时会产生竞争，例如锅只有一口,一个人用锅时，另一个人就得等待)</li>\n<li>雇了3个保姆，一个专做饭、一个专打扫卫生、一个专喂奶，互不干扰，这时是并行。</li>\n</ul>\n<h2 id=\"应用\"><a href=\"#应用\" class=\"headerlink\" title=\"应用\"></a>应用</h2><h3 id=\"应用之异步调用（案例）\"><a href=\"#应用之异步调用（案例）\" class=\"headerlink\" title=\"应用之异步调用（案例）\"></a>应用之异步调用（案例）</h3><p>从方法调用的角度来讲，如果需要等待结果返回，才能继续运行就是同步<br>，不需要等待结果返回，就能继续运行就是异步<br><strong>注意:同步在多线程中还有另外一层意思，是让多个线程步调一致</strong></p>\n<h4 id=\"设计\"><a href=\"#设计\" class=\"headerlink\" title=\"设计\"></a>设计</h4><p>多线程可以让方法执行变为异步的(即不要巴巴干等着)比如说读取磁盘文件时，假设读取操作花费了5秒<br>钟，如果没有线程调度机制，这5秒调用者什么都做不了,其代码都得暂停…</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.util;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">FileReaderUtil</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">read</span><span class=\"params\">(String path)</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;FileReader start .....&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">FileReader</span> <span class=\"variable\">reader</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">java</span>.io.FileReader(path);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;FileReader end .....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.n2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.constans.Constans;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.util.FileReaderUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileReader;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 同步等待</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Sync</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同步执行，必须等待fileReader方法执行完毕，才能进行其他操作</span></span><br><span class=\"line\">        FileReaderUtil.read(Constans.FILE_PATH);</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;do other things .....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.n2;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.constans.Constans;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.wry.concurrent.util.FileReaderUtil;</span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 异步不等待</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Async</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程去异步执行，不需要等待执行完毕，就可以执行其他操作</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            FileReaderUtil.read(Constans.FILE_PATH);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;do other things .....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h4><ul>\n<li>比如在项目中，视频文件需要转换格式等操作比较费时，这时开一个新线程处理视频转换，避免阻塞主线程。</li>\n<li>tomcat 的异步servlet也是类似的目的,让用户线程处理耗时较长的操作，避免阻塞tomcat的工作线程</li>\n<li>UI程序中，开线程进行其他操作，避免阻塞ui线程</li>\n</ul>\n<h3 id=\"应用之提高效率-案例\"><a href=\"#应用之提高效率-案例\" class=\"headerlink\" title=\"应用之提高效率(案例)\"></a>应用之提高效率(案例)</h3><p>充分利用多核cpu的优势，提高运行效率。想象下面的场景,执行3个计算,最后将计算结果汇总。</p>\n<blockquote>\n<p>计算\t1\t花费\t10ms<br>计算\t2\t花费\t11ms<br>计算\t3\t花费\t9 ms<br>汇总需要\t1 ms</p>\n</blockquote>\n<ul>\n<li>如果是串行执行，那么总共花费的时间是10 + 11 + 9 + 1&#x3D; 31ms</li>\n<li>但如果是四核cpu, 各个核心分别使用线程1执行计算1,线程2执行计算2,线程3执行计算3,那么3个线程是并行的，花费时间只取决于最长的那个线程运行的时间，即11ms最后加上汇总时间只会花费12ms</li>\n</ul>\n<p><strong>注意 : 需要在多核cpu才能提高效率，单核仍然时是轮流执行</strong></p>\n<h4 id=\"设计-1\"><a href=\"#设计-1\" class=\"headerlink\" title=\"设计\"></a>设计</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.n2.example;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.ExecutionException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.FutureTask;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 用同步和异步两中方式计算数据所消耗的时间</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/26</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBenchmark</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span>[] ARRAY = <span class=\"keyword\">new</span> <span class=\"title class_\">int</span>[<span class=\"number\">4000_000_00</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">static</span> &#123;</span><br><span class=\"line\">        Arrays.fill(ARRAY, <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 异步计算 ，创建4个线程去同步计算结果，最后合并计算结果</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">async</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = ARRAY;</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task1 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">0</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task2 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">1000_000_00</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task3 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">2000_000_00</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task4 = <span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;Integer&gt;(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000_000_00</span>; i++) &#123;</span><br><span class=\"line\">                sum += array[<span class=\"number\">3000_000_00</span> + i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task3).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task4).start();</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> task1.get() + task2.get() + task3.get() + task4.get();</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;异步计算：计算结果：&quot;</span> + i + <span class=\"string\">&quot;\\t总计耗时：&quot;</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 同步计算</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">sync</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        <span class=\"type\">int</span>[] array = ARRAY;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">sum</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4000_000_00</span>; i++) &#123;</span><br><span class=\"line\">            sum += array[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">Long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;同步计算：计算结果：&quot;</span> + sum + <span class=\"string\">&quot;\\t总计耗时：&quot;</span> + (end - start));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"comment\">//同步计算</span></span><br><span class=\"line\">        sync();</span><br><span class=\"line\">        <span class=\"comment\">//异步计算</span></span><br><span class=\"line\">        async();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/4f22eeff-a017-46f6-bf49-5359e570fe22.png\" class=\"\">\n\n<h4 id=\"结论-1\"><a href=\"#结论-1\" class=\"headerlink\" title=\"结论\"></a>结论</h4><p>1、单核cpu下，多线程不能实际提高程序运行效率,只是为了能够在不同的任务之间切换，不同线程轮流使用cpu,不至于一 个线程总占用cpu,别的线程没法干活<br>2、多核cpu可以并行跑多个线程，但能否提高程序运行效率还是要分情况的</p>\n<pre><code>-  有些任务,经过精心设计,将任务拆分，并行执行，当然可以提高程序的运行效率。但不是所有计算任务都能拆分(参考后文的[阿姆达尔定律] )\n-  也不是所有任务都需要拆分，任务的目的如果不同，谈拆分和效率没啥意义\n</code></pre>\n<p>3、 IO操作不占用cpu,只是我们一般拷贝文件使用的是[阻塞IO]，这时相当于线程虽然不用cpu,但需要一直等待IO结束，没能充分利用线程。所以才有后面的[非阻塞IO]和[异步I0]优化。</p>\n<h1 id=\"JAVA线程\"><a href=\"#JAVA线程\" class=\"headerlink\" title=\"JAVA线程\"></a>JAVA线程</h1><h2 id=\"创建和运行线程\"><a href=\"#创建和运行线程\" class=\"headerlink\" title=\"创建和运行线程\"></a>创建和运行线程</h2><p>java程序在启动的时候就会常见一个线程，main函数就是一个线程</p>\n<h3 id=\"1-直接使用Thread类\"><a href=\"#1-直接使用Thread类\" class=\"headerlink\" title=\"1.直接使用Thread类\"></a>1.直接使用Thread类</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程的第一种方式 Thread类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;runing....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"comment\">//设置线程名字</span></span><br><span class=\"line\">        thread.setName(<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;main....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用Runnable-配合Thread\"><a href=\"#2-使用Runnable-配合Thread\" class=\"headerlink\" title=\"2.使用Runnable 配合Thread\"></a>2.使用Runnable 配合Thread</h3><p>把<code>线程</code>和<code>任务</code> （要执行的代码） 分开</p>\n<ul>\n<li>Thread 代表线程</li>\n<li>Runnable 可运行的任务（线程要执行的代码）</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程的第二种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">runnable</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Runnable</span>() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//要执行的任务</span></span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;runing....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程(参数1：要执行的任务，参数2：线程的名字)</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(runnable,<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;main....&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>JAVA 8 以后可以使用<code>lambda</code>精简代码</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建任务</span></span><br><span class=\"line\">Runnable lombdaRunnable= () -&gt; &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;lombda runging......&quot;</span>); </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"comment\">//创建线程</span></span><br><span class=\"line\">Thread lombdaThead=<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(lombdaRunnable,<span class=\"string\">&quot;lombdaThead&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//启动线程</span></span><br><span class=\"line\">lombdaThead.start();</span><br></pre></td></tr></table></figure>\n\n<p>可以再次精简</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">    log.debug(<span class=\"string\">&quot;lombda runging......&quot;</span>);</span><br><span class=\"line\">&#125;, <span class=\"string\">&quot;lambdaThread&quot;</span>).start();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-FutureTask-配合Thread\"><a href=\"#3-FutureTask-配合Thread\" class=\"headerlink\" title=\"3.FutureTask 配合Thread\"></a>3.FutureTask 配合Thread</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程的第三种方式</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class=\"line\">        FutureTask&lt;Integer&gt; task=<span class=\"keyword\">new</span> <span class=\"title class_\">FutureTask</span>&lt;&gt;(<span class=\"keyword\">new</span> <span class=\"title class_\">Callable</span>&lt;Integer&gt;() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"keyword\">public</span> Integer <span class=\"title function_\">call</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;running.......&quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"number\">100</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//创建一个线程(参数1：要执行的任务，参数2：线程的名字)</span></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task,<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//获取task任务的返回值，主线程会等待task任务完成才会继续执行下边的操作</span></span><br><span class=\"line\">        <span class=\"type\">Integer</span> <span class=\"variable\">integer</span> <span class=\"operator\">=</span> task.get();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;task 的返回值：&#123;&#125;&quot;</span>,integer);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<h3 id=\"原理之Thread与Runnable的关系\"><a href=\"#原理之Thread与Runnable的关系\" class=\"headerlink\" title=\"原理之Thread与Runnable的关系\"></a>原理之Thread与Runnable的关系</h3><h4 id=\"Runnable源码\"><a href=\"#Runnable源码\" class=\"headerlink\" title=\"Runnable源码\"></a>Runnable源码</h4><p>创建线程传递Runnable任务，调用重载init方法。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Allocates a new &#123;<span class=\"doctag\">@code</span> Thread&#125; object. This constructor has the same</span></span><br><span class=\"line\"><span class=\"comment\"> * effect as &#123;<span class=\"doctag\">@linkplain</span> #Thread(ThreadGroup,Runnable,String) Thread&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * &#123;<span class=\"doctag\">@code</span> (null, target, name)&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  target</span></span><br><span class=\"line\"><span class=\"comment\"> *         the object whose &#123;<span class=\"doctag\">@code</span> run&#125; method is invoked when this thread</span></span><br><span class=\"line\"><span class=\"comment\"> *         is started. If &#123;<span class=\"doctag\">@code</span> null&#125;, this thread&#x27;s run method is invoked.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span>  name</span></span><br><span class=\"line\"><span class=\"comment\"> *         the name of the new thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"title function_\">Thread</span><span class=\"params\">(Runnable target, String name)</span> &#123;</span><br><span class=\"line\">    init(<span class=\"literal\">null</span>, target, name, <span class=\"number\">0</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>调用Init重载方法 </p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">    * Initializes a Thread with the current AccessControlContext.</span></span><br><span class=\"line\"><span class=\"comment\">    * <span class=\"doctag\">@see</span> #init(ThreadGroup,Runnable,String,long,AccessControlContext,boolean)</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">   <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span><br><span class=\"line\"><span class=\"params\">                     <span class=\"type\">long</span> stackSize)</span> &#123;</span><br><span class=\"line\">       init(g, target, name, stackSize, <span class=\"literal\">null</span>, <span class=\"literal\">true</span>);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n\n<p>找到核心init 方法，把<code>Runable任务</code>交给成员对象 <code>target</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initializes a Thread.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> g the Thread group</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> target the object whose run() method gets called</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> name the name of the new Thread</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> stackSize the desired stack size for the new thread, or</span></span><br><span class=\"line\"><span class=\"comment\"> *        zero to indicate that this parameter is to be ignored.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> acc the AccessControlContext to inherit, or</span></span><br><span class=\"line\"><span class=\"comment\"> *            AccessController.getContext() if null</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> inheritThreadLocals if &#123;<span class=\"doctag\">@code</span> true&#125;, inherit initial values for</span></span><br><span class=\"line\"><span class=\"comment\"> *            inheritable thread-locals from the constructing thread</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">init</span><span class=\"params\">(ThreadGroup g, Runnable target, String name,</span></span><br><span class=\"line\"><span class=\"params\">                  <span class=\"type\">long</span> stackSize, AccessControlContext acc,</span></span><br><span class=\"line\"><span class=\"params\">                  <span class=\"type\">boolean</span> inheritThreadLocals)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (name == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">NullPointerException</span>(<span class=\"string\">&quot;name cannot be null&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">Thread</span> <span class=\"variable\">parent</span> <span class=\"operator\">=</span> currentThread();</span><br><span class=\"line\">    <span class=\"type\">SecurityManager</span> <span class=\"variable\">security</span> <span class=\"operator\">=</span> System.getSecurityManager();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (g == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">/* Determine if it&#x27;s an applet or not */</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* If there is a security manager, ask the security manager</span></span><br><span class=\"line\"><span class=\"comment\">           what to do. */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (security != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            g = security.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">/* If the security doesn&#x27;t have a strong opinion of the matter</span></span><br><span class=\"line\"><span class=\"comment\">           use the parent thread group. */</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (g == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">            g = parent.getThreadGroup();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* checkAccess regardless of whether or not threadgroup is</span></span><br><span class=\"line\"><span class=\"comment\">       explicitly passed in. */</span></span><br><span class=\"line\">    g.checkAccess();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">     * Do we have the required permissions?</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (security != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (isCCLOverridden(getClass())) &#123;</span><br><span class=\"line\">            security.checkPermission(SUBCLASS_IMPLEMENTATION_PERMISSION);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    g.addUnstarted();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.group = g;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.daemon = parent.isDaemon();</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.priority = parent.getPriority();</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (security == <span class=\"literal\">null</span> || isCCLOverridden(parent.getClass()))</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.contextClassLoader = parent.getContextClassLoader();</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.contextClassLoader = parent.contextClassLoader;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.inheritedAccessControlContext =</span><br><span class=\"line\">            acc != <span class=\"literal\">null</span> ? acc : AccessController.getContext();</span><br><span class=\"line\">    <span class=\"comment\">//把Runable 任务保存在成员变量</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.target = target;</span><br><span class=\"line\">    setPriority(priority);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (inheritThreadLocals &amp;&amp; parent.inheritableThreadLocals != <span class=\"literal\">null</span>)</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.inheritableThreadLocals =</span><br><span class=\"line\">            ThreadLocal.createInheritedMap(parent.inheritableThreadLocals);</span><br><span class=\"line\">    <span class=\"comment\">/* Stash the specified stack size in case the VM cares */</span></span><br><span class=\"line\">    <span class=\"built_in\">this</span>.stackSize = stackSize;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/* Set thread ID */</span></span><br><span class=\"line\">    tid = nextThreadID();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Thread 运行方法,实际调用的还是Thread的<code>run方法</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * If this thread was constructed using a separate</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class=\"line\"><span class=\"comment\">   * otherwise, this method does nothing and returns.</span></span><br><span class=\"line\"><span class=\"comment\">   * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">   * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class=\"line\"><span class=\"comment\">   *</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span>     #start()</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span>     #stop()</span></span><br><span class=\"line\"><span class=\"comment\">   * <span class=\"doctag\">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"meta\">@Override</span></span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (target != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">          target.run();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>Thread是把线程和任务合并在了一起。Runnable 是把线程和任务分开。</li>\n<li>用Runnable 更容易与线程池等高级API 配合</li>\n<li>用Runnable 让任务类脱离了Thread 继承体系，更灵活。</li>\n</ul>\n<h2 id=\"多线程同时运行\"><a href=\"#多线程同时运行\" class=\"headerlink\" title=\"多线程同时运行\"></a>多线程同时运行</h2><h4 id=\"案例\"><a href=\"#案例\" class=\"headerlink\" title=\"案例\"></a>案例</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 演示多个线程并发交替执行</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MultiThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;running.....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;running.....&quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/e5b813b7-361c-42ec-9326-53b01a2872da.png\" class=\"\">\n\n<h4 id=\"小结-1\"><a href=\"#小结-1\" class=\"headerlink\" title=\"小结\"></a>小结</h4><ul>\n<li>多线程交替执行。</li>\n<li>谁先谁后，不由我们控制，由底层的任务调度器完成。</li>\n</ul>\n<h2 id=\"查看进程线程的方法\"><a href=\"#查看进程线程的方法\" class=\"headerlink\" title=\"查看进程线程的方法\"></a>查看进程线程的方法</h2><h3 id=\"windows\"><a href=\"#windows\" class=\"headerlink\" title=\"windows\"></a>windows</h3><ul>\n<li>任务管理器可以查看进程和线程数,也可以用来杀死进程</li>\n<li>tasklist查看进程</li>\n<li>taskkill杀死进程</li>\n</ul>\n<h3 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h3><ul>\n<li>ps -fe查看所有进程</li>\n<li>ps -fT -p <PID>查看某个进程(PID) 的所有线程，</li>\n<li>kill 死进程</li>\n<li>top按大写H切换是否显示线程</li>\n<li>top -H -p <PID>查看某个进程(PID) 的所有线程:</li>\n</ul>\n<h3 id=\"java\"><a href=\"#java\" class=\"headerlink\" title=\"java\"></a>java</h3><ul>\n<li>jps 命令查看所有的JAVA 进程</li>\n<li>jstack <PID> 车看某个Java 进程（PID）的所有线程状态</li>\n<li>jconsole 来查看某个Java 进程中线程的运行情况（图形界面）</li>\n</ul>\n<h3 id=\"jconsole远程监控配置\"><a href=\"#jconsole远程监控配置\" class=\"headerlink\" title=\"jconsole远程监控配置\"></a>jconsole远程监控配置</h3><p>需要以如下方式运行你的java类</p>\n<blockquote>\n<p>java -Djava. rmi. server . hostname&#x3D;’ ip地址’ -Dcom. sun. management . jmxremote -Dcom. sun. management . jmxremote. port&#x3D;i连接端口-Dcom . sun . management . jmxremote.ssl&#x3D;是否安全连接-Dcom. sun. management .jmxremote .authenticate&#x3D;是否认证    java类</p>\n</blockquote>\n<p>修改&#x2F;etc&#x2F;hosts文件将127.0.0.1 映射至主机名<br>如果要认证访问，还需要做如下步骤</p>\n<ul>\n<li>复制jmxremote.password 文件</li>\n<li>修改jmxremote.password和jmxremote.access文件的权限为600即文件所有者可读写</li>\n<li>连接时填入controlRole (用户名)，R&amp;D (密码)</li>\n</ul>\n<h2 id=\"原理之线程运行\"><a href=\"#原理之线程运行\" class=\"headerlink\" title=\"原理之线程运行\"></a>原理之线程运行</h2><h3 id=\"栈与栈帧\"><a href=\"#栈与栈帧\" class=\"headerlink\" title=\"栈与栈帧\"></a>栈与栈帧</h3><p>Java Virtual Machine Stacks （Java 虚拟机栈）</p>\n<p>我们都知道 JVM 中由堆、栈、方法区所组成，其中栈内存是给谁用的呢？其实就是线程，每个线程启动后，虚拟</p>\n<p>机就会为其分配一块栈内存。</p>\n<ul>\n<li><p>每个栈由多个栈帧（Frame）组成，对应着每次方法调用时所占用的内存</p>\n</li>\n<li><p>每个线程只能有一个活动栈帧，对应着当前正在执行的那个方法</p>\n</li>\n</ul>\n<h4 id=\"案例-1\"><a href=\"#案例-1\" class=\"headerlink\" title=\"案例\"></a>案例</h4><h5 id=\"单线程\"><a href=\"#单线程\" class=\"headerlink\" title=\"单线程\"></a>单线程</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 方法调用查看方法栈和栈帧</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Frames</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        method1(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> method2();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/cb65fed7-57dd-404b-b4f1-e365dbe83379.png\" class=\"\">\n\n<img src=\"/post/2023/thread/210feb5c-150a-43c3-8b3d-440f53e343d1.png\" class=\"\">\n\n<p>当方法运行到method2时可以看到栈里有三个栈帧</p>\n<img src=\"/post/2023/thread/52ebada9-ad0c-45fc-9482-40b961c20bbf.png\" class=\"\">\n\n<img src=\"/post/2023/thread/51e456b2-69ca-4039-8ec3-137a74a3e57d.png\" class=\"\">\n\n<p>当method2 方法执行完毕后栈中减少method2的栈帧</p>\n<img src=\"/post/2023/thread/7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png\" class=\"\">\n\n<img src=\"/post/2023/thread/ca324ec8-b1a0-419a-a962-640dae424e10.png\" class=\"\">\n\n<p>直到所有栈帧运行完毕，程序执行完毕。</p>\n<img src=\"/post/2023/thread/3ce55a24-aeb0-4055-9925-c69a63ec9053.png\" class=\"\">\n\n<h5 id=\"多线程\"><a href=\"#多线程\" class=\"headerlink\" title=\"多线程\"></a>多线程</h5><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 多线程情况下 方法调用查看方法栈和栈帧</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Frames2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"comment\">//t1线程调用</span></span><br><span class=\"line\">            method1(<span class=\"number\">20</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"comment\">//main线程调用</span></span><br><span class=\"line\">        method1(<span class=\"number\">10</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> x)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> <span class=\"variable\">y</span> <span class=\"operator\">=</span> x + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> method2();</span><br><span class=\"line\">        System.out.println(o);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> o;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在t1 线程出设置断点，切换断点模式。</p>\n<img src=\"/post/2023/thread/815e324a-777f-4b34-b590-acbb4c624cb0.png\" class=\"\">\n\n<p>切换不同的线程</p>\n<img src=\"/post/2023/thread/d05f71ef-bbbb-4b19-a804-6444a74de835.png\" class=\"\">\n\n<p>main线程的栈帧</p>\n<img src=\"/post/2023/thread/75442144-d101-4e7a-97ca-c833a2b827fe.png\" class=\"\">\n<p>t1线程的栈帧</p>\n<img src=\"/post/2023/thread/7bf73e18-7259-45da-93c5-a4183062572e.png\" class=\"\">\n\n<h4 id=\"小结-2\"><a href=\"#小结-2\" class=\"headerlink\" title=\"小结\"></a>小结</h4><p>线程的栈内存是相互独立的，每个线程有独立的栈内存，栈内存中有栈帧，每个线程相互独立，互不干扰。</p>\n<h3 id=\"线程上下文切换（Thread-Context-Switch）\"><a href=\"#线程上下文切换（Thread-Context-Switch）\" class=\"headerlink\" title=\"线程上下文切换（Thread Context Switch）\"></a>线程上下文切换（Thread Context Switch）</h3><p>因为以下一些原因导致 cpu 不再执行当前的线程，转而执行另一个线程的代码</p>\n<ul>\n<li><p>线程的 cpu 时间片用完</p>\n</li>\n<li><p>垃圾回收</p>\n</li>\n<li><p>有更高优先级的线程需要运行</p>\n</li>\n<li><p>线程自己调用了 sleep、yield、wait、join、park、synchronized、lock 等方法</p>\n</li>\n</ul>\n<p>当 Context Switch 发生时，<code>需要由操作系统保存当前线程的状态，并恢复另一个线程的状态</code>，Java 中对应的概念就是<code>程序计数器【寄存器】（Program Counter Register）</code>，它的作用是记住下一条 jvm 指令的执行地址，是线程私有的。</p>\n<ul>\n<li><p>状态包括程序计数器、虚拟机栈中每个栈帧的信息，如局部变量、操作数栈、返回地址等</p>\n</li>\n<li><p>Context Switch 频繁发生会影响性能</p>\n</li>\n</ul>\n<h2 id=\"常见方法\"><a href=\"#常见方法\" class=\"headerlink\" title=\"常见方法\"></a>常见方法</h2><table>\n<thead>\n<tr>\n<th align=\"left\"><strong>方法名</strong></th>\n<th align=\"center\"><strong>static</strong></th>\n<th align=\"left\"><strong>功能说明</strong></th>\n<th align=\"left\"><strong>注意</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">start()</td>\n<td align=\"center\"></td>\n<td align=\"left\">启动一个新线程，在新的线程运行 run 方法中的代码</td>\n<td align=\"left\">start 方法只是让线程进入就绪，里面代码不一定立刻运行（CPU 的时间片还没分给它）。每个线程对象的start方法只能调用一次，如果调用了多次会出现IllegalThreadStateExceptio</td>\n</tr>\n<tr>\n<td align=\"left\">run()</td>\n<td align=\"center\"></td>\n<td align=\"left\">新线程启动后会调用的方法</td>\n<td align=\"left\">如果在构造 Thread 对象时传递了 Runnable 参数，则线程启动后会调用 Runnable 中的 run 方法，否则默认不执行任何操作。但可以创建 Thread 的子类对象，来覆盖默认行为</td>\n</tr>\n<tr>\n<td align=\"left\">join()</td>\n<td align=\"center\"></td>\n<td align=\"left\">等待线程运行结束</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">join(long n)</td>\n<td align=\"center\"></td>\n<td align=\"left\">等待线程运行结束,最多等待n毫秒</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">getId()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程长整型的 id</td>\n<td align=\"left\">id唯一</td>\n</tr>\n<tr>\n<td align=\"left\">getName()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程名</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">setName(String)</td>\n<td align=\"center\"></td>\n<td align=\"left\">修改线程名</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">getPriority()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程优先级</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">setPriority(int)</td>\n<td align=\"center\"></td>\n<td align=\"left\">修改线程优先级</td>\n<td align=\"left\">java中规定线程优先级是1~10 的整数，较大的优先级能提高该线程被 CPU 调度的机率</td>\n</tr>\n<tr>\n<td align=\"left\">getState()</td>\n<td align=\"center\"></td>\n<td align=\"left\">获取线程状态</td>\n<td align=\"left\">Java 中线程状态是用 6 个 enum 表示，分别为：NEW, RUNNABLE, BLOCKED, WAITING,TIMED_WAITING, TERMINATED</td>\n</tr>\n<tr>\n<td align=\"left\">isInterrupted()</td>\n<td align=\"center\"></td>\n<td align=\"left\">判断是否被打断</td>\n<td align=\"left\">不会清除<code>打断标记</code></td>\n</tr>\n<tr>\n<td align=\"left\">isAlive()</td>\n<td align=\"center\"></td>\n<td align=\"left\">线程是否存活(还没有运行完毕）</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">interrupt()</td>\n<td align=\"center\"></td>\n<td align=\"left\">打断线程</td>\n<td align=\"left\">如果被打断线程正在 sleep，wait，join 会导致被打断的线程抛出 InterruptedException，并清除<code>打断标记</code>；如果打断的正在运行的线程，则会设置<code>打断标记</code>；park 的线程被打断，也会设置<code>打断标记</code></td>\n</tr>\n<tr>\n<td align=\"left\">interrupted()</td>\n<td align=\"center\">static</td>\n<td align=\"left\">判断当前线程是否被打断</td>\n<td align=\"left\">会清除<code>打断标记</code></td>\n</tr>\n<tr>\n<td align=\"left\">currentThread()</td>\n<td align=\"center\">static</td>\n<td align=\"left\">获取当前正在执行的线程</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">sleep(long n)</td>\n<td align=\"center\">static</td>\n<td align=\"left\">让当前执行的线程休眠n毫秒，休眠时让出 cpu 的时间片给其它线程</td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\">yield()</td>\n<td align=\"center\">static</td>\n<td align=\"left\">提示线程调度器让出当前线程对CPU的使用</td>\n<td align=\"left\">主要是为了测试和调试</td>\n</tr>\n</tbody></table>\n<h2 id=\"start方法详解\"><a href=\"#start方法详解\" class=\"headerlink\" title=\"start方法详解\"></a>start方法详解</h2><h3 id=\"调用run\"><a href=\"#调用run\" class=\"headerlink\" title=\"调用run\"></a>调用run</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程调用 run 方法</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(Thread.currentThread().getName());</span><br><span class=\"line\">            FileReaderUtil.read(Constants.FILE_PATH);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>发现执行的依然是main 线程，创建的线程并没有执行。</p>\n<img src=\"/post/2023/thread/4b22adcb-879c-493e-a6dc-7a50426a6db7.png\" class=\"\">\n\n<h3 id=\"调用start\"><a href=\"#调用start\" class=\"headerlink\" title=\"调用start\"></a>调用start</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 创建线程调用 run 方法</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">RunMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(Thread.currentThread().getName());</span><br><span class=\"line\">            FileReaderUtil.read(Constants.FILE_PATH);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"><span class=\"comment\">//        //调用run方法</span></span><br><span class=\"line\"><span class=\"comment\">//        t1.run();</span></span><br><span class=\"line\">        <span class=\"comment\">//调用start方法</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/6d0f8427-4068-4a15-a933-cd3f74e28dbf.png\" class=\"\">\n\n<h3 id=\"源码分析\"><a href=\"#源码分析\" class=\"headerlink\" title=\"源码分析\"></a>源码分析</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * If this thread was constructed using a separate</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;Runnable&lt;/code&gt; run object, then that</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;code&gt;Runnable&lt;/code&gt; object&#x27;s &lt;code&gt;run&lt;/code&gt; method is called;</span></span><br><span class=\"line\"><span class=\"comment\"> * otherwise, this method does nothing and returns.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * Subclasses of &lt;code&gt;Thread&lt;/code&gt; should override this method.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     #start()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     #stop()</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@see</span>     #Thread(ThreadGroup, Runnable, String)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target != <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">        target.run();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@FunctionalInterface</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title class_\">Runnable</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * When an object implementing interface &lt;code&gt;Runnable&lt;/code&gt; is used</span></span><br><span class=\"line\"><span class=\"comment\">     * to create a thread, starting the thread causes the object&#x27;s</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;code&gt;run&lt;/code&gt; method to be called in that separately executing</span></span><br><span class=\"line\"><span class=\"comment\">     * thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may</span></span><br><span class=\"line\"><span class=\"comment\">     * take any action whatsoever.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@see</span>     java.lang.Thread#run()</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title function_\">run</span><span class=\"params\">()</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>run() 方法是抽象方法等待子类去实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">     <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">      * This method is not invoked for the main method thread or &quot;system&quot;</span></span><br><span class=\"line\"><span class=\"comment\">      * group threads created/set up by the VM. Any new functionality added</span></span><br><span class=\"line\"><span class=\"comment\">      * to this method in the future may have to also be added to the VM.</span></span><br><span class=\"line\"><span class=\"comment\">      *</span></span><br><span class=\"line\"><span class=\"comment\">      * A zero status value corresponds to state &quot;NEW&quot;.</span></span><br><span class=\"line\"><span class=\"comment\">      */</span></span><br><span class=\"line\">     <span class=\"keyword\">if</span> (threadStatus != <span class=\"number\">0</span>)</span><br><span class=\"line\">         <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> <span class=\"title class_\">IllegalThreadStateException</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">/* Notify the group that this thread is about to be started</span></span><br><span class=\"line\"><span class=\"comment\">      * so that it can be added to the group&#x27;s list of threads</span></span><br><span class=\"line\"><span class=\"comment\">      * and the group&#x27;s unstarted count can be decremented. */</span></span><br><span class=\"line\">     group.add(<span class=\"built_in\">this</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"type\">boolean</span> <span class=\"variable\">started</span> <span class=\"operator\">=</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">     <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">         start0();</span><br><span class=\"line\">         started = <span class=\"literal\">true</span>;</span><br><span class=\"line\">     &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">         <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">             <span class=\"keyword\">if</span> (!started) &#123;</span><br><span class=\"line\">                 group.threadStartFailed(<span class=\"built_in\">this</span>);</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">         &#125; <span class=\"keyword\">catch</span> (Throwable ignore) &#123;</span><br><span class=\"line\">             <span class=\"comment\">/* do nothing. If start0 threw a Throwable then</span></span><br><span class=\"line\"><span class=\"comment\">               it will be passed up the call stack */</span></span><br><span class=\"line\">         &#125;</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">native</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start0</span><span class=\"params\">()</span>;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>在<code>start()</code>方法中调用 <code>start0()</code>方法正式启动线程。而<code>start0()</code>是用<code>native</code>修饰得方法，底层调用操作系统的方法实现线程调用。</p>\n<h3 id=\"小结-3\"><a href=\"#小结-3\" class=\"headerlink\" title=\"小结\"></a>小结</h3><ul>\n<li><p>直接调用 run 是在主线程中执行了 run，没有启动新的线程</p>\n</li>\n<li><p>使用 start 是启动新的线程，通过新的线程间接执行 run 中的代码</p>\n</li>\n</ul>\n<h3 id=\"查看线程状态\"><a href=\"#查看线程状态\" class=\"headerlink\" title=\"查看线程状态\"></a>查看线程状态</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 查看线程运行状态</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadStatus</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            System.out.println(<span class=\"string\">&quot;running.....&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//获取运行前的状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行前的状态:&quot;</span>+t1.getState());</span><br><span class=\"line\">        <span class=\"comment\">//调用start方法</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//获取运行后的状态</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;运行后的状态:&quot;</span>+t1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/3a071edf-6ded-487b-abbb-d016a9fe6864.png\" class=\"\">\n\n<h3 id=\"多次调用start方法会抛java-lang-IllegalThreadStateException\"><a href=\"#多次调用start方法会抛java-lang-IllegalThreadStateException\" class=\"headerlink\" title=\"多次调用start方法会抛java.lang.IllegalThreadStateException\"></a>多次调用start方法会抛java.lang.IllegalThreadStateException</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//调用start方法</span></span><br><span class=\"line\">t1.start();</span><br><span class=\"line\">t1.start();</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/feed6992-8dff-450c-9010-e2f46caf6243.png\" class=\"\">\n\n\n\n<h2 id=\"sleep-与-yield\"><a href=\"#sleep-与-yield\" class=\"headerlink\" title=\"sleep 与 yield\"></a><strong>sleep</strong> <strong>与</strong> <strong>yield</strong></h2><h3 id=\"sleep\"><a href=\"#sleep\" class=\"headerlink\" title=\"sleep\"></a>sleep</h3><ol>\n<li>调用 sleep 会让当前线程从 <em>Running</em> 进入 <em>Timed Waiting</em> 状态（阻塞）</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  sleep</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 线程的状态：&#123;&#125;&quot;</span>,t1.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 线程的状态：&#123;&#125;&quot;</span>,t1.getState());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200822234416578.png\" class=\"\" title=\"image-20200822234416578\">\n\n<ol start=\"2\">\n<li>其它线程可以使用 interrupt 方法打断正在睡眠的线程，这时 sleep 方法会抛出 InterruptedException</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 interrupt 打断</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;enter sleep...... &quot;</span>);</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">                log.debug(<span class=\"string\">&quot;wake up...... &quot;</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt...... &quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/81a4db1a-c8d1-47f7-a955-39db726f5173.png\" class=\"\">\n\n<ol start=\"3\">\n<li><p>睡眠结束后的线程未必会立刻得到执行</p>\n</li>\n<li><p>建议用 TimeUnit 的 sleep 代替 Thread 的 sleep 来获得更好的可读性</p>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 使用TimeUnit</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;start ......&quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;end ......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/f78c9ec4-6379-48de-b2e6-f529bb063540.png\" class=\"\">\n\n\n\n<h3 id=\"yield\"><a href=\"#yield\" class=\"headerlink\" title=\"yield\"></a>yield</h3><ol>\n<li><p>调用 yield 会让当前线程从 <em>Running</em> 进入 <em>Runnable</em> 就绪状态，然后调度执行其它线程</p>\n</li>\n<li><p>具体的实现依赖于操作系统的任务调度器</p>\n</li>\n</ol>\n<h2 id=\"线程优先级\"><a href=\"#线程优先级\" class=\"headerlink\" title=\"线程优先级\"></a>线程优先级</h2><p>线程优先级会提示（hint）调度器优先调度该线程，但它仅仅是一个提示，调度器可以忽略它</p>\n<p>如果 cpu 比较忙，那么优先级高的线程会获得更多的时间片，但 cpu 闲时，优先级几乎没作用</p>\n<h3 id=\"未设置优先级和调用yield\"><a href=\"#未设置优先级和调用yield\" class=\"headerlink\" title=\"未设置优先级和调用yield\"></a>未设置优先级和调用yield</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置线程的线程优先级</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPriority</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">// Thread.yield();</span></span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;        ----&gt;2 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>t1线程和t2 线程打印的数值相差不大。</p>\n<img src=\"/post/2023/thread/683dd209-d862-46f9-878f-b9e8f4c2db3b.png\" class=\"\">\n\n<h3 id=\"调用yield\"><a href=\"#调用yield\" class=\"headerlink\" title=\"调用yield\"></a>调用yield</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置线程的线程优先级</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPriority</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                <span class=\"comment\">//调用yield,把CPU执行执行时间交给其他线程</span></span><br><span class=\"line\">                Thread.<span class=\"keyword\">yield</span>();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;        ----&gt;2 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>t1线程打印的数值远远大于 t2 线程打印的数值。</p>\n<img src=\"/post/2023/thread/d37e0c1b-1e69-4360-937a-edf5296f47ce.png\" class=\"\">\n\n<h3 id=\"设置优先级\"><a href=\"#设置优先级\" class=\"headerlink\" title=\"设置优先级\"></a>设置优先级</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 设置线程的线程优先级</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/27</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadPriority</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task1</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;----&gt;1 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Runnable</span> <span class=\"variable\">task2</span> <span class=\"operator\">=</span> () -&gt; &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> <span class=\"variable\">count</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (; ; ) &#123;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">&quot;        ----&gt;2 &quot;</span> + count++);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task1, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(task2, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//t1线程设置最小的线程优先级</span></span><br><span class=\"line\">        t1.setPriority(Thread.MIN_PRIORITY);</span><br><span class=\"line\">        <span class=\"comment\">//t2线程设置最大的线程优先级</span></span><br><span class=\"line\">        t2.setPriority(Thread.MAX_PRIORITY);</span><br><span class=\"line\">        </span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>t2线程打印的数值远远大于 t1 线程打印的数值。</p>\n<img src=\"/post/2023/thread/2feee3db-6b39-4e1a-9098-1a5f966742f7.png\" class=\"\">\n\n<h2 id=\"案例-2\"><a href=\"#案例-2\" class=\"headerlink\" title=\"案例\"></a>案例</h2><h3 id=\"防止CPU-占用100\"><a href=\"#防止CPU-占用100\" class=\"headerlink\" title=\"防止CPU 占用100%\"></a>防止CPU 占用100%</h3><h4 id=\"sleep-实现\"><a href=\"#sleep-实现\" class=\"headerlink\" title=\"sleep 实现\"></a>sleep 实现</h4><p>在没有利用cpu来计算时，不要让while(rue)空转浪费cpu,这时可以使用yield或sleep来让出cpu的使用权给其他程序</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;   </span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>可以用wait或条件变量达到类似的效果</li>\n<li>不同的是，后两种都需要加锁I并且需要相应的唤醒操作,一般适用于要进行同步的场景</li>\n<li>sleep适用于无需锁同步的场景</li>\n</ul>\n<h2 id=\"join方法详解\"><a href=\"#join方法详解\" class=\"headerlink\" title=\"join方法详解\"></a>join方法详解</h2><p>下面的代码执行，打印 r 是什么？</p>\n<h3 id=\"案例1-——为什么需要join\"><a href=\"#案例1-——为什么需要join\" class=\"headerlink\" title=\"案例1 ——为什么需要join\"></a>案例1 ——为什么需要join</h3><p>未调用Join方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可以看到<code>主线程</code>在<code>t1线程</code>还没有给<code>r</code>赋值时就已经支持完毕了。打印的r任然是初始值。</p>\n<img src=\"/post/2023/thread/5cce206b-f24c-4489-afda-57b5a3102172.png\" class=\"\">\n\n<h3 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h3><ul>\n<li><p>因为主线程和线程 t1 是并行执行的，t1 线程需要 1 秒之后才能算出<code> r=10</code></p>\n</li>\n<li><p>而主线程一开始就要打印 r 的结果，所以只能打印出 <code>r=0</code></p>\n</li>\n</ul>\n<h3 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h3><ul>\n<li><p>用 sleep 行不行？为什么？</p>\n<p>因为不知道t1程何时运行完毕,所以主线程等待的时间不好设置。</p>\n</li>\n<li><p>用 join，加在 t1.start() 之后即可</p>\n<p><code>join()</code>的作用是：**”等待该线程终止”**，这里需要理解的就是该线程是指的主线程等待子线程的终止。也就是 <strong>在子线程调用了join()方法后面的代码，只有等到子线程结束了才能执行</strong>。</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        <span class=\"comment\">//等待t1线程执行结束</span></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/86d6badd-f76b-4152-8044-bef85f333017.png\" class=\"\">\n\n<h3 id=\"案例2-——同步\"><a href=\"#案例2-——同步\" class=\"headerlink\" title=\"案例2 ——同步\"></a>案例2 ——同步</h3><p>以调用方角度来讲，如果</p>\n<ul>\n<li><p>需要等待结果返回，才能继续运行就是同步</p>\n</li>\n<li><p>不需要等待结果返回，就能继续运行就是异步</p>\n</li>\n</ul>\n<h4 id=\"等待多个结果\"><a href=\"#等待多个结果\" class=\"headerlink\" title=\"等待多个结果\"></a>等待多个结果</h4><p>问，下面代码 cost 大约多少秒？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join 等待多个结果</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r2</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r2 = <span class=\"number\">20</span>;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;join begin ......&quot;</span>);</span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 join end ......&quot;</span>);</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t2 join end ......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 结果为:&#123;&#125;,t2 结果为:&#123;&#125;,总耗时：&#123;&#125;&quot;</span>, r1, r2, end - start);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>分析如下</p>\n<ul>\n<li><p>第一个 join：等待 t1 时, t2 并没有停止, 而在运行</p>\n</li>\n<li><p>第二个 join：1s 后, 执行到此, t2 也运行了 1s, 因此也只需再等待 1s</p>\n</li>\n</ul>\n<img src=\"/post/2023/thread/9372a527-1cf5-4699-9271-f9724c815f24.png\" class=\"\">\n\n<p>如果颠倒两个 join 呢？</p>\n<img src=\"/post/2023/thread/b94de8b0-5933-49dc-b0ff-a29a03280074.png\" class=\"\">\n\n<h3 id=\"案例3-——有时效的等待\"><a href=\"#案例3-——有时效的等待\" class=\"headerlink\" title=\"案例3 ——有时效的等待\"></a>案例3 ——有时效的等待</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法 join 有时效的等待</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">JoinMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">r1</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始......&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"comment\">//睡2000毫秒</span></span><br><span class=\"line\">                TimeUnit.MILLISECONDS.sleep(<span class=\"number\">2000</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">            r1 = <span class=\"number\">10</span>;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//启动线程</span></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//开始时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">start</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;join begin ......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//只等待1500毫秒</span></span><br><span class=\"line\">        t1.join(<span class=\"number\">1500</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 join end ......&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">//结束时间</span></span><br><span class=\"line\">        <span class=\"type\">long</span> <span class=\"variable\">end</span> <span class=\"operator\">=</span> System.currentTimeMillis();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 结果为:&#123;&#125;,总耗时：&#123;&#125;&quot;</span>, r1,  end - start);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;结束......&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/44fc6f61-2e64-414e-be76-0486d270b52b.png\" class=\"\">\n\n<p>如果线程提前结束，join方法设置的时效就会失效，会以线程实际执行的时间为准。</p>\n<h2 id=\"interrupt方法详解\"><a href=\"#interrupt方法详解\" class=\"headerlink\" title=\"interrupt方法详解\"></a>interrupt方法详解</h2><h3 id=\"打断阻塞状态的线程-：\"><a href=\"#打断阻塞状态的线程-：\" class=\"headerlink\" title=\"打断阻塞状态的线程  ：\"></a>打断阻塞状态的线程  ：</h3><p>打断 sleep， wait ， join 的线程 ，这几个方法都会让线程进入阻塞状态</p>\n<p>打断 sleep 的线程, 会清空打断状态，以 sleep 为例</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断阻塞线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">2</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt... &quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>打断阻塞状态线程后，打断标记会被设置未false。</p>\n<img src=\"/post/2023/thread/d9550ede-fad3-4675-8791-3a1237fab0de.png\" class=\"\">\n\n<h3 id=\"打断正常状态的线程-：\"><a href=\"#打断正常状态的线程-：\" class=\"headerlink\" title=\"打断正常状态的线程  ：\"></a>打断正常状态的线程  ：</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断正常状态线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">               </span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt... &quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>t1线程被打断之后，任然在运行。</p>\n<img src=\"/post/2023/thread/c2203c1e-3091-4832-8061-8ba8bc3b24d1.png\" class=\"\">\n\n<p>如果想让被打断的线程停止运行。可以利用被打断线程的打断标记来实现。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断正常状态线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">boolean</span> <span class=\"variable\">isInterrupt</span> <span class=\"operator\">=</span> Thread.currentThread().isInterrupted();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (isInterrupt) &#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;被打断了，退出循环&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;interrupt... &quot;</span>);</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot; 打断状态: &#123;&#125;&quot;</span>, t1.isInterrupted());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<img src=\"/post/2023/thread/70691192-ef7e-43b6-b365-d139f036e188.png\" class=\"\">\n\n<h3 id=\"打断park线程\"><a href=\"#打断park线程\" class=\"headerlink\" title=\"打断park线程:\"></a>打断park线程:</h3><p>打断 park 线程, 不会清空打断状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断park线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;park...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/f5e5190c-2ca0-4467-8618-c9084b18b26f.png\" class=\"\">\n\n<p>值得注意的是park 线程打断后再次park，线程不会再次停下来。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断park线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;park...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.currentThread().isInterrupted());</span><br><span class=\"line\">            <span class=\"comment\">//再次park</span></span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png\" class=\"\">\n\n<p>需要使用Thread 的静态方法Thread.interrupted() 来查看当前的是否被打断，会重置打断状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.TimeUnit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.locks.LockSupport;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 测试线程的常用方法  interrupt 打断park线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">InterruptMethod3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;park...&quot;</span>);</span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;打断状态：&#123;&#125;&quot;</span>, Thread.interrupted());</span><br><span class=\"line\">            <span class=\"comment\">//再次park</span></span><br><span class=\"line\">            LockSupport.park();</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;unpark...&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        t1.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png\" class=\"\">\n\n<h2 id=\"模式之两阶段终止\"><a href=\"#模式之两阶段终止\" class=\"headerlink\" title=\"模式之两阶段终止\"></a>模式之两阶段终止</h2><h3 id=\"两阶段终止模式（Two-Phase-Termination）\"><a href=\"#两阶段终止模式（Two-Phase-Termination）\" class=\"headerlink\" title=\"两阶段终止模式（Two Phase Termination）\"></a>两阶段终止模式（Two Phase Termination）</h3><p>在一个线程T1中如何“优雅”终止线程T2?</p>\n<p>这里的【优雅】指的是给T2一个料理后事的机会。</p>\n<h4 id=\"错误思路\"><a href=\"#错误思路\" class=\"headerlink\" title=\"错误思路\"></a>错误思路</h4><ul>\n<li>使用线程对象的stop()方法停止线程:<ul>\n<li>stop 方法会真正杀死线程，如果这时线程锁住了共享资源，那么当它被杀死后就再也没有机会释放锁，其它线程将永远无法获取锁</li>\n</ul>\n</li>\n<li>使用System.exit(int)方法停止线程</li>\n<li>目的仅是停止一个线程，但这种做法会让整个程序都停止</li>\n</ul>\n<h3 id=\"案例-3\"><a href=\"#案例-3\" class=\"headerlink\" title=\"案例\"></a>案例</h3><p>有一个计算监控系统，每隔2s记录一下系统状态，有一个停止功能，可以停止整个监控程序，整个流程如下：</p>\n<img src=\"/post/2023/thread/e1c2fc78-6f75-4049-8631-1e2bf400e92b.png\" class=\"\" title=\"两阶段终止模式\">\n\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 利用interrupt实现两阶段停止。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">TwoPhaseTermination</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Thread monitor;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 启动监控</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">start</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        monitor = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"type\">Thread</span> <span class=\"variable\">currentThread</span> <span class=\"operator\">=</span> Thread.currentThread();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (currentThread.isInterrupted())&#123;</span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;料理后事。。。。。。&quot;</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>); <span class=\"comment\">//打断阻塞的线程  会抛异常，打断标记会被重置</span></span><br><span class=\"line\">                    log.debug(<span class=\"string\">&quot;执行监控记录。。。。。。&quot;</span>); <span class=\"comment\">//打断正常的线程</span></span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                    <span class=\"comment\">//再次打断,重新设置打断标记</span></span><br><span class=\"line\">                    currentThread.interrupt();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        monitor.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 停止监控</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">stop</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        monitor.interrupt();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">TwoPhaseTermination</span> <span class=\"variable\">termination</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TwoPhaseTermination</span>();</span><br><span class=\"line\">        termination.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">3</span>);</span><br><span class=\"line\">        termination.stop();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png\" class=\"\">\n\n\n\n<h2 id=\"不推荐的方法\"><a href=\"#不推荐的方法\" class=\"headerlink\" title=\"不推荐的方法\"></a>不推荐的方法</h2><p>还有一些不推荐使用的方法，这些方法已过时，容易破坏同步代码块，造成线程死锁。</p>\n<table>\n<thead>\n<tr>\n<th>方法名</th>\n<th>静态</th>\n<th>功能说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>stop()</td>\n<td></td>\n<td>停止线程运行</td>\n</tr>\n<tr>\n<td>suspend()</td>\n<td></td>\n<td>挂起（暂停）线程运行</td>\n</tr>\n<tr>\n<td>resume()</td>\n<td></td>\n<td>恢复线程运行</td>\n</tr>\n</tbody></table>\n<h2 id=\"主线程与守护线程\"><a href=\"#主线程与守护线程\" class=\"headerlink\" title=\"主线程与守护线程\"></a>主线程与守护线程</h2><p>默认情况下，Java 进程需要等待所有线程都运行结束，才会结束。有一种特殊的线程叫做守护线程，只要其它非守护线程运行结束了，即使守护线程的代码没有执行完，也会强制结束。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 主线程与守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaemonThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>可以看到当<code>main线程</code>执行完毕后，<code>t1线程</code>任然在执行，<code>java 进程</code>尚未结束。</p>\n<img src=\"/post/2023/thread/0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png\" class=\"\">\n\n<p>通过<code>setDaemon(boolean)</code>方法让t1个线程变为守护线程。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 主线程与守护线程</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">DaemonThread</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;开始运行...&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Thread.currentThread().isInterrupted()) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 设置该线程为守护线程</span></span><br><span class=\"line\">        t1.setDaemon(<span class=\"literal\">true</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\">        TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;运行结束...&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当<code>main线程</code>运行完毕，尽管<code>守护线程t1</code>的代码还没有执行完，也会强制结束。</p>\n<img src=\"/post/2023/thread/ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png\" class=\"\">\n\n<blockquote>\n<p><strong>注意</strong></p>\n<ul>\n<li><p>垃圾回收器线程就是一种守护线程</p>\n</li>\n<li><p>Tomcat 中的<code>Acceptor</code>和 <code>Poller </code>线程都是守护线程，所以 Tomcat 接收到 shutdown 命令后，不会等待它们处理完当前请求。</p>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"五种状态\"><a href=\"#五种状态\" class=\"headerlink\" title=\"五种状态\"></a>五种状态</h2><p>这是从 <strong>操作系统</strong> 层面来描述的</p>\n<img src=\"/post/2023/thread/d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png\" class=\"\">\n\n<ul>\n<li><p>【初始状态】仅是在语言层面创建了线程对象，还未与操作系统线程关联</p>\n</li>\n<li><p>【可运行状态】（就绪状态）指该线程已经被创建（与操作系统线程关联），可以由 CPU 调度执行</p>\n</li>\n<li><p>【运行状态】指获取了 CPU 时间片运行中的状态</p>\n<ul>\n<li>当 CPU 时间片用完，会从【运行状态】转换至【可运行状态】，会导致线程的上下文切换</li>\n</ul>\n</li>\n<li><p>【阻塞状态】</p>\n<ul>\n<li><p>如果调用了阻塞 API，如 BIO 读写文件，这时该线程实际不会用到 CPU，会导致线程上下文切换，进入【阻塞状态】</p>\n</li>\n<li><p>等 BIO 操作完毕，会由操作系统唤醒阻塞的线程，转换至【可运行状态】</p>\n</li>\n<li><p>与【可运行状态】的区别是，对【阻塞状态】的线程来说只要它们一直不唤醒，调度器就一直不会考虑调度它们</p>\n</li>\n</ul>\n</li>\n<li><p>【终止状态】表示线程已经执行完毕，生命周期已经结束，不会再转换为其它状态</p>\n</li>\n</ul>\n<h2 id=\"六种状态\"><a href=\"#六种状态\" class=\"headerlink\" title=\"六种状态\"></a>六种状态</h2><p>这是从 <strong>Java API</strong> 层面来描述的</p>\n<p>根据 Thread.State 枚举，分为六种状态</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">enum</span> <span class=\"title class_\">State</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread which has not yet started.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    NEW,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a runnable thread.  A thread in the runnable</span></span><br><span class=\"line\"><span class=\"comment\">     * state is executing in the Java virtual machine but it may</span></span><br><span class=\"line\"><span class=\"comment\">     * be waiting for other resources from the operating system</span></span><br><span class=\"line\"><span class=\"comment\">     * such as processor.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    RUNNABLE,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a thread blocked waiting for a monitor lock.</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread in the blocked state is waiting for a monitor lock</span></span><br><span class=\"line\"><span class=\"comment\">     * to enter a synchronized block/method or</span></span><br><span class=\"line\"><span class=\"comment\">     * reenter a synchronized block/method after calling</span></span><br><span class=\"line\"><span class=\"comment\">     * &#123;<span class=\"doctag\">@link</span> Object#wait() Object.wait&#125;.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    BLOCKED,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread is in the waiting state due to calling one of the</span></span><br><span class=\"line\"><span class=\"comment\">     * following methods:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> Object#wait() Object.wait&#125; with no timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> #join() Thread.join&#125; with no timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> LockSupport#park() LockSupport.park&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;p&gt;A thread in the waiting state is waiting for another thread to</span></span><br><span class=\"line\"><span class=\"comment\">     * perform a particular action.</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * For example, a thread that has called &lt;tt&gt;Object.wait()&lt;/tt&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * on an object is waiting for another thread to call</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;tt&gt;Object.notify()&lt;/tt&gt; or &lt;tt&gt;Object.notifyAll()&lt;/tt&gt; on</span></span><br><span class=\"line\"><span class=\"comment\">     * that object. A thread that has called &lt;tt&gt;Thread.join()&lt;/tt&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * is waiting for a specified thread to terminate.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a waiting thread with a specified waiting time.</span></span><br><span class=\"line\"><span class=\"comment\">     * A thread is in the timed waiting state due to calling one of</span></span><br><span class=\"line\"><span class=\"comment\">     * the following methods with a specified positive waiting time:</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> #sleep Thread.sleep&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> Object#wait(long) Object.wait&#125; with timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> #join(long) Thread.join&#125; with timeout&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> LockSupport#parkNanos LockSupport.parkNanos&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     *   &lt;li&gt;&#123;<span class=\"doctag\">@link</span> LockSupport#parkUntil LockSupport.parkUntil&#125;&lt;/li&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     * &lt;/ul&gt;</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TIMED_WAITING,</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * Thread state for a terminated thread.</span></span><br><span class=\"line\"><span class=\"comment\">     * The thread has completed execution.</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    TERMINATED;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/post/2023/thread/0827c261-3195-4bdc-9b78-e0c664037749.png\" class=\"\">\n\n<ul>\n<li><p>NEW 线程刚被创建，但是还没有调用 start() 方法</p>\n</li>\n<li><p>RUNNABLE 当调用了 start() 方法之后，注意，<strong>Java API</strong> 层面的 RUNNABLE 状态涵盖了 <strong>操作系统</strong> 层面的</p>\n<ul>\n<li>【可运行状态】、【运行状态】和【阻塞状态】（由于 BIO 导致的线程阻塞，在 Java 里无法区分，仍然认为是可运行）</li>\n</ul>\n</li>\n<li><p>BLOCKED ， WAITING ， TIMED_WAITING 都是 <strong>Java API</strong> 层面对【阻塞状态】的细分，后面会在状态转换一节详述</p>\n</li>\n<li><p>TERMINATED 当线程代码运行结束</p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程的六种状态</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/7/28</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadState</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//new</span></span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;runing......&quot;</span>);</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//running</span></span><br><span class=\"line\">           <span class=\"keyword\">while</span> (<span class=\"literal\">true</span>)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t3</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//terminted</span></span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;runing......&quot;</span>);</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t3&quot;</span>);</span><br><span class=\"line\">        t3.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t4</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//timed_waiting</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (ThreadState.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t4&quot;</span>);</span><br><span class=\"line\">        t4.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t5</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//waiting</span></span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    t2.join();</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t5&quot;</span>);</span><br><span class=\"line\">        t5.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t6</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;  <span class=\"comment\">//blocked</span></span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (ThreadState.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                    TimeUnit.SECONDS.sleep(<span class=\"number\">100</span>);</span><br><span class=\"line\">                &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                    e.printStackTrace();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,<span class=\"string\">&quot;t6&quot;</span>);</span><br><span class=\"line\">        t6.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t1 线程的状态： &#123;&#125;&quot;</span>,t1.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t2 线程的状态： &#123;&#125;&quot;</span>,t2.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t3 线程的状态： &#123;&#125;&quot;</span>,t3.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t4 线程的状态： &#123;&#125;&quot;</span>,t4.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t5 线程的状态： &#123;&#125;&quot;</span>,t5.getState());</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;t6 线程的状态： &#123;&#125;&quot;</span>,t6.getState());</span><br><span class=\"line\"></span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        test1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png\" class=\"\">\n\n<h2 id=\"习题\"><a href=\"#习题\" class=\"headerlink\" title=\"习题\"></a>习题</h2><h3 id=\"题目\"><a href=\"#题目\" class=\"headerlink\" title=\"题目\"></a>题目</h3><p>阅读华罗庚《统筹方法》，给出烧水泡茶的多线程解决方案，提示</p>\n<ul>\n<li>参考图二，用两个线程（两个人协作）模拟烧水泡茶过程<ul>\n<li>文中办法乙、丙都相当于任务串行</li>\n<li>而图一相当于启动了 4 个线程，有点浪费</li>\n</ul>\n</li>\n<li>用 sleep(n) 模拟洗茶壶、洗水壶等耗费的时间</li>\n</ul>\n<p>附：华罗庚《统筹方法》</p>\n<blockquote>\n<p>统筹方法，是一种安排工作进程的数学方法。它的实用范围极广泛，在企业管理和基本建设中，以及关系复</p>\n<p>杂的科研项目的组织与管理中，都可以应用。</p>\n<p>怎样应用呢？主要是把工序安排好。</p>\n<p>洗水壶 1分钟 </p>\n<p>烧开水 15分钟</p>\n<p>洗茶壶 1分钟</p>\n<p>洗茶杯 2分钟</p>\n<p>拿茶叶 1分钟</p>\n<p>泡茶</p>\n<p>比如，想泡壶茶喝。当时的情况是：开水没有；水壶要洗，茶壶、茶杯要洗；火已生了，茶叶也有了。怎么</p>\n<p>办？</p>\n<ul>\n<li>办法甲：洗好水壶，灌上凉水，放在火上；在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开</li>\n</ul>\n<p>了，泡茶喝。</p>\n<ul>\n<li>办法乙：先做好一些准备工作，洗水壶，洗茶壶茶杯，拿茶叶；一切就绪，灌水烧水；坐待水开了，泡</li>\n</ul>\n<p>茶喝。</p>\n<ul>\n<li>办法丙：洗净水壶，灌上凉水，放在火上，坐待水开；水开了之后，急急忙忙找茶叶，洗茶壶茶杯，泡</li>\n</ul>\n<p>茶喝。</p>\n<p>哪一种办法省时间？我们能一眼看出，第一种办法好，后两种办法都窝了工。</p>\n<p>这是小事，但这是引子，可以引出生产管理等方面有用的方法来。</p>\n<p>水壶不洗，不能烧开水，因而洗水壶是烧开水的前提。没开水、没茶叶、不洗茶壶茶杯，就不能泡茶，因而</p>\n<p>这些又是泡茶的前提。它们的相互关系，可以用下边的箭头图来表示：</p>\n<img src=\"/post/2023/thread/image-20200806070304756.png\" class=\"\" title=\"image-20200806070304756\">\n\n<p>从这个图上可以一眼看出，办法甲总共要16分钟（而办法乙、丙需要20分钟）。如果要缩短工时、提高工作</p>\n<p>效率，应当主要抓烧开水这个环节，而不是抓拿茶叶等环节。同时，洗茶壶茶杯、拿茶叶总共不过4分钟，大</p>\n<p>可利用“等水开”的时间来做。</p>\n<p>是的，这好像是废话，卑之无甚高论。有如走路要用两条腿走，吃饭要一口一口吃，这些道理谁都懂得。但</p>\n<p>稍有变化，临事而迷的情况，常常是存在的。在近代工业的错综复杂的工艺过程中，往往就不是像泡茶喝这</p>\n<p>么简单了。任务多了，几百几千，甚至有好几万个任务。关系多了，错综复杂，千头万绪，往往出现“万事俱</p>\n<p>备，只欠东风”的情况。由于一两个零件没完成，耽误了一台复杂机器的出厂时间。或往往因为抓的不是关</p>\n<p>键，连夜三班，急急忙忙，完成这一环节之后，还得等待旁的环节才能装配。</p>\n<p>洗茶壶，洗茶杯，拿茶叶，或先或后，关系不大，而且同是一个人的活儿，因而可以合并成为：</p>\n<img src=\"/post/2023/thread/image-20200806070323056.png\" class=\"\" title=\"image-20200806070323056\">\n\n<p>看来这是“小题大做”，但在工作环节太多的时候，这样做就非常必要了。</p>\n<p>这里讲的主要是时间方面的事，但在具体生产实践中，还有其他方面的许多事。这种方法虽然不一定能直接</p>\n<p>解决所有问题，但是，我们利用这种方法来考虑问题，也是不无裨益的。</p>\n</blockquote>\n<h3 id=\"实现-1\"><a href=\"#实现-1\" class=\"headerlink\" title=\"实现\"></a>实现</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 洗好水壶，灌上凉水，放在火上,在等待水开的时间里，洗茶壶、洗茶杯、拿茶叶；等水开了，泡茶喝。</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MakingTea</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * t2 等待 t1 执行完毕 进行后续任务</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;洗好水壶，灌上凉水，放在火上&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.info(<span class=\"string\">&quot;烧开水&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;洗茶壶、洗茶杯、拿茶叶&quot;</span>);</span><br><span class=\"line\">                TimeUnit.SECONDS.sleep(<span class=\"number\">5</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">//等待t1线程执行完毕</span></span><br><span class=\"line\">                t1.join();</span><br><span class=\"line\">                log.info(<span class=\"string\">&quot;等水开了，泡茶喝。&quot;</span>);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        t1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200806072602725.png\" class=\"\" title=\"image-20200806072602725\">\n\n<h2 id=\"本章小结\"><a href=\"#本章小结\" class=\"headerlink\" title=\"本章小结\"></a>本章小结</h2><p>本章的重点在于掌握</p>\n<ul>\n<li><p>线程创建</p>\n</li>\n<li><p>线程重要 api，如 start，run，sleep，join，interrupt 等</p>\n</li>\n<li><p>线程状态</p>\n</li>\n<li><p>应用方面</p>\n<ul>\n<li><p>异步调用：主线程执行期间，其它线程异步执行耗时操作</p>\n</li>\n<li><p>提高效率：并行计算，缩短运算时间</p>\n</li>\n<li><p>同步等待：join</p>\n</li>\n<li><p>统筹规划：合理使用线程，得到最优效果</p>\n</li>\n</ul>\n</li>\n<li><p>原理方面</p>\n<ul>\n<li><p>线程运行流程：栈、栈帧、上下文切换、程序计数器</p>\n</li>\n<li><p>Thread 两种创建方式 的源码</p>\n</li>\n</ul>\n</li>\n<li><p>模式方面</p>\n<ul>\n<li>终止模式之两阶段终止</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"共享模型之管程\"><a href=\"#共享模型之管程\" class=\"headerlink\" title=\"共享模型之管程\"></a>共享模型之管程</h1><h2 id=\"共享带来的问题\"><a href=\"#共享带来的问题\" class=\"headerlink\" title=\"共享带来的问题\"></a>共享带来的问题</h2><h3 id=\"小故事\"><a href=\"#小故事\" class=\"headerlink\" title=\"小故事\"></a>小故事</h3><ul>\n<li><p>老王（操作系统）有一个功能强大的算盘（CPU），现在想把它租出去，赚一点外快</p>\n<img src=\"/post/2023/thread/image-20200806080136510.png\" class=\"\" title=\"image-20200806080136510\">\n</li>\n<li><p>小南、小女（线程）来使用这个算盘来进行一些计算，并按照时间给老王支付费用</p>\n</li>\n<li><p>但小南不能一天24小时使用算盘，他经常要小憩一会（sleep），又或是去吃饭上厕所（阻塞 io 操作），有时还需要一根烟，没烟时思路全无（wait）这些情况统称为（阻塞）</p>\n<img src=\"/post/2023/thread/image-20200806080218070.png\" class=\"\" title=\"image-20200806080218070\">\n</li>\n<li><p>在这些时候，算盘没利用起来（不能收钱了），老王觉得有点不划算</p>\n</li>\n<li><p>另外，小女也想用用算盘，如果总是小南占着算盘，让小女觉得不公平</p>\n</li>\n<li><p>于是，老王灵机一动，想了个办法 [ 让他们每人用一会，轮流使用算盘 ]</p>\n</li>\n<li><p>这样，当小南阻塞的时候，算盘可以分给小女使用，不会浪费，反之亦然</p>\n</li>\n<li><p>最近执行的计算比较复杂，需要存储一些中间结果，而学生们的脑容量（工作内存）不够，所以老王申请了</p>\n<p>一个笔记本（主存），把一些中间结果先记在本上。</p>\n</li>\n<li><p>计算流程是这样的：</p>\n<img src=\"/post/2023/thread/image-20200806080338819.png\" class=\"\" title=\"image-20200806080338819\">\n</li>\n<li><p>但是由于分时系统，有一天还是发生了事故</p>\n</li>\n<li><p>小南刚读取了初始值 0 做了个 +1 运算，还没来得及写回结果</p>\n</li>\n<li><p>老王说 [ 小南，你的时间到了，该别人了，记住结果走吧 ]，于是小南念叨着 [ 结果是1，结果是1…] 不甘心地到一边待着去了（上下文切换）</p>\n</li>\n<li><p>老王说 [ 小女，该你了 ]，小女看到了笔记本上还写着 0 做了一个 -1 运算，将结果 -1 写入笔记本</p>\n</li>\n<li><p>这时小女的时间也用完了，老王又叫醒了小南：[小南，把你上次的题目算完吧]，小南将他脑海中的结果 1 写入了笔记本</p>\n<img src=\"/post/2023/thread/image-20200806080425078.png\" class=\"\" title=\"image-20200806080425078\">\n</li>\n<li><p>小南和小女都觉得自己没做错，但笔记本里的结果是 1 而不是 0</p>\n</li>\n</ul>\n<h3 id=\"Java的体现\"><a href=\"#Java的体现\" class=\"headerlink\" title=\"Java的体现\"></a>Java的体现</h3><p>两个线程对初始值为 0 的静态变量一个做自增，一个做自减，各做 5000 次，结果是 0 吗？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享变量问题</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedVariables</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当两个线程操作同一个共享变量时，会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                counter++;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                counter--;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;counter:&#123;&#125;&quot;</span>, counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        t1();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"问题分析\"><a href=\"#问题分析\" class=\"headerlink\" title=\"问题分析\"></a>问题分析</h3><p>以上的结果可能是正数、负数、零。为什么呢？因为 Java 中对静态变量的自增，自减并不是原子操作，要彻底理解，必须从字节码来进行分析。</p>\n<p>例如对于 i++ 而言（i 为静态变量），实际会产生如下的 JVM 字节码指令：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic i // 获取静态变量i的值</span><br><span class=\"line\">iconst_1 // 准备常量1</span><br><span class=\"line\">iadd // 自增</span><br><span class=\"line\">putstatic i // 将修改后的值存入静态变量i</span><br></pre></td></tr></table></figure>\n\n<p>而对应 i– 也是类似:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getstatic i // 获取静态变量i的值</span><br><span class=\"line\">iconst_1 // 准备常量1</span><br><span class=\"line\">isub // 自减</span><br><span class=\"line\">putstatic i // 将修改后的值存入静态变量i</span><br></pre></td></tr></table></figure>\n\n<p>而 Java 的内存模型如下，完成静态变量的自增，自减需要在主存和工作内存中进行数据交换：</p>\n<img src=\"/post/2023/thread/image-20200806081215362.png\" class=\"\" title=\"image-20200806081215362\">\n\n<p>如果是单线程以上 8 行代码是顺序执行（不会交错）没有问题：</p>\n<img src=\"/post/2023/thread/image-20200806081309415.png\" class=\"\" title=\"image-20200806081309415\">\n\n<p>但多线程下这 8 行代码可能交错运行：</p>\n<p>出现负数的情况</p>\n<img src=\"/post/2023/thread/image-20200806081339039.png\" class=\"\" title=\"image-20200806081339039\">\n\n<p>出现正数的情况：</p>\n<img src=\"/post/2023/thread/image-20200806081409317.png\" class=\"\" title=\"image-20200806081409317\">\n\n<h3 id=\"临界区-Critical-Section\"><a href=\"#临界区-Critical-Section\" class=\"headerlink\" title=\"临界区(Critical Section)\"></a>临界区(Critical Section)</h3><ul>\n<li><p>一个程序运行多个线程本身是没有问题的</p>\n</li>\n<li><p>问题出在多个线程访问<strong>共享资源</strong></p>\n<ul>\n<li><p>多个线程读<strong>共享资源</strong>其实也没有问题</p>\n</li>\n<li><p>在多个线程对<strong>共享资源</strong>读写操作时发生指令交错，就会出现问题</p>\n</li>\n</ul>\n</li>\n<li><p>一段代码块内如果存在对<strong>共享资源</strong>的多线程读写操作，称这段代码块为<strong>临界区</strong></p>\n</li>\n</ul>\n<p>例如，下面代码中的临界区:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> </span><br><span class=\"line\"><span class=\"comment\">// 临界区</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> counter++; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> </span><br><span class=\"line\"><span class=\"comment\">// 临界区</span></span><br><span class=\"line\">&#123; </span><br><span class=\"line\"> counter--; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"竞态条件-Race-Condition\"><a href=\"#竞态条件-Race-Condition\" class=\"headerlink\" title=\"竞态条件(Race Condition)\"></a>竞态条件(Race Condition)</h3><p>多个线程在临界区内执行，由于代码的<strong>执行序列不同</strong>而导致结果无法预测，称之为发生了<strong>竞态条件</strong></p>\n<h2 id=\"synchronized解决方案\"><a href=\"#synchronized解决方案\" class=\"headerlink\" title=\"synchronized解决方案\"></a>synchronized解决方案</h2><h3 id=\"应用之互斥\"><a href=\"#应用之互斥\" class=\"headerlink\" title=\"***** 应用之互斥\"></a>***** <strong>应用之互斥</strong></h3><p>为了避免临界区的竞态条件发生，有多种手段可以达到目的。</p>\n<ul>\n<li><p>阻塞式的解决方案：synchronized，Lock</p>\n</li>\n<li><p>非阻塞式的解决方案：原子变量</p>\n</li>\n</ul>\n<p>本次课使用阻塞式的解决方案：synchronized，来解决上述问题，即俗称的【对象锁】，它采用互斥的方式让同一</p>\n<p>时刻至多只有一个线程能持有【对象锁】，其它线程再想获取这个【对象锁】时就会阻塞住。这样就能保证拥有锁</p>\n<p>的线程可以安全的执行临界区内的代码，不用担心线程上下文切换。</p>\n<blockquote>\n<p><strong>注意</strong></p>\n<p>虽然 java 中互斥和同步都可以采用 synchronized 关键字来完成，但它们还是有区别的：</p>\n<p>互斥是保证临界区的竞态条件发生，同一时刻只能有一个线程执行临界区代码</p>\n<p>同步是由于线程执行的先后、顺序不同、需要一个线程等待其它线程运行到某个点</p>\n</blockquote>\n<h3 id=\"synchronized\"><a href=\"#synchronized\" class=\"headerlink\" title=\"synchronized\"></a>synchronized</h3><h4 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象) <span class=\"comment\">// 线程1， 线程2(blocked)</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> 临界区</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享变量问题</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">SharedVariables</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当两个线程操作同一个共享变量时，会出现问题</span></span><br><span class=\"line\"><span class=\"comment\">     * 使用synchronized解决</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    counter++;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\">                    counter--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;counter:&#123;&#125;&quot;</span>, counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        t2();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>使用面向对象思想解决 ：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 共享变量问题,使用面向对象思想解决</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Room</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">increment</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            counter++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">decrement</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            counter--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCounter</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> counter;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Room</span> <span class=\"variable\">room</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Room</span>();</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                room.increment();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">        t1.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">5000</span>; i++) &#123;</span><br><span class=\"line\">                room.decrement();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">        t2.start();</span><br><span class=\"line\"></span><br><span class=\"line\">        t1.join();</span><br><span class=\"line\">        t2.join();</span><br><span class=\"line\"></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;counter:&#123;&#125;&quot;</span>, room.getCounter());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<img src=\"/post/2023/thread/image-20200806093605366.png\" class=\"\" title=\"image-20200806093605366\">\n\n<p>你可以做这样的类比：</p>\n<ul>\n<li><p><code>synchronized(对象)</code> 中的对象，可以想象为一个房间（room），有唯一入口（门）房间只能一次进入一人进行计算，线程 t1，t2 想象成两个人</p>\n</li>\n<li><p>当线程 t1 执行到 <code>synchronized(room)</code> 时就好比 t1 进入了这个房间，并锁住了门拿走了钥匙，在门内执行<code>count++</code> 代码</p>\n</li>\n<li><p>这时候如果 t2 也运行到了 <code>synchronized(room)</code> 时，它发现门被锁住了，只能在门外等待，发生了上下文切换，阻塞住了</p>\n</li>\n<li><p>这中间即使 t1 的 cpu 时间片不幸用完，被踢出了门外（不要错误理解为锁住了对象就能一直执行下去哦），这时门还是锁住的，t1 仍拿着钥匙，t2 线程还在阻塞状态进不来，只有下次轮到 t1 自己再次获得时间片时才能开门进入。</p>\n</li>\n<li><p>当 t1 执行完 <code>synchronized&#123;&#125;</code> 块内的代码，这时候才会从 obj 房间出来并解开门上的锁，唤醒 t2 线程把钥匙给他。t2 线程这时才可以进入 obj 房间，锁住了门拿上钥匙，执行它的 <code>count--</code> 代码</p>\n</li>\n</ul>\n<p>用图来表示:</p>\n<img src=\"/post/2023/thread/image-20200806093649652.png\" class=\"\" title=\"image-20200806093649652\">\n\n<h3 id=\"思考\"><a href=\"#思考\" class=\"headerlink\" title=\"思考\"></a>思考</h3><p><code>synchronized</code> 实际是用<strong>对象锁</strong>保证了<strong>临界区内代码的原子性</strong>，临界区内的代码对外是不可分割的，不会被线程切换所打断。</p>\n<p>为了加深理解，请思考下面的问题:</p>\n<ul>\n<li><p>如果把 synchronized(obj) 放在 for 循环的外面，如何理解？– 原子性</p>\n</li>\n<li><p>如果 t1 synchronized(obj1) 而 t2 synchronized(obj2) 会怎样运作？– 锁对象</p>\n</li>\n<li><p>如果 t1 synchronized(obj) 而 t2 没有加会怎么样？如何理解？– 锁对象</p>\n</li>\n</ul>\n<h2 id=\"方法上的synchronized\"><a href=\"#方法上的synchronized\" class=\"headerlink\" title=\"方法上的synchronized\"></a>方法上的synchronized</h2><p><code>synchronized</code>修饰成员方法，锁住的是当前类的<code>实例对象</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>synchronized</code>修饰静态方法，锁住的是当前类的<code>类对象</code></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//等价于</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Test</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Test.class) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"不加synchronized的方法\"><a href=\"#不加synchronized的方法\" class=\"headerlink\" title=\"不加synchronized的方法\"></a>不加synchronized的方法</h3><p>不加 synchronzied 的方法就好比不遵守规则的人，不去老实排队（好比翻窗户进去的）</p>\n<h3 id=\"所谓的“线程八锁”\"><a href=\"#所谓的“线程八锁”\" class=\"headerlink\" title=\"所谓的“线程八锁”\"></a>所谓的“线程八锁”</h3><p>其实就是考察 synchronized 锁住的是哪个对象</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程 8锁</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;strong&gt; synchronized &lt;/strong&gt;实际是用</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;strong&gt; 对象锁 &lt;/strong&gt;保证了&lt;strong&gt;临界区内代码的原子性&lt;/strong&gt;，</span></span><br><span class=\"line\"><span class=\"comment\"> * 临界区内的代码对外是不可分割的，不会被线程切换所打断。</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Thread8Locks</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"><span class=\"comment\">//        t1();</span></span><br><span class=\"line\"><span class=\"comment\">//        t2();</span></span><br><span class=\"line\"><span class=\"comment\">//        t3();</span></span><br><span class=\"line\"><span class=\"comment\">//        t4();</span></span><br><span class=\"line\"><span class=\"comment\">//        t5();</span></span><br><span class=\"line\"><span class=\"comment\">//        t6();</span></span><br><span class=\"line\"><span class=\"comment\">//        t7();</span></span><br><span class=\"line\"><span class=\"comment\">//        t8();</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,会打印 1 ，2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,会打印 2 ，1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number1</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number1</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.a();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,会先睡1s后再打印 1 ，2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,会先打印 2 ，再睡1s后再打印 1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number2</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number2</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 因为c方法没有被锁住，所以不用遵守排队规则</span></span><br><span class=\"line\"><span class=\"comment\">     * 每次t3线程都会打印 3</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t3,t2,会先睡1s后再打印 1 ，2  ; 3,1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t3,t1,会先打印 2 ，再睡1s后再打印 1; 2,3,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t3,再调用t1,t2,会先睡1s后再打印2 1; 3,1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t3,再调用t2,t1，会先打印 2 ，再睡1s后再打印 1; 3,2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number3</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number3</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.c();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t3&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t4</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number4</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number4</span>();</span><br><span class=\"line\">        <span class=\"type\">Number4</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number4</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n1.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            n2.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t5</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number5</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number5</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Number5.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t6</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                Number6.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            Number6.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">     * t1 线程和 t2 线程锁的不是同一个对象，所以不存在排斥现象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t7</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number7</span> <span class=\"variable\">n1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number7</span>();</span><br><span class=\"line\">        <span class=\"type\">Number7</span> <span class=\"variable\">n2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number7</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n1.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n2.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t1,再调用t2,则会先睡1s，再打印1，再打印2; 1s,1,2</span></span><br><span class=\"line\"><span class=\"comment\">     * 如果线程先调用t2,再调用t1,则会先打印2，睡1s，再打印1; 2,1s,1</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">t8</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Number8</span> <span class=\"variable\">n</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Number8</span>();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                n.a();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            log.debug(<span class=\"string\">&quot;begin....&quot;</span>);</span><br><span class=\"line\">            n.b();</span><br><span class=\"line\">        &#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number1&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number1</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number2&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number3&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number3</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">c</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;3&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number4&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number4</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number5&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number5</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number6&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number6</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * a方法锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> * b方法锁的是当前类的实例对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number7&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number7</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 锁的是当前类的类对象</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j(topic = &quot;c.Number8&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Number8</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;2&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"变量的线程安全分析\"><a href=\"#变量的线程安全分析\" class=\"headerlink\" title=\"变量的线程安全分析\"></a>变量的线程安全分析</h2><h4 id=\"成员变量和静态变量是否线程安全？\"><a href=\"#成员变量和静态变量是否线程安全？\" class=\"headerlink\" title=\"成员变量和静态变量是否线程安全？\"></a>成员变量和静态变量是否线程安全？</h4><ul>\n<li><p>如果它们没有共享，则线程安全</p>\n</li>\n<li><p>如果它们被共享了，根据它们的状态是否能够改变，又分两种情况</p>\n<ul>\n<li><p>如果只有读操作，则线程安全</p>\n</li>\n<li><p>如果有读写操作，则这段代码是临界区，需要考虑线程安全</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"局部变量是否线程安全？\"><a href=\"#局部变量是否线程安全？\" class=\"headerlink\" title=\"局部变量是否线程安全？\"></a>局部变量是否线程安全？</h4><ul>\n<li><p>局部变量是线程安全的</p>\n</li>\n<li><p>但局部变量引用的对象则未必</p>\n<ul>\n<li><p>如果该对象没有逃离方法的作用访问，它是线程安全的</p>\n</li>\n<li><p>如果该对象逃离方法的作用范围，需要考虑线程安全</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">\t<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">10</span>;</span><br><span class=\"line\">\ti++; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>每个线程调用 test1() 方法时局部变量 i，会在每个线程的栈帧内存中被创建多份，因此不存在共享.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static void test1();</span><br><span class=\"line\"> descriptor: ()V</span><br><span class=\"line\"> flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"> Code:</span><br><span class=\"line\"> stack=1, locals=1, args_size=0</span><br><span class=\"line\"> 0: bipush 10</span><br><span class=\"line\"> 2: istore_0</span><br><span class=\"line\"> 3: iinc 0, 1</span><br><span class=\"line\"> 6: return</span><br><span class=\"line\"> LineNumberTable:</span><br><span class=\"line\"> line 10: 0</span><br><span class=\"line\"> line 11: 3</span><br><span class=\"line\"> line 12: 6</span><br><span class=\"line\"> LocalVariableTable:</span><br><span class=\"line\"> Start Length Slot Name Signature</span><br><span class=\"line\"> 3 4 0 i I</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200806112353892.png\" class=\"\" title=\"image-20200806112353892\">\n\n\n\n<p><strong>局部变量的引用稍有不同,先看一个成员变量的例子</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">ThreadUnsafe</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadUnsafe</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreadUnsafe</span> &#123;</span><br><span class=\"line\">    ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2();</span><br><span class=\"line\">            method3();</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>其中一种情况是，如果线程2 还未 add，线程1 remove 就会报错：</strong></p>\n<img src=\"/post/2023/thread/image-20200806113017975.png\" class=\"\" title=\"image-20200806113017975\">\n\n<p>分析：</p>\n<ul>\n<li><p>无论哪个线程中的 method2 引用的都是同一个对象中的 list 成员变量</p>\n</li>\n<li><p>method3 与 method2 分析相同</p>\n<img src=\"/post/2023/thread/image-20200806113212737.png\" class=\"\" title=\"image-20200806113212737\">\n\n<p><strong>将 list 修改为局部变量</strong></p>\n</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">Threadsafe</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Threadsafe</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Threadsafe</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2(list);</span><br><span class=\"line\">            method3(list);</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>那么就不会有上述问题了</p>\n<p>分析：</p>\n<ul>\n<li><p>list 是局部变量，每个线程调用时会创建其不同实例，没有共享</p>\n</li>\n<li><p>而 method2 的参数是从 method1 中传递过来的，与 method1 中引用同一个对象</p>\n</li>\n<li><p>method3 的参数分析与 method2 相同</p>\n</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200806113622053.png\" class=\"\" title=\"image-20200806113622053\">\n\n<p>方法访问修饰符带来的思考，如果把 method2 和 method3 的方法修改为 public 会不会代理线程安全问题？</p>\n<ul>\n<li><p>情况1：有其它线程调用 method2 和 method3</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">Threadsafe2</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Threadsafe2</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Threadsafe2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2(list);</span><br><span class=\"line\">            method3(list);</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>其他线程调用<code>method2</code>和<code>method3</code>方法和<code>method1</code>的list 肯定不是一个对象。所以线程安全</p>\n</li>\n<li><p>情况2：在 情况1 的基础上，为 ThreadSafe 类添加子类，子类覆盖 method2 或 method3 方法，即</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/6</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSecurity2</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">THREAD_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">int</span> <span class=\"variable\">LOOP_NUMBER</span> <span class=\"operator\">=</span> <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">ThreadSafeSubClass</span> <span class=\"variable\">test</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">ThreadSafeSubClass</span>();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; THREAD_NUMBER; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                test.method1(LOOP_NUMBER);</span><br><span class=\"line\">            &#125;, <span class=\"string\">&quot;Thread&quot;</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Threadsafe2</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">(<span class=\"type\">int</span> loopNumber)</span> &#123;</span><br><span class=\"line\">        ArrayList&lt;String&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// &#123; 临界区, 会产生竞态条件</span></span><br><span class=\"line\">            method2(list);</span><br><span class=\"line\">            method3(list);</span><br><span class=\"line\">            <span class=\"comment\">// &#125; 临界区</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.add(<span class=\"string\">&quot;1&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">ThreadSafeSubClass</span> <span class=\"keyword\">extends</span> <span class=\"title class_\">Threadsafe2</span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method3</span><span class=\"params\">(ArrayList&lt;String&gt; list)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;).start();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><img src=\"/post/2023/thread/image-20200806115634318.png\" class=\"\" title=\"image-20200806115634318\"></li>\n</ul>\n<p><strong>从这个例子可以看出 private 或 final 提供【安全】的意义所在，请体会开闭原则中的【闭】</strong></p>\n<h4 id=\"常见线程安全类\"><a href=\"#常见线程安全类\" class=\"headerlink\" title=\"常见线程安全类\"></a>常见线程安全类</h4><ul>\n<li><p>String</p>\n</li>\n<li><p>Integer</p>\n</li>\n<li><p>StringBuffffer</p>\n</li>\n<li><p>Random</p>\n</li>\n<li><p>Vector</p>\n</li>\n<li><p>Hashtable</p>\n</li>\n<li><p>JAVA.util.concurrent 包下的类</p>\n</li>\n</ul>\n<p>这里说它们是线程安全的是指，多个线程调用它们同一个实例的某个方法时，是线程安全的。也可以理解为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hashtable</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>);</span><br><span class=\"line\">&#125;).start();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(()-&gt;&#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>);</span><br><span class=\"line\">&#125;).start()</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>它们的每个方法是原子的</p>\n</li>\n<li><p>但<strong>注意</strong>它们多个方法的组合不是原子的，见后面分析</p>\n</li>\n</ul>\n<h5 id=\"线程安全类方法的组合\"><a href=\"#线程安全类方法的组合\" class=\"headerlink\" title=\"线程安全类方法的组合\"></a>线程安全类方法的组合</h5><p>分析下面代码是否线程安全？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">Hashtable</span> <span class=\"variable\">table</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Hashtable</span>();</span><br><span class=\"line\"><span class=\"comment\">// 线程1，线程2</span></span><br><span class=\"line\"><span class=\"keyword\">if</span>( table.get(<span class=\"string\">&quot;key&quot;</span>) == <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\"> table.put(<span class=\"string\">&quot;key&quot;</span>, value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200818213438504.png\" class=\"\" title=\"image-20200818213438504\">\n\n<h5 id=\"不可变类线程安全性\"><a href=\"#不可变类线程安全性\" class=\"headerlink\" title=\"不可变类线程安全性\"></a>不可变类线程安全性</h5><p>String、Integer 等都是不可变类，因为其内部的状态不可以改变，因此它们的方法都是线程安全的</p>\n<p>有同学或许有疑问，String 有 replace，substring 等方法【可以】改变值啊，那么这些方法又是如何保证线程安</p>\n<p>全的呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Immutable</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">Immutable</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果想增加一个增加的方法呢？</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">Immutable</span>&#123;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">private</span> <span class=\"type\">int</span> <span class=\"variable\">value</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    </span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"title function_\">Immutable</span><span class=\"params\">(<span class=\"type\">int</span> value)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"built_in\">this</span>.value = value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getValue</span><span class=\"params\">()</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.value;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"> <span class=\"keyword\">public</span> Immutable <span class=\"title function_\">add</span><span class=\"params\">(<span class=\"type\">int</span> v)</span>&#123;</span><br><span class=\"line\"> \t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Immutable</span>(<span class=\"built_in\">this</span>.value + v);</span><br><span class=\"line\"> &#125; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"习题-1\"><a href=\"#习题-1\" class=\"headerlink\" title=\"习题\"></a>习题</h4><h5 id=\"卖票练习\"><a href=\"#卖票练习\" class=\"headerlink\" title=\"卖票练习\"></a>卖票练习</h5><p>测试下面代码是否存在线程安全问题，并尝试改正</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.List;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.concurrent.CopyOnWriteArrayList;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *  线程安全测试  -   买票</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExerciseSell</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">//模拟多人买票</span></span><br><span class=\"line\">        <span class=\"type\">TicketWindows</span> <span class=\"variable\">ticketWindows</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">TicketWindows</span>(<span class=\"number\">2000</span>);</span><br><span class=\"line\">        <span class=\"comment\">//统计卖出的票数</span></span><br><span class=\"line\">        List&lt;Integer&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">CopyOnWriteArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"comment\">//所有线程的集合</span></span><br><span class=\"line\">        List&lt;Thread&gt; threadList = <span class=\"keyword\">new</span> <span class=\"title class_\">ArrayList</span>&lt;&gt;();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">4000</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Thread</span> <span class=\"variable\">thread</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"comment\">//卖出的票数</span></span><br><span class=\"line\">                <span class=\"type\">int</span> <span class=\"variable\">sell</span> <span class=\"operator\">=</span> ticketWindows.sell(randomAmount());</span><br><span class=\"line\">                list.add(sell);</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">            thread.start();</span><br><span class=\"line\">            threadList.add(thread);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//等待所有线程运行完毕</span></span><br><span class=\"line\">        threadList.forEach(thread -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                thread.join();</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"comment\">//统计卖出的票和剩余的票</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;余票：&#123;&#125;&quot;</span>, ticketWindows.getCount());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;已售：&#123;&#125;&quot;</span>, list.stream().mapToInt(Integer::intValue).sum());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Random 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成1到5的随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">randomAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(<span class=\"number\">5</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 卖票窗口类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">TicketWindows</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> count;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">TicketWindows</span><span class=\"params\">(<span class=\"type\">int</span> count)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.count = count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getCount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">sell</span><span class=\"params\">(<span class=\"type\">int</span> amount)</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &gt;= amount) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (<span class=\"built_in\">this</span>) &#123;</span><br><span class=\"line\">                count -= amount;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> amount;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"转账练习\"><a href=\"#转账练习\" class=\"headerlink\" title=\"转账练习\"></a>转账练习</h5><p>测试下面代码是否存在线程安全问题，并尝试改正</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.wry.concurrent.thread;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Random;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 线程安全测试  -   转账</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Slf4j</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">ExceriseTransfer</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">a</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"type\">Account</span> <span class=\"variable\">b</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Account</span>(<span class=\"number\">1000</span>);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">threadA</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">                a.transfer(b, randomAmount());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        <span class=\"type\">Thread</span> <span class=\"variable\">threadB</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">1000</span>; i++) &#123;</span><br><span class=\"line\">                b.transfer(a, randomAmount());</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        threadA.start();</span><br><span class=\"line\">        threadB.start();</span><br><span class=\"line\">        threadA.join();</span><br><span class=\"line\">        threadB.join();</span><br><span class=\"line\">        <span class=\"comment\">//转账后的金额</span></span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;A 账户的金额：&#123;&#125;&quot;</span>, a.getMoney());</span><br><span class=\"line\">        log.info(<span class=\"string\">&quot;B 账户的金额：&#123;&#125;&quot;</span>, b.getMoney());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//Random 线程安全</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">Random</span> <span class=\"variable\">random</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Random</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//生成1到100的随机数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"title function_\">randomAmount</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> random.nextInt(<span class=\"number\">100</span>) + <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * 账户类</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;/p&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@author</span> wangruiyu</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@since</span> 2020/8/17</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Account</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"type\">int</span> money;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"title function_\">Account</span><span class=\"params\">(<span class=\"type\">int</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"type\">int</span> <span class=\"title function_\">getMoney</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">setMoney</span><span class=\"params\">(<span class=\"type\">int</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.money = money;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 转账</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> account 账户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> money   金额</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">transfer</span><span class=\"params\">(Account account, <span class=\"type\">int</span> money)</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (Account.class) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (<span class=\"built_in\">this</span>.money &gt;= money) &#123;</span><br><span class=\"line\">                account.setMoney(account.getMoney() + money);</span><br><span class=\"line\">                <span class=\"built_in\">this</span>.setMoney(<span class=\"built_in\">this</span>.getMoney() - money);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"comment\">//    //多个对象使用synchronized 加锁 是两个不同的对象，所以无法实现加速的效果</span></span><br><span class=\"line\"><span class=\"comment\">//    public synchronized  void transfer(Account account, int money) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//          if (this.money &gt;= money) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">//              account.setMoney(account.getMoney() + money);</span></span><br><span class=\"line\"><span class=\"comment\">//              this.setMoney(this.getMoney() - money);</span></span><br><span class=\"line\"><span class=\"comment\">//          &#125;</span></span><br><span class=\"line\"><span class=\"comment\">//    &#125;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Monitor概念\"><a href=\"#Monitor概念\" class=\"headerlink\" title=\"Monitor概念\"></a>Monitor概念</h2><h3 id=\"Java对象头\"><a href=\"#Java对象头\" class=\"headerlink\" title=\"Java对象头\"></a>Java对象头</h3><p>以 32 位虚拟机为例</p>\n<h4 id=\"普通对象\"><a href=\"#普通对象\" class=\"headerlink\" title=\"普通对象\"></a>普通对象</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------</span>| </span><br><span class=\"line\">|<span class=\"params\"> \t\t\t\t\tObject Header (64 bits)\t\t \t\t       </span>|</span><br><span class=\"line\">|<span class=\"params\">------------------------------------</span>|-------------------------|<span class=\"params\"> </span></span><br><span class=\"line\"><span class=\"params\"></span>|\t\t <span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">32</span> bits) \t     |<span class=\"params\"> Klass Word (32 bits)    </span>|</span><br><span class=\"line\">|<span class=\"params\">------------------------------------</span>|-------------------------|<span class=\"params\"></span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组对象\"><a href=\"#数组对象\" class=\"headerlink\" title=\"数组对象\"></a>数组对象</h4><figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">---------------------------------------------------------------------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\t\t\t\t\t\t\tObject Header (96 bits)\t\t\t \t\t\t\t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------</span>|-----------------------|<span class=\"params\">------------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\t\tMark Word(32bits) \t </span>| \t<span class=\"title class_\">Klass</span> <span class=\"title class_\">Word</span>(32bits)   |<span class=\"params\"> array length(32bits)   </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------</span>|-----------------------|<span class=\"params\">------------------------</span>|</span><br></pre></td></tr></table></figure>\n\n<p>其中 Mark Word 结构为</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t<span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">32</span> bits)\t\t\t\t\t|<span class=\"params\"> \t\tState\t\t </span>|</span><br><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t  <span class=\"symbol\">hashcode:</span><span class=\"number\">25</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">0</span> \t|<span class=\"params\"> 01\t</span>| \t\t<span class=\"title class_\">Normal</span>\t\t |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|-------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> thread:23 </span>| <span class=\"symbol\">epoch:</span><span class=\"number\">2</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">1</span> \t|<span class=\"params\"> 01\t</span>| \t\t<span class=\"title class_\">Biased</span>\t\t |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|-------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\tptr_to_lock_record:30 \t\t\t\t\t</span>| <span class=\"number\">00</span> \t|<span class=\"params\"> Lightweight Locked </span>|</span><br><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t<span class=\"symbol\">ptr_to_heavyweight_monitor:</span><span class=\"number\">30</span> \t\t\t|<span class=\"params\"> 10 \t</span>| <span class=\"title class_\">Heavyweight</span> <span class=\"title class_\">Locked</span> |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|-------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\t\t\t\t\t\t\t\t\t\t\t</span>| <span class=\"number\">11</span>\t|<span class=\"params\">\t Marked <span class=\"keyword\">for</span> GC\t </span>|</span><br><span class=\"line\">|<span class=\"params\">-------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>64 位虚拟机 Mark Word</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t<span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">64</span> bits) \t\t\t\t\t |<span class=\"params\"> \t\t  State  \t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|  <span class=\"symbol\">unused:</span><span class=\"number\">25</span> |<span class=\"params\"> hashcode:31 </span>| <span class=\"symbol\">unused:</span><span class=\"number\">1</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">0</span> |<span class=\"params\">  01  </span>| \t\t  <span class=\"title class_\">Normal</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\">  thread:54 </span>| <span class=\"symbol\">epoch:</span><span class=\"number\">2</span>     |<span class=\"params\"> unused:1 </span>| <span class=\"symbol\">age:</span><span class=\"number\">4</span> |<span class=\"params\"> biased_lock:1 </span>|  <span class=\"number\">01</span>  |<span class=\"params\"> \t\t  Biased\t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t<span class=\"symbol\">ptr_to_lock_record:</span><span class=\"number\">62</span>\t\t\t\t\t\t\t\t  |<span class=\"params\">  00  </span>| <span class=\"title class_\">Lightweight</span> <span class=\"title class_\">Locked</span> |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  </span>|  <span class=\"number\">10</span>  |<span class=\"params\"> Heavyweight Locked </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |<span class=\"params\">  11  </span>| \t<span class=\"title class_\">Marked</span> <span class=\"keyword\">for</span> <span class=\"variable constant_\">GC</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br></pre></td></tr></table></figure>\n\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://stackoverflflow.com/questions/26357186/what-is-in-java-object-header\">https://stackoverflflow.com/questions/26357186/what-is-in-java-object-header</a></p>\n<h2 id=\"原理之Monitor-锁\"><a href=\"#原理之Monitor-锁\" class=\"headerlink\" title=\"原理之Monitor(锁)\"></a>原理之Monitor(锁)</h2><h3 id=\"Monitor原理\"><a href=\"#Monitor原理\" class=\"headerlink\" title=\"Monitor原理\"></a>Monitor原理</h3><p>Monitor 被翻译为<strong>监视器</strong>或<strong>管程</strong></p>\n<p>每个 Java 对象都可以关联一个 Monitor 对象，如果使用 synchronized 给对象上锁（重量级）之后，该对象头的Mark Word 中就被设置指向 Monitor 对象的指针Monitor 结构如下</p>\n<img src=\"/post/2023/thread/image-20200819064936628.png\" class=\"\" title=\"image-20200819064936628\">\n\n\n\n<ul>\n<li><p>刚开始 Monitor 中 Owner 为 null</p>\n</li>\n<li><p>当 Thread-2 执行 synchronized(obj) 就会将 Monitor 的所有者 Owner 置为 Thread-2，Monitor中只能有一个 Owner</p>\n</li>\n<li><p>在 Thread-2 上锁的过程中，如果 Thread-3，Thread-4，Thread-5 也来执行 synchronized(obj)，就会进入EntryList BLOCKED</p>\n</li>\n<li><p>Thread-2 执行完同步代码块的内容，然后唤醒 EntryList 中等待的线程来竞争锁，竞争的时是非公平的</p>\n</li>\n<li><p>图中 WaitSet 中的 Thread-0，Thread-1 是之前获得过锁，但条件不满足进入 WAITING 状态的线程，后面讲wait-notify 时会分析</p>\n</li>\n</ul>\n<blockquote>\n<p><strong>注意：</strong></p>\n<p>synchronized 必须是进入同一个对象的 monitor 才有上述的效果</p>\n<p>不加 synchronized 的对象不会关联监视器，不遵从以上规则</p>\n</blockquote>\n<h2 id=\"原理之synchronized\"><a href=\"#原理之synchronized\" class=\"headerlink\" title=\"原理之synchronized\"></a>原理之synchronized</h2><p><strong>小故事</strong></p>\n<p>故事角色</p>\n<ul>\n<li><p>老王 - JVM</p>\n</li>\n<li><p>小南 - 线程</p>\n</li>\n<li><p>小女 - 线程</p>\n</li>\n<li><p>房间 - 对象</p>\n</li>\n<li><p>房间门上 - 防盗锁 - Monitor</p>\n</li>\n<li><p>房间门上 - 小南书包 - 轻量级锁</p>\n</li>\n<li><p>房间门上 - 刻上小南大名 - 偏向锁</p>\n</li>\n<li><p>批量重刻名 - 一个类的偏向锁撤销到达 20 阈值</p>\n</li>\n<li><p>不能刻名字 - 批量撤销该类对象的偏向锁，设置该类不可偏向</p>\n</li>\n</ul>\n<p>小南要使用房间保证计算不被其它人干扰（原子性），最初，他用的是防盗锁，当上下文切换时，锁住门。这样，即使他离开了，别人也进不了门，他的工作就是安全的。</p>\n<p>但是，很多情况下没人跟他来竞争房间的使用权。小女是要用房间，但使用的时间上是错开的，小南白天用，小女晚上用。每次上锁太麻烦了，有没有更简单的办法呢？</p>\n<p>小南和小女商量了一下，约定不锁门了，而是谁用房间，谁把自己的书包挂在门口，但他们的书包样式都一样，因此每次进门前得翻翻书包，看课本是谁的，如果是自己的，那么就可以进门，这样省的上锁解锁了。万一书包不是自己的，那么就在门外等，并通知对方下次用锁门的方式。</p>\n<p>后来，小女回老家了，很长一段时间都不会用这个房间。小南每次还是挂书包，翻书包，虽然比锁门省事了，但仍然觉得麻烦。</p>\n<p>于是，小南干脆在门上刻上了自己的名字：【小南专属房间，其它人勿用】，下次来用房间时，只要名字还在，那么说明没人打扰，还是可以安全地使用房间。如果这期间有其它人要用这个房间，那么由使用者将小南刻的名字擦掉，升级为挂书包的方式。</p>\n<p>同学们都放假回老家了，小南就膨胀了，在 20 个房间刻上了自己的名字，想进哪个进哪个。后来他自己放假回老家了，这时小女回来了（她也要用这些房间），结果就是得一个个地擦掉小南刻的名字，升级为挂书包的方式。老王觉得这成本有点高，提出了一种批量重刻名的方法，他让小女不用挂书包了，可以直接在门上刻上自己的名字后来，刻名的现象越来越频繁，老王受不了了：算了，这些房间都不能刻名了，只能挂书包。</p>\n<h3 id=\"synchronized原理\"><a href=\"#synchronized原理\" class=\"headerlink\" title=\"synchronized原理\"></a>synchronized原理</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">lock</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">counter</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span> (lock) &#123;</span><br><span class=\"line\"> \tcounter++;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对应的字节码为</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(java.lang.String[])</span>;</span><br><span class=\"line\"> descriptor: ([Ljava/lang/String;)V</span><br><span class=\"line\"> flags: ACC_PUBLIC, ACC_STATIC</span><br><span class=\"line\"> Code:</span><br><span class=\"line\"> stack=<span class=\"number\">2</span>, locals=<span class=\"number\">3</span>, args_size=<span class=\"number\">1</span></span><br><span class=\"line\"> <span class=\"number\">0</span>: getstatic #<span class=\"number\">2</span> <span class=\"comment\">// &lt;- lock引用 （synchronized开始）</span></span><br><span class=\"line\"> <span class=\"number\">3</span>: dup</span><br><span class=\"line\"> <span class=\"number\">4</span>: astore_1 <span class=\"comment\">// lock引用 -&gt; slot 1</span></span><br><span class=\"line\"> <span class=\"number\">5</span>: monitorenter <span class=\"comment\">// 将 lock对象 MarkWord 置为 Monitor 指针</span></span><br><span class=\"line\"> <span class=\"number\">6</span>: getstatic #<span class=\"number\">3</span> <span class=\"comment\">// &lt;- i</span></span><br><span class=\"line\"> <span class=\"number\">9</span>: iconst_1 <span class=\"comment\">// 准备常数 1</span></span><br><span class=\"line\"> <span class=\"number\">10</span>: iadd <span class=\"comment\">// +1</span></span><br><span class=\"line\"> <span class=\"number\">11</span>: putstatic #<span class=\"number\">3</span> <span class=\"comment\">// -&gt; i</span></span><br><span class=\"line\"> <span class=\"number\">14</span>: aload_1 <span class=\"comment\">// &lt;- lock引用</span></span><br><span class=\"line\"> <span class=\"number\">15</span>: monitorexit <span class=\"comment\">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class=\"line\"> <span class=\"number\">16</span>: goto <span class=\"number\">24</span></span><br><span class=\"line\"> <span class=\"number\">19</span>: astore_2 <span class=\"comment\">// e -&gt; slot 2 </span></span><br><span class=\"line\"> <span class=\"number\">20</span>: aload_1 <span class=\"comment\">// &lt;- lock引用</span></span><br><span class=\"line\"> <span class=\"number\">21</span>: monitorexit <span class=\"comment\">// 将 lock对象 MarkWord 重置, 唤醒 EntryList</span></span><br><span class=\"line\"> <span class=\"number\">22</span>: aload_2 <span class=\"comment\">// &lt;- slot 2 (e)</span></span><br><span class=\"line\"> <span class=\"number\">23</span>: athrow <span class=\"comment\">// throw e</span></span><br><span class=\"line\"> <span class=\"number\">24</span>: <span class=\"keyword\">return</span></span><br><span class=\"line\"> Exception table:</span><br><span class=\"line\"> from to target type</span><br><span class=\"line\"> <span class=\"number\">6</span> <span class=\"number\">16</span> <span class=\"number\">19</span> any</span><br><span class=\"line\"> <span class=\"number\">19</span> <span class=\"number\">22</span> <span class=\"number\">19</span> any</span><br><span class=\"line\"> LineNumberTable:</span><br><span class=\"line\"> line <span class=\"number\">8</span>: <span class=\"number\">0</span></span><br><span class=\"line\"> line <span class=\"number\">9</span>: <span class=\"number\">6</span></span><br><span class=\"line\"> line <span class=\"number\">10</span>: <span class=\"number\">14</span></span><br><span class=\"line\"> line <span class=\"number\">11</span>: <span class=\"number\">24</span></span><br><span class=\"line\"> LocalVariableTable:</span><br><span class=\"line\"> Start Length Slot Name Signature</span><br><span class=\"line\"> <span class=\"number\">0</span> <span class=\"number\">25</span> <span class=\"number\">0</span> args [Ljava/lang/String;</span><br><span class=\"line\"> StackMapTable: number_of_entries = <span class=\"number\">2</span></span><br><span class=\"line\"> frame_type = <span class=\"number\">255</span> <span class=\"comment\">/* full_frame */</span></span><br><span class=\"line\"> offset_delta = <span class=\"number\">19</span></span><br><span class=\"line\"> locals = [ class <span class=\"string\">&quot;[Ljava/lang/String;&quot;</span>, <span class=\"keyword\">class</span> <span class=\"title class_\">java</span>/lang/Object ]</span><br><span class=\"line\"> stack = [ <span class=\"keyword\">class</span> <span class=\"title class_\">java</span>/lang/Throwable ]</span><br><span class=\"line\"> frame_type = <span class=\"number\">250</span> <span class=\"comment\">/* chop */</span></span><br><span class=\"line\"> offset_delta = <span class=\"number\">4</span>              </span><br></pre></td></tr></table></figure>\n\n\n\n<blockquote>\n<p><strong>注意</strong></p>\n<p>方法级别的 synchronized 不会在字节码指令中有所体现</p>\n</blockquote>\n<h3 id=\"synchronized原理进阶\"><a href=\"#synchronized原理进阶\" class=\"headerlink\" title=\"synchronized原理进阶\"></a>synchronized原理进阶</h3><h4 id=\"1-轻量级锁\"><a href=\"#1-轻量级锁\" class=\"headerlink\" title=\"1.轻量级锁\"></a>1.轻量级锁</h4><p>轻量级锁的使用场景：如果一个对象虽然有多线程要加锁，但加锁的时间是错开的（也就是没有竞争），那么可以使用轻量级锁来优化。</p>\n<p>轻量级锁对使用者是透明的，即语法仍然是 <code>synchronized</code></p>\n<p>假设有两个方法同步块，利用同一个对象加锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 同步块 A</span></span><br><span class=\"line\"> method2();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 同步块 B</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建锁记录（Lock Record）对象，每个线程都的栈帧都会包含一个锁记录的结构，内部可以存储锁定对象的Mark Word</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200819065515918.png\" class=\"\" title=\"image-20200819065515918\">\n\n<ul>\n<li><p>让锁记录中 Object reference 指向锁对象，并尝试用 cas 替换 Object 的 Mark Word，将 Mark Word 的值存入锁记录</p>\n<img src=\"/post/2023/thread/image-20200819065601188.png\" class=\"\" title=\"image-20200819065601188\">\n</li>\n<li><p>如果 cas 替换成功，对象头中存储了 锁记录地址和状态 00 ，表示由该线程给对象加锁，这时图示如下</p>\n<img src=\"/post/2023/thread/image-20200819065708766.png\" class=\"\" title=\"image-20200819065708766\">\n</li>\n<li><p>如果 cas 失败，有两种情况</p>\n<ul>\n<li>如果是其它线程已经持有了该 Object 的轻量级锁，这时表明有竞争，进入锁膨胀过程</li>\n<li>如果是自己执行了 synchronized 锁重入，那么再添加一条 Lock Record 作为重入的计数</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200819065835524.png\" class=\"\" title=\"image-20200819065835524\">\n</li>\n<li><p>当退出 synchronized 代码块（解锁时）如果有取值为 null 的锁记录，表示有重入，这时重置锁记录，表示重入计数减一</p>\n<img src=\"/post/2023/thread/image-20200819065931928.png\" class=\"\" title=\"image-20200819065931928\">\n</li>\n<li><p>当退出 synchronized 代码块（解锁时）锁记录的值不为 null，这时使用 cas 将 Mark Word 的值恢复给对象头</p>\n<ul>\n<li>成功，则解锁成功</li>\n<li>失败，说明轻量级锁进行了锁膨胀或已经升级为重量级锁，进入重量级锁解锁流程</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-锁膨胀\"><a href=\"#2-锁膨胀\" class=\"headerlink\" title=\"2.锁膨胀\"></a>2.锁膨胀</h4><p>如果在尝试加轻量级锁的过程中，CAS 操作无法成功，这时一种情况就是有其它线程为此对象加上了轻量级锁（有竞争），这时需要进行锁膨胀，将轻量级锁变为重量级锁。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">method1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> <span class=\"comment\">// 同步块</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>当 Thread-1 进行轻量级加锁时，Thread-0 已经对该对象加了轻量级锁</p>\n<img src=\"/post/2023/thread/image-20200819071006301.png\" class=\"\" title=\"image-20200819071006301\">\n</li>\n<li><p>这时 Thread-1 加轻量级锁失败，进入锁膨胀流程</p>\n<ul>\n<li>即为 Object 对象申请 <code>Monitor</code> 锁，让 Object 指向重量级锁地址</li>\n<li>然后自己进入 <code>Monitor</code> 的 <code>EntryList</code> BLOCKED</li>\n</ul>\n</li>\n</ul>\n<img src=\"/post/2023/thread/image-20200819071139042.png\" class=\"\" title=\"image-20200819071139042\">\n\n<ul>\n<li>当 Thread-0 退出同步块解锁时，使用 cas 将 Mark Word 的值恢复给对象头，失败。这时会进入重量级解锁流程，即按照 Monitor 地址找到 Monitor 对象，设置 Owner 为 null，唤醒 EntryList 中 BLOCKED 线程</li>\n</ul>\n<h4 id=\"3-自旋优化\"><a href=\"#3-自旋优化\" class=\"headerlink\" title=\"3.自旋优化\"></a>3.自旋优化</h4><p>重量级锁竞争的时候，还可以使用自旋来进行优化，如果当前线程自旋成功（即这时候持锁线程已经退出了同步块，释放了锁），这时当前线程就可以避免阻塞。</p>\n<p>自旋重试成功的情况</p>\n<table>\n<thead>\n<tr>\n<th><strong>线程</strong> <strong>1</strong> <strong>（****core 1</strong> <strong>上）</strong></th>\n<th><strong>对象</strong> <strong>Mark</strong></th>\n<th><strong>线程</strong> <strong>2</strong> <strong>（****core 2</strong> <strong>上）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-</td>\n<td>10（重量锁）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>访问同步块，获取 monitor</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>成功（加锁）</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td></td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>访问同步块，获取 monitor</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行完毕</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>成功（解锁）</td>\n<td>01（无锁）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>-</td>\n<td>10（重量锁）重量锁指针</td>\n<td>成功（加锁）</td>\n</tr>\n<tr>\n<td>-</td>\n<td>10（重量锁）重量锁指针</td>\n<td>执行同步块</td>\n</tr>\n<tr>\n<td>-</td>\n<td>10（重量锁）重量锁指针</td>\n<td>执行同步块</td>\n</tr>\n<tr>\n<td>…</td>\n<td>….</td>\n<td>….</td>\n</tr>\n</tbody></table>\n<p>自旋重试失败的情况</p>\n<table>\n<thead>\n<tr>\n<th><strong>线程</strong> <strong>1</strong> <strong>（****core 1</strong> <strong>上）</strong></th>\n<th><strong>对象</strong> <strong>Mark</strong></th>\n<th><strong>线程</strong> <strong>2</strong> <strong>（****core 2</strong> <strong>上）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-</td>\n<td>10（重量锁）</td>\n<td>-</td>\n</tr>\n<tr>\n<td>访问同步块，获取 monitor</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>成功（加锁）</td>\n<td>10（重量锁）重量锁指针</td>\n<td>-</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td></td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>访问同步块，获取 monitor</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>自旋重试</td>\n</tr>\n<tr>\n<td>执行同步块</td>\n<td>10（重量锁）重量锁指针）</td>\n<td>阻塞</td>\n</tr>\n<tr>\n<td>…</td>\n<td>…</td>\n<td>…</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>自旋会占用 CPU 时间，单核 CPU 自旋就是浪费，多核 CPU 自旋才能发挥优势。</p>\n</li>\n<li><p>在 Java 6 之后<strong>自旋锁是自适应的</strong>，比如对象刚刚的一次自旋操作成功过，那么认为这次自旋成功的可能性会高，就多自旋几次；反之，就少自旋甚至不自旋，总之，比较智能。</p>\n</li>\n<li><p>Java 7 之后不能控制是否开启自旋功能</p>\n</li>\n</ul>\n<h4 id=\"4-偏向锁\"><a href=\"#4-偏向锁\" class=\"headerlink\" title=\"4.偏向锁\"></a>4.偏向锁</h4><p>轻量级锁在没有竞争时（就自己这个线程），每次重入仍然需要执行 CAS 操作。</p>\n<p>Java 6 中引入了偏向锁来做进一步优化：只有第一次使用 CAS 将线程 ID 设置到对象的 Mark Word 头，之后发现这个线程 ID 是自己的就表示没有竞争，不用重新 CAS。以后只要不发生竞争，这个对象就归该线程所有</p>\n<p>例如：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"type\">Object</span> <span class=\"variable\">obj</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m1</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 同步块 A</span></span><br><span class=\"line\"> \tm2();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m2</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 同步块 B</span></span><br><span class=\"line\"> \tm3();</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">m3</span><span class=\"params\">()</span> &#123;</span><br><span class=\"line\"> <span class=\"keyword\">synchronized</span>( obj ) &#123;</span><br><span class=\"line\"> \t<span class=\"comment\">// 同步块 C</span></span><br><span class=\"line\"> &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/2023/thread/image-20200819072452480.png\" class=\"\" title=\"image-20200819072452480\">\n\n<img src=\"/post/2023/thread/image-20200819072504262.png\" class=\"\" title=\"image-20200819072504262\">\n\n<p><strong>偏向状态</strong></p>\n<p>回忆一下对象头格式</p>\n<figure class=\"highlight ruby\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t<span class=\"title class_\">Mark</span> <span class=\"title class_\">Word</span> (<span class=\"number\">64</span> bits) \t\t\t\t\t |<span class=\"params\"> \t\t  State  \t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|  <span class=\"symbol\">unused:</span><span class=\"number\">25</span> |<span class=\"params\"> hashcode:31 </span>| <span class=\"symbol\">unused:</span><span class=\"number\">1</span> |<span class=\"params\"> age:4 </span>| <span class=\"symbol\">biased_lock:</span><span class=\"number\">0</span> |<span class=\"params\">  01  </span>| \t\t  <span class=\"title class_\">Normal</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\">  thread:54 </span>| <span class=\"symbol\">epoch:</span><span class=\"number\">2</span>     |<span class=\"params\"> unused:1 </span>| <span class=\"symbol\">age:</span><span class=\"number\">4</span> |<span class=\"params\"> biased_lock:1 </span>|  <span class=\"number\">01</span>  |<span class=\"params\"> \t\t  Biased\t  </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t<span class=\"symbol\">ptr_to_lock_record:</span><span class=\"number\">62</span>\t\t\t\t\t\t\t\t  |<span class=\"params\">  00  </span>| <span class=\"title class_\">Lightweight</span> <span class=\"title class_\">Locked</span> |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br><span class=\"line\">|<span class=\"params\"> \t\tptr_to_heavyweight_monitor:62 \t\t\t\t\t\t  </span>|  <span class=\"number\">10</span>  |<span class=\"params\"> Heavyweight Locked </span>|</span><br><span class=\"line\">|<span class=\"params\">--------------------------------------------------------------------</span>|--------------------|<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>| \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t  |<span class=\"params\">  11  </span>| \t<span class=\"title class_\">Marked</span> <span class=\"keyword\">for</span> <span class=\"variable constant_\">GC</span>\t  |<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\"></span>|--------------------------------------------------------------------|<span class=\"params\">--------------------</span>|</span><br></pre></td></tr></table></figure>\n\n<p>一个对象创建时：</p>\n<ul>\n<li><p>如果开启了偏向锁（默认开启），那么对象创建后，markword 值为 0x05 即最后 3 位为 101，这时它的thread、epoch、age 都为 0</p>\n</li>\n<li><p>偏向锁是默认是延迟的，不会在程序启动时立即生效，如果想避免延迟，可以加 VM 参数</p>\n<p> <code>-XX:BiasedLockingStartupDelay=0</code> 来禁用延迟</p>\n</li>\n<li><p>如果没有开启偏向锁，那么对象创建后，markword 值为 0x01 即最后 3 位为 001，这时它的 hashcode、age 都为 0，第一次用到 hashcode 时才会赋值</p>\n</li>\n</ul>\n<p>1） 测试延迟特性</p>\n<p>2） 测试偏向锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">Dog</span> &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>利用 jol 第三方工具来查看对象头信息（注意这里我扩展了 jol 让它输出更为简洁）</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加虚拟机参数 -XX:BiasedLockingStartupDelay=0 </span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException &#123;</span><br><span class=\"line\"> \t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t<span class=\"type\">ClassLayout</span> <span class=\"variable\">classLayout</span> <span class=\"operator\">=</span> ClassLayout.parseInstance(d);</span><br><span class=\"line\"> \t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\tlog.debug(<span class=\"string\">&quot;synchronized 前&quot;</span>);</span><br><span class=\"line\"> \t\tSystem.out.println(classLayout.toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(<span class=\"string\">&quot;synchronized 中&quot;</span>);</span><br><span class=\"line\"> \t\t\tSystem.out.println(classLayout.toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(<span class=\"string\">&quot;synchronized 后&quot;</span>);</span><br><span class=\"line\"> \t\tSystem.out.println(classLayout.toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11:08:58.117 c.TestBiased [t1] - synchronized 前</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 </span><br><span class=\"line\">11:08:58.121 c.TestBiased [t1] - synchronized 中</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101 </span><br><span class=\"line\">11:08:58.121 c.TestBiased [t1] - synchronized 后</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00011111 11101011 11010000 00000101</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>注意</strong></p>\n<p>处于偏向锁的对象解锁后，线程 id 仍存储于对象头中</p>\n</blockquote>\n<p>3）测试禁用</p>\n<p>在上面测试代码运行时在添加 VM 参数 <code>-XX:-UseBiasedLocking</code> 禁用偏向锁</p>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11:13:10.018 c.TestBiased [t1] - synchronized 前</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">11:13:10.021 c.TestBiased [t1] - synchronized 中</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00100000 00010100 11110011 10001000 </span><br><span class=\"line\">11:13:10.021 c.TestBiased [t1] - synchronized 后</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>测试 hashCode</li>\n</ol>\n<p>正常状态对象一开始是没有 hashCode 的，第一次调用才生成</p>\n<h4 id=\"撤销-调用对象hashCode\"><a href=\"#撤销-调用对象hashCode\" class=\"headerlink\" title=\"撤销 - 调用对象hashCode\"></a>撤销 <strong>-</strong> 调用对象hashCode</h4><p>调用了对象的 hashCode，但偏向锁的对象 MarkWord 中存储的是线程 id，如果调用 hashCode 会导致偏向锁被撤销</p>\n<ul>\n<li><p>轻量级锁会在锁记录中记录 hashCode</p>\n</li>\n<li><p>重量级锁会在 Monitor 中记录 hashCode</p>\n</li>\n</ul>\n<p>在调用 hashCode 后使用偏向锁，记得去掉 <code>-XX:-UseBiasedLocking</code></p>\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">11:22:10.386 c.TestBiased [main] - 调用 hashCode:1778535015 </span><br><span class=\"line\">11:22:10.391 c.TestBiased [t1] - synchronized 前</span><br><span class=\"line\">00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001 </span><br><span class=\"line\">11:22:10.393 c.TestBiased [t1] - synchronized 中</span><br><span class=\"line\">00000000 00000000 00000000 00000000 00100000 11000011 11110011 01101000 </span><br><span class=\"line\">11:22:10.393 c.TestBiased [t1] - synchronized 后</span><br><span class=\"line\">00000000 00000000 00000000 01101010 00000010 01001010 01100111 00000001</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"撤销-其它线程使用对象\"><a href=\"#撤销-其它线程使用对象\" class=\"headerlink\" title=\"撤销 - 其它线程使用对象\"></a>撤销 <strong>-</strong> 其它线程使用对象</h4><p>当有其它线程使用偏向锁对象时，会将偏向锁升级为轻量级锁</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test2</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"> \t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">\t\t <span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (TestBiased.class) &#123;</span><br><span class=\"line\"> \t\t\tTestBiased.class.notify();</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"comment\">// 如果不用 wait/notify 使用 join 必须打开下面的注释</span></span><br><span class=\"line\"> \t\t<span class=\"comment\">// 因为：t1 线程不能结束，否则底层线程可能被 jvm 重用作为 t2 线程，底层线程 id 是一样的</span></span><br><span class=\"line\">         <span class=\"comment\">/*try &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         System.in.read();</span></span><br><span class=\"line\"><span class=\"comment\">         &#125; catch (IOException e) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">         e.printStackTrace();</span></span><br><span class=\"line\"><span class=\"comment\">         &#125;*/</span></span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"> \tt1.start();</span><br><span class=\"line\">    </span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (TestBiased.class) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> \t\t\t\tTestBiased.class.wait();</span><br><span class=\"line\"> \t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\"> \t\t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"> \tt2.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 </span><br><span class=\"line\"></span><br><span class=\"line\">[t2] - 00000000 00000000 00000000 00000000 00011111 01000001 00010000 00000101 </span><br><span class=\"line\"></span><br><span class=\"line\">[t2] - 00000000 00000000 00000000 00000000 00011111 10110101 11110000 01000000 </span><br><span class=\"line\"></span><br><span class=\"line\">[t2] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"撤销-调用-wait-notify\"><a href=\"#撤销-调用-wait-notify\" class=\"headerlink\" title=\"撤销 - 调用 wait&#x2F;notify\"></a>撤销 - 调用 wait&#x2F;notify</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"> \t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> \t\t\t\td.wait();</span><br><span class=\"line\"> \t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\"> \t\t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t\tlog.debug(ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"> \tt1.start();</span><br><span class=\"line\">    </span><br><span class=\"line\"> \t<span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\"> \t\t\tThread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\"> \t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\"> \t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\tlog.debug(<span class=\"string\">&quot;notify&quot;</span>);</span><br><span class=\"line\"> \t\t\td.notify();</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t2&quot;</span>).start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000101 </span><br><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00011111 10110011 11111000 00000101 </span><br><span class=\"line\">[t2] - notify </span><br><span class=\"line\">[t1] - 00000000 00000000 00000000 00000000 00011100 11010100 00001101 11001010</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量重偏向\"><a href=\"#批量重偏向\" class=\"headerlink\" title=\"批量重偏向\"></a>批量重偏向</h4><p>如果对象虽然被多个线程访问，但没有竞争，这时偏向了线程 T1 的对象仍有机会重新偏向 T2，重偏向会重置对象的 Thread ID</p>\n<p>当撤销偏向锁阈值超过 20 次后，jvm 会这样觉得，我是不是偏向错了呢，于是会在给这些对象加锁时重新偏向至加锁线程</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test3</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\"> \tVector&lt;Dog&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;&gt;();</span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t1</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\"> \t\t\tlist.add(d);</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (list) &#123;</span><br><span class=\"line\"> \t\t\tlist.notify();</span><br><span class=\"line\"> \t\t&#125; </span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\"> \tt1.start();</span><br><span class=\"line\"> </span><br><span class=\"line\"> \t<span class=\"type\">Thread</span> <span class=\"variable\">t2</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\"> \t\t<span class=\"keyword\">synchronized</span> (list) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\tlist.wait();</span><br><span class=\"line\"> \t\t\t&#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">\t\t\t\te.printStackTrace();</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t\tlog.debug(<span class=\"string\">&quot;===============&gt; &quot;</span>);</span><br><span class=\"line\"> \t\t<span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; <span class=\"number\">30</span>; i++) &#123;</span><br><span class=\"line\"> \t\t\t<span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\"> \t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t<span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\"> \t\t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t\t&#125;</span><br><span class=\"line\"> \t\t\tlog.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\"> \t\t&#125;</span><br><span class=\"line\"> \t&#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\"> \tt2.start();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[t1] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t1] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - ===============&gt; </span><br><span class=\"line\">[t2] - 0 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 0 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 0 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 1 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 1 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 1 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 2 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 2 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 2 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 3 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 3 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 3 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 4 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 4 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 4 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 5 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 5 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 5 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 6 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 6 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 6 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 7 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 7 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 7 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 8 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 8 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 8 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 9 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 9 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 9 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 10 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 10 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 10 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 11 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 11 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 11 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 12 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 12 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 12 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 13 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 13 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 13 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 14 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 14 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 14 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 15 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 15 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 15 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 16 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 16 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 16 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 17 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 17 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 17 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 18 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 18 00000000 00000000 00000000 00000000 00100000 01011000 11110111 00000000 </span><br><span class=\"line\">[t2] - 18 00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000001 </span><br><span class=\"line\">[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 19 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 20 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 21 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 22 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 23 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 24 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 25 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 26 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 27 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 28 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11100000 00000101 </span><br><span class=\"line\">[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101 </span><br><span class=\"line\">[t2] - 29 00000000 00000000 00000000 00000000 00011111 11110011 11110001 00000101</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"批量撤销\"><a href=\"#批量撤销\" class=\"headerlink\" title=\"批量撤销\"></a>批量撤销</h4><p>当撤销偏向锁阈值超过 40 次后，jvm 会这样觉得，自己确实偏向错了，根本就不该偏向。于是整个类的所有对象都会变为不可偏向的，新建的对象也是不可偏向的</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> Thread t1, t2, t3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title function_\">test4</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> InterruptedException &#123;</span><br><span class=\"line\">    Vector&lt;Dog&gt; list = <span class=\"keyword\">new</span> <span class=\"title class_\">Vector</span>&lt;&gt;();</span><br><span class=\"line\">    <span class=\"type\">int</span> <span class=\"variable\">loopNumber</span> <span class=\"operator\">=</span> <span class=\"number\">39</span>;</span><br><span class=\"line\">    t1 = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Dog</span>();</span><br><span class=\"line\">            list.add(d);</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\">                log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LockSupport.unpark(t2);</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;t1&quot;</span>);</span><br><span class=\"line\">    t1.start();</span><br><span class=\"line\">    t2 = <span class=\"keyword\">new</span> <span class=\"title class_\">Thread</span>(() -&gt; &#123;</span><br><span class=\"line\">        LockSupport.park();</span><br><span class=\"line\">        log.debug(<span class=\"string\">&quot;===============&gt; &quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"type\">int</span> <span class=\"variable\">i</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>; i &lt; loopNumber; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">Dog</span> <span class=\"variable\">d</span> <span class=\"operator\">=</span> list.get(i);</span><br><span class=\"line\">            log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (d) &#123;</span><br><span class=\"line\">                log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            log.debug(i + <span class=\"string\">&quot;\\t&quot;</span> + ClassLayout.parseInstance(d).toPrintableSimple(<span class=\"literal\">true</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        LockSupport.unpark(t3);</span><br><span class=\"line\">    &#125;, <span class=\"string\">&quot;t2&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><strong>参考资料</strong></p>\n<p><a href=\"https://github.com/farmerjohngit/myblog/issues/12\">https://github.com/farmerjohngit/myblog/issues/12</a></p>\n<p><a href=\"https://www.cnblogs.com/LemonFive/p/11246086.html\">https://www.cnblogs.com/LemonFive/p/11246086.html</a></p>\n<p><a href=\"https://www.cnblogs.com/LemonFive/p/11248248.html\">https://www.cnblogs.com/LemonFive/p/11248248.html</a></p>\n<p>偏向锁论文</p>\n</blockquote>\n<h4 id=\"5-锁消除\"><a href=\"#5-锁消除\" class=\"headerlink\" title=\"5.锁消除\"></a>5.锁消除</h4><p>锁消除</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Fork(1)</span></span><br><span class=\"line\"><span class=\"meta\">@BenchmarkMode(Mode.AverageTime)</span></span><br><span class=\"line\"><span class=\"meta\">@Warmup(iterations=3)</span></span><br><span class=\"line\"><span class=\"meta\">@Measurement(iterations=5)</span></span><br><span class=\"line\"><span class=\"meta\">@OutputTimeUnit(TimeUnit.NANOSECONDS)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">class</span> <span class=\"title class_\">MyBenchmark</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">static</span> <span class=\"type\">int</span> <span class=\"variable\">x</span> <span class=\"operator\">=</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">a</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        x++;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Benchmark</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title function_\">b</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        <span class=\"type\">Object</span> <span class=\"variable\">o</span> <span class=\"operator\">=</span> <span class=\"keyword\">new</span> <span class=\"title class_\">Object</span>();</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span> (o) &#123;</span><br><span class=\"line\">            x++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><code>java -jar benchmarks.jar</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark\t\t\tMode\t Samples \tScore\t Score error \tUnits </span><br><span class=\"line\">c.i.MyBenchmark.a \tavgt \t\t5 \t\t1.542 \t\t0.056 \t\tns/op </span><br><span class=\"line\">c.i.MyBenchmark.b \tavgt \t\t5 \t\t1.518 \t\t0.091 \t\tns/op</span><br></pre></td></tr></table></figure>\n\n<p><code>java -XX:-EliminateLocks -jar benchmarks.jar</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Benchmark \t\t\tMode \tSamples \tScore \tScore error \tUnits </span><br><span class=\"line\">c.i.MyBenchmark.a \tavgt \t\t5 \t\t1.507 \t\t0.108 \t\tns/op </span><br><span class=\"line\">c.i.MyBenchmark.b \tavgt \t\t5 \t\t16.976 \t\t1.572 \t\tns/op</span><br></pre></td></tr></table></figure>\n\n<p><strong>锁粗化</strong></p>\n<p>对相同对象多次加锁，导致线程发生多次重入，可以使用锁粗化方式来优化，这不同于之前讲的细分锁的粒度。</p>\n"},{"title":"Nginx配置使用环境变量","date":"2024-11-01T08:00:00.000Z","cover":"/post/2024/docker/nginx/logo.jpg","_content":"\n\n\n# 在使用docker-compose建立nginx时，使用环境变量的方法\n\n在使用docker-compose部署nginx时，我们将解释如何在conf文件中使用环境变量的方法。请注意，由于不同于1.19版本之前和之后的nginx版本有所不同，请注意这一点。\n\n## 使用最新版本的nginx（1.19或更高）\n\n您可以使用官方支持的方法来自1.19版本开始。\n以以下docker-compose.yml为例。\n\n```\nversion: \"3\"\nservices:\n  nginx_service:\n    container_name: nginx\n    image: nginx:1.19-alpine\n    volumes:\n      - ./templates:/etc/nginx/templates\n    environment:\n      - PORT=8080\n    ports:\n      - 3000:8080\n```\n\n默认情况下，容器会加载/etc/nginx/templates/*.template文件，并将设置了环境变量的结果输出到/etc/nginx/conf.d目录下。\n\n例如，我们准备好了一个名为default.conf.template的文件，并将其配置如下。\n\n```\nserver {\n  server_name         localhost;\n  listen              ${PORT};\n}\n```\n\n执行”docker-compose up –build”命令后，上述文件将被挂载到容器内的”/etc/nginx/templates”目录中。\n\n在容器的/etc/nginx/conf.d文件夹中可以确认到输出了设置了环境变量的文件。\n\n```\nserver {\n  server_name         localhost;\n  listen              8080;\n}\n```\n\n## 在nginx的1.19版本之前\n\n在1.19之前，需要使用envsubst命令自行设置环境变量。\n以以下docker-compose.yml为例。与上述方法的不同之处在于在command中执行init.sh。\n\n```\nversion: \"3\"\nservices:\n  nginx_service:\n    container_name: nginx_1.19_earlier\n    image: nginx:1.18-alpine\n    volumes:\n      - ./nginx:/etc/nginx/conf.d\n    environment:\n      - PORT=8080\n    ports:\n      - 3000:8080\n    command: sh /etc/nginx/conf.d/init.sh\n```\n\n把default.conf.template如下所示。此与上述相同。\n\n```\nserver {\n  server_name         localhost;\n  listen              ${PORT};\n}\n```\n\n把init.sh的内容设置为以下内容。使用envsubst命令将环境变量设置到default.conf.template中，并将结果输出到default.conf。别忘记编写启动nginx的命令。\n\n```\n#!/bin/sh\n\nenvsubst '$$PORT' < \\\n  /etc/nginx/conf.d/default.conf.template > \\\n  /etc/nginx/conf.d/default.conf\n\nnginx -g 'daemon off;'\n```\n\n执行docker-compose up –build后，您可以在容器内的/etc/nginx/conf.d目录中查看设置了环境变量的文件。\n\n```conf\nserver {\n  server_name         localhost;\n  listen              8080;\n}\n```","source":"_posts/2024/docker/nginx.md","raw":"---\ntitle: Nginx配置使用环境变量\ndate: 2024-11-01 16:00:00\ntags:\n- nginx\n- docker\ncategories:\n- Nginx\n\ncover: /post/2024/docker/nginx/logo.jpg\n---\n\n\n\n# 在使用docker-compose建立nginx时，使用环境变量的方法\n\n在使用docker-compose部署nginx时，我们将解释如何在conf文件中使用环境变量的方法。请注意，由于不同于1.19版本之前和之后的nginx版本有所不同，请注意这一点。\n\n## 使用最新版本的nginx（1.19或更高）\n\n您可以使用官方支持的方法来自1.19版本开始。\n以以下docker-compose.yml为例。\n\n```\nversion: \"3\"\nservices:\n  nginx_service:\n    container_name: nginx\n    image: nginx:1.19-alpine\n    volumes:\n      - ./templates:/etc/nginx/templates\n    environment:\n      - PORT=8080\n    ports:\n      - 3000:8080\n```\n\n默认情况下，容器会加载/etc/nginx/templates/*.template文件，并将设置了环境变量的结果输出到/etc/nginx/conf.d目录下。\n\n例如，我们准备好了一个名为default.conf.template的文件，并将其配置如下。\n\n```\nserver {\n  server_name         localhost;\n  listen              ${PORT};\n}\n```\n\n执行”docker-compose up –build”命令后，上述文件将被挂载到容器内的”/etc/nginx/templates”目录中。\n\n在容器的/etc/nginx/conf.d文件夹中可以确认到输出了设置了环境变量的文件。\n\n```\nserver {\n  server_name         localhost;\n  listen              8080;\n}\n```\n\n## 在nginx的1.19版本之前\n\n在1.19之前，需要使用envsubst命令自行设置环境变量。\n以以下docker-compose.yml为例。与上述方法的不同之处在于在command中执行init.sh。\n\n```\nversion: \"3\"\nservices:\n  nginx_service:\n    container_name: nginx_1.19_earlier\n    image: nginx:1.18-alpine\n    volumes:\n      - ./nginx:/etc/nginx/conf.d\n    environment:\n      - PORT=8080\n    ports:\n      - 3000:8080\n    command: sh /etc/nginx/conf.d/init.sh\n```\n\n把default.conf.template如下所示。此与上述相同。\n\n```\nserver {\n  server_name         localhost;\n  listen              ${PORT};\n}\n```\n\n把init.sh的内容设置为以下内容。使用envsubst命令将环境变量设置到default.conf.template中，并将结果输出到default.conf。别忘记编写启动nginx的命令。\n\n```\n#!/bin/sh\n\nenvsubst '$$PORT' < \\\n  /etc/nginx/conf.d/default.conf.template > \\\n  /etc/nginx/conf.d/default.conf\n\nnginx -g 'daemon off;'\n```\n\n执行docker-compose up –build后，您可以在容器内的/etc/nginx/conf.d目录中查看设置了环境变量的文件。\n\n```conf\nserver {\n  server_name         localhost;\n  listen              8080;\n}\n```","slug":"2024/docker/nginx","published":1,"updated":"2025-01-05T09:27:19.281Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mz700017zpna8hh4q7g","content":"<h1 id=\"在使用docker-compose建立nginx时，使用环境变量的方法\"><a href=\"#在使用docker-compose建立nginx时，使用环境变量的方法\" class=\"headerlink\" title=\"在使用docker-compose建立nginx时，使用环境变量的方法\"></a>在使用docker-compose建立nginx时，使用环境变量的方法</h1><p>在使用docker-compose部署nginx时，我们将解释如何在conf文件中使用环境变量的方法。请注意，由于不同于1.19版本之前和之后的nginx版本有所不同，请注意这一点。</p>\n<h2 id=\"使用最新版本的nginx（1-19或更高）\"><a href=\"#使用最新版本的nginx（1-19或更高）\" class=\"headerlink\" title=\"使用最新版本的nginx（1.19或更高）\"></a>使用最新版本的nginx（1.19或更高）</h2><p>您可以使用官方支持的方法来自1.19版本开始。<br>以以下docker-compose.yml为例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx_service:</span><br><span class=\"line\">    container_name: nginx</span><br><span class=\"line\">    image: nginx:1.19-alpine</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./templates:/etc/nginx/templates</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - PORT=8080</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:8080</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，容器会加载&#x2F;etc&#x2F;nginx&#x2F;templates&#x2F;*.template文件，并将设置了环境变量的结果输出到&#x2F;etc&#x2F;nginx&#x2F;conf.d目录下。</p>\n<p>例如，我们准备好了一个名为default.conf.template的文件，并将其配置如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              $&#123;PORT&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行”docker-compose up –build”命令后，上述文件将被挂载到容器内的”&#x2F;etc&#x2F;nginx&#x2F;templates”目录中。</p>\n<p>在容器的&#x2F;etc&#x2F;nginx&#x2F;conf.d文件夹中可以确认到输出了设置了环境变量的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在nginx的1-19版本之前\"><a href=\"#在nginx的1-19版本之前\" class=\"headerlink\" title=\"在nginx的1.19版本之前\"></a>在nginx的1.19版本之前</h2><p>在1.19之前，需要使用envsubst命令自行设置环境变量。<br>以以下docker-compose.yml为例。与上述方法的不同之处在于在command中执行init.sh。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx_service:</span><br><span class=\"line\">    container_name: nginx_1.19_earlier</span><br><span class=\"line\">    image: nginx:1.18-alpine</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./nginx:/etc/nginx/conf.d</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - PORT=8080</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:8080</span><br><span class=\"line\">    command: sh /etc/nginx/conf.d/init.sh</span><br></pre></td></tr></table></figure>\n\n<p>把default.conf.template如下所示。此与上述相同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              $&#123;PORT&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把init.sh的内容设置为以下内容。使用envsubst命令将环境变量设置到default.conf.template中，并将结果输出到default.conf。别忘记编写启动nginx的命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">envsubst &#x27;$$PORT&#x27; &lt; \\</span><br><span class=\"line\">  /etc/nginx/conf.d/default.conf.template &gt; \\</span><br><span class=\"line\">  /etc/nginx/conf.d/default.conf</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -g &#x27;daemon off;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行docker-compose up –build后，您可以在容器内的&#x2F;etc&#x2F;nginx&#x2F;conf.d目录中查看设置了环境变量的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","cover_type":"img","excerpt":"","more":"<h1 id=\"在使用docker-compose建立nginx时，使用环境变量的方法\"><a href=\"#在使用docker-compose建立nginx时，使用环境变量的方法\" class=\"headerlink\" title=\"在使用docker-compose建立nginx时，使用环境变量的方法\"></a>在使用docker-compose建立nginx时，使用环境变量的方法</h1><p>在使用docker-compose部署nginx时，我们将解释如何在conf文件中使用环境变量的方法。请注意，由于不同于1.19版本之前和之后的nginx版本有所不同，请注意这一点。</p>\n<h2 id=\"使用最新版本的nginx（1-19或更高）\"><a href=\"#使用最新版本的nginx（1-19或更高）\" class=\"headerlink\" title=\"使用最新版本的nginx（1.19或更高）\"></a>使用最新版本的nginx（1.19或更高）</h2><p>您可以使用官方支持的方法来自1.19版本开始。<br>以以下docker-compose.yml为例。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx_service:</span><br><span class=\"line\">    container_name: nginx</span><br><span class=\"line\">    image: nginx:1.19-alpine</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./templates:/etc/nginx/templates</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - PORT=8080</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:8080</span><br></pre></td></tr></table></figure>\n\n<p>默认情况下，容器会加载&#x2F;etc&#x2F;nginx&#x2F;templates&#x2F;*.template文件，并将设置了环境变量的结果输出到&#x2F;etc&#x2F;nginx&#x2F;conf.d目录下。</p>\n<p>例如，我们准备好了一个名为default.conf.template的文件，并将其配置如下。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              $&#123;PORT&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>执行”docker-compose up –build”命令后，上述文件将被挂载到容器内的”&#x2F;etc&#x2F;nginx&#x2F;templates”目录中。</p>\n<p>在容器的&#x2F;etc&#x2F;nginx&#x2F;conf.d文件夹中可以确认到输出了设置了环境变量的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在nginx的1-19版本之前\"><a href=\"#在nginx的1-19版本之前\" class=\"headerlink\" title=\"在nginx的1.19版本之前\"></a>在nginx的1.19版本之前</h2><p>在1.19之前，需要使用envsubst命令自行设置环境变量。<br>以以下docker-compose.yml为例。与上述方法的不同之处在于在command中执行init.sh。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">version: &quot;3&quot;</span><br><span class=\"line\">services:</span><br><span class=\"line\">  nginx_service:</span><br><span class=\"line\">    container_name: nginx_1.19_earlier</span><br><span class=\"line\">    image: nginx:1.18-alpine</span><br><span class=\"line\">    volumes:</span><br><span class=\"line\">      - ./nginx:/etc/nginx/conf.d</span><br><span class=\"line\">    environment:</span><br><span class=\"line\">      - PORT=8080</span><br><span class=\"line\">    ports:</span><br><span class=\"line\">      - 3000:8080</span><br><span class=\"line\">    command: sh /etc/nginx/conf.d/init.sh</span><br></pre></td></tr></table></figure>\n\n<p>把default.conf.template如下所示。此与上述相同。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              $&#123;PORT&#125;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>把init.sh的内容设置为以下内容。使用envsubst命令将环境变量设置到default.conf.template中，并将结果输出到default.conf。别忘记编写启动nginx的命令。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/sh</span><br><span class=\"line\"></span><br><span class=\"line\">envsubst &#x27;$$PORT&#x27; &lt; \\</span><br><span class=\"line\">  /etc/nginx/conf.d/default.conf.template &gt; \\</span><br><span class=\"line\">  /etc/nginx/conf.d/default.conf</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -g &#x27;daemon off;&#x27;</span><br></pre></td></tr></table></figure>\n\n<p>执行docker-compose up –build后，您可以在容器内的&#x2F;etc&#x2F;nginx&#x2F;conf.d目录中查看设置了环境变量的文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">  server_name         localhost;</span><br><span class=\"line\">  listen              8080;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"Cubic（Custom Ubuntu ISO Creator）","date":"2024-10-23T08:30:00.000Z","cover":"/post/2024/iso/Cubic/logo.png","_content":"\n\n# Cubic\n\n## 简介\n\nCubic（Custom Ubuntu ISO Creator）是一个用于创建自定义 Ubuntu ISO 的工具，它提供了一个图形用户界面，使得用户可以更方便地修改和定制 ISO 文件。\n\n[Cubic in Launchpad](https://launchpad.net/cubic)\n\n[github.com/PJ-Singh-001/Cubic)](https://github.com/PJ-Singh-001/Cubic)\n\n\n\nCubic 之所以能够将安装后的软件直接打包进去，主要是因为它使用了以下几个关键技术和步骤：\n\n### 1. **基于现有的文件系统**\n\nCubic 允许用户从现有的 Ubuntu ISO 文件中提取文件系统，并在此基础上进行修改。用户可以在一个虚拟环境中运行和测试修改，这样可以确保所做的更改是有效的。\n\n### 2. **使用 SquashFS**\n\nCubic 使用 SquashFS 文件系统来压缩和打包文件。SquashFS 是一种只读的压缩文件系统，适合用于嵌入式系统和 Live CD。Cubic 可以将用户安装的软件和其他文件打包到 SquashFS 中，从而在创建的 ISO 中包含这些软件。\n\n### 3. **自动处理依赖关系**\n\nCubic 可以自动处理软件包的依赖关系。当用户在 Cubic 中安装软件时，它会确保所有必要的依赖项都被包含在内。这使得用户可以轻松地将已安装的软件打包到 ISO 中，而不必手动管理依赖关系。\n\n### 4. **集成安装脚本**\n\nCubic 允许用户创建自定义的安装脚本，这些脚本可以在系统启动时自动运行。通过这些脚本，用户可以在安装过程中自动安装特定的软件包或执行其他自定义操作。\n\n### 5. **图形用户界面**\n\nCubic 提供了一个直观的图形用户界面，使得用户可以轻松地选择要包含的软件、文件和设置，而不需要深入了解命令行操作。这降低了创建自定义 ISO 的门槛。\n\n### 6. **实时环境**\n\nCubic 提供了一个实时的环境，用户可以在其中测试和验证他们的更改。这意味着用户可以在创建 ISO 之前，确保所有软件和配置都按预期工作。\n\n### 总结\n\n通过这些功能，Cubic 使得用户能够方便地将安装后的软件和自定义设置打包到新的 Ubuntu ISO 中，从而创建一个符合自己需求的操作系统镜像。这种灵活性和易用性使得 Cubic 成为许多用户的首选工具。\n\n\n\n## 实践\n\n## 安装cubic\n\n```bash\nsudo apt-add-repository universe\nsudo apt-add-repository ppa:cubic-wizard/release\nsudo apt update\nsudo apt install --no-install-recommends cubic\n```\n\n## 自定义ISO\n\n### 选择项目路径\n\n> 即选择一个路径来存放构建过程中的配置文件。注意，需要考虑磁盘的空间大小，防止后期构建空间不够。\n>\n> 选择好之后点击右上角的 Next 进入下一步。\n\n\n\n![img](Home.png)\n\n### 选择源镜像\n\n>需要自行去网上下载好需要的基础镜像。我这里使用的是21.10作为基础镜像进行DIY。\n\n在 Cubic 项目页面上，单击 Original 部分中的文件夹图标以选择要自定义的 Live ISO 映像。系统会自动为您填写有关您的项目的信息。您可以更改有关自定义 ISO 的信息，也可以接受建议的默认值。\n\n如果您选择更改某些值，则相关参数将在您键入时自动更新。的 Undo 和 Redo 按钮仅影响 Custom 部分中的字段。Refresh 按钮允许您将新 ISO 的版本更新到今天的日期，单击此按钮会将 Custom 字段中出现的所有旧版本替换为新版本。\n\n![img](CubicProjectPage.png)\n\n对于具有以前生成的 ISO 的现有项目，请单击 Test 按钮以测试以前生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果以前没有为您的项目生成 ISO，或者您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。\n\n![img](CubicProjectPageExistingProject.png)\n\n### 解压源镜像\n\nCubic Extract 页面分析原始 ISO，复制用于引导 ISO 的重要文件，并从原始 ISO 中提取压缩的 Linux 文件系统。\n\n完成后，此页面将自动过渡到下一页。\n\n![img](CubicExtractPage.png)\n\n### 进入chroot\n\n> 当上一步完成之后，会进入chroot模式，相当于一个还没有创建用户的模式，所有的自定义都是在这里进行，在这里你可以安装软件、卸载软件或者拖入文件复制到系统内。\n\nCubic Terminal Page 是一个虚拟环境，您可以在其中自定义 Linux 文件系统。您将需要使用命令行，但由于您以 root 用户身份登录，因此在键入命令时不需要使用`sudo`。\n\n![img](CubicTerminalPage.png)\n\n> 请注意，此虚拟环境中没有活动服务，就像在实际运行的操作系统中一样。这是因为 Cubic 中的终端不是一个“正在运行的”操作系统。它只是一个安全、隔离的文件系统，您对其具有 root 访问权限，以便编辑、添加或删除文件。因此`systemd`等服务无法在 Cubic 的虚拟环境中运行。\n\n您对文件系统所做的任何更改都会立即应用。完成更改后，单击 `Next` 按钮。请记住，您始终可以返回到此项目的终端环境，以便在将来进行其他自定义。\n\n如果您不小心退出了虚拟环境，它将自动重新启动。\n\nDNS 查找在此环境中可能不起作用，并且由于“Name or service not known”错误，您可能无法使用 apt。这是因为该链接指向不存在的配置。`/etc/resolv.conf` `/run/systemd/resolve/stub-resolv.conf` `stub-resolv.conf`\n\n要解决此问题，请执行以下命令...\n\n```bash\nmkdir /run/systemd/resolve/\necho \"nameserver 127.0.1.1\nsearch network\" | tee /run/systemd/resolve/resolv.conf\nln -sr /run/systemd/resolve/resolv.conf /run/systemd/resolve/stub-resolv.conf\n```\n\n\n\n以下是使用命令行自定义 Ubuntu 的几个示例...\n\n您可以使用 nano 文本编辑器编辑文件。例如，要编辑源存储库列表，请键入\n\n```bash\nnano /etc/apt/sources.list\n```\n\n\n\n要退出 nano，请键入 +，系统将提示您保存文件。键入以保存文件，然后按 接受默认文件名。否则，键入以取消保存文件。\n\n![img](CubicTerminalPageNano.png)\n\n您可以通过将文件或目录拖动到终端窗口、使用标题栏中的复制按钮或使用右键单击上下文菜单，将文件或目录复制到*当前目录中*。尽管 Cubic 目前不支持通过网络复制文件，但您可以在终端环境中使用 `scp,rcp` 命令来复制网络文件。\n\n以下是将其他壁纸复制到自定义环境中的示例。\n\n```bash\ncd /usr/share/backgrounds\n```\n\n然后只需将新壁纸拖到 Cubic 窗口上。\n\n### 准备导出镜像\n\nCubic Prepare 页面会自动分析您的自定义项，并为自定义流程的后续步骤准备高级选项：\n\n- 确定磁盘引导内核\n- 识别已安装的软件包\n- 为典型的安装†创建软件包清单\n- 为最小安装††创建程序包清单\n- 保存程序包清单\n\n![img](CubicPreparePage.png)\n\n完成后，此页面将自动过渡到下一页。\n\n### 自定义系统设置\n\nCubic 选项页面包含三个选项卡：\n\n1. [Kernel](https://github.com/PJ-Singh-001/wiki/Options-Page#kernel-tab)\n2. [Preseed](https://github.com/PJ-Singh-001/wiki/Options-Page#preseed-tab)\n3. [Boot](https://github.com/PJ-Singh-001/wiki/Options-Page#boot-tab)\n\n#### 内核\n\n如果您在[虚拟环境中](https://github.com/PJ-Singh-001/wiki/Terminal-Page)安装了其他内核，它们将列在 Kernel （内核） 选项卡上。你可以选择使用其中一个作为新的 live ISO 的启动内核。最好只接受此页面上建议的默认值。\n\n这不是您的自定义 Linux 系统将使用的内核。*此内核将仅用于引导您的新 Live ISO。*\n\n无论您在此页面上选择哪个内核来引导 Live ISO，您的自定义 Linux 系统都将使用您在[虚拟环境中](https://github.com/PJ-Singh-001/wiki/Terminal-Page)安装并配置为默认内核的内核。（默认内核通常是您安装的最后一个内核）。\n\n![img](CubicOptionsPageKernelTab.png)\n\n#### 预置\n\nPreseed 允许您创建、编辑或删除 Preseed 文件。使用扩展名创建的文件将自动分配可执行权限。\n\n![img](CubicOptionsPagePreseedTab.png)\n\n#### 引导\n\nBoot 允许您更新在引导自定义的 Live ISO 时使用的引导参数。这些文件会自动更新以反映正确的内核文件（vmlinuz 和 initrd）。使用扩展名创建的文件将自动分配可执行权限。\n\n![img](CubicOptionsPageBootTab2.png)\n\n### 压缩算法选择\n\nCubic Compression Page 允许您选择用于压缩自定义 Linux 文件系统的算法。对于大多数用户来说，继续使用默认算法 gzip 是可以的。\n\n![img](CubicCompressionPage.png)\n\n### 生成ISO镜像\n\n在 Cubic 生成页面上，Cubic 会自动将您的自定义打包到新的磁盘映像中。将显示每个步骤的进度和结果。请注意，“压缩自定义的 Linux 文件系统”步骤可能需要很长时间，具体取决于所选的压缩算法和您的系统硬件。（在此步骤中，您可能需要打开系统监视器以跟踪 CPU 利用率）。\n\n![img](CubicGeneratePage.png)\n\n您可以随时单击 Back 按钮中断此过程，以便更新之前的选择或导航到虚拟环境并进行您可能忽略的其他更改或自定义。\n\n最大 ISO 大小为 8 TB，因此可以使用 Cubic 创建大于 4GB 的 ISO。\n\n完成后，此页面将自动过渡到下一页。\n\n\n\n### 导出完成\n\n在 Cubic Finish 页面上，将显示有关自定义磁盘映像的信息。\n\n![img](CubicFinishPage.png)\n\n单击 Test 按钮以测试生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。\n\n单击 Back 按钮进行更改并生成新的 ISO 文件。\n\n单击自定义磁盘文件名旁边的文件夹图标将打开显示此文件的文件浏览器。单击校验和文件名旁边的文件夹图标将打开显示此文件的文件浏览器。\n\n如果您想删除所有项目工作文件（为了节省磁盘空间），请选中 “Delete all project files...”复选框。虽然生成的 *.iso 文件和相应的 *.md5 校验和文件不会被删除，但您将来将无法继续自定义此项目。\n\n但是，如果您选择保留所有项目文件，则可以在将来继续自定义您的项目。\n\n单击 Close 按钮退出 Cubic。","source":"_posts/2024/iso/Cubic.md","raw":"---\ntitle: Cubic（Custom Ubuntu ISO Creator）\ndate: 2024-10-23 16:30:00\ntags:\n  - ISO\ncategories:\n  - Ubuntu\ncover: /post/2024/iso/Cubic/logo.png\n\n---\n\n\n# Cubic\n\n## 简介\n\nCubic（Custom Ubuntu ISO Creator）是一个用于创建自定义 Ubuntu ISO 的工具，它提供了一个图形用户界面，使得用户可以更方便地修改和定制 ISO 文件。\n\n[Cubic in Launchpad](https://launchpad.net/cubic)\n\n[github.com/PJ-Singh-001/Cubic)](https://github.com/PJ-Singh-001/Cubic)\n\n\n\nCubic 之所以能够将安装后的软件直接打包进去，主要是因为它使用了以下几个关键技术和步骤：\n\n### 1. **基于现有的文件系统**\n\nCubic 允许用户从现有的 Ubuntu ISO 文件中提取文件系统，并在此基础上进行修改。用户可以在一个虚拟环境中运行和测试修改，这样可以确保所做的更改是有效的。\n\n### 2. **使用 SquashFS**\n\nCubic 使用 SquashFS 文件系统来压缩和打包文件。SquashFS 是一种只读的压缩文件系统，适合用于嵌入式系统和 Live CD。Cubic 可以将用户安装的软件和其他文件打包到 SquashFS 中，从而在创建的 ISO 中包含这些软件。\n\n### 3. **自动处理依赖关系**\n\nCubic 可以自动处理软件包的依赖关系。当用户在 Cubic 中安装软件时，它会确保所有必要的依赖项都被包含在内。这使得用户可以轻松地将已安装的软件打包到 ISO 中，而不必手动管理依赖关系。\n\n### 4. **集成安装脚本**\n\nCubic 允许用户创建自定义的安装脚本，这些脚本可以在系统启动时自动运行。通过这些脚本，用户可以在安装过程中自动安装特定的软件包或执行其他自定义操作。\n\n### 5. **图形用户界面**\n\nCubic 提供了一个直观的图形用户界面，使得用户可以轻松地选择要包含的软件、文件和设置，而不需要深入了解命令行操作。这降低了创建自定义 ISO 的门槛。\n\n### 6. **实时环境**\n\nCubic 提供了一个实时的环境，用户可以在其中测试和验证他们的更改。这意味着用户可以在创建 ISO 之前，确保所有软件和配置都按预期工作。\n\n### 总结\n\n通过这些功能，Cubic 使得用户能够方便地将安装后的软件和自定义设置打包到新的 Ubuntu ISO 中，从而创建一个符合自己需求的操作系统镜像。这种灵活性和易用性使得 Cubic 成为许多用户的首选工具。\n\n\n\n## 实践\n\n## 安装cubic\n\n```bash\nsudo apt-add-repository universe\nsudo apt-add-repository ppa:cubic-wizard/release\nsudo apt update\nsudo apt install --no-install-recommends cubic\n```\n\n## 自定义ISO\n\n### 选择项目路径\n\n> 即选择一个路径来存放构建过程中的配置文件。注意，需要考虑磁盘的空间大小，防止后期构建空间不够。\n>\n> 选择好之后点击右上角的 Next 进入下一步。\n\n\n\n![img](Home.png)\n\n### 选择源镜像\n\n>需要自行去网上下载好需要的基础镜像。我这里使用的是21.10作为基础镜像进行DIY。\n\n在 Cubic 项目页面上，单击 Original 部分中的文件夹图标以选择要自定义的 Live ISO 映像。系统会自动为您填写有关您的项目的信息。您可以更改有关自定义 ISO 的信息，也可以接受建议的默认值。\n\n如果您选择更改某些值，则相关参数将在您键入时自动更新。的 Undo 和 Redo 按钮仅影响 Custom 部分中的字段。Refresh 按钮允许您将新 ISO 的版本更新到今天的日期，单击此按钮会将 Custom 字段中出现的所有旧版本替换为新版本。\n\n![img](CubicProjectPage.png)\n\n对于具有以前生成的 ISO 的现有项目，请单击 Test 按钮以测试以前生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果以前没有为您的项目生成 ISO，或者您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。\n\n![img](CubicProjectPageExistingProject.png)\n\n### 解压源镜像\n\nCubic Extract 页面分析原始 ISO，复制用于引导 ISO 的重要文件，并从原始 ISO 中提取压缩的 Linux 文件系统。\n\n完成后，此页面将自动过渡到下一页。\n\n![img](CubicExtractPage.png)\n\n### 进入chroot\n\n> 当上一步完成之后，会进入chroot模式，相当于一个还没有创建用户的模式，所有的自定义都是在这里进行，在这里你可以安装软件、卸载软件或者拖入文件复制到系统内。\n\nCubic Terminal Page 是一个虚拟环境，您可以在其中自定义 Linux 文件系统。您将需要使用命令行，但由于您以 root 用户身份登录，因此在键入命令时不需要使用`sudo`。\n\n![img](CubicTerminalPage.png)\n\n> 请注意，此虚拟环境中没有活动服务，就像在实际运行的操作系统中一样。这是因为 Cubic 中的终端不是一个“正在运行的”操作系统。它只是一个安全、隔离的文件系统，您对其具有 root 访问权限，以便编辑、添加或删除文件。因此`systemd`等服务无法在 Cubic 的虚拟环境中运行。\n\n您对文件系统所做的任何更改都会立即应用。完成更改后，单击 `Next` 按钮。请记住，您始终可以返回到此项目的终端环境，以便在将来进行其他自定义。\n\n如果您不小心退出了虚拟环境，它将自动重新启动。\n\nDNS 查找在此环境中可能不起作用，并且由于“Name or service not known”错误，您可能无法使用 apt。这是因为该链接指向不存在的配置。`/etc/resolv.conf` `/run/systemd/resolve/stub-resolv.conf` `stub-resolv.conf`\n\n要解决此问题，请执行以下命令...\n\n```bash\nmkdir /run/systemd/resolve/\necho \"nameserver 127.0.1.1\nsearch network\" | tee /run/systemd/resolve/resolv.conf\nln -sr /run/systemd/resolve/resolv.conf /run/systemd/resolve/stub-resolv.conf\n```\n\n\n\n以下是使用命令行自定义 Ubuntu 的几个示例...\n\n您可以使用 nano 文本编辑器编辑文件。例如，要编辑源存储库列表，请键入\n\n```bash\nnano /etc/apt/sources.list\n```\n\n\n\n要退出 nano，请键入 +，系统将提示您保存文件。键入以保存文件，然后按 接受默认文件名。否则，键入以取消保存文件。\n\n![img](CubicTerminalPageNano.png)\n\n您可以通过将文件或目录拖动到终端窗口、使用标题栏中的复制按钮或使用右键单击上下文菜单，将文件或目录复制到*当前目录中*。尽管 Cubic 目前不支持通过网络复制文件，但您可以在终端环境中使用 `scp,rcp` 命令来复制网络文件。\n\n以下是将其他壁纸复制到自定义环境中的示例。\n\n```bash\ncd /usr/share/backgrounds\n```\n\n然后只需将新壁纸拖到 Cubic 窗口上。\n\n### 准备导出镜像\n\nCubic Prepare 页面会自动分析您的自定义项，并为自定义流程的后续步骤准备高级选项：\n\n- 确定磁盘引导内核\n- 识别已安装的软件包\n- 为典型的安装†创建软件包清单\n- 为最小安装††创建程序包清单\n- 保存程序包清单\n\n![img](CubicPreparePage.png)\n\n完成后，此页面将自动过渡到下一页。\n\n### 自定义系统设置\n\nCubic 选项页面包含三个选项卡：\n\n1. [Kernel](https://github.com/PJ-Singh-001/wiki/Options-Page#kernel-tab)\n2. [Preseed](https://github.com/PJ-Singh-001/wiki/Options-Page#preseed-tab)\n3. [Boot](https://github.com/PJ-Singh-001/wiki/Options-Page#boot-tab)\n\n#### 内核\n\n如果您在[虚拟环境中](https://github.com/PJ-Singh-001/wiki/Terminal-Page)安装了其他内核，它们将列在 Kernel （内核） 选项卡上。你可以选择使用其中一个作为新的 live ISO 的启动内核。最好只接受此页面上建议的默认值。\n\n这不是您的自定义 Linux 系统将使用的内核。*此内核将仅用于引导您的新 Live ISO。*\n\n无论您在此页面上选择哪个内核来引导 Live ISO，您的自定义 Linux 系统都将使用您在[虚拟环境中](https://github.com/PJ-Singh-001/wiki/Terminal-Page)安装并配置为默认内核的内核。（默认内核通常是您安装的最后一个内核）。\n\n![img](CubicOptionsPageKernelTab.png)\n\n#### 预置\n\nPreseed 允许您创建、编辑或删除 Preseed 文件。使用扩展名创建的文件将自动分配可执行权限。\n\n![img](CubicOptionsPagePreseedTab.png)\n\n#### 引导\n\nBoot 允许您更新在引导自定义的 Live ISO 时使用的引导参数。这些文件会自动更新以反映正确的内核文件（vmlinuz 和 initrd）。使用扩展名创建的文件将自动分配可执行权限。\n\n![img](CubicOptionsPageBootTab2.png)\n\n### 压缩算法选择\n\nCubic Compression Page 允许您选择用于压缩自定义 Linux 文件系统的算法。对于大多数用户来说，继续使用默认算法 gzip 是可以的。\n\n![img](CubicCompressionPage.png)\n\n### 生成ISO镜像\n\n在 Cubic 生成页面上，Cubic 会自动将您的自定义打包到新的磁盘映像中。将显示每个步骤的进度和结果。请注意，“压缩自定义的 Linux 文件系统”步骤可能需要很长时间，具体取决于所选的压缩算法和您的系统硬件。（在此步骤中，您可能需要打开系统监视器以跟踪 CPU 利用率）。\n\n![img](CubicGeneratePage.png)\n\n您可以随时单击 Back 按钮中断此过程，以便更新之前的选择或导航到虚拟环境并进行您可能忽略的其他更改或自定义。\n\n最大 ISO 大小为 8 TB，因此可以使用 Cubic 创建大于 4GB 的 ISO。\n\n完成后，此页面将自动过渡到下一页。\n\n\n\n### 导出完成\n\n在 Cubic Finish 页面上，将显示有关自定义磁盘映像的信息。\n\n![img](CubicFinishPage.png)\n\n单击 Test 按钮以测试生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。\n\n单击 Back 按钮进行更改并生成新的 ISO 文件。\n\n单击自定义磁盘文件名旁边的文件夹图标将打开显示此文件的文件浏览器。单击校验和文件名旁边的文件夹图标将打开显示此文件的文件浏览器。\n\n如果您想删除所有项目工作文件（为了节省磁盘空间），请选中 “Delete all project files...”复选框。虽然生成的 *.iso 文件和相应的 *.md5 校验和文件不会被删除，但您将来将无法继续自定义此项目。\n\n但是，如果您选择保留所有项目文件，则可以在将来继续自定义您的项目。\n\n单击 Close 按钮退出 Cubic。","slug":"2024/iso/Cubic","published":1,"updated":"2025-01-05T09:27:19.281Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mz800027zpnc0dwdn4c","content":"<h1 id=\"Cubic\"><a href=\"#Cubic\" class=\"headerlink\" title=\"Cubic\"></a>Cubic</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Cubic（Custom Ubuntu ISO Creator）是一个用于创建自定义 Ubuntu ISO 的工具，它提供了一个图形用户界面，使得用户可以更方便地修改和定制 ISO 文件。</p>\n<p><a href=\"https://launchpad.net/cubic\">Cubic in Launchpad</a></p>\n<p><a href=\"https://github.com/PJ-Singh-001/Cubic\">github.com&#x2F;PJ-Singh-001&#x2F;Cubic)</a></p>\n<p>Cubic 之所以能够将安装后的软件直接打包进去，主要是因为它使用了以下几个关键技术和步骤：</p>\n<h3 id=\"1-基于现有的文件系统\"><a href=\"#1-基于现有的文件系统\" class=\"headerlink\" title=\"1. 基于现有的文件系统\"></a>1. <strong>基于现有的文件系统</strong></h3><p>Cubic 允许用户从现有的 Ubuntu ISO 文件中提取文件系统，并在此基础上进行修改。用户可以在一个虚拟环境中运行和测试修改，这样可以确保所做的更改是有效的。</p>\n<h3 id=\"2-使用-SquashFS\"><a href=\"#2-使用-SquashFS\" class=\"headerlink\" title=\"2. 使用 SquashFS\"></a>2. <strong>使用 SquashFS</strong></h3><p>Cubic 使用 SquashFS 文件系统来压缩和打包文件。SquashFS 是一种只读的压缩文件系统，适合用于嵌入式系统和 Live CD。Cubic 可以将用户安装的软件和其他文件打包到 SquashFS 中，从而在创建的 ISO 中包含这些软件。</p>\n<h3 id=\"3-自动处理依赖关系\"><a href=\"#3-自动处理依赖关系\" class=\"headerlink\" title=\"3. 自动处理依赖关系\"></a>3. <strong>自动处理依赖关系</strong></h3><p>Cubic 可以自动处理软件包的依赖关系。当用户在 Cubic 中安装软件时，它会确保所有必要的依赖项都被包含在内。这使得用户可以轻松地将已安装的软件打包到 ISO 中，而不必手动管理依赖关系。</p>\n<h3 id=\"4-集成安装脚本\"><a href=\"#4-集成安装脚本\" class=\"headerlink\" title=\"4. 集成安装脚本\"></a>4. <strong>集成安装脚本</strong></h3><p>Cubic 允许用户创建自定义的安装脚本，这些脚本可以在系统启动时自动运行。通过这些脚本，用户可以在安装过程中自动安装特定的软件包或执行其他自定义操作。</p>\n<h3 id=\"5-图形用户界面\"><a href=\"#5-图形用户界面\" class=\"headerlink\" title=\"5. 图形用户界面\"></a>5. <strong>图形用户界面</strong></h3><p>Cubic 提供了一个直观的图形用户界面，使得用户可以轻松地选择要包含的软件、文件和设置，而不需要深入了解命令行操作。这降低了创建自定义 ISO 的门槛。</p>\n<h3 id=\"6-实时环境\"><a href=\"#6-实时环境\" class=\"headerlink\" title=\"6. 实时环境\"></a>6. <strong>实时环境</strong></h3><p>Cubic 提供了一个实时的环境，用户可以在其中测试和验证他们的更改。这意味着用户可以在创建 ISO 之前，确保所有软件和配置都按预期工作。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这些功能，Cubic 使得用户能够方便地将安装后的软件和自定义设置打包到新的 Ubuntu ISO 中，从而创建一个符合自己需求的操作系统镜像。这种灵活性和易用性使得 Cubic 成为许多用户的首选工具。</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h2 id=\"安装cubic\"><a href=\"#安装cubic\" class=\"headerlink\" title=\"安装cubic\"></a>安装cubic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-add-repository universe</span><br><span class=\"line\">sudo apt-add-repository ppa:cubic-wizard/release</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install --no-install-recommends cubic</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义ISO\"><a href=\"#自定义ISO\" class=\"headerlink\" title=\"自定义ISO\"></a>自定义ISO</h2><h3 id=\"选择项目路径\"><a href=\"#选择项目路径\" class=\"headerlink\" title=\"选择项目路径\"></a>选择项目路径</h3><blockquote>\n<p>即选择一个路径来存放构建过程中的配置文件。注意，需要考虑磁盘的空间大小，防止后期构建空间不够。</p>\n<p>选择好之后点击右上角的 Next 进入下一步。</p>\n</blockquote>\n<p><img src=\"/post/2024/iso/Cubic/Home.png\" alt=\"img\"></p>\n<h3 id=\"选择源镜像\"><a href=\"#选择源镜像\" class=\"headerlink\" title=\"选择源镜像\"></a>选择源镜像</h3><blockquote>\n<p>需要自行去网上下载好需要的基础镜像。我这里使用的是21.10作为基础镜像进行DIY。</p>\n</blockquote>\n<p>在 Cubic 项目页面上，单击 Original 部分中的文件夹图标以选择要自定义的 Live ISO 映像。系统会自动为您填写有关您的项目的信息。您可以更改有关自定义 ISO 的信息，也可以接受建议的默认值。</p>\n<p>如果您选择更改某些值，则相关参数将在您键入时自动更新。的 Undo 和 Redo 按钮仅影响 Custom 部分中的字段。Refresh 按钮允许您将新 ISO 的版本更新到今天的日期，单击此按钮会将 Custom 字段中出现的所有旧版本替换为新版本。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicProjectPage.png\" alt=\"img\"></p>\n<p>对于具有以前生成的 ISO 的现有项目，请单击 Test 按钮以测试以前生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果以前没有为您的项目生成 ISO，或者您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicProjectPageExistingProject.png\" alt=\"img\"></p>\n<h3 id=\"解压源镜像\"><a href=\"#解压源镜像\" class=\"headerlink\" title=\"解压源镜像\"></a>解压源镜像</h3><p>Cubic Extract 页面分析原始 ISO，复制用于引导 ISO 的重要文件，并从原始 ISO 中提取压缩的 Linux 文件系统。</p>\n<p>完成后，此页面将自动过渡到下一页。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicExtractPage.png\" alt=\"img\"></p>\n<h3 id=\"进入chroot\"><a href=\"#进入chroot\" class=\"headerlink\" title=\"进入chroot\"></a>进入chroot</h3><blockquote>\n<p>当上一步完成之后，会进入chroot模式，相当于一个还没有创建用户的模式，所有的自定义都是在这里进行，在这里你可以安装软件、卸载软件或者拖入文件复制到系统内。</p>\n</blockquote>\n<p>Cubic Terminal Page 是一个虚拟环境，您可以在其中自定义 Linux 文件系统。您将需要使用命令行，但由于您以 root 用户身份登录，因此在键入命令时不需要使用<code>sudo</code>。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicTerminalPage.png\" alt=\"img\"></p>\n<blockquote>\n<p>请注意，此虚拟环境中没有活动服务，就像在实际运行的操作系统中一样。这是因为 Cubic 中的终端不是一个“正在运行的”操作系统。它只是一个安全、隔离的文件系统，您对其具有 root 访问权限，以便编辑、添加或删除文件。因此<code>systemd</code>等服务无法在 Cubic 的虚拟环境中运行。</p>\n</blockquote>\n<p>您对文件系统所做的任何更改都会立即应用。完成更改后，单击 <code>Next</code> 按钮。请记住，您始终可以返回到此项目的终端环境，以便在将来进行其他自定义。</p>\n<p>如果您不小心退出了虚拟环境，它将自动重新启动。</p>\n<p>DNS 查找在此环境中可能不起作用，并且由于“Name or service not known”错误，您可能无法使用 apt。这是因为该链接指向不存在的配置。<code>/etc/resolv.conf</code> <code>/run/systemd/resolve/stub-resolv.conf</code> <code>stub-resolv.conf</code></p>\n<p>要解决此问题，请执行以下命令…</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /run/systemd/resolve/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;nameserver 127.0.1.1</span></span><br><span class=\"line\"><span class=\"string\">search network&quot;</span> | <span class=\"built_in\">tee</span> /run/systemd/resolve/resolv.conf</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -sr /run/systemd/resolve/resolv.conf /run/systemd/resolve/stub-resolv.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以下是使用命令行自定义 Ubuntu 的几个示例…</p>\n<p>您可以使用 nano 文本编辑器编辑文件。例如，要编辑源存储库列表，请键入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n\n\n<p>要退出 nano，请键入 +，系统将提示您保存文件。键入以保存文件，然后按 接受默认文件名。否则，键入以取消保存文件。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicTerminalPageNano.png\" alt=\"img\"></p>\n<p>您可以通过将文件或目录拖动到终端窗口、使用标题栏中的复制按钮或使用右键单击上下文菜单，将文件或目录复制到<em>当前目录中</em>。尽管 Cubic 目前不支持通过网络复制文件，但您可以在终端环境中使用 <code>scp,rcp</code> 命令来复制网络文件。</p>\n<p>以下是将其他壁纸复制到自定义环境中的示例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/backgrounds</span><br></pre></td></tr></table></figure>\n\n<p>然后只需将新壁纸拖到 Cubic 窗口上。</p>\n<h3 id=\"准备导出镜像\"><a href=\"#准备导出镜像\" class=\"headerlink\" title=\"准备导出镜像\"></a>准备导出镜像</h3><p>Cubic Prepare 页面会自动分析您的自定义项，并为自定义流程的后续步骤准备高级选项：</p>\n<ul>\n<li>确定磁盘引导内核</li>\n<li>识别已安装的软件包</li>\n<li>为典型的安装†创建软件包清单</li>\n<li>为最小安装††创建程序包清单</li>\n<li>保存程序包清单</li>\n</ul>\n<p><img src=\"/post/2024/iso/Cubic/CubicPreparePage.png\" alt=\"img\"></p>\n<p>完成后，此页面将自动过渡到下一页。</p>\n<h3 id=\"自定义系统设置\"><a href=\"#自定义系统设置\" class=\"headerlink\" title=\"自定义系统设置\"></a>自定义系统设置</h3><p>Cubic 选项页面包含三个选项卡：</p>\n<ol>\n<li><a href=\"https://github.com/PJ-Singh-001/wiki/Options-Page#kernel-tab\">Kernel</a></li>\n<li><a href=\"https://github.com/PJ-Singh-001/wiki/Options-Page#preseed-tab\">Preseed</a></li>\n<li><a href=\"https://github.com/PJ-Singh-001/wiki/Options-Page#boot-tab\">Boot</a></li>\n</ol>\n<h4 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h4><p>如果您在<a href=\"https://github.com/PJ-Singh-001/wiki/Terminal-Page\">虚拟环境中</a>安装了其他内核，它们将列在 Kernel （内核） 选项卡上。你可以选择使用其中一个作为新的 live ISO 的启动内核。最好只接受此页面上建议的默认值。</p>\n<p>这不是您的自定义 Linux 系统将使用的内核。<em>此内核将仅用于引导您的新 Live ISO。</em></p>\n<p>无论您在此页面上选择哪个内核来引导 Live ISO，您的自定义 Linux 系统都将使用您在<a href=\"https://github.com/PJ-Singh-001/wiki/Terminal-Page\">虚拟环境中</a>安装并配置为默认内核的内核。（默认内核通常是您安装的最后一个内核）。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicOptionsPageKernelTab.png\" alt=\"img\"></p>\n<h4 id=\"预置\"><a href=\"#预置\" class=\"headerlink\" title=\"预置\"></a>预置</h4><p>Preseed 允许您创建、编辑或删除 Preseed 文件。使用扩展名创建的文件将自动分配可执行权限。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicOptionsPagePreseedTab.png\" alt=\"img\"></p>\n<h4 id=\"引导\"><a href=\"#引导\" class=\"headerlink\" title=\"引导\"></a>引导</h4><p>Boot 允许您更新在引导自定义的 Live ISO 时使用的引导参数。这些文件会自动更新以反映正确的内核文件（vmlinuz 和 initrd）。使用扩展名创建的文件将自动分配可执行权限。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicOptionsPageBootTab2.png\" alt=\"img\"></p>\n<h3 id=\"压缩算法选择\"><a href=\"#压缩算法选择\" class=\"headerlink\" title=\"压缩算法选择\"></a>压缩算法选择</h3><p>Cubic Compression Page 允许您选择用于压缩自定义 Linux 文件系统的算法。对于大多数用户来说，继续使用默认算法 gzip 是可以的。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicCompressionPage.png\" alt=\"img\"></p>\n<h3 id=\"生成ISO镜像\"><a href=\"#生成ISO镜像\" class=\"headerlink\" title=\"生成ISO镜像\"></a>生成ISO镜像</h3><p>在 Cubic 生成页面上，Cubic 会自动将您的自定义打包到新的磁盘映像中。将显示每个步骤的进度和结果。请注意，“压缩自定义的 Linux 文件系统”步骤可能需要很长时间，具体取决于所选的压缩算法和您的系统硬件。（在此步骤中，您可能需要打开系统监视器以跟踪 CPU 利用率）。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicGeneratePage.png\" alt=\"img\"></p>\n<p>您可以随时单击 Back 按钮中断此过程，以便更新之前的选择或导航到虚拟环境并进行您可能忽略的其他更改或自定义。</p>\n<p>最大 ISO 大小为 8 TB，因此可以使用 Cubic 创建大于 4GB 的 ISO。</p>\n<p>完成后，此页面将自动过渡到下一页。</p>\n<h3 id=\"导出完成\"><a href=\"#导出完成\" class=\"headerlink\" title=\"导出完成\"></a>导出完成</h3><p>在 Cubic Finish 页面上，将显示有关自定义磁盘映像的信息。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicFinishPage.png\" alt=\"img\"></p>\n<p>单击 Test 按钮以测试生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。</p>\n<p>单击 Back 按钮进行更改并生成新的 ISO 文件。</p>\n<p>单击自定义磁盘文件名旁边的文件夹图标将打开显示此文件的文件浏览器。单击校验和文件名旁边的文件夹图标将打开显示此文件的文件浏览器。</p>\n<p>如果您想删除所有项目工作文件（为了节省磁盘空间），请选中 “Delete all project files…”复选框。虽然生成的 *.iso 文件和相应的 *.md5 校验和文件不会被删除，但您将来将无法继续自定义此项目。</p>\n<p>但是，如果您选择保留所有项目文件，则可以在将来继续自定义您的项目。</p>\n<p>单击 Close 按钮退出 Cubic。</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"Cubic\"><a href=\"#Cubic\" class=\"headerlink\" title=\"Cubic\"></a>Cubic</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Cubic（Custom Ubuntu ISO Creator）是一个用于创建自定义 Ubuntu ISO 的工具，它提供了一个图形用户界面，使得用户可以更方便地修改和定制 ISO 文件。</p>\n<p><a href=\"https://launchpad.net/cubic\">Cubic in Launchpad</a></p>\n<p><a href=\"https://github.com/PJ-Singh-001/Cubic\">github.com&#x2F;PJ-Singh-001&#x2F;Cubic)</a></p>\n<p>Cubic 之所以能够将安装后的软件直接打包进去，主要是因为它使用了以下几个关键技术和步骤：</p>\n<h3 id=\"1-基于现有的文件系统\"><a href=\"#1-基于现有的文件系统\" class=\"headerlink\" title=\"1. 基于现有的文件系统\"></a>1. <strong>基于现有的文件系统</strong></h3><p>Cubic 允许用户从现有的 Ubuntu ISO 文件中提取文件系统，并在此基础上进行修改。用户可以在一个虚拟环境中运行和测试修改，这样可以确保所做的更改是有效的。</p>\n<h3 id=\"2-使用-SquashFS\"><a href=\"#2-使用-SquashFS\" class=\"headerlink\" title=\"2. 使用 SquashFS\"></a>2. <strong>使用 SquashFS</strong></h3><p>Cubic 使用 SquashFS 文件系统来压缩和打包文件。SquashFS 是一种只读的压缩文件系统，适合用于嵌入式系统和 Live CD。Cubic 可以将用户安装的软件和其他文件打包到 SquashFS 中，从而在创建的 ISO 中包含这些软件。</p>\n<h3 id=\"3-自动处理依赖关系\"><a href=\"#3-自动处理依赖关系\" class=\"headerlink\" title=\"3. 自动处理依赖关系\"></a>3. <strong>自动处理依赖关系</strong></h3><p>Cubic 可以自动处理软件包的依赖关系。当用户在 Cubic 中安装软件时，它会确保所有必要的依赖项都被包含在内。这使得用户可以轻松地将已安装的软件打包到 ISO 中，而不必手动管理依赖关系。</p>\n<h3 id=\"4-集成安装脚本\"><a href=\"#4-集成安装脚本\" class=\"headerlink\" title=\"4. 集成安装脚本\"></a>4. <strong>集成安装脚本</strong></h3><p>Cubic 允许用户创建自定义的安装脚本，这些脚本可以在系统启动时自动运行。通过这些脚本，用户可以在安装过程中自动安装特定的软件包或执行其他自定义操作。</p>\n<h3 id=\"5-图形用户界面\"><a href=\"#5-图形用户界面\" class=\"headerlink\" title=\"5. 图形用户界面\"></a>5. <strong>图形用户界面</strong></h3><p>Cubic 提供了一个直观的图形用户界面，使得用户可以轻松地选择要包含的软件、文件和设置，而不需要深入了解命令行操作。这降低了创建自定义 ISO 的门槛。</p>\n<h3 id=\"6-实时环境\"><a href=\"#6-实时环境\" class=\"headerlink\" title=\"6. 实时环境\"></a>6. <strong>实时环境</strong></h3><p>Cubic 提供了一个实时的环境，用户可以在其中测试和验证他们的更改。这意味着用户可以在创建 ISO 之前，确保所有软件和配置都按预期工作。</p>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>通过这些功能，Cubic 使得用户能够方便地将安装后的软件和自定义设置打包到新的 Ubuntu ISO 中，从而创建一个符合自己需求的操作系统镜像。这种灵活性和易用性使得 Cubic 成为许多用户的首选工具。</p>\n<h2 id=\"实践\"><a href=\"#实践\" class=\"headerlink\" title=\"实践\"></a>实践</h2><h2 id=\"安装cubic\"><a href=\"#安装cubic\" class=\"headerlink\" title=\"安装cubic\"></a>安装cubic</h2><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-add-repository universe</span><br><span class=\"line\">sudo apt-add-repository ppa:cubic-wizard/release</span><br><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install --no-install-recommends cubic</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"自定义ISO\"><a href=\"#自定义ISO\" class=\"headerlink\" title=\"自定义ISO\"></a>自定义ISO</h2><h3 id=\"选择项目路径\"><a href=\"#选择项目路径\" class=\"headerlink\" title=\"选择项目路径\"></a>选择项目路径</h3><blockquote>\n<p>即选择一个路径来存放构建过程中的配置文件。注意，需要考虑磁盘的空间大小，防止后期构建空间不够。</p>\n<p>选择好之后点击右上角的 Next 进入下一步。</p>\n</blockquote>\n<p><img src=\"/post/2024/iso/Cubic/Home.png\" alt=\"img\"></p>\n<h3 id=\"选择源镜像\"><a href=\"#选择源镜像\" class=\"headerlink\" title=\"选择源镜像\"></a>选择源镜像</h3><blockquote>\n<p>需要自行去网上下载好需要的基础镜像。我这里使用的是21.10作为基础镜像进行DIY。</p>\n</blockquote>\n<p>在 Cubic 项目页面上，单击 Original 部分中的文件夹图标以选择要自定义的 Live ISO 映像。系统会自动为您填写有关您的项目的信息。您可以更改有关自定义 ISO 的信息，也可以接受建议的默认值。</p>\n<p>如果您选择更改某些值，则相关参数将在您键入时自动更新。的 Undo 和 Redo 按钮仅影响 Custom 部分中的字段。Refresh 按钮允许您将新 ISO 的版本更新到今天的日期，单击此按钮会将 Custom 字段中出现的所有旧版本替换为新版本。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicProjectPage.png\" alt=\"img\"></p>\n<p>对于具有以前生成的 ISO 的现有项目，请单击 Test 按钮以测试以前生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果以前没有为您的项目生成 ISO，或者您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicProjectPageExistingProject.png\" alt=\"img\"></p>\n<h3 id=\"解压源镜像\"><a href=\"#解压源镜像\" class=\"headerlink\" title=\"解压源镜像\"></a>解压源镜像</h3><p>Cubic Extract 页面分析原始 ISO，复制用于引导 ISO 的重要文件，并从原始 ISO 中提取压缩的 Linux 文件系统。</p>\n<p>完成后，此页面将自动过渡到下一页。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicExtractPage.png\" alt=\"img\"></p>\n<h3 id=\"进入chroot\"><a href=\"#进入chroot\" class=\"headerlink\" title=\"进入chroot\"></a>进入chroot</h3><blockquote>\n<p>当上一步完成之后，会进入chroot模式，相当于一个还没有创建用户的模式，所有的自定义都是在这里进行，在这里你可以安装软件、卸载软件或者拖入文件复制到系统内。</p>\n</blockquote>\n<p>Cubic Terminal Page 是一个虚拟环境，您可以在其中自定义 Linux 文件系统。您将需要使用命令行，但由于您以 root 用户身份登录，因此在键入命令时不需要使用<code>sudo</code>。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicTerminalPage.png\" alt=\"img\"></p>\n<blockquote>\n<p>请注意，此虚拟环境中没有活动服务，就像在实际运行的操作系统中一样。这是因为 Cubic 中的终端不是一个“正在运行的”操作系统。它只是一个安全、隔离的文件系统，您对其具有 root 访问权限，以便编辑、添加或删除文件。因此<code>systemd</code>等服务无法在 Cubic 的虚拟环境中运行。</p>\n</blockquote>\n<p>您对文件系统所做的任何更改都会立即应用。完成更改后，单击 <code>Next</code> 按钮。请记住，您始终可以返回到此项目的终端环境，以便在将来进行其他自定义。</p>\n<p>如果您不小心退出了虚拟环境，它将自动重新启动。</p>\n<p>DNS 查找在此环境中可能不起作用，并且由于“Name or service not known”错误，您可能无法使用 apt。这是因为该链接指向不存在的配置。<code>/etc/resolv.conf</code> <code>/run/systemd/resolve/stub-resolv.conf</code> <code>stub-resolv.conf</code></p>\n<p>要解决此问题，请执行以下命令…</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> /run/systemd/resolve/</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">&quot;nameserver 127.0.1.1</span></span><br><span class=\"line\"><span class=\"string\">search network&quot;</span> | <span class=\"built_in\">tee</span> /run/systemd/resolve/resolv.conf</span><br><span class=\"line\"><span class=\"built_in\">ln</span> -sr /run/systemd/resolve/resolv.conf /run/systemd/resolve/stub-resolv.conf</span><br></pre></td></tr></table></figure>\n\n\n\n<p>以下是使用命令行自定义 Ubuntu 的几个示例…</p>\n<p>您可以使用 nano 文本编辑器编辑文件。例如，要编辑源存储库列表，请键入</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nano /etc/apt/sources.list</span><br></pre></td></tr></table></figure>\n\n\n\n<p>要退出 nano，请键入 +，系统将提示您保存文件。键入以保存文件，然后按 接受默认文件名。否则，键入以取消保存文件。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicTerminalPageNano.png\" alt=\"img\"></p>\n<p>您可以通过将文件或目录拖动到终端窗口、使用标题栏中的复制按钮或使用右键单击上下文菜单，将文件或目录复制到<em>当前目录中</em>。尽管 Cubic 目前不支持通过网络复制文件，但您可以在终端环境中使用 <code>scp,rcp</code> 命令来复制网络文件。</p>\n<p>以下是将其他壁纸复制到自定义环境中的示例。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /usr/share/backgrounds</span><br></pre></td></tr></table></figure>\n\n<p>然后只需将新壁纸拖到 Cubic 窗口上。</p>\n<h3 id=\"准备导出镜像\"><a href=\"#准备导出镜像\" class=\"headerlink\" title=\"准备导出镜像\"></a>准备导出镜像</h3><p>Cubic Prepare 页面会自动分析您的自定义项，并为自定义流程的后续步骤准备高级选项：</p>\n<ul>\n<li>确定磁盘引导内核</li>\n<li>识别已安装的软件包</li>\n<li>为典型的安装†创建软件包清单</li>\n<li>为最小安装††创建程序包清单</li>\n<li>保存程序包清单</li>\n</ul>\n<p><img src=\"/post/2024/iso/Cubic/CubicPreparePage.png\" alt=\"img\"></p>\n<p>完成后，此页面将自动过渡到下一页。</p>\n<h3 id=\"自定义系统设置\"><a href=\"#自定义系统设置\" class=\"headerlink\" title=\"自定义系统设置\"></a>自定义系统设置</h3><p>Cubic 选项页面包含三个选项卡：</p>\n<ol>\n<li><a href=\"https://github.com/PJ-Singh-001/wiki/Options-Page#kernel-tab\">Kernel</a></li>\n<li><a href=\"https://github.com/PJ-Singh-001/wiki/Options-Page#preseed-tab\">Preseed</a></li>\n<li><a href=\"https://github.com/PJ-Singh-001/wiki/Options-Page#boot-tab\">Boot</a></li>\n</ol>\n<h4 id=\"内核\"><a href=\"#内核\" class=\"headerlink\" title=\"内核\"></a>内核</h4><p>如果您在<a href=\"https://github.com/PJ-Singh-001/wiki/Terminal-Page\">虚拟环境中</a>安装了其他内核，它们将列在 Kernel （内核） 选项卡上。你可以选择使用其中一个作为新的 live ISO 的启动内核。最好只接受此页面上建议的默认值。</p>\n<p>这不是您的自定义 Linux 系统将使用的内核。<em>此内核将仅用于引导您的新 Live ISO。</em></p>\n<p>无论您在此页面上选择哪个内核来引导 Live ISO，您的自定义 Linux 系统都将使用您在<a href=\"https://github.com/PJ-Singh-001/wiki/Terminal-Page\">虚拟环境中</a>安装并配置为默认内核的内核。（默认内核通常是您安装的最后一个内核）。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicOptionsPageKernelTab.png\" alt=\"img\"></p>\n<h4 id=\"预置\"><a href=\"#预置\" class=\"headerlink\" title=\"预置\"></a>预置</h4><p>Preseed 允许您创建、编辑或删除 Preseed 文件。使用扩展名创建的文件将自动分配可执行权限。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicOptionsPagePreseedTab.png\" alt=\"img\"></p>\n<h4 id=\"引导\"><a href=\"#引导\" class=\"headerlink\" title=\"引导\"></a>引导</h4><p>Boot 允许您更新在引导自定义的 Live ISO 时使用的引导参数。这些文件会自动更新以反映正确的内核文件（vmlinuz 和 initrd）。使用扩展名创建的文件将自动分配可执行权限。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicOptionsPageBootTab2.png\" alt=\"img\"></p>\n<h3 id=\"压缩算法选择\"><a href=\"#压缩算法选择\" class=\"headerlink\" title=\"压缩算法选择\"></a>压缩算法选择</h3><p>Cubic Compression Page 允许您选择用于压缩自定义 Linux 文件系统的算法。对于大多数用户来说，继续使用默认算法 gzip 是可以的。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicCompressionPage.png\" alt=\"img\"></p>\n<h3 id=\"生成ISO镜像\"><a href=\"#生成ISO镜像\" class=\"headerlink\" title=\"生成ISO镜像\"></a>生成ISO镜像</h3><p>在 Cubic 生成页面上，Cubic 会自动将您的自定义打包到新的磁盘映像中。将显示每个步骤的进度和结果。请注意，“压缩自定义的 Linux 文件系统”步骤可能需要很长时间，具体取决于所选的压缩算法和您的系统硬件。（在此步骤中，您可能需要打开系统监视器以跟踪 CPU 利用率）。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicGeneratePage.png\" alt=\"img\"></p>\n<p>您可以随时单击 Back 按钮中断此过程，以便更新之前的选择或导航到虚拟环境并进行您可能忽略的其他更改或自定义。</p>\n<p>最大 ISO 大小为 8 TB，因此可以使用 Cubic 创建大于 4GB 的 ISO。</p>\n<p>完成后，此页面将自动过渡到下一页。</p>\n<h3 id=\"导出完成\"><a href=\"#导出完成\" class=\"headerlink\" title=\"导出完成\"></a>导出完成</h3><p>在 Cubic Finish 页面上，将显示有关自定义磁盘映像的信息。</p>\n<p><img src=\"/post/2024/iso/Cubic/CubicFinishPage.png\" alt=\"img\"></p>\n<p>单击 Test 按钮以测试生成的 ISO。QEMU † 模拟器将启动并引导至新的 ISO。如果您没有足够的内存来允许测试，则不会看到 Test （测试） 按钮。</p>\n<p>单击 Back 按钮进行更改并生成新的 ISO 文件。</p>\n<p>单击自定义磁盘文件名旁边的文件夹图标将打开显示此文件的文件浏览器。单击校验和文件名旁边的文件夹图标将打开显示此文件的文件浏览器。</p>\n<p>如果您想删除所有项目工作文件（为了节省磁盘空间），请选中 “Delete all project files…”复选框。虽然生成的 *.iso 文件和相应的 *.md5 校验和文件不会被删除，但您将来将无法继续自定义此项目。</p>\n<p>但是，如果您选择保留所有项目文件，则可以在将来继续自定义您的项目。</p>\n<p>单击 Close 按钮退出 Cubic。</p>\n"},{"title":"自定义ubuntu-22.04 ISO","date":"2024-12-12T03:30:00.000Z","cover":"/images/ubuntu/ubuntu.png","_content":"\n\n# 自定义ubuntu-22.04 ISO\n\n## 构建条件\n\n1. 一个运行 Ubuntu 的设备（虚拟机也是可以的，但不推荐 WSL1/2，因为 WSL2 经过实际测试会出现一些问题）。\n2. 确保已经安装 `xorriso`、`vim`、`wget`、`7zip`软件包。\n\n```sh\napt install -y 7zip wget xorriso\n```\n\n1. 打开终端。\n2. 全程需要 root 权限，请输入 `sudo -s` 进入 root 权限。\n\n\n\n## 构建步骤\n\n### 下载 ISO\n\n从 [Ubuntu ISO 下载页面](https://releases.ubuntu.com/)下载版本为`22.04`的 Ubuntu 服务器映像 （ISO）。\n\n>我下载的镜像是ubuntu-22.04-live-server-amd64.iso\n\n### 提取 ISO\n\n```sh\n7z -y x ubuntu-22.04-live-server-amd64.iso -ocustom\n```\n\n>注意！在 7z 命令中，没有空格。`-o`\n\n### 引导文件\n\n移动引导文件到上级目录\n\n```sh\nmv  '[BOOT]' ../BOOT\n```\n\n>生成新的ISO时，会生成新的引导文件\n\n### 修改 GRUB\n\n```sh\nvim boot/grub/grub.cfg\n```\n\n在现有菜单项上方添加以下菜单项：\n\n```\nmenuentry \"Autoinstall Ubuntu Server\" {\n    set gfxpayload=keep\n    linux   /casper/vmlinuz quiet autoinstall \"ds=nocloud-net;s=file:///cdrom/server/\"  ---\n    initrd  /casper/initrd\n}\n```\n\n### 创建 autoinstall 指令\n\n```sh\nmkdir server\n\ncat > server/user-data << 'EOF'\n#cloud-config\nautoinstall:\n  version: 1\n  identity:\n    hostname: ubuntu-server\n    password: \"$6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0\"\n    username: ubuntu\nEOF\n\ntouch server/meta-data\n\n```\n\n加密的密码为 `ubuntu`。\n\n用户数据文件的官方文档可以在这里找到：https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html 我在下面提供了一个工作示例：`user-data`\n\n```yaml\n#cloud-config\nautoinstall:\n  # version is an Autoinstall required field.\n  version: 1\n\n  # This adds the default ubuntu-desktop packages to the system.\n  # Any desired additional packages may also be listed here.\n  packages:\n    - ubuntu-server\n\n  # User creation can occur in one of 3 ways:\n  # 1. Create a user using this `identity` section.\n  # 2. Create users as documented in cloud-init inside the user-data section,\n  #    which means this single-user identity section may be removed.\n  # 3. Prompt for user configuration on first boot.  Remove this identity\n  #    section and see the \"Installation without a default user\" section.\n  identity:\n    realname: 'UntouchedWagons'\n    username: untouchedwagons\n    # A password hash is needed. `openssl passwd -6 $CLEARTEXT_PASSWORD` can help.\n    password: ''\n    hostname: ubuntu-test\n\n  locale: en_US.UTF-8\n  keyboard:\n    layout: us\n\n  package_update: true\n  package_upgrade: true\n\n  # Subiquity will, by default, configure a partition layout using LVM.\n  # The 'direct' layout method shown here will produce a non-LVM result.\n  storage:\n    swap:\n      size: 0\n    layout:\n      name: direct\n\n  ssh:\n    allow-pw: true\n    install-server: true\n    authorized-keys:\n      - ssh-key 1\n      - ssh-key 2\n\n  network:\n    network:\n      version: 2\n      ethernets:\n        enp6s18:\n          dhcp4: true\n          dhcp-identifier: mac\n\n  late-commands:\n    - curtin in-target -- update-grub\n    - curtin in-target -- apt-get install -y cloud-init\n    - curtin in-target -- apt-get autoremove -y\n```\n\n>请注意，由于使用了可预测的接口命名，因此可能很难预测接口的名称。\n>\n>在 Proxmox VM 中，Ubuntu 倾向于命名 virtio NIC ，您的里程可能会有所不同。\n>\n>它可能是`enp6s18``eth0``eno1` ，或者完全不同的东西。\n\n### 重建 ISO\n\n我几乎完全从下面列出的 Puget Systems 链接中取消了重建 ISO 的命令，我对每个部分的作用只有一个模糊的概念。\n\n```sh\nxorriso -as mkisofs -r \\\n  -V 'Ubuntu_22.04_Auto' \\\n  -o ../ubuntu-22.04-autoinstall.iso \\\n  --grub2-mbr ../BOOT/1-Boot-NoEmul.img \\\n  -partition_offset 16 \\\n  --mbr-force-bootable \\\n  -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b ../BOOT/2-Boot-NoEmul.img \\\n  -appended_part_as_gpt \\\n  -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\\n  -c '/boot.catalog' \\\n  -b '/boot/grub/i386-pc/eltorito.img' \\\n    -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\\n  -eltorito-alt-boot \\\n  -e '--interval:appended_partition_2:::' \\\n  -no-emul-boot \\\n  .\n```\n\n如果一切顺利，您应该会看到以下消息`Writing to 'stdio:../ubuntu-24.04-autoinstall.iso' completed successfully.`\n\n就是这样。您可以将 ISO 上传到语音管理程序，使用 RUFUS 将其写入 USB 驱动器，或将其复制到 IODD 外部虚拟 ODD。\n\n## 脚本\n\n```sh\n#!/bin/bash\n\nset -e\n##################################### 全局变量 ####################################\n\n#获取当前脚本所在的目录。\nscript_dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd -P)\n#当前时间\ntoday=$(date +\"%Y-%m-%d-%H%M%S\")\n#创建临时目录\ntmpdir=\"iso_dir\"\n\n# 是否使用自动配置\nall_in_one=0\n# user-data 文件\nuser_data_file=''\n# meta-data 文件\nmeta_data_file=''\n# 原始ISO镜像文件\nsource_iso=''\n# 生成的ISO文件\ndestination_iso=\"${script_dir}/ubuntu-autoInstall-$today.iso\"\n# autoinstall 配置在ISO中的目录\ninstall_conf_dir=\"server\"\n\n#################################################################################\n\n\nfunction cleanup() {\n        if [ -n \"${tmpdir}\" ]; then\n            rm -rf \"$tmpdir\"\n            log \"🚽 Deleted temporary working directory $tmpdir\"\n        fi\n        if [ ! -f BOOT ]; then\n            rm -rf BOOT\n            log \"🚽 Deleted BOOT directory \"\n        fi\n}\n\nfunction log() {\n        echo >&2 -e \"[$(date +\"%Y-%m-%d %H:%M:%S\")] ${1-}\"\n}\n\nfunction die() {\n        local msg=$1\n        local code=${2-1} # Bash parameter expansion - default exit status 1. See https://wiki.bash-hackers.org/syntax/pe#use_a_default_value\n        log \"$msg\"\n        exit \"$code\"\n}\n\n\nfunction usage() {\n        cat <<EOF\nUsage: $(basename \"${BASH_SOURCE[0]}\") [-h] [-v] [-a]  [-u user-data-file] [-m meta-data-file] [-s source-iso-file] [-d destination-iso-file]\n\n💁 This script will create fully-automated Ubuntu 22.04 Focal Fossa installation media.\n💁 Ubuntu ISO Download Url: https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso\n\nAvailable options:\n\n-h, --help              Print this help and exit\n-v, --verbose           Print script debug info\n-a, --all-in-one        Bake user-data and meta-data into the generated ISO. By default you will\n                        need to boot systems with a CIDATA volume attached containing your\n                        autoinstall user-data and meta-data files.\n                        For more information see: https://ubuntu.com/server/docs/install/autoinstall-quickstart\n-u, --user-data         Path to user-data file. Required if using -a\n-m, --meta-data         Path to meta-data file. Will be an empty file if not specified and using -a\n-s, --source            Source ISO file.\n                        That file will be used by default if it already exists.\n-d, --destination       Destination ISO file. By default ${script_dir}/ubuntu-autoinstall-$today.iso will be\n                        created, overwriting any existing file.\nEOF\n        exit\n}\n\n#检查环境\nfunction checkEnvironment () {\n    log \"🔎 Checking for required utilities...\"\n\t#检查 date 命令是否可用\n\t[[ ! -x \"$(command -v date)\" ]] && die \"💥 date command not found.\" && exit 1\n    [[ ! -x \"$(command -v xorriso)\" ]] && die \"💥 xorriso is not installed. On Ubuntu, install  the 'xorriso' package.\" && exit 1\n    [[ ! -x \"$(command -v 7z)\" ]] && die \"💥 sed is not installed. On Ubuntu, install the '7zip' package.\" && exit 1\n    log \"👍 All required utilities are installed.\"\n}\n\n\nfunction parseParam() {\n\n  while :; do\n    case \"${1-}\" in\n        -h | --help) usage ;;\n        -v | --verbose) set -x ;;\n        -a | --all-in-one) all_in_one=1 ;;\n        -u | --user-data)\n                user_data_file=\"${2-}\"\n                shift\n                ;;\n        -s | --source)\n                source_iso=\"${2-}\"\n                shift\n                ;;\n        -d | --destination)\n                destination_iso=\"${2-}\"\n                shift\n                ;;\n        -m | --meta-data)\n                meta_data_file=\"${2-}\"\n                shift\n                ;;\n        -?*) die \"Unknown option: $1\" ;;\n        *) break ;;  # 如果没有更多参数，退出循环\n    esac\n    shift\n  done\n}\n\n\nfunction checkParam() {\n    if [ ${all_in_one} -ne 0 ]; then\n        [[ -z \"${user_data_file}\" ]] && die \"💥 user-data file was not specified.\" && exit 1\n        [[ ! -f \"$user_data_file\" ]] && die \"💥 user-data file could not be found.\" && exit 1\n        [[ -n \"${meta_data_file}\" ]] && [[ ! -f \"$meta_data_file\" ]] && die \"💥 meta-data file could not be found.\" && exit 1\n    fi\n\n    if [[ -z \"${source_iso}\" ]]; then\n        die \"💥 Source ISO file was not specified.\" && exit 1\n    else\n        [[ ! -f \"${source_iso}\" ]] && die \"💥 Source ISO file could not be found.\" && exit 1\n    fi\n\n\n    destination_iso=$(realpath \"${destination_iso}\")\n    source_iso=$(realpath \"${source_iso}\")\n}\n\n\nfunction setup () {\n    \n    mkdir \"$tmpdir\"\n\n    log \"🧩 Extracting ISO files...\"\n    7z -y -bso0 -bsp1 x \"$source_iso\" -o\"$tmpdir\"\n    log \"👍 Extracted ISO file.\"\n\n    mv $tmpdir/'[BOOT]' ./BOOT\n\n    if [ ${all_in_one} -eq 1 ]; then\n        log \"🧩 Adding user-data and meta-data files...\"\n        mkdir \"$tmpdir/server\"\n        cp \"$user_data_file\" \"$tmpdir/$install_conf_dir/user-data\"\n        if [ -n \"${meta_data_file}\" ]; then\n          cp \"$meta_data_file\" \"$tmpdir/$install_conf_dir/meta-data\"\n        else\n          touch \"$tmpdir/$install_conf_dir/meta-data\"\n        fi\n        log \"👍 Added data and configured kernel command line.\"\n\n\n        log \"🧩 Adding autoinstall parameter to kernel command line...\"\n\t\n        sed -i -e \"s,---, autoinstall ds=nocloud-net;s=\\\"file:///cdrom/$install_conf_dir/\\\" ---,g\" \"$tmpdir/boot/grub/grub.cfg\"\n        log \"👍 Added parameter to UEFI and BIOS kernel command lines.\"\n    fi\n\n}\n\nfunction generateISO() {\n    log \"📦 Repackaging extracted files into an ISO image...\"\n    xorriso -as mkisofs -r \\\n      -V 'UBUNTU_AUTO_ISO' \\\n      -o \"$destination_iso\" \\\n      --grub2-mbr \"./BOOT/1-Boot-NoEmul.img\" \\\n      -partition_offset 16 \\\n      --mbr-force-bootable \\\n      -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b \"./BOOT/2-Boot-NoEmul.img\" \\\n      -appended_part_as_gpt \\\n      -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\\n      -c '/boot.catalog' \\\n      -b '/boot/grub/efi.img' \\\n        -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\\n      -eltorito-alt-boot \\\n      -e '--interval:appended_partition_2:::' \\\n      -no-emul-boot \\\n      $tmpdir\n    log \"👍 Repackaged into ${destination_iso}\"\n    cd ..\n}\n\n\nlog \"👶 Starting up...\"\n# 检查环境\ncheckEnvironment\n# 调用参数解析函数\nparseParam \"$@\"\n\ncleanup\n# 检查参数\ncheckParam\n# 操作镜像\nsetup\n# 生成镜像\ngenerateISO\n\ndie \"✅ Completed.\" 0\n```\n\n\n\n## 参考文档\n\n[Ubuntu 22.04 服务器自动安装 ISO |普吉特系统](https://www.pugetsystems.com/labs/hpc/ubuntu-22-04-server-autoinstall-iso/#Step_2_Unpack_files_and_partition_images_from_the_Ubuntu_2204_live_server_ISO)\n\n[UntouchedWagons/Ubuntu-AutoInstall-Docs：使用 Ubuntu 自动安装功能的简要指南](https://github.com/UntouchedWagons/Ubuntu-AutoInstall-Docs)\n\n[Autoinstall quick start - Ubuntu installation documentation](https://canonical-subiquity.readthedocs-hosted.com/en/latest/howto/autoinstall-quickstart.html)\n\n[启动 - Ubuntu 22.04 build ISO （MBR 和 EFI ） - Ask Ubuntu](https://askubuntu.com/questions/1403546/ubuntu-22-04-build-iso-both-mbr-and-efi)\n\n[build-ubuntu-live: 从零开始制作 Ubuntu 22.04 Live CD](https://gitee.com/narukeu/build-ubuntu-live)\n\n[YasuhiroABE/ub-autoinstall-iso: Creating an custom AutoInstall ISO image for ubuntu 22.04 and 24.04.](https://github.com/YasuhiroABE/ub-autoinstall-iso)","source":"_posts/2024/iso/custom-ubuntu-iso.md","raw":"---\ntitle: 自定义ubuntu-22.04 ISO\ndate: 2024-12-12 11:30:00\ntags:\n  - ISO\ncategories:\n  - Ubuntu\ncover: /images/ubuntu/ubuntu.png\n\n---\n\n\n# 自定义ubuntu-22.04 ISO\n\n## 构建条件\n\n1. 一个运行 Ubuntu 的设备（虚拟机也是可以的，但不推荐 WSL1/2，因为 WSL2 经过实际测试会出现一些问题）。\n2. 确保已经安装 `xorriso`、`vim`、`wget`、`7zip`软件包。\n\n```sh\napt install -y 7zip wget xorriso\n```\n\n1. 打开终端。\n2. 全程需要 root 权限，请输入 `sudo -s` 进入 root 权限。\n\n\n\n## 构建步骤\n\n### 下载 ISO\n\n从 [Ubuntu ISO 下载页面](https://releases.ubuntu.com/)下载版本为`22.04`的 Ubuntu 服务器映像 （ISO）。\n\n>我下载的镜像是ubuntu-22.04-live-server-amd64.iso\n\n### 提取 ISO\n\n```sh\n7z -y x ubuntu-22.04-live-server-amd64.iso -ocustom\n```\n\n>注意！在 7z 命令中，没有空格。`-o`\n\n### 引导文件\n\n移动引导文件到上级目录\n\n```sh\nmv  '[BOOT]' ../BOOT\n```\n\n>生成新的ISO时，会生成新的引导文件\n\n### 修改 GRUB\n\n```sh\nvim boot/grub/grub.cfg\n```\n\n在现有菜单项上方添加以下菜单项：\n\n```\nmenuentry \"Autoinstall Ubuntu Server\" {\n    set gfxpayload=keep\n    linux   /casper/vmlinuz quiet autoinstall \"ds=nocloud-net;s=file:///cdrom/server/\"  ---\n    initrd  /casper/initrd\n}\n```\n\n### 创建 autoinstall 指令\n\n```sh\nmkdir server\n\ncat > server/user-data << 'EOF'\n#cloud-config\nautoinstall:\n  version: 1\n  identity:\n    hostname: ubuntu-server\n    password: \"$6$exDY1mhS4KUYCE/2$zmn9ToZwTKLhCw.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0\"\n    username: ubuntu\nEOF\n\ntouch server/meta-data\n\n```\n\n加密的密码为 `ubuntu`。\n\n用户数据文件的官方文档可以在这里找到：https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html 我在下面提供了一个工作示例：`user-data`\n\n```yaml\n#cloud-config\nautoinstall:\n  # version is an Autoinstall required field.\n  version: 1\n\n  # This adds the default ubuntu-desktop packages to the system.\n  # Any desired additional packages may also be listed here.\n  packages:\n    - ubuntu-server\n\n  # User creation can occur in one of 3 ways:\n  # 1. Create a user using this `identity` section.\n  # 2. Create users as documented in cloud-init inside the user-data section,\n  #    which means this single-user identity section may be removed.\n  # 3. Prompt for user configuration on first boot.  Remove this identity\n  #    section and see the \"Installation without a default user\" section.\n  identity:\n    realname: 'UntouchedWagons'\n    username: untouchedwagons\n    # A password hash is needed. `openssl passwd -6 $CLEARTEXT_PASSWORD` can help.\n    password: ''\n    hostname: ubuntu-test\n\n  locale: en_US.UTF-8\n  keyboard:\n    layout: us\n\n  package_update: true\n  package_upgrade: true\n\n  # Subiquity will, by default, configure a partition layout using LVM.\n  # The 'direct' layout method shown here will produce a non-LVM result.\n  storage:\n    swap:\n      size: 0\n    layout:\n      name: direct\n\n  ssh:\n    allow-pw: true\n    install-server: true\n    authorized-keys:\n      - ssh-key 1\n      - ssh-key 2\n\n  network:\n    network:\n      version: 2\n      ethernets:\n        enp6s18:\n          dhcp4: true\n          dhcp-identifier: mac\n\n  late-commands:\n    - curtin in-target -- update-grub\n    - curtin in-target -- apt-get install -y cloud-init\n    - curtin in-target -- apt-get autoremove -y\n```\n\n>请注意，由于使用了可预测的接口命名，因此可能很难预测接口的名称。\n>\n>在 Proxmox VM 中，Ubuntu 倾向于命名 virtio NIC ，您的里程可能会有所不同。\n>\n>它可能是`enp6s18``eth0``eno1` ，或者完全不同的东西。\n\n### 重建 ISO\n\n我几乎完全从下面列出的 Puget Systems 链接中取消了重建 ISO 的命令，我对每个部分的作用只有一个模糊的概念。\n\n```sh\nxorriso -as mkisofs -r \\\n  -V 'Ubuntu_22.04_Auto' \\\n  -o ../ubuntu-22.04-autoinstall.iso \\\n  --grub2-mbr ../BOOT/1-Boot-NoEmul.img \\\n  -partition_offset 16 \\\n  --mbr-force-bootable \\\n  -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b ../BOOT/2-Boot-NoEmul.img \\\n  -appended_part_as_gpt \\\n  -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\\n  -c '/boot.catalog' \\\n  -b '/boot/grub/i386-pc/eltorito.img' \\\n    -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\\n  -eltorito-alt-boot \\\n  -e '--interval:appended_partition_2:::' \\\n  -no-emul-boot \\\n  .\n```\n\n如果一切顺利，您应该会看到以下消息`Writing to 'stdio:../ubuntu-24.04-autoinstall.iso' completed successfully.`\n\n就是这样。您可以将 ISO 上传到语音管理程序，使用 RUFUS 将其写入 USB 驱动器，或将其复制到 IODD 外部虚拟 ODD。\n\n## 脚本\n\n```sh\n#!/bin/bash\n\nset -e\n##################################### 全局变量 ####################################\n\n#获取当前脚本所在的目录。\nscript_dir=$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" &>/dev/null && pwd -P)\n#当前时间\ntoday=$(date +\"%Y-%m-%d-%H%M%S\")\n#创建临时目录\ntmpdir=\"iso_dir\"\n\n# 是否使用自动配置\nall_in_one=0\n# user-data 文件\nuser_data_file=''\n# meta-data 文件\nmeta_data_file=''\n# 原始ISO镜像文件\nsource_iso=''\n# 生成的ISO文件\ndestination_iso=\"${script_dir}/ubuntu-autoInstall-$today.iso\"\n# autoinstall 配置在ISO中的目录\ninstall_conf_dir=\"server\"\n\n#################################################################################\n\n\nfunction cleanup() {\n        if [ -n \"${tmpdir}\" ]; then\n            rm -rf \"$tmpdir\"\n            log \"🚽 Deleted temporary working directory $tmpdir\"\n        fi\n        if [ ! -f BOOT ]; then\n            rm -rf BOOT\n            log \"🚽 Deleted BOOT directory \"\n        fi\n}\n\nfunction log() {\n        echo >&2 -e \"[$(date +\"%Y-%m-%d %H:%M:%S\")] ${1-}\"\n}\n\nfunction die() {\n        local msg=$1\n        local code=${2-1} # Bash parameter expansion - default exit status 1. See https://wiki.bash-hackers.org/syntax/pe#use_a_default_value\n        log \"$msg\"\n        exit \"$code\"\n}\n\n\nfunction usage() {\n        cat <<EOF\nUsage: $(basename \"${BASH_SOURCE[0]}\") [-h] [-v] [-a]  [-u user-data-file] [-m meta-data-file] [-s source-iso-file] [-d destination-iso-file]\n\n💁 This script will create fully-automated Ubuntu 22.04 Focal Fossa installation media.\n💁 Ubuntu ISO Download Url: https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso\n\nAvailable options:\n\n-h, --help              Print this help and exit\n-v, --verbose           Print script debug info\n-a, --all-in-one        Bake user-data and meta-data into the generated ISO. By default you will\n                        need to boot systems with a CIDATA volume attached containing your\n                        autoinstall user-data and meta-data files.\n                        For more information see: https://ubuntu.com/server/docs/install/autoinstall-quickstart\n-u, --user-data         Path to user-data file. Required if using -a\n-m, --meta-data         Path to meta-data file. Will be an empty file if not specified and using -a\n-s, --source            Source ISO file.\n                        That file will be used by default if it already exists.\n-d, --destination       Destination ISO file. By default ${script_dir}/ubuntu-autoinstall-$today.iso will be\n                        created, overwriting any existing file.\nEOF\n        exit\n}\n\n#检查环境\nfunction checkEnvironment () {\n    log \"🔎 Checking for required utilities...\"\n\t#检查 date 命令是否可用\n\t[[ ! -x \"$(command -v date)\" ]] && die \"💥 date command not found.\" && exit 1\n    [[ ! -x \"$(command -v xorriso)\" ]] && die \"💥 xorriso is not installed. On Ubuntu, install  the 'xorriso' package.\" && exit 1\n    [[ ! -x \"$(command -v 7z)\" ]] && die \"💥 sed is not installed. On Ubuntu, install the '7zip' package.\" && exit 1\n    log \"👍 All required utilities are installed.\"\n}\n\n\nfunction parseParam() {\n\n  while :; do\n    case \"${1-}\" in\n        -h | --help) usage ;;\n        -v | --verbose) set -x ;;\n        -a | --all-in-one) all_in_one=1 ;;\n        -u | --user-data)\n                user_data_file=\"${2-}\"\n                shift\n                ;;\n        -s | --source)\n                source_iso=\"${2-}\"\n                shift\n                ;;\n        -d | --destination)\n                destination_iso=\"${2-}\"\n                shift\n                ;;\n        -m | --meta-data)\n                meta_data_file=\"${2-}\"\n                shift\n                ;;\n        -?*) die \"Unknown option: $1\" ;;\n        *) break ;;  # 如果没有更多参数，退出循环\n    esac\n    shift\n  done\n}\n\n\nfunction checkParam() {\n    if [ ${all_in_one} -ne 0 ]; then\n        [[ -z \"${user_data_file}\" ]] && die \"💥 user-data file was not specified.\" && exit 1\n        [[ ! -f \"$user_data_file\" ]] && die \"💥 user-data file could not be found.\" && exit 1\n        [[ -n \"${meta_data_file}\" ]] && [[ ! -f \"$meta_data_file\" ]] && die \"💥 meta-data file could not be found.\" && exit 1\n    fi\n\n    if [[ -z \"${source_iso}\" ]]; then\n        die \"💥 Source ISO file was not specified.\" && exit 1\n    else\n        [[ ! -f \"${source_iso}\" ]] && die \"💥 Source ISO file could not be found.\" && exit 1\n    fi\n\n\n    destination_iso=$(realpath \"${destination_iso}\")\n    source_iso=$(realpath \"${source_iso}\")\n}\n\n\nfunction setup () {\n    \n    mkdir \"$tmpdir\"\n\n    log \"🧩 Extracting ISO files...\"\n    7z -y -bso0 -bsp1 x \"$source_iso\" -o\"$tmpdir\"\n    log \"👍 Extracted ISO file.\"\n\n    mv $tmpdir/'[BOOT]' ./BOOT\n\n    if [ ${all_in_one} -eq 1 ]; then\n        log \"🧩 Adding user-data and meta-data files...\"\n        mkdir \"$tmpdir/server\"\n        cp \"$user_data_file\" \"$tmpdir/$install_conf_dir/user-data\"\n        if [ -n \"${meta_data_file}\" ]; then\n          cp \"$meta_data_file\" \"$tmpdir/$install_conf_dir/meta-data\"\n        else\n          touch \"$tmpdir/$install_conf_dir/meta-data\"\n        fi\n        log \"👍 Added data and configured kernel command line.\"\n\n\n        log \"🧩 Adding autoinstall parameter to kernel command line...\"\n\t\n        sed -i -e \"s,---, autoinstall ds=nocloud-net;s=\\\"file:///cdrom/$install_conf_dir/\\\" ---,g\" \"$tmpdir/boot/grub/grub.cfg\"\n        log \"👍 Added parameter to UEFI and BIOS kernel command lines.\"\n    fi\n\n}\n\nfunction generateISO() {\n    log \"📦 Repackaging extracted files into an ISO image...\"\n    xorriso -as mkisofs -r \\\n      -V 'UBUNTU_AUTO_ISO' \\\n      -o \"$destination_iso\" \\\n      --grub2-mbr \"./BOOT/1-Boot-NoEmul.img\" \\\n      -partition_offset 16 \\\n      --mbr-force-bootable \\\n      -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b \"./BOOT/2-Boot-NoEmul.img\" \\\n      -appended_part_as_gpt \\\n      -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\\n      -c '/boot.catalog' \\\n      -b '/boot/grub/efi.img' \\\n        -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\\n      -eltorito-alt-boot \\\n      -e '--interval:appended_partition_2:::' \\\n      -no-emul-boot \\\n      $tmpdir\n    log \"👍 Repackaged into ${destination_iso}\"\n    cd ..\n}\n\n\nlog \"👶 Starting up...\"\n# 检查环境\ncheckEnvironment\n# 调用参数解析函数\nparseParam \"$@\"\n\ncleanup\n# 检查参数\ncheckParam\n# 操作镜像\nsetup\n# 生成镜像\ngenerateISO\n\ndie \"✅ Completed.\" 0\n```\n\n\n\n## 参考文档\n\n[Ubuntu 22.04 服务器自动安装 ISO |普吉特系统](https://www.pugetsystems.com/labs/hpc/ubuntu-22-04-server-autoinstall-iso/#Step_2_Unpack_files_and_partition_images_from_the_Ubuntu_2204_live_server_ISO)\n\n[UntouchedWagons/Ubuntu-AutoInstall-Docs：使用 Ubuntu 自动安装功能的简要指南](https://github.com/UntouchedWagons/Ubuntu-AutoInstall-Docs)\n\n[Autoinstall quick start - Ubuntu installation documentation](https://canonical-subiquity.readthedocs-hosted.com/en/latest/howto/autoinstall-quickstart.html)\n\n[启动 - Ubuntu 22.04 build ISO （MBR 和 EFI ） - Ask Ubuntu](https://askubuntu.com/questions/1403546/ubuntu-22-04-build-iso-both-mbr-and-efi)\n\n[build-ubuntu-live: 从零开始制作 Ubuntu 22.04 Live CD](https://gitee.com/narukeu/build-ubuntu-live)\n\n[YasuhiroABE/ub-autoinstall-iso: Creating an custom AutoInstall ISO image for ubuntu 22.04 and 24.04.](https://github.com/YasuhiroABE/ub-autoinstall-iso)","slug":"2024/iso/custom-ubuntu-iso","published":1,"updated":"2025-01-05T09:49:42.472Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mzd00057zpn467m6cdi","content":"<h1 id=\"自定义ubuntu-22-04-ISO\"><a href=\"#自定义ubuntu-22-04-ISO\" class=\"headerlink\" title=\"自定义ubuntu-22.04 ISO\"></a>自定义ubuntu-22.04 ISO</h1><h2 id=\"构建条件\"><a href=\"#构建条件\" class=\"headerlink\" title=\"构建条件\"></a>构建条件</h2><ol>\n<li>一个运行 Ubuntu 的设备（虚拟机也是可以的，但不推荐 WSL1&#x2F;2，因为 WSL2 经过实际测试会出现一些问题）。</li>\n<li>确保已经安装 <code>xorriso</code>、<code>vim</code>、<code>wget</code>、<code>7zip</code>软件包。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y 7zip wget xorriso</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>打开终端。</li>\n<li>全程需要 root 权限，请输入 <code>sudo -s</code> 进入 root 权限。</li>\n</ol>\n<h2 id=\"构建步骤\"><a href=\"#构建步骤\" class=\"headerlink\" title=\"构建步骤\"></a>构建步骤</h2><h3 id=\"下载-ISO\"><a href=\"#下载-ISO\" class=\"headerlink\" title=\"下载 ISO\"></a>下载 ISO</h3><p>从 <a href=\"https://releases.ubuntu.com/\">Ubuntu ISO 下载页面</a>下载版本为<code>22.04</code>的 Ubuntu 服务器映像 （ISO）。</p>\n<blockquote>\n<p>我下载的镜像是ubuntu-22.04-live-server-amd64.iso</p>\n</blockquote>\n<h3 id=\"提取-ISO\"><a href=\"#提取-ISO\" class=\"headerlink\" title=\"提取 ISO\"></a>提取 ISO</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7z -y x ubuntu-22.04-live-server-amd64.iso -ocustom</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意！在 7z 命令中，没有空格。<code>-o</code></p>\n</blockquote>\n<h3 id=\"引导文件\"><a href=\"#引导文件\" class=\"headerlink\" title=\"引导文件\"></a>引导文件</h3><p>移动引导文件到上级目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span>  <span class=\"string\">&#x27;[BOOT]&#x27;</span> ../BOOT</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>生成新的ISO时，会生成新的引导文件</p>\n</blockquote>\n<h3 id=\"修改-GRUB\"><a href=\"#修改-GRUB\" class=\"headerlink\" title=\"修改 GRUB\"></a>修改 GRUB</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n\n<p>在现有菜单项上方添加以下菜单项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menuentry &quot;Autoinstall Ubuntu Server&quot; &#123;</span><br><span class=\"line\">    set gfxpayload=keep</span><br><span class=\"line\">    linux   /casper/vmlinuz quiet autoinstall &quot;ds=nocloud-net;s=file:///cdrom/server/&quot;  ---</span><br><span class=\"line\">    initrd  /casper/initrd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-autoinstall-指令\"><a href=\"#创建-autoinstall-指令\" class=\"headerlink\" title=\"创建 autoinstall 指令\"></a>创建 autoinstall 指令</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; server/user-data &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\">autoinstall:</span><br><span class=\"line\">  version: 1</span><br><span class=\"line\">  identity:</span><br><span class=\"line\">    hostname: ubuntu-server</span><br><span class=\"line\">    password: <span class=\"string\">&quot;$6<span class=\"variable\">$exDY1mhS4KUYCE</span>/2<span class=\"variable\">$zmn9ToZwTKLhCw</span>.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0&quot;</span></span><br><span class=\"line\">    username: ubuntu</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">touch</span> server/meta-data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>加密的密码为 <code>ubuntu</code>。</p>\n<p>用户数据文件的官方文档可以在这里找到：<a href=\"https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html\">https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html</a> 我在下面提供了一个工作示例：<code>user-data</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\"><span class=\"attr\">autoinstall:</span></span><br><span class=\"line\">  <span class=\"comment\"># version is an Autoinstall required field.</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># This adds the default ubuntu-desktop packages to the system.</span></span><br><span class=\"line\">  <span class=\"comment\"># Any desired additional packages may also be listed here.</span></span><br><span class=\"line\">  <span class=\"attr\">packages:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ubuntu-server</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># User creation can occur in one of 3 ways:</span></span><br><span class=\"line\">  <span class=\"comment\"># 1. Create a user using this `identity` section.</span></span><br><span class=\"line\">  <span class=\"comment\"># 2. Create users as documented in cloud-init inside the user-data section,</span></span><br><span class=\"line\">  <span class=\"comment\">#    which means this single-user identity section may be removed.</span></span><br><span class=\"line\">  <span class=\"comment\"># 3. Prompt for user configuration on first boot.  Remove this identity</span></span><br><span class=\"line\">  <span class=\"comment\">#    section and see the &quot;Installation without a default user&quot; section.</span></span><br><span class=\"line\">  <span class=\"attr\">identity:</span></span><br><span class=\"line\">    <span class=\"attr\">realname:</span> <span class=\"string\">&#x27;UntouchedWagons&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">untouchedwagons</span></span><br><span class=\"line\">    <span class=\"comment\"># A password hash is needed. `openssl passwd -6 $CLEARTEXT_PASSWORD` can help.</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">ubuntu-test</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">locale:</span> <span class=\"string\">en_US.UTF-8</span></span><br><span class=\"line\">  <span class=\"attr\">keyboard:</span></span><br><span class=\"line\">    <span class=\"attr\">layout:</span> <span class=\"string\">us</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">package_update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">package_upgrade:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Subiquity will, by default, configure a partition layout using LVM.</span></span><br><span class=\"line\">  <span class=\"comment\"># The &#x27;direct&#x27; layout method shown here will produce a non-LVM result.</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">swap:</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">layout:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">direct</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">ssh:</span></span><br><span class=\"line\">    <span class=\"attr\">allow-pw:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">install-server:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">authorized-keys:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ssh-key</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ssh-key</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">network:</span></span><br><span class=\"line\">    <span class=\"attr\">network:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">ethernets:</span></span><br><span class=\"line\">        <span class=\"attr\">enp6s18:</span></span><br><span class=\"line\">          <span class=\"attr\">dhcp4:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">dhcp-identifier:</span> <span class=\"string\">mac</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">late-commands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">curtin</span> <span class=\"string\">in-target</span> <span class=\"string\">--</span> <span class=\"string\">update-grub</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">curtin</span> <span class=\"string\">in-target</span> <span class=\"string\">--</span> <span class=\"string\">apt-get</span> <span class=\"string\">install</span> <span class=\"string\">-y</span> <span class=\"string\">cloud-init</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">curtin</span> <span class=\"string\">in-target</span> <span class=\"string\">--</span> <span class=\"string\">apt-get</span> <span class=\"string\">autoremove</span> <span class=\"string\">-y</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请注意，由于使用了可预测的接口命名，因此可能很难预测接口的名称。</p>\n<p>在 Proxmox VM 中，Ubuntu 倾向于命名 virtio NIC ，您的里程可能会有所不同。</p>\n<p>它可能是<code>enp6s18``eth0``eno1</code> ，或者完全不同的东西。</p>\n</blockquote>\n<h3 id=\"重建-ISO\"><a href=\"#重建-ISO\" class=\"headerlink\" title=\"重建 ISO\"></a>重建 ISO</h3><p>我几乎完全从下面列出的 Puget Systems 链接中取消了重建 ISO 的命令，我对每个部分的作用只有一个模糊的概念。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xorriso -as mkisofs -r \\</span><br><span class=\"line\">  -V <span class=\"string\">&#x27;Ubuntu_22.04_Auto&#x27;</span> \\</span><br><span class=\"line\">  -o ../ubuntu-22.04-autoinstall.iso \\</span><br><span class=\"line\">  --grub2-mbr ../BOOT/1-Boot-NoEmul.img \\</span><br><span class=\"line\">  -partition_offset 16 \\</span><br><span class=\"line\">  --mbr-force-bootable \\</span><br><span class=\"line\">  -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b ../BOOT/2-Boot-NoEmul.img \\</span><br><span class=\"line\">  -appended_part_as_gpt \\</span><br><span class=\"line\">  -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\</span><br><span class=\"line\">  -c <span class=\"string\">&#x27;/boot.catalog&#x27;</span> \\</span><br><span class=\"line\">  -b <span class=\"string\">&#x27;/boot/grub/i386-pc/eltorito.img&#x27;</span> \\</span><br><span class=\"line\">    -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\</span><br><span class=\"line\">  -eltorito-alt-boot \\</span><br><span class=\"line\">  -e <span class=\"string\">&#x27;--interval:appended_partition_2:::&#x27;</span> \\</span><br><span class=\"line\">  -no-emul-boot \\</span><br><span class=\"line\">  .</span><br></pre></td></tr></table></figure>\n\n<p>如果一切顺利，您应该会看到以下消息<code>Writing to &#39;stdio:../ubuntu-24.04-autoinstall.iso&#39; completed successfully.</code></p>\n<p>就是这样。您可以将 ISO 上传到语音管理程序，使用 RUFUS 将其写入 USB 驱动器，或将其复制到 IODD 外部虚拟 ODD。</p>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"><span class=\"comment\">##################################### 全局变量 ####################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取当前脚本所在的目录。</span></span><br><span class=\"line\">script_dir=$(<span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(dirname <span class=\"string\">&quot;<span class=\"variable\">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span>)</span>&quot;</span> &amp;&gt;/dev/null &amp;&amp; <span class=\"built_in\">pwd</span> -P)</span><br><span class=\"line\"><span class=\"comment\">#当前时间</span></span><br><span class=\"line\">today=$(<span class=\"built_in\">date</span> +<span class=\"string\">&quot;%Y-%m-%d-%H%M%S&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#创建临时目录</span></span><br><span class=\"line\">tmpdir=<span class=\"string\">&quot;iso_dir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否使用自动配置</span></span><br><span class=\"line\">all_in_one=0</span><br><span class=\"line\"><span class=\"comment\"># user-data 文件</span></span><br><span class=\"line\">user_data_file=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># meta-data 文件</span></span><br><span class=\"line\">meta_data_file=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 原始ISO镜像文件</span></span><br><span class=\"line\">source_iso=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 生成的ISO文件</span></span><br><span class=\"line\">destination_iso=<span class=\"string\">&quot;<span class=\"variable\">$&#123;script_dir&#125;</span>/ubuntu-autoInstall-<span class=\"variable\">$today</span>.iso&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># autoinstall 配置在ISO中的目录</span></span><br><span class=\"line\">install_conf_dir=<span class=\"string\">&quot;server&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#################################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">cleanup</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;tmpdir&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">rm</span> -rf <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">log</span> <span class=\"string\">&quot;🚽 Deleted temporary working directory <span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ ! -f BOOT ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">rm</span> -rf BOOT</span><br><span class=\"line\">            <span class=\"built_in\">log</span> <span class=\"string\">&quot;🚽 Deleted BOOT directory &quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">log</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> &gt;&amp;2 -e <span class=\"string\">&quot;[<span class=\"subst\">$(date +<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span>] <span class=\"variable\">$&#123;1-&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">die</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">local</span> msg=<span class=\"variable\">$1</span></span><br><span class=\"line\">        <span class=\"built_in\">local</span> code=<span class=\"variable\">$&#123;2-1&#125;</span> <span class=\"comment\"># Bash parameter expansion - default exit status 1. See https://wiki.bash-hackers.org/syntax/pe#use_a_default_value</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;<span class=\"variable\">$msg</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> <span class=\"string\">&quot;<span class=\"variable\">$code</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">usage</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">Usage: $(basename &quot;$&#123;BASH_SOURCE[0]&#125;&quot;) [-h] [-v] [-a]  [-u user-data-file] [-m meta-data-file] [-s source-iso-file] [-d destination-iso-file]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">💁 This script will create fully-automated Ubuntu 22.04 Focal Fossa installation media.</span></span><br><span class=\"line\"><span class=\"string\">💁 Ubuntu ISO Download Url: https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Available options:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-h, --help              Print this help and exit</span></span><br><span class=\"line\"><span class=\"string\">-v, --verbose           Print script debug info</span></span><br><span class=\"line\"><span class=\"string\">-a, --all-in-one        Bake user-data and meta-data into the generated ISO. By default you will</span></span><br><span class=\"line\"><span class=\"string\">                        need to boot systems with a CIDATA volume attached containing your</span></span><br><span class=\"line\"><span class=\"string\">                        autoinstall user-data and meta-data files.</span></span><br><span class=\"line\"><span class=\"string\">                        For more information see: https://ubuntu.com/server/docs/install/autoinstall-quickstart</span></span><br><span class=\"line\"><span class=\"string\">-u, --user-data         Path to user-data file. Required if using -a</span></span><br><span class=\"line\"><span class=\"string\">-m, --meta-data         Path to meta-data file. Will be an empty file if not specified and using -a</span></span><br><span class=\"line\"><span class=\"string\">-s, --source            Source ISO file.</span></span><br><span class=\"line\"><span class=\"string\">                        That file will be used by default if it already exists.</span></span><br><span class=\"line\"><span class=\"string\">-d, --destination       Destination ISO file. By default $&#123;script_dir&#125;/ubuntu-autoinstall-$today.iso will be</span></span><br><span class=\"line\"><span class=\"string\">                        created, overwriting any existing file.</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查环境</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">checkEnvironment</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;🔎 Checking for required utilities...&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">#检查 date 命令是否可用</span></span><br><span class=\"line\">\t[[ ! -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v date)</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 date command not found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    [[ ! -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v xorriso)</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 xorriso is not installed. On Ubuntu, install  the &#x27;xorriso&#x27; package.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    [[ ! -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v 7z)</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 sed is not installed. On Ubuntu, install the &#x27;7zip&#x27; package.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 All required utilities are installed.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">parseParam</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> :; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;1-&#125;</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        -h | --<span class=\"built_in\">help</span>) usage ;;</span><br><span class=\"line\">        -v | --verbose) <span class=\"built_in\">set</span> -x ;;</span><br><span class=\"line\">        -a | --all-in-one) all_in_one=1 ;;</span><br><span class=\"line\">        -u | --user-data)</span><br><span class=\"line\">                user_data_file=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -s | --<span class=\"built_in\">source</span>)</span><br><span class=\"line\">                source_iso=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -d | --destination)</span><br><span class=\"line\">                destination_iso=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -m | --meta-data)</span><br><span class=\"line\">                meta_data_file=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -?*) die <span class=\"string\">&quot;Unknown option: <span class=\"variable\">$1</span>&quot;</span> ;;</span><br><span class=\"line\">        *) <span class=\"built_in\">break</span> ;;  <span class=\"comment\"># 如果没有更多参数，退出循环</span></span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">checkParam</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;all_in_one&#125;</span> -ne 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        [[ -z <span class=\"string\">&quot;<span class=\"variable\">$&#123;user_data_file&#125;</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 user-data file was not specified.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        [[ ! -f <span class=\"string\">&quot;<span class=\"variable\">$user_data_file</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 user-data file could not be found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        [[ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;meta_data_file&#125;</span>&quot;</span> ]] &amp;&amp; [[ ! -f <span class=\"string\">&quot;<span class=\"variable\">$meta_data_file</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 meta-data file could not be found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$&#123;source_iso&#125;</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        die <span class=\"string\">&quot;💥 Source ISO file was not specified.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        [[ ! -f <span class=\"string\">&quot;<span class=\"variable\">$&#123;source_iso&#125;</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 Source ISO file could not be found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    destination_iso=$(<span class=\"built_in\">realpath</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;destination_iso&#125;</span>&quot;</span>)</span><br><span class=\"line\">    source_iso=$(<span class=\"built_in\">realpath</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;source_iso&#125;</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setup</span></span> () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">mkdir</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;🧩 Extracting ISO files...&quot;</span></span><br><span class=\"line\">    7z -y -bso0 -bsp1 x <span class=\"string\">&quot;<span class=\"variable\">$source_iso</span>&quot;</span> -o<span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Extracted ISO file.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mv</span> <span class=\"variable\">$tmpdir</span>/<span class=\"string\">&#x27;[BOOT]&#x27;</span> ./BOOT</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;all_in_one&#125;</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;🧩 Adding user-data and meta-data files...&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">mkdir</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/server&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">cp</span> <span class=\"string\">&quot;<span class=\"variable\">$user_data_file</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/<span class=\"variable\">$install_conf_dir</span>/user-data&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;meta_data_file&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">          <span class=\"built_in\">cp</span> <span class=\"string\">&quot;<span class=\"variable\">$meta_data_file</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/<span class=\"variable\">$install_conf_dir</span>/meta-data&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          <span class=\"built_in\">touch</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/<span class=\"variable\">$install_conf_dir</span>/meta-data&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Added data and configured kernel command line.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;🧩 Adding autoinstall parameter to kernel command line...&quot;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">        sed -i -e <span class=\"string\">&quot;s,---, autoinstall ds=nocloud-net;s=\\&quot;file:///cdrom/<span class=\"variable\">$install_conf_dir</span>/\\&quot; ---,g&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/boot/grub/grub.cfg&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Added parameter to UEFI and BIOS kernel command lines.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">generateISO</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;📦 Repackaging extracted files into an ISO image...&quot;</span></span><br><span class=\"line\">    xorriso -as mkisofs -r \\</span><br><span class=\"line\">      -V <span class=\"string\">&#x27;UBUNTU_AUTO_ISO&#x27;</span> \\</span><br><span class=\"line\">      -o <span class=\"string\">&quot;<span class=\"variable\">$destination_iso</span>&quot;</span> \\</span><br><span class=\"line\">      --grub2-mbr <span class=\"string\">&quot;./BOOT/1-Boot-NoEmul.img&quot;</span> \\</span><br><span class=\"line\">      -partition_offset 16 \\</span><br><span class=\"line\">      --mbr-force-bootable \\</span><br><span class=\"line\">      -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b <span class=\"string\">&quot;./BOOT/2-Boot-NoEmul.img&quot;</span> \\</span><br><span class=\"line\">      -appended_part_as_gpt \\</span><br><span class=\"line\">      -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\</span><br><span class=\"line\">      -c <span class=\"string\">&#x27;/boot.catalog&#x27;</span> \\</span><br><span class=\"line\">      -b <span class=\"string\">&#x27;/boot/grub/efi.img&#x27;</span> \\</span><br><span class=\"line\">        -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\</span><br><span class=\"line\">      -eltorito-alt-boot \\</span><br><span class=\"line\">      -e <span class=\"string\">&#x27;--interval:appended_partition_2:::&#x27;</span> \\</span><br><span class=\"line\">      -no-emul-boot \\</span><br><span class=\"line\">      <span class=\"variable\">$tmpdir</span></span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Repackaged into <span class=\"variable\">$&#123;destination_iso&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">log</span> <span class=\"string\">&quot;👶 Starting up...&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 检查环境</span></span><br><span class=\"line\">checkEnvironment</span><br><span class=\"line\"><span class=\"comment\"># 调用参数解析函数</span></span><br><span class=\"line\">parseParam <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cleanup</span><br><span class=\"line\"><span class=\"comment\"># 检查参数</span></span><br><span class=\"line\">checkParam</span><br><span class=\"line\"><span class=\"comment\"># 操作镜像</span></span><br><span class=\"line\">setup</span><br><span class=\"line\"><span class=\"comment\"># 生成镜像</span></span><br><span class=\"line\">generateISO</span><br><span class=\"line\"></span><br><span class=\"line\">die <span class=\"string\">&quot;✅ Completed.&quot;</span> 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://www.pugetsystems.com/labs/hpc/ubuntu-22-04-server-autoinstall-iso/#Step_2_Unpack_files_and_partition_images_from_the_Ubuntu_2204_live_server_ISO\">Ubuntu 22.04 服务器自动安装 ISO |普吉特系统</a></p>\n<p><a href=\"https://github.com/UntouchedWagons/Ubuntu-AutoInstall-Docs\">UntouchedWagons&#x2F;Ubuntu-AutoInstall-Docs：使用 Ubuntu 自动安装功能的简要指南</a></p>\n<p><a href=\"https://canonical-subiquity.readthedocs-hosted.com/en/latest/howto/autoinstall-quickstart.html\">Autoinstall quick start - Ubuntu installation documentation</a></p>\n<p><a href=\"https://askubuntu.com/questions/1403546/ubuntu-22-04-build-iso-both-mbr-and-efi\">启动 - Ubuntu 22.04 build ISO （MBR 和 EFI ） - Ask Ubuntu</a></p>\n<p><a href=\"https://gitee.com/narukeu/build-ubuntu-live\">build-ubuntu-live: 从零开始制作 Ubuntu 22.04 Live CD</a></p>\n<p><a href=\"https://github.com/YasuhiroABE/ub-autoinstall-iso\">YasuhiroABE&#x2F;ub-autoinstall-iso: Creating an custom AutoInstall ISO image for ubuntu 22.04 and 24.04.</a></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"自定义ubuntu-22-04-ISO\"><a href=\"#自定义ubuntu-22-04-ISO\" class=\"headerlink\" title=\"自定义ubuntu-22.04 ISO\"></a>自定义ubuntu-22.04 ISO</h1><h2 id=\"构建条件\"><a href=\"#构建条件\" class=\"headerlink\" title=\"构建条件\"></a>构建条件</h2><ol>\n<li>一个运行 Ubuntu 的设备（虚拟机也是可以的，但不推荐 WSL1&#x2F;2，因为 WSL2 经过实际测试会出现一些问题）。</li>\n<li>确保已经安装 <code>xorriso</code>、<code>vim</code>、<code>wget</code>、<code>7zip</code>软件包。</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt install -y 7zip wget xorriso</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>打开终端。</li>\n<li>全程需要 root 权限，请输入 <code>sudo -s</code> 进入 root 权限。</li>\n</ol>\n<h2 id=\"构建步骤\"><a href=\"#构建步骤\" class=\"headerlink\" title=\"构建步骤\"></a>构建步骤</h2><h3 id=\"下载-ISO\"><a href=\"#下载-ISO\" class=\"headerlink\" title=\"下载 ISO\"></a>下载 ISO</h3><p>从 <a href=\"https://releases.ubuntu.com/\">Ubuntu ISO 下载页面</a>下载版本为<code>22.04</code>的 Ubuntu 服务器映像 （ISO）。</p>\n<blockquote>\n<p>我下载的镜像是ubuntu-22.04-live-server-amd64.iso</p>\n</blockquote>\n<h3 id=\"提取-ISO\"><a href=\"#提取-ISO\" class=\"headerlink\" title=\"提取 ISO\"></a>提取 ISO</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">7z -y x ubuntu-22.04-live-server-amd64.iso -ocustom</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意！在 7z 命令中，没有空格。<code>-o</code></p>\n</blockquote>\n<h3 id=\"引导文件\"><a href=\"#引导文件\" class=\"headerlink\" title=\"引导文件\"></a>引导文件</h3><p>移动引导文件到上级目录</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mv</span>  <span class=\"string\">&#x27;[BOOT]&#x27;</span> ../BOOT</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>生成新的ISO时，会生成新的引导文件</p>\n</blockquote>\n<h3 id=\"修改-GRUB\"><a href=\"#修改-GRUB\" class=\"headerlink\" title=\"修改 GRUB\"></a>修改 GRUB</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim boot/grub/grub.cfg</span><br></pre></td></tr></table></figure>\n\n<p>在现有菜单项上方添加以下菜单项：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">menuentry &quot;Autoinstall Ubuntu Server&quot; &#123;</span><br><span class=\"line\">    set gfxpayload=keep</span><br><span class=\"line\">    linux   /casper/vmlinuz quiet autoinstall &quot;ds=nocloud-net;s=file:///cdrom/server/&quot;  ---</span><br><span class=\"line\">    initrd  /casper/initrd</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建-autoinstall-指令\"><a href=\"#创建-autoinstall-指令\" class=\"headerlink\" title=\"创建 autoinstall 指令\"></a>创建 autoinstall 指令</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">mkdir</span> server</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cat</span> &gt; server/user-data &lt;&lt; <span class=\"string\">&#x27;EOF&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\">autoinstall:</span><br><span class=\"line\">  version: 1</span><br><span class=\"line\">  identity:</span><br><span class=\"line\">    hostname: ubuntu-server</span><br><span class=\"line\">    password: <span class=\"string\">&quot;$6<span class=\"variable\">$exDY1mhS4KUYCE</span>/2<span class=\"variable\">$zmn9ToZwTKLhCw</span>.b4/b.ZRTIZM30JZ4QrOQ2aOXJ8yk96xpcCof0kxKwuX1kqLG/ygbJ1f8wxED22bTL4F46P0&quot;</span></span><br><span class=\"line\">    username: ubuntu</span><br><span class=\"line\">EOF</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">touch</span> server/meta-data</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>加密的密码为 <code>ubuntu</code>。</p>\n<p>用户数据文件的官方文档可以在这里找到：<a href=\"https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html\">https://canonical-subiquity.readthedocs-hosted.com/en/latest/reference/autoinstall-reference.html</a> 我在下面提供了一个工作示例：<code>user-data</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#cloud-config</span></span><br><span class=\"line\"><span class=\"attr\">autoinstall:</span></span><br><span class=\"line\">  <span class=\"comment\"># version is an Autoinstall required field.</span></span><br><span class=\"line\">  <span class=\"attr\">version:</span> <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># This adds the default ubuntu-desktop packages to the system.</span></span><br><span class=\"line\">  <span class=\"comment\"># Any desired additional packages may also be listed here.</span></span><br><span class=\"line\">  <span class=\"attr\">packages:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">ubuntu-server</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># User creation can occur in one of 3 ways:</span></span><br><span class=\"line\">  <span class=\"comment\"># 1. Create a user using this `identity` section.</span></span><br><span class=\"line\">  <span class=\"comment\"># 2. Create users as documented in cloud-init inside the user-data section,</span></span><br><span class=\"line\">  <span class=\"comment\">#    which means this single-user identity section may be removed.</span></span><br><span class=\"line\">  <span class=\"comment\"># 3. Prompt for user configuration on first boot.  Remove this identity</span></span><br><span class=\"line\">  <span class=\"comment\">#    section and see the &quot;Installation without a default user&quot; section.</span></span><br><span class=\"line\">  <span class=\"attr\">identity:</span></span><br><span class=\"line\">    <span class=\"attr\">realname:</span> <span class=\"string\">&#x27;UntouchedWagons&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">username:</span> <span class=\"string\">untouchedwagons</span></span><br><span class=\"line\">    <span class=\"comment\"># A password hash is needed. `openssl passwd -6 $CLEARTEXT_PASSWORD` can help.</span></span><br><span class=\"line\">    <span class=\"attr\">password:</span> <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">    <span class=\"attr\">hostname:</span> <span class=\"string\">ubuntu-test</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">locale:</span> <span class=\"string\">en_US.UTF-8</span></span><br><span class=\"line\">  <span class=\"attr\">keyboard:</span></span><br><span class=\"line\">    <span class=\"attr\">layout:</span> <span class=\"string\">us</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">package_update:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">package_upgrade:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># Subiquity will, by default, configure a partition layout using LVM.</span></span><br><span class=\"line\">  <span class=\"comment\"># The &#x27;direct&#x27; layout method shown here will produce a non-LVM result.</span></span><br><span class=\"line\">  <span class=\"attr\">storage:</span></span><br><span class=\"line\">    <span class=\"attr\">swap:</span></span><br><span class=\"line\">      <span class=\"attr\">size:</span> <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"attr\">layout:</span></span><br><span class=\"line\">      <span class=\"attr\">name:</span> <span class=\"string\">direct</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">ssh:</span></span><br><span class=\"line\">    <span class=\"attr\">allow-pw:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">install-server:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">    <span class=\"attr\">authorized-keys:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ssh-key</span> <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">ssh-key</span> <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">network:</span></span><br><span class=\"line\">    <span class=\"attr\">network:</span></span><br><span class=\"line\">      <span class=\"attr\">version:</span> <span class=\"number\">2</span></span><br><span class=\"line\">      <span class=\"attr\">ethernets:</span></span><br><span class=\"line\">        <span class=\"attr\">enp6s18:</span></span><br><span class=\"line\">          <span class=\"attr\">dhcp4:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">          <span class=\"attr\">dhcp-identifier:</span> <span class=\"string\">mac</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">late-commands:</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">curtin</span> <span class=\"string\">in-target</span> <span class=\"string\">--</span> <span class=\"string\">update-grub</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">curtin</span> <span class=\"string\">in-target</span> <span class=\"string\">--</span> <span class=\"string\">apt-get</span> <span class=\"string\">install</span> <span class=\"string\">-y</span> <span class=\"string\">cloud-init</span></span><br><span class=\"line\">    <span class=\"bullet\">-</span> <span class=\"string\">curtin</span> <span class=\"string\">in-target</span> <span class=\"string\">--</span> <span class=\"string\">apt-get</span> <span class=\"string\">autoremove</span> <span class=\"string\">-y</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>请注意，由于使用了可预测的接口命名，因此可能很难预测接口的名称。</p>\n<p>在 Proxmox VM 中，Ubuntu 倾向于命名 virtio NIC ，您的里程可能会有所不同。</p>\n<p>它可能是<code>enp6s18``eth0``eno1</code> ，或者完全不同的东西。</p>\n</blockquote>\n<h3 id=\"重建-ISO\"><a href=\"#重建-ISO\" class=\"headerlink\" title=\"重建 ISO\"></a>重建 ISO</h3><p>我几乎完全从下面列出的 Puget Systems 链接中取消了重建 ISO 的命令，我对每个部分的作用只有一个模糊的概念。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xorriso -as mkisofs -r \\</span><br><span class=\"line\">  -V <span class=\"string\">&#x27;Ubuntu_22.04_Auto&#x27;</span> \\</span><br><span class=\"line\">  -o ../ubuntu-22.04-autoinstall.iso \\</span><br><span class=\"line\">  --grub2-mbr ../BOOT/1-Boot-NoEmul.img \\</span><br><span class=\"line\">  -partition_offset 16 \\</span><br><span class=\"line\">  --mbr-force-bootable \\</span><br><span class=\"line\">  -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b ../BOOT/2-Boot-NoEmul.img \\</span><br><span class=\"line\">  -appended_part_as_gpt \\</span><br><span class=\"line\">  -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\</span><br><span class=\"line\">  -c <span class=\"string\">&#x27;/boot.catalog&#x27;</span> \\</span><br><span class=\"line\">  -b <span class=\"string\">&#x27;/boot/grub/i386-pc/eltorito.img&#x27;</span> \\</span><br><span class=\"line\">    -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\</span><br><span class=\"line\">  -eltorito-alt-boot \\</span><br><span class=\"line\">  -e <span class=\"string\">&#x27;--interval:appended_partition_2:::&#x27;</span> \\</span><br><span class=\"line\">  -no-emul-boot \\</span><br><span class=\"line\">  .</span><br></pre></td></tr></table></figure>\n\n<p>如果一切顺利，您应该会看到以下消息<code>Writing to &#39;stdio:../ubuntu-24.04-autoinstall.iso&#39; completed successfully.</code></p>\n<p>就是这样。您可以将 ISO 上传到语音管理程序，使用 RUFUS 将其写入 USB 驱动器，或将其复制到 IODD 外部虚拟 ODD。</p>\n<h2 id=\"脚本\"><a href=\"#脚本\" class=\"headerlink\" title=\"脚本\"></a>脚本</h2><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">set</span> -e</span><br><span class=\"line\"><span class=\"comment\">##################################### 全局变量 ####################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#获取当前脚本所在的目录。</span></span><br><span class=\"line\">script_dir=$(<span class=\"built_in\">cd</span> <span class=\"string\">&quot;<span class=\"subst\">$(dirname <span class=\"string\">&quot;<span class=\"variable\">$&#123;BASH_SOURCE[0]&#125;</span>&quot;</span>)</span>&quot;</span> &amp;&gt;/dev/null &amp;&amp; <span class=\"built_in\">pwd</span> -P)</span><br><span class=\"line\"><span class=\"comment\">#当前时间</span></span><br><span class=\"line\">today=$(<span class=\"built_in\">date</span> +<span class=\"string\">&quot;%Y-%m-%d-%H%M%S&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">#创建临时目录</span></span><br><span class=\"line\">tmpdir=<span class=\"string\">&quot;iso_dir&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 是否使用自动配置</span></span><br><span class=\"line\">all_in_one=0</span><br><span class=\"line\"><span class=\"comment\"># user-data 文件</span></span><br><span class=\"line\">user_data_file=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># meta-data 文件</span></span><br><span class=\"line\">meta_data_file=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 原始ISO镜像文件</span></span><br><span class=\"line\">source_iso=<span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 生成的ISO文件</span></span><br><span class=\"line\">destination_iso=<span class=\"string\">&quot;<span class=\"variable\">$&#123;script_dir&#125;</span>/ubuntu-autoInstall-<span class=\"variable\">$today</span>.iso&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># autoinstall 配置在ISO中的目录</span></span><br><span class=\"line\">install_conf_dir=<span class=\"string\">&quot;server&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#################################################################################</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">cleanup</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;tmpdir&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">rm</span> -rf <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\">            <span class=\"built_in\">log</span> <span class=\"string\">&quot;🚽 Deleted temporary working directory <span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ ! -f BOOT ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">            <span class=\"built_in\">rm</span> -rf BOOT</span><br><span class=\"line\">            <span class=\"built_in\">log</span> <span class=\"string\">&quot;🚽 Deleted BOOT directory &quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">log</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">echo</span> &gt;&amp;2 -e <span class=\"string\">&quot;[<span class=\"subst\">$(date +<span class=\"string\">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span>] <span class=\"variable\">$&#123;1-&#125;</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">die</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">local</span> msg=<span class=\"variable\">$1</span></span><br><span class=\"line\">        <span class=\"built_in\">local</span> code=<span class=\"variable\">$&#123;2-1&#125;</span> <span class=\"comment\"># Bash parameter expansion - default exit status 1. See https://wiki.bash-hackers.org/syntax/pe#use_a_default_value</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;<span class=\"variable\">$msg</span>&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span> <span class=\"string\">&quot;<span class=\"variable\">$code</span>&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">usage</span></span>() &#123;</span><br><span class=\"line\">        <span class=\"built_in\">cat</span> &lt;&lt;<span class=\"string\">EOF</span></span><br><span class=\"line\"><span class=\"string\">Usage: $(basename &quot;$&#123;BASH_SOURCE[0]&#125;&quot;) [-h] [-v] [-a]  [-u user-data-file] [-m meta-data-file] [-s source-iso-file] [-d destination-iso-file]</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">💁 This script will create fully-automated Ubuntu 22.04 Focal Fossa installation media.</span></span><br><span class=\"line\"><span class=\"string\">💁 Ubuntu ISO Download Url: https://releases.ubuntu.com/20.04/ubuntu-20.04.6-live-server-amd64.iso</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">Available options:</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">-h, --help              Print this help and exit</span></span><br><span class=\"line\"><span class=\"string\">-v, --verbose           Print script debug info</span></span><br><span class=\"line\"><span class=\"string\">-a, --all-in-one        Bake user-data and meta-data into the generated ISO. By default you will</span></span><br><span class=\"line\"><span class=\"string\">                        need to boot systems with a CIDATA volume attached containing your</span></span><br><span class=\"line\"><span class=\"string\">                        autoinstall user-data and meta-data files.</span></span><br><span class=\"line\"><span class=\"string\">                        For more information see: https://ubuntu.com/server/docs/install/autoinstall-quickstart</span></span><br><span class=\"line\"><span class=\"string\">-u, --user-data         Path to user-data file. Required if using -a</span></span><br><span class=\"line\"><span class=\"string\">-m, --meta-data         Path to meta-data file. Will be an empty file if not specified and using -a</span></span><br><span class=\"line\"><span class=\"string\">-s, --source            Source ISO file.</span></span><br><span class=\"line\"><span class=\"string\">                        That file will be used by default if it already exists.</span></span><br><span class=\"line\"><span class=\"string\">-d, --destination       Destination ISO file. By default $&#123;script_dir&#125;/ubuntu-autoinstall-$today.iso will be</span></span><br><span class=\"line\"><span class=\"string\">                        created, overwriting any existing file.</span></span><br><span class=\"line\"><span class=\"string\">EOF</span></span><br><span class=\"line\">        <span class=\"built_in\">exit</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#检查环境</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">checkEnvironment</span></span> () &#123;</span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;🔎 Checking for required utilities...&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">#检查 date 命令是否可用</span></span><br><span class=\"line\">\t[[ ! -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v date)</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 date command not found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    [[ ! -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v xorriso)</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 xorriso is not installed. On Ubuntu, install  the &#x27;xorriso&#x27; package.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    [[ ! -x <span class=\"string\">&quot;<span class=\"subst\">$(command -v 7z)</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 sed is not installed. On Ubuntu, install the &#x27;7zip&#x27; package.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 All required utilities are installed.&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">parseParam</span></span>() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">while</span> :; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;1-&#125;</span>&quot;</span> <span class=\"keyword\">in</span></span><br><span class=\"line\">        -h | --<span class=\"built_in\">help</span>) usage ;;</span><br><span class=\"line\">        -v | --verbose) <span class=\"built_in\">set</span> -x ;;</span><br><span class=\"line\">        -a | --all-in-one) all_in_one=1 ;;</span><br><span class=\"line\">        -u | --user-data)</span><br><span class=\"line\">                user_data_file=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -s | --<span class=\"built_in\">source</span>)</span><br><span class=\"line\">                source_iso=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -d | --destination)</span><br><span class=\"line\">                destination_iso=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -m | --meta-data)</span><br><span class=\"line\">                meta_data_file=<span class=\"string\">&quot;<span class=\"variable\">$&#123;2-&#125;</span>&quot;</span></span><br><span class=\"line\">                <span class=\"built_in\">shift</span></span><br><span class=\"line\">                ;;</span><br><span class=\"line\">        -?*) die <span class=\"string\">&quot;Unknown option: <span class=\"variable\">$1</span>&quot;</span> ;;</span><br><span class=\"line\">        *) <span class=\"built_in\">break</span> ;;  <span class=\"comment\"># 如果没有更多参数，退出循环</span></span><br><span class=\"line\">    <span class=\"keyword\">esac</span></span><br><span class=\"line\">    <span class=\"built_in\">shift</span></span><br><span class=\"line\">  <span class=\"keyword\">done</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">checkParam</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;all_in_one&#125;</span> -ne 0 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        [[ -z <span class=\"string\">&quot;<span class=\"variable\">$&#123;user_data_file&#125;</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 user-data file was not specified.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        [[ ! -f <span class=\"string\">&quot;<span class=\"variable\">$user_data_file</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 user-data file could not be found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">        [[ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;meta_data_file&#125;</span>&quot;</span> ]] &amp;&amp; [[ ! -f <span class=\"string\">&quot;<span class=\"variable\">$meta_data_file</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 meta-data file could not be found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [[ -z <span class=\"string\">&quot;<span class=\"variable\">$&#123;source_iso&#125;</span>&quot;</span> ]]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        die <span class=\"string\">&quot;💥 Source ISO file was not specified.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        [[ ! -f <span class=\"string\">&quot;<span class=\"variable\">$&#123;source_iso&#125;</span>&quot;</span> ]] &amp;&amp; die <span class=\"string\">&quot;💥 Source ISO file could not be found.&quot;</span> &amp;&amp; <span class=\"built_in\">exit</span> 1</span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    destination_iso=$(<span class=\"built_in\">realpath</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;destination_iso&#125;</span>&quot;</span>)</span><br><span class=\"line\">    source_iso=$(<span class=\"built_in\">realpath</span> <span class=\"string\">&quot;<span class=\"variable\">$&#123;source_iso&#125;</span>&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">setup</span></span> () &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"built_in\">mkdir</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;🧩 Extracting ISO files...&quot;</span></span><br><span class=\"line\">    7z -y -bso0 -bsp1 x <span class=\"string\">&quot;<span class=\"variable\">$source_iso</span>&quot;</span> -o<span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Extracted ISO file.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">mv</span> <span class=\"variable\">$tmpdir</span>/<span class=\"string\">&#x27;[BOOT]&#x27;</span> ./BOOT</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> [ <span class=\"variable\">$&#123;all_in_one&#125;</span> -eq 1 ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;🧩 Adding user-data and meta-data files...&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">mkdir</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/server&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">cp</span> <span class=\"string\">&quot;<span class=\"variable\">$user_data_file</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/<span class=\"variable\">$install_conf_dir</span>/user-data&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> [ -n <span class=\"string\">&quot;<span class=\"variable\">$&#123;meta_data_file&#125;</span>&quot;</span> ]; <span class=\"keyword\">then</span></span><br><span class=\"line\">          <span class=\"built_in\">cp</span> <span class=\"string\">&quot;<span class=\"variable\">$meta_data_file</span>&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/<span class=\"variable\">$install_conf_dir</span>/meta-data&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">          <span class=\"built_in\">touch</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/<span class=\"variable\">$install_conf_dir</span>/meta-data&quot;</span></span><br><span class=\"line\">        <span class=\"keyword\">fi</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Added data and configured kernel command line.&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;🧩 Adding autoinstall parameter to kernel command line...&quot;</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">        sed -i -e <span class=\"string\">&quot;s,---, autoinstall ds=nocloud-net;s=\\&quot;file:///cdrom/<span class=\"variable\">$install_conf_dir</span>/\\&quot; ---,g&quot;</span> <span class=\"string\">&quot;<span class=\"variable\">$tmpdir</span>/boot/grub/grub.cfg&quot;</span></span><br><span class=\"line\">        <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Added parameter to UEFI and BIOS kernel command lines.&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">fi</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"function\"><span class=\"title\">generateISO</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;📦 Repackaging extracted files into an ISO image...&quot;</span></span><br><span class=\"line\">    xorriso -as mkisofs -r \\</span><br><span class=\"line\">      -V <span class=\"string\">&#x27;UBUNTU_AUTO_ISO&#x27;</span> \\</span><br><span class=\"line\">      -o <span class=\"string\">&quot;<span class=\"variable\">$destination_iso</span>&quot;</span> \\</span><br><span class=\"line\">      --grub2-mbr <span class=\"string\">&quot;./BOOT/1-Boot-NoEmul.img&quot;</span> \\</span><br><span class=\"line\">      -partition_offset 16 \\</span><br><span class=\"line\">      --mbr-force-bootable \\</span><br><span class=\"line\">      -append_partition 2 28732ac11ff8d211ba4b00a0c93ec93b <span class=\"string\">&quot;./BOOT/2-Boot-NoEmul.img&quot;</span> \\</span><br><span class=\"line\">      -appended_part_as_gpt \\</span><br><span class=\"line\">      -iso_mbr_part_type a2a0d0ebe5b9334487c068b6b72699c7 \\</span><br><span class=\"line\">      -c <span class=\"string\">&#x27;/boot.catalog&#x27;</span> \\</span><br><span class=\"line\">      -b <span class=\"string\">&#x27;/boot/grub/efi.img&#x27;</span> \\</span><br><span class=\"line\">        -no-emul-boot -boot-load-size 4 -boot-info-table --grub2-boot-info \\</span><br><span class=\"line\">      -eltorito-alt-boot \\</span><br><span class=\"line\">      -e <span class=\"string\">&#x27;--interval:appended_partition_2:::&#x27;</span> \\</span><br><span class=\"line\">      -no-emul-boot \\</span><br><span class=\"line\">      <span class=\"variable\">$tmpdir</span></span><br><span class=\"line\">    <span class=\"built_in\">log</span> <span class=\"string\">&quot;👍 Repackaged into <span class=\"variable\">$&#123;destination_iso&#125;</span>&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">cd</span> ..</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">log</span> <span class=\"string\">&quot;👶 Starting up...&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 检查环境</span></span><br><span class=\"line\">checkEnvironment</span><br><span class=\"line\"><span class=\"comment\"># 调用参数解析函数</span></span><br><span class=\"line\">parseParam <span class=\"string\">&quot;<span class=\"variable\">$@</span>&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cleanup</span><br><span class=\"line\"><span class=\"comment\"># 检查参数</span></span><br><span class=\"line\">checkParam</span><br><span class=\"line\"><span class=\"comment\"># 操作镜像</span></span><br><span class=\"line\">setup</span><br><span class=\"line\"><span class=\"comment\"># 生成镜像</span></span><br><span class=\"line\">generateISO</span><br><span class=\"line\"></span><br><span class=\"line\">die <span class=\"string\">&quot;✅ Completed.&quot;</span> 0</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h2><p><a href=\"https://www.pugetsystems.com/labs/hpc/ubuntu-22-04-server-autoinstall-iso/#Step_2_Unpack_files_and_partition_images_from_the_Ubuntu_2204_live_server_ISO\">Ubuntu 22.04 服务器自动安装 ISO |普吉特系统</a></p>\n<p><a href=\"https://github.com/UntouchedWagons/Ubuntu-AutoInstall-Docs\">UntouchedWagons&#x2F;Ubuntu-AutoInstall-Docs：使用 Ubuntu 自动安装功能的简要指南</a></p>\n<p><a href=\"https://canonical-subiquity.readthedocs-hosted.com/en/latest/howto/autoinstall-quickstart.html\">Autoinstall quick start - Ubuntu installation documentation</a></p>\n<p><a href=\"https://askubuntu.com/questions/1403546/ubuntu-22-04-build-iso-both-mbr-and-efi\">启动 - Ubuntu 22.04 build ISO （MBR 和 EFI ） - Ask Ubuntu</a></p>\n<p><a href=\"https://gitee.com/narukeu/build-ubuntu-live\">build-ubuntu-live: 从零开始制作 Ubuntu 22.04 Live CD</a></p>\n<p><a href=\"https://github.com/YasuhiroABE/ub-autoinstall-iso\">YasuhiroABE&#x2F;ub-autoinstall-iso: Creating an custom AutoInstall ISO image for ubuntu 22.04 and 24.04.</a></p>\n"},{"title":"制作Linux服务","date":"2024-08-26T08:00:00.000Z","cover":"/post/2024/linux/make-linux-service/logo.jpg","_content":"\n\n\n# 把java程序作为Linux服务启动\n\n# 制作Linux服务\n\n## 创建服务文件\n\n首先，您需要创建一个 `.service` 文件。通常，这些文件位于 `/etc/systemd/system/` 目录下。\n\n## 编辑服务文件\n\n```shell\n[Unit]\nDescription=My Custom Service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/my_executable\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- **[Unit]** 部分定义了服务的描述和依赖关系。\n- **[Service]** 部分定义了服务的执行命令（`ExecStart`），以及在失败时的重启策略。\n- **[Install]** 部分定义了服务的目标\n\n## 重新加载 systemd\n\n在创建或修改 `.service` 文件后，您需要重新加载 `systemd` 以使更改生效：\n\n```bash\nsudo systemctl daemon-reload\n```\n\n## 启动和管理服务\n\n您可以使用以下命令启动、停止和查看服务状态：\n\n- 启动服务：\n\n```bash\nsudo systemctl start my_service\n```\n\n- 停止服务：\n\n```bash\nsudo systemctl stop my_service\n```\n\n- 查看服务状态：\n\n```bash\nsudo systemctl status my_service\n```\n\n- 设置服务开机自启：\n\n```bash\nsudo systemctl enable my_service\n```\n\n## 日志查看\n\n您可以使用 `journalctl` 查看服务的日志：\n\n```bash\njournalctl -u my_service\n```\n\n## 示例\n\n将 Spring Boot 程序安装为 Linux 服务\n\n### 1. 打包 Spring Boot 应用\n\n首先，确保您的 Spring Boot 应用已经打包为一个可执行的 JAR 文件。您可以使用 Maven 或 Gradle 来构建项目。例如，使用 Maven：\n\n```bash\nmvn clean package\n```\n\n构建完成后，您将在 `target` 目录下找到一个 `.jar` 文件。\n\n### 2. 创建服务文件\n\n接下来，您需要创建一个 `.service` 文件。通常，这些文件位于 `/etc/systemd/system/` 目录下。使用文本编辑器创建一个新的服务文件，例如 `my_springboot_app.service`：\n\n```bash\nsudo nano /etc/systemd/system/my_springboot_app.service\n```\n\n### 3. 编辑服务文件\n\n在打开的编辑器中，添加以下内容：\n\n```\nini复制代码[Unit]\nDescription=My Spring Boot Application\nAfter=network.target\n\n[Service]\nUser=your_username\nExecStart=/usr/bin/java -jar /path/to/your/app.jar\nStandardOutput=append:/var/log/my_springboot_app.log\nStandardError=append:/var/log/my_springboot_app.log\nRestart=on-failure\nEnvironment=JAVA_HOME=/path/to/java\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- **User**: 替换为运行服务的用户。\n\n- **ExecStart**: 替换为您的 JAR 文件的完整路径。\n\n- **StandardOutput**: 标准输出流。\n\n- **StandardError**: 标准错误输出流。\n\n- **Environment**: 如果需要，您可以设置 JAVA_HOME 或其他环境变量。\n\n  >`StandardOutput` 和 `StandardError` 参数中的路径如果不存在请提前创建！！！\n\n### 4. 重新加载 systemd\n\n在创建或修改 `.service` 文件后，您需要重新加载 `systemd` 以使更改生效：\n\n```bash\nsudo systemctl daemon-reload\n```\n\n### 5. 启动和管理服务\n\n您可以使用以下命令启动、停止和查看服务状态：\n\n- 启动服务：\n\n```bash\nsudo systemctl start my_springboot_app\n```\n\n- 停止服务：\n\n```bash\nsudo systemctl stop my_springboot_app\n```\n\n- 查看服务状态：\n\n```bash\nsudo systemctl status my_springboot_app\n```\n\n- 设置服务开机自启：\n\n```bash\nsudo systemctl enable my_springboot_app\n```\n\n### 6. 日志查看\n\n您可以使用 `journalctl` 查看服务的日志：\n\n```bash\njournalctl -u my_springboot_app\n```\n\n您也可以入日志文件夹中查看服务的日志：\n\n```bash\ntail -f /var/log/my_springboot_app.log\n```\n\n\n\n### 注意事项\n\n- 确保 JAR 文件具有适当的权限，并且可以被指定的用户执行。\n- 如果您的应用需要特定的配置文件或环境变量，请在 `[Service]` 部分中添加相应的 `Environment` 行。\n- 确保 Java 已安装并且路径正确。\n\n通过这些步骤，您可以将 Spring Boot 应用安装为 Linux 服务，并在系统启动时自动运行。","source":"_posts/2024/linux/make-linux-service.md","raw":"---\ntitle: 制作Linux服务\ndate: 2024-08-26 16:00:00\ntags:\n- SpringBoot\ncategories:\n- Linux\n\ncover: /post/2024/linux/make-linux-service/logo.jpg\n---\n\n\n\n# 把java程序作为Linux服务启动\n\n# 制作Linux服务\n\n## 创建服务文件\n\n首先，您需要创建一个 `.service` 文件。通常，这些文件位于 `/etc/systemd/system/` 目录下。\n\n## 编辑服务文件\n\n```shell\n[Unit]\nDescription=My Custom Service\nAfter=network.target\n\n[Service]\nExecStart=/usr/bin/my_executable\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- **[Unit]** 部分定义了服务的描述和依赖关系。\n- **[Service]** 部分定义了服务的执行命令（`ExecStart`），以及在失败时的重启策略。\n- **[Install]** 部分定义了服务的目标\n\n## 重新加载 systemd\n\n在创建或修改 `.service` 文件后，您需要重新加载 `systemd` 以使更改生效：\n\n```bash\nsudo systemctl daemon-reload\n```\n\n## 启动和管理服务\n\n您可以使用以下命令启动、停止和查看服务状态：\n\n- 启动服务：\n\n```bash\nsudo systemctl start my_service\n```\n\n- 停止服务：\n\n```bash\nsudo systemctl stop my_service\n```\n\n- 查看服务状态：\n\n```bash\nsudo systemctl status my_service\n```\n\n- 设置服务开机自启：\n\n```bash\nsudo systemctl enable my_service\n```\n\n## 日志查看\n\n您可以使用 `journalctl` 查看服务的日志：\n\n```bash\njournalctl -u my_service\n```\n\n## 示例\n\n将 Spring Boot 程序安装为 Linux 服务\n\n### 1. 打包 Spring Boot 应用\n\n首先，确保您的 Spring Boot 应用已经打包为一个可执行的 JAR 文件。您可以使用 Maven 或 Gradle 来构建项目。例如，使用 Maven：\n\n```bash\nmvn clean package\n```\n\n构建完成后，您将在 `target` 目录下找到一个 `.jar` 文件。\n\n### 2. 创建服务文件\n\n接下来，您需要创建一个 `.service` 文件。通常，这些文件位于 `/etc/systemd/system/` 目录下。使用文本编辑器创建一个新的服务文件，例如 `my_springboot_app.service`：\n\n```bash\nsudo nano /etc/systemd/system/my_springboot_app.service\n```\n\n### 3. 编辑服务文件\n\n在打开的编辑器中，添加以下内容：\n\n```\nini复制代码[Unit]\nDescription=My Spring Boot Application\nAfter=network.target\n\n[Service]\nUser=your_username\nExecStart=/usr/bin/java -jar /path/to/your/app.jar\nStandardOutput=append:/var/log/my_springboot_app.log\nStandardError=append:/var/log/my_springboot_app.log\nRestart=on-failure\nEnvironment=JAVA_HOME=/path/to/java\n\n[Install]\nWantedBy=multi-user.target\n```\n\n- **User**: 替换为运行服务的用户。\n\n- **ExecStart**: 替换为您的 JAR 文件的完整路径。\n\n- **StandardOutput**: 标准输出流。\n\n- **StandardError**: 标准错误输出流。\n\n- **Environment**: 如果需要，您可以设置 JAVA_HOME 或其他环境变量。\n\n  >`StandardOutput` 和 `StandardError` 参数中的路径如果不存在请提前创建！！！\n\n### 4. 重新加载 systemd\n\n在创建或修改 `.service` 文件后，您需要重新加载 `systemd` 以使更改生效：\n\n```bash\nsudo systemctl daemon-reload\n```\n\n### 5. 启动和管理服务\n\n您可以使用以下命令启动、停止和查看服务状态：\n\n- 启动服务：\n\n```bash\nsudo systemctl start my_springboot_app\n```\n\n- 停止服务：\n\n```bash\nsudo systemctl stop my_springboot_app\n```\n\n- 查看服务状态：\n\n```bash\nsudo systemctl status my_springboot_app\n```\n\n- 设置服务开机自启：\n\n```bash\nsudo systemctl enable my_springboot_app\n```\n\n### 6. 日志查看\n\n您可以使用 `journalctl` 查看服务的日志：\n\n```bash\njournalctl -u my_springboot_app\n```\n\n您也可以入日志文件夹中查看服务的日志：\n\n```bash\ntail -f /var/log/my_springboot_app.log\n```\n\n\n\n### 注意事项\n\n- 确保 JAR 文件具有适当的权限，并且可以被指定的用户执行。\n- 如果您的应用需要特定的配置文件或环境变量，请在 `[Service]` 部分中添加相应的 `Environment` 行。\n- 确保 Java 已安装并且路径正确。\n\n通过这些步骤，您可以将 Spring Boot 应用安装为 Linux 服务，并在系统启动时自动运行。","slug":"2024/linux/make-linux-service","published":1,"updated":"2025-01-05T09:27:19.281Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mze00067zpnb76386tu","content":"<h1 id=\"把java程序作为Linux服务启动\"><a href=\"#把java程序作为Linux服务启动\" class=\"headerlink\" title=\"把java程序作为Linux服务启动\"></a>把java程序作为Linux服务启动</h1><h1 id=\"制作Linux服务\"><a href=\"#制作Linux服务\" class=\"headerlink\" title=\"制作Linux服务\"></a>制作Linux服务</h1><h2 id=\"创建服务文件\"><a href=\"#创建服务文件\" class=\"headerlink\" title=\"创建服务文件\"></a>创建服务文件</h2><p>首先，您需要创建一个 <code>.service</code> 文件。通常，这些文件位于 <code>/etc/systemd/system/</code> 目录下。</p>\n<h2 id=\"编辑服务文件\"><a href=\"#编辑服务文件\" class=\"headerlink\" title=\"编辑服务文件\"></a>编辑服务文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=My Custom Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/my_executable</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>[Unit]</strong> 部分定义了服务的描述和依赖关系。</li>\n<li><strong>[Service]</strong> 部分定义了服务的执行命令（<code>ExecStart</code>），以及在失败时的重启策略。</li>\n<li><strong>[Install]</strong> 部分定义了服务的目标</li>\n</ul>\n<h2 id=\"重新加载-systemd\"><a href=\"#重新加载-systemd\" class=\"headerlink\" title=\"重新加载 systemd\"></a>重新加载 systemd</h2><p>在创建或修改 <code>.service</code> 文件后，您需要重新加载 <code>systemd</code> 以使更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动和管理服务\"><a href=\"#启动和管理服务\" class=\"headerlink\" title=\"启动和管理服务\"></a>启动和管理服务</h2><p>您可以使用以下命令启动、停止和查看服务状态：</p>\n<ul>\n<li>启动服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start my_service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop my_service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看服务状态：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status my_service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置服务开机自启：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> my_service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h2><p>您可以使用 <code>journalctl</code> 查看服务的日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u my_service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>将 Spring Boot 程序安装为 Linux 服务</p>\n<h3 id=\"1-打包-Spring-Boot-应用\"><a href=\"#1-打包-Spring-Boot-应用\" class=\"headerlink\" title=\"1. 打包 Spring Boot 应用\"></a>1. 打包 Spring Boot 应用</h3><p>首先，确保您的 Spring Boot 应用已经打包为一个可执行的 JAR 文件。您可以使用 Maven 或 Gradle 来构建项目。例如，使用 Maven：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<p>构建完成后，您将在 <code>target</code> 目录下找到一个 <code>.jar</code> 文件。</p>\n<h3 id=\"2-创建服务文件\"><a href=\"#2-创建服务文件\" class=\"headerlink\" title=\"2. 创建服务文件\"></a>2. 创建服务文件</h3><p>接下来，您需要创建一个 <code>.service</code> 文件。通常，这些文件位于 <code>/etc/systemd/system/</code> 目录下。使用文本编辑器创建一个新的服务文件，例如 <code>my_springboot_app.service</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/my_springboot_app.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-编辑服务文件\"><a href=\"#3-编辑服务文件\" class=\"headerlink\" title=\"3. 编辑服务文件\"></a>3. 编辑服务文件</h3><p>在打开的编辑器中，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码[Unit]</span><br><span class=\"line\">Description=My Spring Boot Application</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=your_username</span><br><span class=\"line\">ExecStart=/usr/bin/java -jar /path/to/your/app.jar</span><br><span class=\"line\">StandardOutput=append:/var/log/my_springboot_app.log</span><br><span class=\"line\">StandardError=append:/var/log/my_springboot_app.log</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">Environment=JAVA_HOME=/path/to/java</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>User</strong>: 替换为运行服务的用户。</p>\n</li>\n<li><p><strong>ExecStart</strong>: 替换为您的 JAR 文件的完整路径。</p>\n</li>\n<li><p><strong>StandardOutput</strong>: 标准输出流。</p>\n</li>\n<li><p><strong>StandardError</strong>: 标准错误输出流。</p>\n</li>\n<li><p><strong>Environment</strong>: 如果需要，您可以设置 JAVA_HOME 或其他环境变量。</p>\n<blockquote>\n<p><code>StandardOutput</code> 和 <code>StandardError</code> 参数中的路径如果不存在请提前创建！！！</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4-重新加载-systemd\"><a href=\"#4-重新加载-systemd\" class=\"headerlink\" title=\"4. 重新加载 systemd\"></a>4. 重新加载 systemd</h3><p>在创建或修改 <code>.service</code> 文件后，您需要重新加载 <code>systemd</code> 以使更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-启动和管理服务\"><a href=\"#5-启动和管理服务\" class=\"headerlink\" title=\"5. 启动和管理服务\"></a>5. 启动和管理服务</h3><p>您可以使用以下命令启动、停止和查看服务状态：</p>\n<ul>\n<li>启动服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看服务状态：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置服务开机自启：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-日志查看\"><a href=\"#6-日志查看\" class=\"headerlink\" title=\"6. 日志查看\"></a>6. 日志查看</h3><p>您可以使用 <code>journalctl</code> 查看服务的日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<p>您也可以入日志文件夹中查看服务的日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/my_springboot_app.log</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>确保 JAR 文件具有适当的权限，并且可以被指定的用户执行。</li>\n<li>如果您的应用需要特定的配置文件或环境变量，请在 <code>[Service]</code> 部分中添加相应的 <code>Environment</code> 行。</li>\n<li>确保 Java 已安装并且路径正确。</li>\n</ul>\n<p>通过这些步骤，您可以将 Spring Boot 应用安装为 Linux 服务，并在系统启动时自动运行。</p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"把java程序作为Linux服务启动\"><a href=\"#把java程序作为Linux服务启动\" class=\"headerlink\" title=\"把java程序作为Linux服务启动\"></a>把java程序作为Linux服务启动</h1><h1 id=\"制作Linux服务\"><a href=\"#制作Linux服务\" class=\"headerlink\" title=\"制作Linux服务\"></a>制作Linux服务</h1><h2 id=\"创建服务文件\"><a href=\"#创建服务文件\" class=\"headerlink\" title=\"创建服务文件\"></a>创建服务文件</h2><p>首先，您需要创建一个 <code>.service</code> 文件。通常，这些文件位于 <code>/etc/systemd/system/</code> 目录下。</p>\n<h2 id=\"编辑服务文件\"><a href=\"#编辑服务文件\" class=\"headerlink\" title=\"编辑服务文件\"></a>编辑服务文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=My Custom Service</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">ExecStart=/usr/bin/my_executable</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><strong>[Unit]</strong> 部分定义了服务的描述和依赖关系。</li>\n<li><strong>[Service]</strong> 部分定义了服务的执行命令（<code>ExecStart</code>），以及在失败时的重启策略。</li>\n<li><strong>[Install]</strong> 部分定义了服务的目标</li>\n</ul>\n<h2 id=\"重新加载-systemd\"><a href=\"#重新加载-systemd\" class=\"headerlink\" title=\"重新加载 systemd\"></a>重新加载 systemd</h2><p>在创建或修改 <code>.service</code> 文件后，您需要重新加载 <code>systemd</code> 以使更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动和管理服务\"><a href=\"#启动和管理服务\" class=\"headerlink\" title=\"启动和管理服务\"></a>启动和管理服务</h2><p>您可以使用以下命令启动、停止和查看服务状态：</p>\n<ul>\n<li>启动服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start my_service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop my_service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看服务状态：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status my_service</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置服务开机自启：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> my_service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"日志查看\"><a href=\"#日志查看\" class=\"headerlink\" title=\"日志查看\"></a>日志查看</h2><p>您可以使用 <code>journalctl</code> 查看服务的日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u my_service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><p>将 Spring Boot 程序安装为 Linux 服务</p>\n<h3 id=\"1-打包-Spring-Boot-应用\"><a href=\"#1-打包-Spring-Boot-应用\" class=\"headerlink\" title=\"1. 打包 Spring Boot 应用\"></a>1. 打包 Spring Boot 应用</h3><p>首先，确保您的 Spring Boot 应用已经打包为一个可执行的 JAR 文件。您可以使用 Maven 或 Gradle 来构建项目。例如，使用 Maven：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean package</span><br></pre></td></tr></table></figure>\n\n<p>构建完成后，您将在 <code>target</code> 目录下找到一个 <code>.jar</code> 文件。</p>\n<h3 id=\"2-创建服务文件\"><a href=\"#2-创建服务文件\" class=\"headerlink\" title=\"2. 创建服务文件\"></a>2. 创建服务文件</h3><p>接下来，您需要创建一个 <code>.service</code> 文件。通常，这些文件位于 <code>/etc/systemd/system/</code> 目录下。使用文本编辑器创建一个新的服务文件，例如 <code>my_springboot_app.service</code>：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/systemd/system/my_springboot_app.service</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-编辑服务文件\"><a href=\"#3-编辑服务文件\" class=\"headerlink\" title=\"3. 编辑服务文件\"></a>3. 编辑服务文件</h3><p>在打开的编辑器中，添加以下内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ini复制代码[Unit]</span><br><span class=\"line\">Description=My Spring Boot Application</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">User=your_username</span><br><span class=\"line\">ExecStart=/usr/bin/java -jar /path/to/your/app.jar</span><br><span class=\"line\">StandardOutput=append:/var/log/my_springboot_app.log</span><br><span class=\"line\">StandardError=append:/var/log/my_springboot_app.log</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">Environment=JAVA_HOME=/path/to/java</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p><strong>User</strong>: 替换为运行服务的用户。</p>\n</li>\n<li><p><strong>ExecStart</strong>: 替换为您的 JAR 文件的完整路径。</p>\n</li>\n<li><p><strong>StandardOutput</strong>: 标准输出流。</p>\n</li>\n<li><p><strong>StandardError</strong>: 标准错误输出流。</p>\n</li>\n<li><p><strong>Environment</strong>: 如果需要，您可以设置 JAVA_HOME 或其他环境变量。</p>\n<blockquote>\n<p><code>StandardOutput</code> 和 <code>StandardError</code> 参数中的路径如果不存在请提前创建！！！</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"4-重新加载-systemd\"><a href=\"#4-重新加载-systemd\" class=\"headerlink\" title=\"4. 重新加载 systemd\"></a>4. 重新加载 systemd</h3><p>在创建或修改 <code>.service</code> 文件后，您需要重新加载 <code>systemd</code> 以使更改生效：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-启动和管理服务\"><a href=\"#5-启动和管理服务\" class=\"headerlink\" title=\"5. 启动和管理服务\"></a>5. 启动和管理服务</h3><p>您可以使用以下命令启动、停止和查看服务状态：</p>\n<ul>\n<li>启动服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl start my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>停止服务：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl stop my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查看服务状态：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl status my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>设置服务开机自启：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl <span class=\"built_in\">enable</span> my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-日志查看\"><a href=\"#6-日志查看\" class=\"headerlink\" title=\"6. 日志查看\"></a>6. 日志查看</h3><p>您可以使用 <code>journalctl</code> 查看服务的日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">journalctl -u my_springboot_app</span><br></pre></td></tr></table></figure>\n\n<p>您也可以入日志文件夹中查看服务的日志：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">tail</span> -f /var/log/my_springboot_app.log</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ul>\n<li>确保 JAR 文件具有适当的权限，并且可以被指定的用户执行。</li>\n<li>如果您的应用需要特定的配置文件或环境变量，请在 <code>[Service]</code> 部分中添加相应的 <code>Environment</code> 行。</li>\n<li>确保 Java 已安装并且路径正确。</li>\n</ul>\n<p>通过这些步骤，您可以将 Spring Boot 应用安装为 Linux 服务，并在系统启动时自动运行。</p>\n"},{"title":"Linux Setting Proxy","date":"2024-08-26T08:00:00.000Z","cover":"/post/2024/network/linux-setting-proxy/logo.jpg","_content":"\n\n# 下载安装包\n\n[GitHub网址](https://github.com/MetaCubeX/mihomo): `https://github.com/MetaCubeX/mihomo`\n\n[安装包下载](https://github.com/MetaCubeX/mihomo/releases):  `https://github.com/MetaCubeX/mihomo/releases`\n\n[参考文档](https://wiki.metacubex.one/): `https://wiki.metacubex.one/`\n\nWeb面板：\n\n- [yacd](https://yacd.haishan.me/) `https://yacd.haishan.me/`\n- [Metacubexd](https://metacubex.github.io/metacubexd) `https://metacubex.github.io/metacubexd`\n\n\n\n# Ubuntu 安装\n\n\n\n## 下载安装包\n\n```shell\nwget https://github.com/MetaCubeX/mihomo/releases/download/v1.18.7/mihomo-linux-amd64-v1.18.7.deb\n```\n\n## 安装\n\n```shell\ndpkg -i ./mihomo-linux-amd64-v1.18.7.deb\n```\n\n## 启动\n\n```shell\n systemctl daemon-reload  &&  systemctl start mihomo\n```\n\n## 状态\n\n```shell\n systemctl status mihomo\n```\n\n\n\n## 配置订阅\n\n```shell\ncurl -L -o /etc/mihomo/config.yaml -A \"clash\" <SUB_URL>\n```\n\n><SUB_URL> ：自行替换 SUB_URL 为机场给到的订阅地址\n\n### 定时从网络更新配置文件\n\n```shell\nsudo crontab -e\n```\n\n如果你第一次使用 crontab，会让你选择编辑器，我选择 VI。进入定时任务配置文件，按 i 进入编辑状态，新起一行（可以是文件头部）输入：\n\n```shell\n0 4 * * * curl -L -o /etc/mihomo/config.yaml -A \"clash\"  <SUB_URL>; systemctl reload mihomo\n```\n\n>以上配置的意思是：在每天夜里 4 点从 SUB_URL 更新订阅配置，配置保存在 /etc/mihomo/config 中，更新完成后重载 mihomo 服务。记得自行替换 SUB_URL 为机场给到的订阅地址。\n\n\n\n# Web页面监控\n\n![image-20240823155227838](image-20240823155227838.png)\n\n>\n>\n>后端地址在`/etc/mihomo/config.yaml` 文件\n>\n>external-controller: 127.0.0.1:9090 # 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核；API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP；访问地址：http://127.0.0.1:9090\n>\n>secret: \"\" # API 的访问密钥\n\n\n\n## 配置文件说明\n\n[Mihomo/config.yaml ](https://github.com/huLter/Mihomo/blob/main/config.yaml) ：`https://github.com/huLter/Mihomo/blob/main/config.yaml`\n\n\n\n## 查询订阅规则\n\nhttps://metacubex.github.io/metacubexd\n\n![image-20240823155703014](image-20240823155703014.png)\n\n**请修改安全策略**\n\n![image-20240823155905892](image-20240823155905892.png)\n\n\n\n![image-20240823160000756](image-20240823160000756.png)\n\n\n\n![image-20240823160035448](image-20240823160035448.png)\n\n\n\n# 配置使用\n\n>[在 Ubuntu 中设置全局 Proxy](https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu)\n>\n>https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\n\n\n\n## 编辑` /etc/environment` (https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu)\n\n## 编辑 /etc/environment 文件\n\n在 Console 输入下列命令通过 nano 来编辑 /etc/environment 文件，来把 Proxy 相关设置写入环境变量：\n\n```sh\nsudo nano /etc/environment\n```\n\n接着在里面加上下列内容：\n\n`/etc/environment`\n\n```toml\nPATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\"\n\nhttp_proxy=\"http://account:password@192.168.178.2:8080/\"\nhttps_proxy=\"http://account:password@192.168.178.2:8080/\"\nftp_proxy=\"http://account:password@192.168.178.2:8080/\"\nno_prxoy=\"127.0.0.1,localhost\"\n```\n\n>注意\n>\n>1. 请自行将上面示例的帐号、密码、IP 和 Port 替换为你的 Proxy 的设定。\n>2. 完成之后，请重新登录让 Ubuntu 自动读取环境变量。\n\n我们也可以通过下面这个命令来确认加入的值是不是有生效：\n\n```sh\nsudo env | grep proxy\n```\n\n没意外的话，应该大部分通过系统来访问网络的软件就都能上网啰。\n\n\n\n## 查询代理日志\n\n![image-20240823160633739](image-20240823160633739.png)","source":"_posts/2024/network/linux-setting-proxy.md","raw":"---\ntitle: Linux Setting Proxy\ndate: 2024-08-26 16:00:00\ntags:\n- proxy\n- linux\ncategories:\n- 网络\n\ncover: /post/2024/network/linux-setting-proxy/logo.jpg\n---\n\n\n# 下载安装包\n\n[GitHub网址](https://github.com/MetaCubeX/mihomo): `https://github.com/MetaCubeX/mihomo`\n\n[安装包下载](https://github.com/MetaCubeX/mihomo/releases):  `https://github.com/MetaCubeX/mihomo/releases`\n\n[参考文档](https://wiki.metacubex.one/): `https://wiki.metacubex.one/`\n\nWeb面板：\n\n- [yacd](https://yacd.haishan.me/) `https://yacd.haishan.me/`\n- [Metacubexd](https://metacubex.github.io/metacubexd) `https://metacubex.github.io/metacubexd`\n\n\n\n# Ubuntu 安装\n\n\n\n## 下载安装包\n\n```shell\nwget https://github.com/MetaCubeX/mihomo/releases/download/v1.18.7/mihomo-linux-amd64-v1.18.7.deb\n```\n\n## 安装\n\n```shell\ndpkg -i ./mihomo-linux-amd64-v1.18.7.deb\n```\n\n## 启动\n\n```shell\n systemctl daemon-reload  &&  systemctl start mihomo\n```\n\n## 状态\n\n```shell\n systemctl status mihomo\n```\n\n\n\n## 配置订阅\n\n```shell\ncurl -L -o /etc/mihomo/config.yaml -A \"clash\" <SUB_URL>\n```\n\n><SUB_URL> ：自行替换 SUB_URL 为机场给到的订阅地址\n\n### 定时从网络更新配置文件\n\n```shell\nsudo crontab -e\n```\n\n如果你第一次使用 crontab，会让你选择编辑器，我选择 VI。进入定时任务配置文件，按 i 进入编辑状态，新起一行（可以是文件头部）输入：\n\n```shell\n0 4 * * * curl -L -o /etc/mihomo/config.yaml -A \"clash\"  <SUB_URL>; systemctl reload mihomo\n```\n\n>以上配置的意思是：在每天夜里 4 点从 SUB_URL 更新订阅配置，配置保存在 /etc/mihomo/config 中，更新完成后重载 mihomo 服务。记得自行替换 SUB_URL 为机场给到的订阅地址。\n\n\n\n# Web页面监控\n\n![image-20240823155227838](image-20240823155227838.png)\n\n>\n>\n>后端地址在`/etc/mihomo/config.yaml` 文件\n>\n>external-controller: 127.0.0.1:9090 # 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核；API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP；访问地址：http://127.0.0.1:9090\n>\n>secret: \"\" # API 的访问密钥\n\n\n\n## 配置文件说明\n\n[Mihomo/config.yaml ](https://github.com/huLter/Mihomo/blob/main/config.yaml) ：`https://github.com/huLter/Mihomo/blob/main/config.yaml`\n\n\n\n## 查询订阅规则\n\nhttps://metacubex.github.io/metacubexd\n\n![image-20240823155703014](image-20240823155703014.png)\n\n**请修改安全策略**\n\n![image-20240823155905892](image-20240823155905892.png)\n\n\n\n![image-20240823160000756](image-20240823160000756.png)\n\n\n\n![image-20240823160035448](image-20240823160035448.png)\n\n\n\n# 配置使用\n\n>[在 Ubuntu 中设置全局 Proxy](https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu)\n>\n>https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\n\n\n\n## 编辑` /etc/environment` (https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu)\n\n## 编辑 /etc/environment 文件\n\n在 Console 输入下列命令通过 nano 来编辑 /etc/environment 文件，来把 Proxy 相关设置写入环境变量：\n\n```sh\nsudo nano /etc/environment\n```\n\n接着在里面加上下列内容：\n\n`/etc/environment`\n\n```toml\nPATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games\"\n\nhttp_proxy=\"http://account:password@192.168.178.2:8080/\"\nhttps_proxy=\"http://account:password@192.168.178.2:8080/\"\nftp_proxy=\"http://account:password@192.168.178.2:8080/\"\nno_prxoy=\"127.0.0.1,localhost\"\n```\n\n>注意\n>\n>1. 请自行将上面示例的帐号、密码、IP 和 Port 替换为你的 Proxy 的设定。\n>2. 完成之后，请重新登录让 Ubuntu 自动读取环境变量。\n\n我们也可以通过下面这个命令来确认加入的值是不是有生效：\n\n```sh\nsudo env | grep proxy\n```\n\n没意外的话，应该大部分通过系统来访问网络的软件就都能上网啰。\n\n\n\n## 查询代理日志\n\n![image-20240823160633739](image-20240823160633739.png)","slug":"2024/network/linux-setting-proxy","published":1,"updated":"2025-01-03T11:15:43.140Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mzf00077zpn170dcr4y","content":"<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><p><a href=\"https://github.com/MetaCubeX/mihomo\">GitHub网址</a>: <code>https://github.com/MetaCubeX/mihomo</code></p>\n<p><a href=\"https://github.com/MetaCubeX/mihomo/releases\">安装包下载</a>:  <code>https://github.com/MetaCubeX/mihomo/releases</code></p>\n<p><a href=\"https://wiki.metacubex.one/\">参考文档</a>: <code>https://wiki.metacubex.one/</code></p>\n<p>Web面板：</p>\n<ul>\n<li><a href=\"https://yacd.haishan.me/\">yacd</a> <code>https://yacd.haishan.me/</code></li>\n<li><a href=\"https://metacubex.github.io/metacubexd\">Metacubexd</a> <code>https://metacubex.github.io/metacubexd</code></li>\n</ul>\n<h1 id=\"Ubuntu-安装\"><a href=\"#Ubuntu-安装\" class=\"headerlink\" title=\"Ubuntu 安装\"></a>Ubuntu 安装</h1><h2 id=\"下载安装包-1\"><a href=\"#下载安装包-1\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/MetaCubeX/mihomo/releases/download/v1.18.7/mihomo-linux-amd64-v1.18.7.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i ./mihomo-linux-amd64-v1.18.7.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload  &amp;&amp;  systemctl start mihomo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mihomo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置订阅\"><a href=\"#配置订阅\" class=\"headerlink\" title=\"配置订阅\"></a>配置订阅</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -o /etc/mihomo/config.yaml -A &quot;clash&quot; &lt;SUB_URL&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><SUB_URL> ：自行替换 SUB_URL 为机场给到的订阅地址</p>\n</blockquote>\n<h3 id=\"定时从网络更新配置文件\"><a href=\"#定时从网络更新配置文件\" class=\"headerlink\" title=\"定时从网络更新配置文件\"></a>定时从网络更新配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>如果你第一次使用 crontab，会让你选择编辑器，我选择 VI。进入定时任务配置文件，按 i 进入编辑状态，新起一行（可以是文件头部）输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 4 * * * curl -L -o /etc/mihomo/config.yaml -A &quot;clash&quot;  &lt;SUB_URL&gt;; systemctl reload mihomo</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上配置的意思是：在每天夜里 4 点从 SUB_URL 更新订阅配置，配置保存在 &#x2F;etc&#x2F;mihomo&#x2F;config 中，更新完成后重载 mihomo 服务。记得自行替换 SUB_URL 为机场给到的订阅地址。</p>\n</blockquote>\n<h1 id=\"Web页面监控\"><a href=\"#Web页面监控\" class=\"headerlink\" title=\"Web页面监控\"></a>Web页面监控</h1><p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823155227838.png\" alt=\"image-20240823155227838\"></p>\n<blockquote>\n<p>后端地址在<code>/etc/mihomo/config.yaml</code> 文件</p>\n<p>external-controller: 127.0.0.1:9090 # 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核；API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP；访问地址：<a href=\"http://127.0.0.1:9090/\">http://127.0.0.1:9090</a></p>\n<p>secret: “” # API 的访问密钥</p>\n</blockquote>\n<h2 id=\"配置文件说明\"><a href=\"#配置文件说明\" class=\"headerlink\" title=\"配置文件说明\"></a>配置文件说明</h2><p><a href=\"https://github.com/huLter/Mihomo/blob/main/config.yaml\">Mihomo&#x2F;config.yaml </a> ：<code>https://github.com/huLter/Mihomo/blob/main/config.yaml</code></p>\n<h2 id=\"查询订阅规则\"><a href=\"#查询订阅规则\" class=\"headerlink\" title=\"查询订阅规则\"></a>查询订阅规则</h2><p><a href=\"https://metacubex.github.io/metacubexd\">https://metacubex.github.io/metacubexd</a></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823155703014.png\" alt=\"image-20240823155703014\"></p>\n<p><strong>请修改安全策略</strong></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823155905892.png\" alt=\"image-20240823155905892\"></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823160000756.png\" alt=\"image-20240823160000756\"></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823160035448.png\" alt=\"image-20240823160035448\"></p>\n<h1 id=\"配置使用\"><a href=\"#配置使用\" class=\"headerlink\" title=\"配置使用\"></a>配置使用</h1><blockquote>\n<p><a href=\"https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\">在 Ubuntu 中设置全局 Proxy</a></p>\n<p><a href=\"https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\">https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu</a></p>\n</blockquote>\n<h2 id=\"编辑-etc-environment-https-ouch1978-github-io-docs-containerization-linux-cheatsheet-set-system-proxy-on-ubuntu\"><a href=\"#编辑-etc-environment-https-ouch1978-github-io-docs-containerization-linux-cheatsheet-set-system-proxy-on-ubuntu\" class=\"headerlink\" title=\"编辑 /etc/environment (https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu)\"></a>编辑<code> /etc/environment</code> (<a href=\"https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\">https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu</a>)</h2><h2 id=\"编辑-etc-environment-文件\"><a href=\"#编辑-etc-environment-文件\" class=\"headerlink\" title=\"编辑 &#x2F;etc&#x2F;environment 文件\"></a>编辑 &#x2F;etc&#x2F;environment 文件</h2><p>在 Console 输入下列命令通过 nano 来编辑 &#x2F;etc&#x2F;environment 文件，来把 Proxy 相关设置写入环境变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/environment</span><br></pre></td></tr></table></figure>\n\n<p>接着在里面加上下列内容：</p>\n<p><code>/etc/environment</code></p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">PATH</span>=<span class=\"string\">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">http_proxy</span>=<span class=\"string\">&quot;http://account:password@192.168.178.2:8080/&quot;</span></span><br><span class=\"line\"><span class=\"attr\">https_proxy</span>=<span class=\"string\">&quot;http://account:password@192.168.178.2:8080/&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ftp_proxy</span>=<span class=\"string\">&quot;http://account:password@192.168.178.2:8080/&quot;</span></span><br><span class=\"line\"><span class=\"attr\">no_prxoy</span>=<span class=\"string\">&quot;127.0.0.1,localhost&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意</p>\n<ol>\n<li>请自行将上面示例的帐号、密码、IP 和 Port 替换为你的 Proxy 的设定。</li>\n<li>完成之后，请重新登录让 Ubuntu 自动读取环境变量。</li>\n</ol>\n</blockquote>\n<p>我们也可以通过下面这个命令来确认加入的值是不是有生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">env</span> | grep proxy</span><br></pre></td></tr></table></figure>\n\n<p>没意外的话，应该大部分通过系统来访问网络的软件就都能上网啰。</p>\n<h2 id=\"查询代理日志\"><a href=\"#查询代理日志\" class=\"headerlink\" title=\"查询代理日志\"></a>查询代理日志</h2><p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823160633739.png\" alt=\"image-20240823160633739\"></p>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"下载安装包\"><a href=\"#下载安装包\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h1><p><a href=\"https://github.com/MetaCubeX/mihomo\">GitHub网址</a>: <code>https://github.com/MetaCubeX/mihomo</code></p>\n<p><a href=\"https://github.com/MetaCubeX/mihomo/releases\">安装包下载</a>:  <code>https://github.com/MetaCubeX/mihomo/releases</code></p>\n<p><a href=\"https://wiki.metacubex.one/\">参考文档</a>: <code>https://wiki.metacubex.one/</code></p>\n<p>Web面板：</p>\n<ul>\n<li><a href=\"https://yacd.haishan.me/\">yacd</a> <code>https://yacd.haishan.me/</code></li>\n<li><a href=\"https://metacubex.github.io/metacubexd\">Metacubexd</a> <code>https://metacubex.github.io/metacubexd</code></li>\n</ul>\n<h1 id=\"Ubuntu-安装\"><a href=\"#Ubuntu-安装\" class=\"headerlink\" title=\"Ubuntu 安装\"></a>Ubuntu 安装</h1><h2 id=\"下载安装包-1\"><a href=\"#下载安装包-1\" class=\"headerlink\" title=\"下载安装包\"></a>下载安装包</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/MetaCubeX/mihomo/releases/download/v1.18.7/mihomo-linux-amd64-v1.18.7.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dpkg -i ./mihomo-linux-amd64-v1.18.7.deb</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl daemon-reload  &amp;&amp;  systemctl start mihomo</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"状态\"><a href=\"#状态\" class=\"headerlink\" title=\"状态\"></a>状态</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status mihomo</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"配置订阅\"><a href=\"#配置订阅\" class=\"headerlink\" title=\"配置订阅\"></a>配置订阅</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -L -o /etc/mihomo/config.yaml -A &quot;clash&quot; &lt;SUB_URL&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><SUB_URL> ：自行替换 SUB_URL 为机场给到的订阅地址</p>\n</blockquote>\n<h3 id=\"定时从网络更新配置文件\"><a href=\"#定时从网络更新配置文件\" class=\"headerlink\" title=\"定时从网络更新配置文件\"></a>定时从网络更新配置文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo crontab -e</span><br></pre></td></tr></table></figure>\n\n<p>如果你第一次使用 crontab，会让你选择编辑器，我选择 VI。进入定时任务配置文件，按 i 进入编辑状态，新起一行（可以是文件头部）输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0 4 * * * curl -L -o /etc/mihomo/config.yaml -A &quot;clash&quot;  &lt;SUB_URL&gt;; systemctl reload mihomo</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>以上配置的意思是：在每天夜里 4 点从 SUB_URL 更新订阅配置，配置保存在 &#x2F;etc&#x2F;mihomo&#x2F;config 中，更新完成后重载 mihomo 服务。记得自行替换 SUB_URL 为机场给到的订阅地址。</p>\n</blockquote>\n<h1 id=\"Web页面监控\"><a href=\"#Web页面监控\" class=\"headerlink\" title=\"Web页面监控\"></a>Web页面监控</h1><p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823155227838.png\" alt=\"image-20240823155227838\"></p>\n<blockquote>\n<p>后端地址在<code>/etc/mihomo/config.yaml</code> 文件</p>\n<p>external-controller: 127.0.0.1:9090 # 外部控制器，可以使用 RESTful API 来控制你的 Clash 内核；API 监听地址，你可以将 127.0.0.1 修改为 0.0.0.0 来监听所有 IP；访问地址：<a href=\"http://127.0.0.1:9090/\">http://127.0.0.1:9090</a></p>\n<p>secret: “” # API 的访问密钥</p>\n</blockquote>\n<h2 id=\"配置文件说明\"><a href=\"#配置文件说明\" class=\"headerlink\" title=\"配置文件说明\"></a>配置文件说明</h2><p><a href=\"https://github.com/huLter/Mihomo/blob/main/config.yaml\">Mihomo&#x2F;config.yaml </a> ：<code>https://github.com/huLter/Mihomo/blob/main/config.yaml</code></p>\n<h2 id=\"查询订阅规则\"><a href=\"#查询订阅规则\" class=\"headerlink\" title=\"查询订阅规则\"></a>查询订阅规则</h2><p><a href=\"https://metacubex.github.io/metacubexd\">https://metacubex.github.io/metacubexd</a></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823155703014.png\" alt=\"image-20240823155703014\"></p>\n<p><strong>请修改安全策略</strong></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823155905892.png\" alt=\"image-20240823155905892\"></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823160000756.png\" alt=\"image-20240823160000756\"></p>\n<p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823160035448.png\" alt=\"image-20240823160035448\"></p>\n<h1 id=\"配置使用\"><a href=\"#配置使用\" class=\"headerlink\" title=\"配置使用\"></a>配置使用</h1><blockquote>\n<p><a href=\"https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\">在 Ubuntu 中设置全局 Proxy</a></p>\n<p><a href=\"https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\">https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu</a></p>\n</blockquote>\n<h2 id=\"编辑-etc-environment-https-ouch1978-github-io-docs-containerization-linux-cheatsheet-set-system-proxy-on-ubuntu\"><a href=\"#编辑-etc-environment-https-ouch1978-github-io-docs-containerization-linux-cheatsheet-set-system-proxy-on-ubuntu\" class=\"headerlink\" title=\"编辑 /etc/environment (https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu)\"></a>编辑<code> /etc/environment</code> (<a href=\"https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu\">https://ouch1978.github.io/docs/containerization/linux-cheatsheet/set-system-proxy-on-ubuntu</a>)</h2><h2 id=\"编辑-etc-environment-文件\"><a href=\"#编辑-etc-environment-文件\" class=\"headerlink\" title=\"编辑 &#x2F;etc&#x2F;environment 文件\"></a>编辑 &#x2F;etc&#x2F;environment 文件</h2><p>在 Console 输入下列命令通过 nano 来编辑 &#x2F;etc&#x2F;environment 文件，来把 Proxy 相关设置写入环境变量：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/environment</span><br></pre></td></tr></table></figure>\n\n<p>接着在里面加上下列内容：</p>\n<p><code>/etc/environment</code></p>\n<figure class=\"highlight toml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">PATH</span>=<span class=\"string\">&quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">http_proxy</span>=<span class=\"string\">&quot;http://account:password@192.168.178.2:8080/&quot;</span></span><br><span class=\"line\"><span class=\"attr\">https_proxy</span>=<span class=\"string\">&quot;http://account:password@192.168.178.2:8080/&quot;</span></span><br><span class=\"line\"><span class=\"attr\">ftp_proxy</span>=<span class=\"string\">&quot;http://account:password@192.168.178.2:8080/&quot;</span></span><br><span class=\"line\"><span class=\"attr\">no_prxoy</span>=<span class=\"string\">&quot;127.0.0.1,localhost&quot;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>注意</p>\n<ol>\n<li>请自行将上面示例的帐号、密码、IP 和 Port 替换为你的 Proxy 的设定。</li>\n<li>完成之后，请重新登录让 Ubuntu 自动读取环境变量。</li>\n</ol>\n</blockquote>\n<p>我们也可以通过下面这个命令来确认加入的值是不是有生效：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo <span class=\"built_in\">env</span> | grep proxy</span><br></pre></td></tr></table></figure>\n\n<p>没意外的话，应该大部分通过系统来访问网络的软件就都能上网啰。</p>\n<h2 id=\"查询代理日志\"><a href=\"#查询代理日志\" class=\"headerlink\" title=\"查询代理日志\"></a>查询代理日志</h2><p><img src=\"/post/2024/network/linux-setting-proxy/image-20240823160633739.png\" alt=\"image-20240823160633739\"></p>\n"},{"title":"Tap-Windows install","date":"2024-10-20T07:30:00.000Z","cover":"/post/2024/network/tap-windows/logo.png","_content":"\n\n\n\n\n## 什么是 TAP-Windows 适配器\n\n- **TAP-Windows 适配器**在 Windows 操作系统上提供虚拟 TAP 设备功能，VPN 软件需要它才能运行。\n- **TAP 设备**是完全由软件支持的虚拟网络内核设备，不受硬件网络适配器的支持。\n- **TAP 驱动程序** 用于 TAP 设备工作，它们设计为支持以太网隧道的低级内核。\n\n[tap-windows6：Windows TAP 驱动程序](https://github.com/OpenVPN/tap-windows6)\n\n[什么是 TAP-Windows 适配器 v9？我在哪里下载它？](https://cn.windows-office.net/?p=14257)\n\n\n\n## 安装\n\n[OpenVPN releases](https://build.openvpn.net/downloads/releases/)\n\n\n\nWindows下的驱动均通过签名证书来确认其安全性，首次安装时，因为系统没有存放驱动的可信证书，所以会弹出提示。而当二次安装时，因为之前系统已保存其证书，所以就不会弹出提示。\n\n以下方法使用 [tap-windows-9.21.2.exe](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe)（一键包） 和 [tap-windows-9.21.2.zip](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip)（手动包） 为例\n\n\n\n### 未安装过Tap适配器的朋友\n\n下载驱动压缩包 [下载地址](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip) ，解压（压缩包内i386对应32位系统，amd64对应64位系统）\n\nps 如果只需要装一个TAP-Windows网络适配器，直接下载安装包（exe），一路下一步即可，[安装包下载地址](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe)\n\n### 命令行安装\n\n管理员权限运行CMD（或者PowerShell）\n\n```\n#进入文件夹（根据你解压到哪里）\ncd \"E:\\SystemFile\\Desktop\\amd64\"\n#开始安装\ntapinstall.exe install OemVista.inf tap0901\n```\n\n提示 “Drivers installed successfully.”\n\n### 安装多个Tap-Windows网络适配器\n\n第一个安装完成，需要安装第二个、第三个……还是执行上一步的命令.\n\n```\ntapinstall.exe install OemVista.inf tap0901\n```\n\n## 使用PowerShell重命名网络接口\n\n1. 打开PowerShell：\n\n   - 按下`Win + X`键，然后选择“Windows PowerShell（管理员）”。\n   - 或者在开始菜单中搜索“PowerShell”，右键选择“以管理员身份运行”。\n\n2. 使用`Rename-NetAdapter`命令重命名网络适配器：\n\n   - 在PowerShell中，使用以下命令来重命名网络适配器，其中是\"old_name\"当前的网络适配器名称，\"new_name\"是你想要设置的新名称：\n\n     ```text\n     Rename-NetAdapter -Name \"old_name\" -NewName \"new_name\"\n     ```\n\n   - 例如，如果你的网络适配器当前名为“以太网”，你想要将其重命名为“家庭网络”，则命令如下：\n\n     ```text\n     Rename-NetAdapter -Name \"以太网\" -NewName \"家庭网络\"\n     ```\n\n   - 注意：在PowerShell中，网络适配器的名称可能与设备管理器中显示的名称不同。你可能需要先通过`Get-NetAdapter`命令查看所有网络适配器的列表，以找到正确的名称。","source":"_posts/2024/network/tap-windows.md","raw":"---\ntitle: Tap-Windows install\ndate: 2024-10-20 15:30:00\ntags:\n- windows\ncategories:\n- 网络\ncover: /post/2024/network/tap-windows/logo.png\n\n---\n\n\n\n\n\n## 什么是 TAP-Windows 适配器\n\n- **TAP-Windows 适配器**在 Windows 操作系统上提供虚拟 TAP 设备功能，VPN 软件需要它才能运行。\n- **TAP 设备**是完全由软件支持的虚拟网络内核设备，不受硬件网络适配器的支持。\n- **TAP 驱动程序** 用于 TAP 设备工作，它们设计为支持以太网隧道的低级内核。\n\n[tap-windows6：Windows TAP 驱动程序](https://github.com/OpenVPN/tap-windows6)\n\n[什么是 TAP-Windows 适配器 v9？我在哪里下载它？](https://cn.windows-office.net/?p=14257)\n\n\n\n## 安装\n\n[OpenVPN releases](https://build.openvpn.net/downloads/releases/)\n\n\n\nWindows下的驱动均通过签名证书来确认其安全性，首次安装时，因为系统没有存放驱动的可信证书，所以会弹出提示。而当二次安装时，因为之前系统已保存其证书，所以就不会弹出提示。\n\n以下方法使用 [tap-windows-9.21.2.exe](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe)（一键包） 和 [tap-windows-9.21.2.zip](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip)（手动包） 为例\n\n\n\n### 未安装过Tap适配器的朋友\n\n下载驱动压缩包 [下载地址](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip) ，解压（压缩包内i386对应32位系统，amd64对应64位系统）\n\nps 如果只需要装一个TAP-Windows网络适配器，直接下载安装包（exe），一路下一步即可，[安装包下载地址](http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe)\n\n### 命令行安装\n\n管理员权限运行CMD（或者PowerShell）\n\n```\n#进入文件夹（根据你解压到哪里）\ncd \"E:\\SystemFile\\Desktop\\amd64\"\n#开始安装\ntapinstall.exe install OemVista.inf tap0901\n```\n\n提示 “Drivers installed successfully.”\n\n### 安装多个Tap-Windows网络适配器\n\n第一个安装完成，需要安装第二个、第三个……还是执行上一步的命令.\n\n```\ntapinstall.exe install OemVista.inf tap0901\n```\n\n## 使用PowerShell重命名网络接口\n\n1. 打开PowerShell：\n\n   - 按下`Win + X`键，然后选择“Windows PowerShell（管理员）”。\n   - 或者在开始菜单中搜索“PowerShell”，右键选择“以管理员身份运行”。\n\n2. 使用`Rename-NetAdapter`命令重命名网络适配器：\n\n   - 在PowerShell中，使用以下命令来重命名网络适配器，其中是\"old_name\"当前的网络适配器名称，\"new_name\"是你想要设置的新名称：\n\n     ```text\n     Rename-NetAdapter -Name \"old_name\" -NewName \"new_name\"\n     ```\n\n   - 例如，如果你的网络适配器当前名为“以太网”，你想要将其重命名为“家庭网络”，则命令如下：\n\n     ```text\n     Rename-NetAdapter -Name \"以太网\" -NewName \"家庭网络\"\n     ```\n\n   - 注意：在PowerShell中，网络适配器的名称可能与设备管理器中显示的名称不同。你可能需要先通过`Get-NetAdapter`命令查看所有网络适配器的列表，以找到正确的名称。","slug":"2024/network/tap-windows","published":1,"updated":"2025-01-05T09:27:19.281Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mzh000b7zpn1spr9btp","content":"<h2 id=\"什么是-TAP-Windows-适配器\"><a href=\"#什么是-TAP-Windows-适配器\" class=\"headerlink\" title=\"什么是 TAP-Windows 适配器\"></a>什么是 TAP-Windows 适配器</h2><ul>\n<li><strong>TAP-Windows 适配器</strong>在 Windows 操作系统上提供虚拟 TAP 设备功能，VPN 软件需要它才能运行。</li>\n<li><strong>TAP 设备</strong>是完全由软件支持的虚拟网络内核设备，不受硬件网络适配器的支持。</li>\n<li><strong>TAP 驱动程序</strong> 用于 TAP 设备工作，它们设计为支持以太网隧道的低级内核。</li>\n</ul>\n<p><a href=\"https://github.com/OpenVPN/tap-windows6\">tap-windows6：Windows TAP 驱动程序</a></p>\n<p><a href=\"https://cn.windows-office.net/?p=14257\">什么是 TAP-Windows 适配器 v9？我在哪里下载它？</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://build.openvpn.net/downloads/releases/\">OpenVPN releases</a></p>\n<p>Windows下的驱动均通过签名证书来确认其安全性，首次安装时，因为系统没有存放驱动的可信证书，所以会弹出提示。而当二次安装时，因为之前系统已保存其证书，所以就不会弹出提示。</p>\n<p>以下方法使用 <a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe\">tap-windows-9.21.2.exe</a>（一键包） 和 <a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip\">tap-windows-9.21.2.zip</a>（手动包） 为例</p>\n<h3 id=\"未安装过Tap适配器的朋友\"><a href=\"#未安装过Tap适配器的朋友\" class=\"headerlink\" title=\"未安装过Tap适配器的朋友\"></a>未安装过Tap适配器的朋友</h3><p>下载驱动压缩包 <a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip\">下载地址</a> ，解压（压缩包内i386对应32位系统，amd64对应64位系统）</p>\n<p>ps 如果只需要装一个TAP-Windows网络适配器，直接下载安装包（exe），一路下一步即可，<a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe\">安装包下载地址</a></p>\n<h3 id=\"命令行安装\"><a href=\"#命令行安装\" class=\"headerlink\" title=\"命令行安装\"></a>命令行安装</h3><p>管理员权限运行CMD（或者PowerShell）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入文件夹（根据你解压到哪里）</span><br><span class=\"line\">cd &quot;E:\\SystemFile\\Desktop\\amd64&quot;</span><br><span class=\"line\">#开始安装</span><br><span class=\"line\">tapinstall.exe install OemVista.inf tap0901</span><br></pre></td></tr></table></figure>\n\n<p>提示 “Drivers installed successfully.”</p>\n<h3 id=\"安装多个Tap-Windows网络适配器\"><a href=\"#安装多个Tap-Windows网络适配器\" class=\"headerlink\" title=\"安装多个Tap-Windows网络适配器\"></a>安装多个Tap-Windows网络适配器</h3><p>第一个安装完成，需要安装第二个、第三个……还是执行上一步的命令.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tapinstall.exe install OemVista.inf tap0901</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用PowerShell重命名网络接口\"><a href=\"#使用PowerShell重命名网络接口\" class=\"headerlink\" title=\"使用PowerShell重命名网络接口\"></a>使用PowerShell重命名网络接口</h2><ol>\n<li><p>打开PowerShell：</p>\n<ul>\n<li>按下<code>Win + X</code>键，然后选择“Windows PowerShell（管理员）”。</li>\n<li>或者在开始菜单中搜索“PowerShell”，右键选择“以管理员身份运行”。</li>\n</ul>\n</li>\n<li><p>使用<code>Rename-NetAdapter</code>命令重命名网络适配器：</p>\n<ul>\n<li><p>在PowerShell中，使用以下命令来重命名网络适配器，其中是”old_name”当前的网络适配器名称，”new_name”是你想要设置的新名称：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rename-NetAdapter -Name &quot;old_name&quot; -NewName &quot;new_name&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例如，如果你的网络适配器当前名为“以太网”，你想要将其重命名为“家庭网络”，则命令如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rename-NetAdapter -Name &quot;以太网&quot; -NewName &quot;家庭网络&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：在PowerShell中，网络适配器的名称可能与设备管理器中显示的名称不同。你可能需要先通过<code>Get-NetAdapter</code>命令查看所有网络适配器的列表，以找到正确的名称。</p>\n</li>\n</ul>\n</li>\n</ol>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"什么是-TAP-Windows-适配器\"><a href=\"#什么是-TAP-Windows-适配器\" class=\"headerlink\" title=\"什么是 TAP-Windows 适配器\"></a>什么是 TAP-Windows 适配器</h2><ul>\n<li><strong>TAP-Windows 适配器</strong>在 Windows 操作系统上提供虚拟 TAP 设备功能，VPN 软件需要它才能运行。</li>\n<li><strong>TAP 设备</strong>是完全由软件支持的虚拟网络内核设备，不受硬件网络适配器的支持。</li>\n<li><strong>TAP 驱动程序</strong> 用于 TAP 设备工作，它们设计为支持以太网隧道的低级内核。</li>\n</ul>\n<p><a href=\"https://github.com/OpenVPN/tap-windows6\">tap-windows6：Windows TAP 驱动程序</a></p>\n<p><a href=\"https://cn.windows-office.net/?p=14257\">什么是 TAP-Windows 适配器 v9？我在哪里下载它？</a></p>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p><a href=\"https://build.openvpn.net/downloads/releases/\">OpenVPN releases</a></p>\n<p>Windows下的驱动均通过签名证书来确认其安全性，首次安装时，因为系统没有存放驱动的可信证书，所以会弹出提示。而当二次安装时，因为之前系统已保存其证书，所以就不会弹出提示。</p>\n<p>以下方法使用 <a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe\">tap-windows-9.21.2.exe</a>（一键包） 和 <a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip\">tap-windows-9.21.2.zip</a>（手动包） 为例</p>\n<h3 id=\"未安装过Tap适配器的朋友\"><a href=\"#未安装过Tap适配器的朋友\" class=\"headerlink\" title=\"未安装过Tap适配器的朋友\"></a>未安装过Tap适配器的朋友</h3><p>下载驱动压缩包 <a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.zip\">下载地址</a> ，解压（压缩包内i386对应32位系统，amd64对应64位系统）</p>\n<p>ps 如果只需要装一个TAP-Windows网络适配器，直接下载安装包（exe），一路下一步即可，<a href=\"http://build.openvpn.net/downloads/releases/tap-windows-9.21.2.exe\">安装包下载地址</a></p>\n<h3 id=\"命令行安装\"><a href=\"#命令行安装\" class=\"headerlink\" title=\"命令行安装\"></a>命令行安装</h3><p>管理员权限运行CMD（或者PowerShell）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#进入文件夹（根据你解压到哪里）</span><br><span class=\"line\">cd &quot;E:\\SystemFile\\Desktop\\amd64&quot;</span><br><span class=\"line\">#开始安装</span><br><span class=\"line\">tapinstall.exe install OemVista.inf tap0901</span><br></pre></td></tr></table></figure>\n\n<p>提示 “Drivers installed successfully.”</p>\n<h3 id=\"安装多个Tap-Windows网络适配器\"><a href=\"#安装多个Tap-Windows网络适配器\" class=\"headerlink\" title=\"安装多个Tap-Windows网络适配器\"></a>安装多个Tap-Windows网络适配器</h3><p>第一个安装完成，需要安装第二个、第三个……还是执行上一步的命令.</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tapinstall.exe install OemVista.inf tap0901</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用PowerShell重命名网络接口\"><a href=\"#使用PowerShell重命名网络接口\" class=\"headerlink\" title=\"使用PowerShell重命名网络接口\"></a>使用PowerShell重命名网络接口</h2><ol>\n<li><p>打开PowerShell：</p>\n<ul>\n<li>按下<code>Win + X</code>键，然后选择“Windows PowerShell（管理员）”。</li>\n<li>或者在开始菜单中搜索“PowerShell”，右键选择“以管理员身份运行”。</li>\n</ul>\n</li>\n<li><p>使用<code>Rename-NetAdapter</code>命令重命名网络适配器：</p>\n<ul>\n<li><p>在PowerShell中，使用以下命令来重命名网络适配器，其中是”old_name”当前的网络适配器名称，”new_name”是你想要设置的新名称：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rename-NetAdapter -Name &quot;old_name&quot; -NewName &quot;new_name&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>例如，如果你的网络适配器当前名为“以太网”，你想要将其重命名为“家庭网络”，则命令如下：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Rename-NetAdapter -Name &quot;以太网&quot; -NewName &quot;家庭网络&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：在PowerShell中，网络适配器的名称可能与设备管理器中显示的名称不同。你可能需要先通过<code>Get-NetAdapter</code>命令查看所有网络适配器的列表，以找到正确的名称。</p>\n</li>\n</ul>\n</li>\n</ol>\n"},{"title":"Golang 序列化和反序列化","date":"2025-01-08T02:00:00.000Z","cover":"/post/2025/golang/go-serialize/logo.png","_content":"\n# 序列化和反序列化\n\nGo 语言中，序列化和反序列化是将数据结构转换为字节流（序列化）以及将字节流转换回数据结构（反序列化）的过程。\n\nGo 提供了多种方式来实现序列化和反序列化，常见的方式包括使用 `encoding/json`、`encoding/gob`、`encoding/xml` 等包。\n\n以下是几种常见的序列化和反序列化方法：\n\n## encoding/json\n\nJSON 是一种常用的数据交换格式，Go 提供了 `encoding/json` 包来处理 JSON 数据。\n\n#### 序列化（结构体 -> JSON）\n\n\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\tjsonData, err := json.Marshal(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(jsonData)) // 输出: {\"name\":\"Alice\",\"age\":30}\n}\n```\n\n#### 反序列化（JSON -> 结构体）\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tjsonData := `{\"name\":\"Alice\",\"age\":30}`\n\tvar p Person\n\terr := json.Unmarshal([]byte(jsonData), &p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p) // 输出: {Alice 30}\n}\n```\n\n\n\n## encoding/xml\n\nXML 是另一种常见的数据交换格式，Go 提供了 `encoding/xml` 包来处理 XML 数据。\n\n#### 序列化（结构体 -> XML）\n\n\n\n```go\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `xml:\"name\"`\n\tAge  int    `xml:\"age\"`\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\txmlData, err := xml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(xmlData)) // 输出: <Person><name>Alice</name><age>30</age></Person>\n}\n```\n\n#### 反序列化（XML -> 结构体）\n\n\n\n```go\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `xml:\"name\"`\n\tAge  int    `xml:\"age\"`\n}\n\nfunc main() {\n\txmlData := `<Person><name>Alice</name><age>30</age></Person>`\n\tvar p Person\n\terr := xml.Unmarshal([]byte(xmlData), &p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p) // 输出: {Alice 30}\n}\n```\n\n## 二进制序列化和反序列化\n\n### 1. 使用 `encoding/gob` 进行\n\n`encoding/gob` 是 Go 语言特有的二进制序列化格式，适合在 Go 程序之间进行数据交换。\n\n#### 序列化（结构体 -> 二进制）\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\tvar buf bytes.Buffer\n\tenc := gob.NewEncoder(&buf)\n\terr := enc.Encode(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(buf.Bytes()) // 输出二进制数据\n}\n```\n\n#### 反序列化（二进制 -> 结构体）\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\t// 假设 buf 是之前序列化得到的二进制数据\n\tbuf := bytes.NewBuffer([]byte{...}) // 替换为实际的二进制数据\n\tdec := gob.NewDecoder(buf)\n\tvar p Person\n\terr := dec.Decode(&p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p) // 输出: {Alice 30}\n}\n```\n\n### 2.使用第三方库\n\n如 `github.com/golang/protobuf` 或 `github.com/vmihailenco/msgpack`）\n\n除了标准库，Go 社区还提供了许多第三方库来处理不同的序列化格式，例如 Protocol Buffers、MessagePack 等。\n\n#### `msgpack` \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/vmihailenco/msgpack\"\n)\n\ntype Person struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\tmsgpackData, err := msgpack.Marshal(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(msgpackData) // 输出二进制数据\n\n\tvar p2 Person\n\terr = msgpack.Unmarshal(msgpackData, &p2)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2) // 输出: {Alice 30}\n}\n```\n\n#### Protobuf\n\n##### 安装 Protobuf 编译器 (`protoc`)\n\n首先需要安装 Protobuf 编译器 `protoc`，用于将 `.proto` 文件编译成目标语言的代码。\n\n###### 在 macOS 上安装\n\n```sh\nbrew install protobuf\n```\n\n###### 在 Ubuntu 上安装\n\n```sh\nsudo apt-get install protobuf-compiler\n```\n\n###### 在 Windows 上安装\n\n可以从 [Protobuf 官方 GitHub 发布页面](https://github.com/protocolbuffers/protobuf/releases) 下载预编译的 `protoc` 二进制文件。\n\n##### 安装 Go 的 Protobuf 插件\n\nGo 语言需要安装 `protoc-gen-go` 插件来生成 Go 代码。\n\n```go\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\n```\n\n确保 `protoc-gen-go` 在 `PATH` 中可用：\n\n```go\nexport PATH=$PATH:$(go env GOPATH)/bin\n```\n\n------\n\n##### 定义 `.proto` 文件\n\n创建一个 `.proto` 文件来定义数据结构。例如，创建一个 `person.proto` 文件：\n\n```go\nsyntax = \"proto3\";\n\npackage example;\n\nmessage Person {\n  string name = 1;\n  int32 age = 2;\n  repeated string hobbies = 3; // 重复字段，类似于切片\n}\n```\n\n- `syntax = \"proto3\";` 指定使用 Protobuf 的版本 3。\n- `message` 定义了一个数据结构。\n- 每个字段都有一个唯一的编号（如 `1`, `2`, `3`），用于二进制编码。\n\n##### 编译 `.proto` 文件生成 Go 代码\n\n使用 `protoc` 命令将 `.proto` 文件编译为 Go 代码：\n\n```go\nprotoc --go_out=. person.proto\n```\n\n这会生成一个 `person.pb.go` 文件，其中包含 Go 结构体和序列化/反序列化方法。\n\n##### 在 Go 中使用 Protobuf\n\n生成的 `person.pb.go` 文件可以直接在 Go 代码中使用。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/protobuf/proto\"\n\t\"example\" // 替换为你的包名\n)\n\nfunc main() {\n\t// 创建一个 Person 对象\n\tp := &example.Person{\n\t\tName:    \"Alice\",\n\t\tAge:     30,\n\t\tHobbies: []string{\"reading\", \"coding\"},\n\t}\n\n\t// 序列化为二进制数据\n\tdata, err := proto.Marshal(p)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to encode person: %v\", err)\n\t}\n\tfmt.Printf(\"Serialized data: %x\\n\", data)\n\n\t// 反序列化为 Person 对象\n\tvar p2 example.Person\n\terr = proto.Unmarshal(data, &p2)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to decode person: %v\", err)\n\t}\n\tfmt.Printf(\"Deserialized person: %+v\\n\", p2)\n}\n```\n\n\n\n## 总结\n\n- **JSON**：适合跨语言的数据交换，使用 `encoding/json`。\n- **Gob**：适合 Go 语言内部的数据交换，使用 `encoding/gob`。\n- **XML**：适合需要 XML 格式的场景，使用 `encoding/xml`。\n- **第三方库**：如 Protocol Buffers、MessagePack 等，适合特定场景或性能要求较高的场景。","source":"_posts/2025/golang/go-serialize.md","raw":"---\ntitle: Golang 序列化和反序列化\ndate: 2025-01-08 10:00:00\ntags:\n- golang\ncategories:\n- golang\ncover: /post/2025/golang/go-serialize/logo.png\n\n---\n\n# 序列化和反序列化\n\nGo 语言中，序列化和反序列化是将数据结构转换为字节流（序列化）以及将字节流转换回数据结构（反序列化）的过程。\n\nGo 提供了多种方式来实现序列化和反序列化，常见的方式包括使用 `encoding/json`、`encoding/gob`、`encoding/xml` 等包。\n\n以下是几种常见的序列化和反序列化方法：\n\n## encoding/json\n\nJSON 是一种常用的数据交换格式，Go 提供了 `encoding/json` 包来处理 JSON 数据。\n\n#### 序列化（结构体 -> JSON）\n\n\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\tjsonData, err := json.Marshal(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(jsonData)) // 输出: {\"name\":\"Alice\",\"age\":30}\n}\n```\n\n#### 反序列化（JSON -> 结构体）\n\n```go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\nfunc main() {\n\tjsonData := `{\"name\":\"Alice\",\"age\":30}`\n\tvar p Person\n\terr := json.Unmarshal([]byte(jsonData), &p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p) // 输出: {Alice 30}\n}\n```\n\n\n\n## encoding/xml\n\nXML 是另一种常见的数据交换格式，Go 提供了 `encoding/xml` 包来处理 XML 数据。\n\n#### 序列化（结构体 -> XML）\n\n\n\n```go\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `xml:\"name\"`\n\tAge  int    `xml:\"age\"`\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\txmlData, err := xml.Marshal(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(string(xmlData)) // 输出: <Person><name>Alice</name><age>30</age></Person>\n}\n```\n\n#### 反序列化（XML -> 结构体）\n\n\n\n```go\npackage main\n\nimport (\n\t\"encoding/xml\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string `xml:\"name\"`\n\tAge  int    `xml:\"age\"`\n}\n\nfunc main() {\n\txmlData := `<Person><name>Alice</name><age>30</age></Person>`\n\tvar p Person\n\terr := xml.Unmarshal([]byte(xmlData), &p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p) // 输出: {Alice 30}\n}\n```\n\n## 二进制序列化和反序列化\n\n### 1. 使用 `encoding/gob` 进行\n\n`encoding/gob` 是 Go 语言特有的二进制序列化格式，适合在 Go 程序之间进行数据交换。\n\n#### 序列化（结构体 -> 二进制）\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\tvar buf bytes.Buffer\n\tenc := gob.NewEncoder(&buf)\n\terr := enc.Encode(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(buf.Bytes()) // 输出二进制数据\n}\n```\n\n#### 反序列化（二进制 -> 结构体）\n\n```go\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t\"fmt\"\n)\n\ntype Person struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\t// 假设 buf 是之前序列化得到的二进制数据\n\tbuf := bytes.NewBuffer([]byte{...}) // 替换为实际的二进制数据\n\tdec := gob.NewDecoder(buf)\n\tvar p Person\n\terr := dec.Decode(&p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p) // 输出: {Alice 30}\n}\n```\n\n### 2.使用第三方库\n\n如 `github.com/golang/protobuf` 或 `github.com/vmihailenco/msgpack`）\n\n除了标准库，Go 社区还提供了许多第三方库来处理不同的序列化格式，例如 Protocol Buffers、MessagePack 等。\n\n#### `msgpack` \n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"github.com/vmihailenco/msgpack\"\n)\n\ntype Person struct {\n\tName string\n\tAge  int\n}\n\nfunc main() {\n\tp := Person{Name: \"Alice\", Age: 30}\n\tmsgpackData, err := msgpack.Marshal(p)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(msgpackData) // 输出二进制数据\n\n\tvar p2 Person\n\terr = msgpack.Unmarshal(msgpackData, &p2)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\tfmt.Println(p2) // 输出: {Alice 30}\n}\n```\n\n#### Protobuf\n\n##### 安装 Protobuf 编译器 (`protoc`)\n\n首先需要安装 Protobuf 编译器 `protoc`，用于将 `.proto` 文件编译成目标语言的代码。\n\n###### 在 macOS 上安装\n\n```sh\nbrew install protobuf\n```\n\n###### 在 Ubuntu 上安装\n\n```sh\nsudo apt-get install protobuf-compiler\n```\n\n###### 在 Windows 上安装\n\n可以从 [Protobuf 官方 GitHub 发布页面](https://github.com/protocolbuffers/protobuf/releases) 下载预编译的 `protoc` 二进制文件。\n\n##### 安装 Go 的 Protobuf 插件\n\nGo 语言需要安装 `protoc-gen-go` 插件来生成 Go 代码。\n\n```go\ngo install google.golang.org/protobuf/cmd/protoc-gen-go@latest\n```\n\n确保 `protoc-gen-go` 在 `PATH` 中可用：\n\n```go\nexport PATH=$PATH:$(go env GOPATH)/bin\n```\n\n------\n\n##### 定义 `.proto` 文件\n\n创建一个 `.proto` 文件来定义数据结构。例如，创建一个 `person.proto` 文件：\n\n```go\nsyntax = \"proto3\";\n\npackage example;\n\nmessage Person {\n  string name = 1;\n  int32 age = 2;\n  repeated string hobbies = 3; // 重复字段，类似于切片\n}\n```\n\n- `syntax = \"proto3\";` 指定使用 Protobuf 的版本 3。\n- `message` 定义了一个数据结构。\n- 每个字段都有一个唯一的编号（如 `1`, `2`, `3`），用于二进制编码。\n\n##### 编译 `.proto` 文件生成 Go 代码\n\n使用 `protoc` 命令将 `.proto` 文件编译为 Go 代码：\n\n```go\nprotoc --go_out=. person.proto\n```\n\n这会生成一个 `person.pb.go` 文件，其中包含 Go 结构体和序列化/反序列化方法。\n\n##### 在 Go 中使用 Protobuf\n\n生成的 `person.pb.go` 文件可以直接在 Go 代码中使用。\n\n```go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"log\"\n\n\t\"google.golang.org/protobuf/proto\"\n\t\"example\" // 替换为你的包名\n)\n\nfunc main() {\n\t// 创建一个 Person 对象\n\tp := &example.Person{\n\t\tName:    \"Alice\",\n\t\tAge:     30,\n\t\tHobbies: []string{\"reading\", \"coding\"},\n\t}\n\n\t// 序列化为二进制数据\n\tdata, err := proto.Marshal(p)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to encode person: %v\", err)\n\t}\n\tfmt.Printf(\"Serialized data: %x\\n\", data)\n\n\t// 反序列化为 Person 对象\n\tvar p2 example.Person\n\terr = proto.Unmarshal(data, &p2)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to decode person: %v\", err)\n\t}\n\tfmt.Printf(\"Deserialized person: %+v\\n\", p2)\n}\n```\n\n\n\n## 总结\n\n- **JSON**：适合跨语言的数据交换，使用 `encoding/json`。\n- **Gob**：适合 Go 语言内部的数据交换，使用 `encoding/gob`。\n- **XML**：适合需要 XML 格式的场景，使用 `encoding/xml`。\n- **第三方库**：如 Protocol Buffers、MessagePack 等，适合特定场景或性能要求较高的场景。","slug":"2025/golang/go-serialize","published":1,"updated":"2025-01-08T01:59:55.639Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mzi000d7zpn9uliaaw4","content":"<h1 id=\"序列化和反序列化\"><a href=\"#序列化和反序列化\" class=\"headerlink\" title=\"序列化和反序列化\"></a>序列化和反序列化</h1><p>Go 语言中，序列化和反序列化是将数据结构转换为字节流（序列化）以及将字节流转换回数据结构（反序列化）的过程。</p>\n<p>Go 提供了多种方式来实现序列化和反序列化，常见的方式包括使用 <code>encoding/json</code>、<code>encoding/gob</code>、<code>encoding/xml</code> 等包。</p>\n<p>以下是几种常见的序列化和反序列化方法：</p>\n<h2 id=\"encoding-json\"><a href=\"#encoding-json\" class=\"headerlink\" title=\"encoding&#x2F;json\"></a>encoding&#x2F;json</h2><p>JSON 是一种常用的数据交换格式，Go 提供了 <code>encoding/json</code> 包来处理 JSON 数据。</p>\n<h4 id=\"序列化（结构体-JSON）\"><a href=\"#序列化（结构体-JSON）\" class=\"headerlink\" title=\"序列化（结构体 -&gt; JSON）\"></a>序列化（结构体 -&gt; JSON）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\tjsonData, err := json.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"type\">string</span>(jsonData)) <span class=\"comment\">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反序列化（JSON-结构体）\"><a href=\"#反序列化（JSON-结构体）\" class=\"headerlink\" title=\"反序列化（JSON -&gt; 结构体）\"></a>反序列化（JSON -&gt; 结构体）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tjsonData := <span class=\"string\">`&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;`</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p Person</span><br><span class=\"line\">\terr := json.Unmarshal([]<span class=\"type\">byte</span>(jsonData), &amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"encoding-xml\"><a href=\"#encoding-xml\" class=\"headerlink\" title=\"encoding&#x2F;xml\"></a>encoding&#x2F;xml</h2><p>XML 是另一种常见的数据交换格式，Go 提供了 <code>encoding/xml</code> 包来处理 XML 数据。</p>\n<h4 id=\"序列化（结构体-XML）\"><a href=\"#序列化（结构体-XML）\" class=\"headerlink\" title=\"序列化（结构体 -&gt; XML）\"></a>序列化（结构体 -&gt; XML）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/xml&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`xml:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\txmlData, err := xml.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"type\">string</span>(xmlData)) <span class=\"comment\">// 输出: &lt;Person&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/Person&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反序列化（XML-结构体）\"><a href=\"#反序列化（XML-结构体）\" class=\"headerlink\" title=\"反序列化（XML -&gt; 结构体）\"></a>反序列化（XML -&gt; 结构体）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/xml&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`xml:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\txmlData := <span class=\"string\">`&lt;Person&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/Person&gt;`</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p Person</span><br><span class=\"line\">\terr := xml.Unmarshal([]<span class=\"type\">byte</span>(xmlData), &amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二进制序列化和反序列化\"><a href=\"#二进制序列化和反序列化\" class=\"headerlink\" title=\"二进制序列化和反序列化\"></a>二进制序列化和反序列化</h2><h3 id=\"1-使用-encoding-gob-进行\"><a href=\"#1-使用-encoding-gob-进行\" class=\"headerlink\" title=\"1. 使用 encoding/gob 进行\"></a>1. 使用 <code>encoding/gob</code> 进行</h3><p><code>encoding/gob</code> 是 Go 语言特有的二进制序列化格式，适合在 Go 程序之间进行数据交换。</p>\n<h4 id=\"序列化（结构体-二进制）\"><a href=\"#序列化（结构体-二进制）\" class=\"headerlink\" title=\"序列化（结构体 -&gt; 二进制）\"></a>序列化（结构体 -&gt; 二进制）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/gob&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> buf bytes.Buffer</span><br><span class=\"line\">\tenc := gob.NewEncoder(&amp;buf)</span><br><span class=\"line\">\terr := enc.Encode(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(buf.Bytes()) <span class=\"comment\">// 输出二进制数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反序列化（二进制-结构体）\"><a href=\"#反序列化（二进制-结构体）\" class=\"headerlink\" title=\"反序列化（二进制 -&gt; 结构体）\"></a>反序列化（二进制 -&gt; 结构体）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/gob&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 假设 buf 是之前序列化得到的二进制数据</span></span><br><span class=\"line\">\tbuf := bytes.NewBuffer([]<span class=\"type\">byte</span>&#123;...&#125;) <span class=\"comment\">// 替换为实际的二进制数据</span></span><br><span class=\"line\">\tdec := gob.NewDecoder(buf)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p Person</span><br><span class=\"line\">\terr := dec.Decode(&amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用第三方库\"><a href=\"#2-使用第三方库\" class=\"headerlink\" title=\"2.使用第三方库\"></a>2.使用第三方库</h3><p>如 <code>github.com/golang/protobuf</code> 或 <code>github.com/vmihailenco/msgpack</code>）</p>\n<p>除了标准库，Go 社区还提供了许多第三方库来处理不同的序列化格式，例如 Protocol Buffers、MessagePack 等。</p>\n<h4 id=\"msgpack\"><a href=\"#msgpack\" class=\"headerlink\" title=\"msgpack\"></a><code>msgpack</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/vmihailenco/msgpack&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\tmsgpackData, err := msgpack.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(msgpackData) <span class=\"comment\">// 输出二进制数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p2 Person</span><br><span class=\"line\">\terr = msgpack.Unmarshal(msgpackData, &amp;p2)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p2) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Protobuf\"><a href=\"#Protobuf\" class=\"headerlink\" title=\"Protobuf\"></a>Protobuf</h4><h5 id=\"安装-Protobuf-编译器-protoc\"><a href=\"#安装-Protobuf-编译器-protoc\" class=\"headerlink\" title=\"安装 Protobuf 编译器 (protoc)\"></a>安装 Protobuf 编译器 (<code>protoc</code>)</h5><p>首先需要安装 Protobuf 编译器 <code>protoc</code>，用于将 <code>.proto</code> 文件编译成目标语言的代码。</p>\n<h6 id=\"在-macOS-上安装\"><a href=\"#在-macOS-上安装\" class=\"headerlink\" title=\"在 macOS 上安装\"></a>在 macOS 上安装</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install protobuf</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在-Ubuntu-上安装\"><a href=\"#在-Ubuntu-上安装\" class=\"headerlink\" title=\"在 Ubuntu 上安装\"></a>在 Ubuntu 上安装</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install protobuf-compiler</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在-Windows-上安装\"><a href=\"#在-Windows-上安装\" class=\"headerlink\" title=\"在 Windows 上安装\"></a>在 Windows 上安装</h6><p>可以从 <a href=\"https://github.com/protocolbuffers/protobuf/releases\">Protobuf 官方 GitHub 发布页面</a> 下载预编译的 <code>protoc</code> 二进制文件。</p>\n<h5 id=\"安装-Go-的-Protobuf-插件\"><a href=\"#安装-Go-的-Protobuf-插件\" class=\"headerlink\" title=\"安装 Go 的 Protobuf 插件\"></a>安装 Go 的 Protobuf 插件</h5><p>Go 语言需要安装 <code>protoc-gen-go</code> 插件来生成 Go 代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> install google.golang.org/protobuf/cmd/protoc-gen-<span class=\"keyword\">go</span>@latest</span><br></pre></td></tr></table></figure>\n\n<p>确保 <code>protoc-gen-go</code> 在 <code>PATH</code> 中可用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:$(<span class=\"keyword\">go</span> env GOPATH)/bin</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"定义-proto-文件\"><a href=\"#定义-proto-文件\" class=\"headerlink\" title=\"定义 .proto 文件\"></a>定义 <code>.proto</code> 文件</h5><p>创建一个 <code>.proto</code> 文件来定义数据结构。例如，创建一个 <code>person.proto</code> 文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> example;</span><br><span class=\"line\"></span><br><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int32</span> age = <span class=\"number\">2</span>;</span><br><span class=\"line\">  repeated <span class=\"type\">string</span> hobbies = <span class=\"number\">3</span>; <span class=\"comment\">// 重复字段，类似于切片</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>syntax = &quot;proto3&quot;;</code> 指定使用 Protobuf 的版本 3。</li>\n<li><code>message</code> 定义了一个数据结构。</li>\n<li>每个字段都有一个唯一的编号（如 <code>1</code>, <code>2</code>, <code>3</code>），用于二进制编码。</li>\n</ul>\n<h5 id=\"编译-proto-文件生成-Go-代码\"><a href=\"#编译-proto-文件生成-Go-代码\" class=\"headerlink\" title=\"编译 .proto 文件生成 Go 代码\"></a>编译 <code>.proto</code> 文件生成 Go 代码</h5><p>使用 <code>protoc</code> 命令将 <code>.proto</code> 文件编译为 Go 代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. person.proto</span><br></pre></td></tr></table></figure>\n\n<p>这会生成一个 <code>person.pb.go</code> 文件，其中包含 Go 结构体和序列化&#x2F;反序列化方法。</p>\n<h5 id=\"在-Go-中使用-Protobuf\"><a href=\"#在-Go-中使用-Protobuf\" class=\"headerlink\" title=\"在 Go 中使用 Protobuf\"></a>在 Go 中使用 Protobuf</h5><p>生成的 <code>person.pb.go</code> 文件可以直接在 Go 代码中使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/protobuf/proto&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;example&quot;</span> <span class=\"comment\">// 替换为你的包名</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个 Person 对象</span></span><br><span class=\"line\">\tp := &amp;example.Person&#123;</span><br><span class=\"line\">\t\tName:    <span class=\"string\">&quot;Alice&quot;</span>,</span><br><span class=\"line\">\t\tAge:     <span class=\"number\">30</span>,</span><br><span class=\"line\">\t\tHobbies: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;reading&quot;</span>, <span class=\"string\">&quot;coding&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 序列化为二进制数据</span></span><br><span class=\"line\">\tdata, err := proto.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">&quot;Failed to encode person: %v&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Serialized data: %x\\n&quot;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化为 Person 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p2 example.Person</span><br><span class=\"line\">\terr = proto.Unmarshal(data, &amp;p2)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">&quot;Failed to decode person: %v&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Deserialized person: %+v\\n&quot;</span>, p2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><strong>JSON</strong>：适合跨语言的数据交换，使用 <code>encoding/json</code>。</li>\n<li><strong>Gob</strong>：适合 Go 语言内部的数据交换，使用 <code>encoding/gob</code>。</li>\n<li><strong>XML</strong>：适合需要 XML 格式的场景，使用 <code>encoding/xml</code>。</li>\n<li><strong>第三方库</strong>：如 Protocol Buffers、MessagePack 等，适合特定场景或性能要求较高的场景。</li>\n</ul>\n","cover_type":"img","excerpt":"","more":"<h1 id=\"序列化和反序列化\"><a href=\"#序列化和反序列化\" class=\"headerlink\" title=\"序列化和反序列化\"></a>序列化和反序列化</h1><p>Go 语言中，序列化和反序列化是将数据结构转换为字节流（序列化）以及将字节流转换回数据结构（反序列化）的过程。</p>\n<p>Go 提供了多种方式来实现序列化和反序列化，常见的方式包括使用 <code>encoding/json</code>、<code>encoding/gob</code>、<code>encoding/xml</code> 等包。</p>\n<p>以下是几种常见的序列化和反序列化方法：</p>\n<h2 id=\"encoding-json\"><a href=\"#encoding-json\" class=\"headerlink\" title=\"encoding&#x2F;json\"></a>encoding&#x2F;json</h2><p>JSON 是一种常用的数据交换格式，Go 提供了 <code>encoding/json</code> 包来处理 JSON 数据。</p>\n<h4 id=\"序列化（结构体-JSON）\"><a href=\"#序列化（结构体-JSON）\" class=\"headerlink\" title=\"序列化（结构体 -&gt; JSON）\"></a>序列化（结构体 -&gt; JSON）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\tjsonData, err := json.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"type\">string</span>(jsonData)) <span class=\"comment\">// 输出: &#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反序列化（JSON-结构体）\"><a href=\"#反序列化（JSON-结构体）\" class=\"headerlink\" title=\"反序列化（JSON -&gt; 结构体）\"></a>反序列化（JSON -&gt; 结构体）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tjsonData := <span class=\"string\">`&#123;&quot;name&quot;:&quot;Alice&quot;,&quot;age&quot;:30&#125;`</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p Person</span><br><span class=\"line\">\terr := json.Unmarshal([]<span class=\"type\">byte</span>(jsonData), &amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"encoding-xml\"><a href=\"#encoding-xml\" class=\"headerlink\" title=\"encoding&#x2F;xml\"></a>encoding&#x2F;xml</h2><p>XML 是另一种常见的数据交换格式，Go 提供了 <code>encoding/xml</code> 包来处理 XML 数据。</p>\n<h4 id=\"序列化（结构体-XML）\"><a href=\"#序列化（结构体-XML）\" class=\"headerlink\" title=\"序列化（结构体 -&gt; XML）\"></a>序列化（结构体 -&gt; XML）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/xml&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`xml:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\txmlData, err := xml.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"type\">string</span>(xmlData)) <span class=\"comment\">// 输出: &lt;Person&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/Person&gt;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反序列化（XML-结构体）\"><a href=\"#反序列化（XML-结构体）\" class=\"headerlink\" title=\"反序列化（XML -&gt; 结构体）\"></a>反序列化（XML -&gt; 结构体）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/xml&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span> <span class=\"string\">`xml:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span>    <span class=\"string\">`xml:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\txmlData := <span class=\"string\">`&lt;Person&gt;&lt;name&gt;Alice&lt;/name&gt;&lt;age&gt;30&lt;/age&gt;&lt;/Person&gt;`</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p Person</span><br><span class=\"line\">\terr := xml.Unmarshal([]<span class=\"type\">byte</span>(xmlData), &amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"二进制序列化和反序列化\"><a href=\"#二进制序列化和反序列化\" class=\"headerlink\" title=\"二进制序列化和反序列化\"></a>二进制序列化和反序列化</h2><h3 id=\"1-使用-encoding-gob-进行\"><a href=\"#1-使用-encoding-gob-进行\" class=\"headerlink\" title=\"1. 使用 encoding/gob 进行\"></a>1. 使用 <code>encoding/gob</code> 进行</h3><p><code>encoding/gob</code> 是 Go 语言特有的二进制序列化格式，适合在 Go 程序之间进行数据交换。</p>\n<h4 id=\"序列化（结构体-二进制）\"><a href=\"#序列化（结构体-二进制）\" class=\"headerlink\" title=\"序列化（结构体 -&gt; 二进制）\"></a>序列化（结构体 -&gt; 二进制）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/gob&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> buf bytes.Buffer</span><br><span class=\"line\">\tenc := gob.NewEncoder(&amp;buf)</span><br><span class=\"line\">\terr := enc.Encode(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(buf.Bytes()) <span class=\"comment\">// 输出二进制数据</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"反序列化（二进制-结构体）\"><a href=\"#反序列化（二进制-结构体）\" class=\"headerlink\" title=\"反序列化（二进制 -&gt; 结构体）\"></a>反序列化（二进制 -&gt; 结构体）</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;encoding/gob&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 假设 buf 是之前序列化得到的二进制数据</span></span><br><span class=\"line\">\tbuf := bytes.NewBuffer([]<span class=\"type\">byte</span>&#123;...&#125;) <span class=\"comment\">// 替换为实际的二进制数据</span></span><br><span class=\"line\">\tdec := gob.NewDecoder(buf)</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p Person</span><br><span class=\"line\">\terr := dec.Decode(&amp;p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-使用第三方库\"><a href=\"#2-使用第三方库\" class=\"headerlink\" title=\"2.使用第三方库\"></a>2.使用第三方库</h3><p>如 <code>github.com/golang/protobuf</code> 或 <code>github.com/vmihailenco/msgpack</code>）</p>\n<p>除了标准库，Go 社区还提供了许多第三方库来处理不同的序列化格式，例如 Protocol Buffers、MessagePack 等。</p>\n<h4 id=\"msgpack\"><a href=\"#msgpack\" class=\"headerlink\" title=\"msgpack\"></a><code>msgpack</code></h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/vmihailenco/msgpack&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"type\">string</span></span><br><span class=\"line\">\tAge  <span class=\"type\">int</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tp := Person&#123;Name: <span class=\"string\">&quot;Alice&quot;</span>, Age: <span class=\"number\">30</span>&#125;</span><br><span class=\"line\">\tmsgpackData, err := msgpack.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(msgpackData) <span class=\"comment\">// 输出二进制数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p2 Person</span><br><span class=\"line\">\terr = msgpack.Unmarshal(msgpackData, &amp;p2)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;Error:&quot;</span>, err)</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(p2) <span class=\"comment\">// 输出: &#123;Alice 30&#125;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Protobuf\"><a href=\"#Protobuf\" class=\"headerlink\" title=\"Protobuf\"></a>Protobuf</h4><h5 id=\"安装-Protobuf-编译器-protoc\"><a href=\"#安装-Protobuf-编译器-protoc\" class=\"headerlink\" title=\"安装 Protobuf 编译器 (protoc)\"></a>安装 Protobuf 编译器 (<code>protoc</code>)</h5><p>首先需要安装 Protobuf 编译器 <code>protoc</code>，用于将 <code>.proto</code> 文件编译成目标语言的代码。</p>\n<h6 id=\"在-macOS-上安装\"><a href=\"#在-macOS-上安装\" class=\"headerlink\" title=\"在 macOS 上安装\"></a>在 macOS 上安装</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install protobuf</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在-Ubuntu-上安装\"><a href=\"#在-Ubuntu-上安装\" class=\"headerlink\" title=\"在 Ubuntu 上安装\"></a>在 Ubuntu 上安装</h6><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install protobuf-compiler</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"在-Windows-上安装\"><a href=\"#在-Windows-上安装\" class=\"headerlink\" title=\"在 Windows 上安装\"></a>在 Windows 上安装</h6><p>可以从 <a href=\"https://github.com/protocolbuffers/protobuf/releases\">Protobuf 官方 GitHub 发布页面</a> 下载预编译的 <code>protoc</code> 二进制文件。</p>\n<h5 id=\"安装-Go-的-Protobuf-插件\"><a href=\"#安装-Go-的-Protobuf-插件\" class=\"headerlink\" title=\"安装 Go 的 Protobuf 插件\"></a>安装 Go 的 Protobuf 插件</h5><p>Go 语言需要安装 <code>protoc-gen-go</code> 插件来生成 Go 代码。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> install google.golang.org/protobuf/cmd/protoc-gen-<span class=\"keyword\">go</span>@latest</span><br></pre></td></tr></table></figure>\n\n<p>确保 <code>protoc-gen-go</code> 在 <code>PATH</code> 中可用：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export PATH=$PATH:$(<span class=\"keyword\">go</span> env GOPATH)/bin</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h5 id=\"定义-proto-文件\"><a href=\"#定义-proto-文件\" class=\"headerlink\" title=\"定义 .proto 文件\"></a>定义 <code>.proto</code> 文件</h5><p>创建一个 <code>.proto</code> 文件来定义数据结构。例如，创建一个 <code>person.proto</code> 文件：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syntax = <span class=\"string\">&quot;proto3&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> example;</span><br><span class=\"line\"></span><br><span class=\"line\">message Person &#123;</span><br><span class=\"line\">  <span class=\"type\">string</span> name = <span class=\"number\">1</span>;</span><br><span class=\"line\">  <span class=\"type\">int32</span> age = <span class=\"number\">2</span>;</span><br><span class=\"line\">  repeated <span class=\"type\">string</span> hobbies = <span class=\"number\">3</span>; <span class=\"comment\">// 重复字段，类似于切片</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><code>syntax = &quot;proto3&quot;;</code> 指定使用 Protobuf 的版本 3。</li>\n<li><code>message</code> 定义了一个数据结构。</li>\n<li>每个字段都有一个唯一的编号（如 <code>1</code>, <code>2</code>, <code>3</code>），用于二进制编码。</li>\n</ul>\n<h5 id=\"编译-proto-文件生成-Go-代码\"><a href=\"#编译-proto-文件生成-Go-代码\" class=\"headerlink\" title=\"编译 .proto 文件生成 Go 代码\"></a>编译 <code>.proto</code> 文件生成 Go 代码</h5><p>使用 <code>protoc</code> 命令将 <code>.proto</code> 文件编译为 Go 代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protoc --go_out=. person.proto</span><br></pre></td></tr></table></figure>\n\n<p>这会生成一个 <code>person.pb.go</code> 文件，其中包含 Go 结构体和序列化&#x2F;反序列化方法。</p>\n<h5 id=\"在-Go-中使用-Protobuf\"><a href=\"#在-Go-中使用-Protobuf\" class=\"headerlink\" title=\"在 Go 中使用 Protobuf\"></a>在 Go 中使用 Protobuf</h5><p>生成的 <code>person.pb.go</code> 文件可以直接在 Go 代码中使用。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"string\">&quot;google.golang.org/protobuf/proto&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;example&quot;</span> <span class=\"comment\">// 替换为你的包名</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个 Person 对象</span></span><br><span class=\"line\">\tp := &amp;example.Person&#123;</span><br><span class=\"line\">\t\tName:    <span class=\"string\">&quot;Alice&quot;</span>,</span><br><span class=\"line\">\t\tAge:     <span class=\"number\">30</span>,</span><br><span class=\"line\">\t\tHobbies: []<span class=\"type\">string</span>&#123;<span class=\"string\">&quot;reading&quot;</span>, <span class=\"string\">&quot;coding&quot;</span>&#125;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 序列化为二进制数据</span></span><br><span class=\"line\">\tdata, err := proto.Marshal(p)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">&quot;Failed to encode person: %v&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Serialized data: %x\\n&quot;</span>, data)</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 反序列化为 Person 对象</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> p2 example.Person</span><br><span class=\"line\">\terr = proto.Unmarshal(data, &amp;p2)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalf(<span class=\"string\">&quot;Failed to decode person: %v&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;Deserialized person: %+v\\n&quot;</span>, p2)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ul>\n<li><strong>JSON</strong>：适合跨语言的数据交换，使用 <code>encoding/json</code>。</li>\n<li><strong>Gob</strong>：适合 Go 语言内部的数据交换，使用 <code>encoding/gob</code>。</li>\n<li><strong>XML</strong>：适合需要 XML 格式的场景，使用 <code>encoding/xml</code>。</li>\n<li><strong>第三方库</strong>：如 Protocol Buffers、MessagePack 等，适合特定场景或性能要求较高的场景。</li>\n</ul>\n"},{"title":"搭建异地组网","date":"2025-01-05T09:30:00.000Z","cover":"/post/2025/wireguard/wireguard/logo.png","_content":"\n\n## 前提\n\n需要公网服务器做中转。\n\n## 服务端\n\n> 使用Docker部署\n\n### docker-compose\n\n```yaml\nservices:\n  wireguard:\n    image: linuxserver/wireguard:latest\n    container_name: wireguard\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - ./config:/config\n    ports:\n      - \"5000:5000\"\n      - \"51820:51820/udp\"\n    restart: unless-stopped\n\n  wireguard-ui:\n    image: ngoduykhanh/wireguard-ui:latest\n    container_name: wireguard-ui\n    depends_on:\n      - wireguard\n    cap_add:\n      - NET_ADMIN\n    # use the network of the 'wireguard' service. this enables to show active clients in the status page\n    network_mode: service:wireguard\n    environment:\n      - SENDGRID_API_KEY\n      - EMAIL_FROM_ADDRESS\n      - EMAIL_FROM_NAME\n      - SESSION_SECRET\n      - WGUI_USERNAME=admin\n      - WGUI_PASSWORD=admin\n      - WG_CONF_TEMPLATE\n      - WGUI_MANAGE_START=true\n      - WGUI_MANAGE_RESTART=true\n      - SUBNET_RANGES=SR2:8.8.0.0/24\n    logging:\n      driver: json-file\n      options:\n        max-size: 50m\n    volumes:\n      - ./db:/app/db\n      - ./config:/etc/wireguard\n    restart: unless-stopped\n```\n\n### wireguard-ui\n\nhttp://ip:5000/\n\n\n\n### 服务端配置\n\n`MAIN` -> `Wireguard Server` \n\n\n\n**Server Interface Addresses**:  服务接口地址，一般是组网的访问\n\n> 默认是`10.252.1.0/25`,可根据实际情况进行修改。\n\n\n\n**Listen Port** ： 监听端口\n\n>默认是`51820`，UDP协议\n\n\n\n**Post Up Script** : 启动后执行的脚本\n\n```bash\niptables -A FORWARD -i %1 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE\n```\n\n\n\n**Pre Down Script**： 关闭前执行的脚本\n\n>不填写\n\n\n\n**Post Down Script**： 关闭后执行的脚本\n\n```bash\niptables -D FORWARD -i %1 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE\n```\n\n\n\n修改完成后点击保存✅\n\n\n\n### 创建客户端\n\n`MAIN` -> `Wireguard Clients` -> `New Client` -> `Save` -> `Apply Config`\n\n\n\n ![image-20250105164352429](image-20250105164352429.png)\n\n\n\n![image-20250105164822526](image-20250105164822526.png)\n\n\n\n## 客户端\n\nhttps://www.wireguard.com/install/\n\n\n\n![image-20250105170821376](image-20250105170821376.png)\n\n\n\nhttps://github.com/WireGuard\n\n\n\n![image-20250105170115079](image-20250105170115079.png)\n\n### Windows\n\nhttps://download.wireguard.com/windows-client/wireguard-installer.exe\n\n\n\n### Linux\n\n```sh\n# wg-quick命令\nwg-quick up wg0  #启动服务\nwg-quick down wg0 #停止服务\nwg-quick strip wg0 #查看配置\nwg-quick #查看所有支持的命令\n```\n\n#### Ubuntu \n\n```sh\n# 更新软件包\napt update \n\n# 安装依赖\napt install wireguard resolvconf -y\n\n# 进入配置目录\ncd /etc/\n\n# 编辑配置文件，内容为实际客户端配置\nvim wg0.conf\n\n# 文件夹给予权限\nchmod 0777 /etc/wireguard\n\n# 设置开机启动\nsystemctl enable wg-quick@wg0\n\n# 启动服务\nsystemctl start wg-quick@wg0\n\n```\n\n### MacOS\n\n1. 无美区ID\n\n```sh\n# 在线安装wireguard软，提前要安装：brew\nsudo brew install wireguard-tools\n\n# 创建文件夹 (以管理员身份)\nsudo mkdir /etc/wireguard\n\n# 设置文件夹权限 (以管理员身份)\nsudo chmod 777  /etc/wireguard\n\n# 切入到创建的目录下\ncd /etc/wireguard\n\n\n# 创建虚拟网卡配置文件\ntouch wg0.conf\n\n# 编辑虚拟网卡配置文件内容\nvim wg0.conf\n```\n\n在wg0.conf文件中写入如下内容，需要注意的是，需要自己修改文件内容，保持可用。\n\n```conf\n[Interface]\nAddress = 10.10.10.8/32\nPrivateKey = 客户端的私钥（刚刚生成的privatekey文件的内容）\nDNS = 114.114.114.114\n\n[Peer]\nPublicKey = 服务器的公钥(需要去服务器查看服务器的公钥)\nEndpoint = 服务器的物理ip地址:51820\nAllowedIPs = 10.10.10.0/24\nPersistentKeepalive = 21\n\n```\n\n启动客户端的网卡\n\n```sh\n# 启动网卡\nwg-quick up wg0\n```\n\n```sh\n\n# wg-quick命令\nwg-quick up wg0  #启动服务\nwg-quick down wg0 #停止服务\nwg-quick strip wg0 #查看配置\nwg-quick #查看所有支持的命令\n```\n\n\n\n\n\n2. 使用美区ID登录App Store，搜索 `Wireguard`,使用方式如`Windows`![image-20250105165412539](image-20250105165412539.png)\n","source":"_posts/2025/wireguard/wireguard.md","raw":"---\ntitle: 搭建异地组网\ndate: 2025-01-05 17:30:00\ntags:\n- wireguard\ncategories:\n- VPN\ncover: /post/2025/wireguard/wireguard/logo.png\n\n---\n\n\n## 前提\n\n需要公网服务器做中转。\n\n## 服务端\n\n> 使用Docker部署\n\n### docker-compose\n\n```yaml\nservices:\n  wireguard:\n    image: linuxserver/wireguard:latest\n    container_name: wireguard\n    cap_add:\n      - NET_ADMIN\n    volumes:\n      - ./config:/config\n    ports:\n      - \"5000:5000\"\n      - \"51820:51820/udp\"\n    restart: unless-stopped\n\n  wireguard-ui:\n    image: ngoduykhanh/wireguard-ui:latest\n    container_name: wireguard-ui\n    depends_on:\n      - wireguard\n    cap_add:\n      - NET_ADMIN\n    # use the network of the 'wireguard' service. this enables to show active clients in the status page\n    network_mode: service:wireguard\n    environment:\n      - SENDGRID_API_KEY\n      - EMAIL_FROM_ADDRESS\n      - EMAIL_FROM_NAME\n      - SESSION_SECRET\n      - WGUI_USERNAME=admin\n      - WGUI_PASSWORD=admin\n      - WG_CONF_TEMPLATE\n      - WGUI_MANAGE_START=true\n      - WGUI_MANAGE_RESTART=true\n      - SUBNET_RANGES=SR2:8.8.0.0/24\n    logging:\n      driver: json-file\n      options:\n        max-size: 50m\n    volumes:\n      - ./db:/app/db\n      - ./config:/etc/wireguard\n    restart: unless-stopped\n```\n\n### wireguard-ui\n\nhttp://ip:5000/\n\n\n\n### 服务端配置\n\n`MAIN` -> `Wireguard Server` \n\n\n\n**Server Interface Addresses**:  服务接口地址，一般是组网的访问\n\n> 默认是`10.252.1.0/25`,可根据实际情况进行修改。\n\n\n\n**Listen Port** ： 监听端口\n\n>默认是`51820`，UDP协议\n\n\n\n**Post Up Script** : 启动后执行的脚本\n\n```bash\niptables -A FORWARD -i %1 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE\n```\n\n\n\n**Pre Down Script**： 关闭前执行的脚本\n\n>不填写\n\n\n\n**Post Down Script**： 关闭后执行的脚本\n\n```bash\niptables -D FORWARD -i %1 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE\n```\n\n\n\n修改完成后点击保存✅\n\n\n\n### 创建客户端\n\n`MAIN` -> `Wireguard Clients` -> `New Client` -> `Save` -> `Apply Config`\n\n\n\n ![image-20250105164352429](image-20250105164352429.png)\n\n\n\n![image-20250105164822526](image-20250105164822526.png)\n\n\n\n## 客户端\n\nhttps://www.wireguard.com/install/\n\n\n\n![image-20250105170821376](image-20250105170821376.png)\n\n\n\nhttps://github.com/WireGuard\n\n\n\n![image-20250105170115079](image-20250105170115079.png)\n\n### Windows\n\nhttps://download.wireguard.com/windows-client/wireguard-installer.exe\n\n\n\n### Linux\n\n```sh\n# wg-quick命令\nwg-quick up wg0  #启动服务\nwg-quick down wg0 #停止服务\nwg-quick strip wg0 #查看配置\nwg-quick #查看所有支持的命令\n```\n\n#### Ubuntu \n\n```sh\n# 更新软件包\napt update \n\n# 安装依赖\napt install wireguard resolvconf -y\n\n# 进入配置目录\ncd /etc/\n\n# 编辑配置文件，内容为实际客户端配置\nvim wg0.conf\n\n# 文件夹给予权限\nchmod 0777 /etc/wireguard\n\n# 设置开机启动\nsystemctl enable wg-quick@wg0\n\n# 启动服务\nsystemctl start wg-quick@wg0\n\n```\n\n### MacOS\n\n1. 无美区ID\n\n```sh\n# 在线安装wireguard软，提前要安装：brew\nsudo brew install wireguard-tools\n\n# 创建文件夹 (以管理员身份)\nsudo mkdir /etc/wireguard\n\n# 设置文件夹权限 (以管理员身份)\nsudo chmod 777  /etc/wireguard\n\n# 切入到创建的目录下\ncd /etc/wireguard\n\n\n# 创建虚拟网卡配置文件\ntouch wg0.conf\n\n# 编辑虚拟网卡配置文件内容\nvim wg0.conf\n```\n\n在wg0.conf文件中写入如下内容，需要注意的是，需要自己修改文件内容，保持可用。\n\n```conf\n[Interface]\nAddress = 10.10.10.8/32\nPrivateKey = 客户端的私钥（刚刚生成的privatekey文件的内容）\nDNS = 114.114.114.114\n\n[Peer]\nPublicKey = 服务器的公钥(需要去服务器查看服务器的公钥)\nEndpoint = 服务器的物理ip地址:51820\nAllowedIPs = 10.10.10.0/24\nPersistentKeepalive = 21\n\n```\n\n启动客户端的网卡\n\n```sh\n# 启动网卡\nwg-quick up wg0\n```\n\n```sh\n\n# wg-quick命令\nwg-quick up wg0  #启动服务\nwg-quick down wg0 #停止服务\nwg-quick strip wg0 #查看配置\nwg-quick #查看所有支持的命令\n```\n\n\n\n\n\n2. 使用美区ID登录App Store，搜索 `Wireguard`,使用方式如`Windows`![image-20250105165412539](image-20250105165412539.png)\n","slug":"2025/wireguard/wireguard","published":1,"updated":"2025-01-05T09:29:37.580Z","comments":1,"layout":"post","photos":[],"_id":"cm5na1mzt00137zpncafpc3n6","content":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>需要公网服务器做中转。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><blockquote>\n<p>使用Docker部署</p>\n</blockquote>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">wireguard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/wireguard:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">cap_add:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NET_ADMIN</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./config:/config</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5000:5000&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;51820:51820/udp&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">wireguard-ui:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">ngoduykhanh/wireguard-ui:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">wireguard-ui</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">cap_add:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NET_ADMIN</span></span><br><span class=\"line\">    <span class=\"comment\"># use the network of the &#x27;wireguard&#x27; service. this enables to show active clients in the status page</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">service:wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SENDGRID_API_KEY</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">EMAIL_FROM_ADDRESS</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">EMAIL_FROM_NAME</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SESSION_SECRET</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_USERNAME=admin</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_PASSWORD=admin</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WG_CONF_TEMPLATE</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_MANAGE_START=true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_MANAGE_RESTART=true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SUBNET_RANGES=SR2:8.8.0.0/24</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">driver:</span> <span class=\"string\">json-file</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./db:/app/db</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./config:/etc/wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wireguard-ui\"><a href=\"#wireguard-ui\" class=\"headerlink\" title=\"wireguard-ui\"></a>wireguard-ui</h3><p><a href=\"http://ip:5000/\">http://ip:5000/</a></p>\n<h3 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h3><p><code>MAIN</code> -&gt; <code>Wireguard Server</code> </p>\n<p><strong>Server Interface Addresses</strong>:  服务接口地址，一般是组网的访问</p>\n<blockquote>\n<p>默认是<code>10.252.1.0/25</code>,可根据实际情况进行修改。</p>\n</blockquote>\n<p><strong>Listen Port</strong> ： 监听端口</p>\n<blockquote>\n<p>默认是<code>51820</code>，UDP协议</p>\n</blockquote>\n<p><strong>Post Up Script</strong> : 启动后执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A FORWARD -i %1 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Pre Down Script</strong>： 关闭前执行的脚本</p>\n<blockquote>\n<p>不填写</p>\n</blockquote>\n<p><strong>Post Down Script</strong>： 关闭后执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D FORWARD -i %1 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改完成后点击保存✅</p>\n<h3 id=\"创建客户端\"><a href=\"#创建客户端\" class=\"headerlink\" title=\"创建客户端\"></a>创建客户端</h3><p><code>MAIN</code> -&gt; <code>Wireguard Clients</code> -&gt; <code>New Client</code> -&gt; <code>Save</code> -&gt; <code>Apply Config</code></p>\n<p> <img src=\"/post/2025/wireguard/wireguard/image-20250105164352429.png\" alt=\"image-20250105164352429\"></p>\n<p><img src=\"/post/2025/wireguard/wireguard/image-20250105164822526.png\" alt=\"image-20250105164822526\"></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p><a href=\"https://www.wireguard.com/install/\">https://www.wireguard.com/install/</a></p>\n<p><img src=\"/post/2025/wireguard/wireguard/image-20250105170821376.png\" alt=\"image-20250105170821376\"></p>\n<p><a href=\"https://github.com/WireGuard\">https://github.com/WireGuard</a></p>\n<p><img src=\"/post/2025/wireguard/wireguard/image-20250105170115079.png\" alt=\"image-20250105170115079\"></p>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p><a href=\"https://download.wireguard.com/windows-client/wireguard-installer.exe\">https://download.wireguard.com/windows-client/wireguard-installer.exe</a></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wg-quick命令</span></span><br><span class=\"line\">wg-quick up wg0  <span class=\"comment\">#启动服务</span></span><br><span class=\"line\">wg-quick down wg0 <span class=\"comment\">#停止服务</span></span><br><span class=\"line\">wg-quick strip wg0 <span class=\"comment\">#查看配置</span></span><br><span class=\"line\">wg-quick <span class=\"comment\">#查看所有支持的命令</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新软件包</span></span><br><span class=\"line\">apt update </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">apt install wireguard resolvconf -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入配置目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑配置文件，内容为实际客户端配置</span></span><br><span class=\"line\">vim wg0.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件夹给予权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 0777 /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> wg-quick@wg0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start wg-quick@wg0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><ol>\n<li>无美区ID</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在线安装wireguard软，提前要安装：brew</span></span><br><span class=\"line\">sudo brew install wireguard-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件夹 (以管理员身份)</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置文件夹权限 (以管理员身份)</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777  /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切入到创建的目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建虚拟网卡配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> wg0.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑虚拟网卡配置文件内容</span></span><br><span class=\"line\">vim wg0.conf</span><br></pre></td></tr></table></figure>\n\n<p>在wg0.conf文件中写入如下内容，需要注意的是，需要自己修改文件内容，保持可用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Interface]</span><br><span class=\"line\">Address = 10.10.10.8/32</span><br><span class=\"line\">PrivateKey = 客户端的私钥（刚刚生成的privatekey文件的内容）</span><br><span class=\"line\">DNS = 114.114.114.114</span><br><span class=\"line\"></span><br><span class=\"line\">[Peer]</span><br><span class=\"line\">PublicKey = 服务器的公钥(需要去服务器查看服务器的公钥)</span><br><span class=\"line\">Endpoint = 服务器的物理ip地址:51820</span><br><span class=\"line\">AllowedIPs = 10.10.10.0/24</span><br><span class=\"line\">PersistentKeepalive = 21</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动客户端的网卡</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动网卡</span></span><br><span class=\"line\">wg-quick up wg0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wg-quick命令</span></span><br><span class=\"line\">wg-quick up wg0  <span class=\"comment\">#启动服务</span></span><br><span class=\"line\">wg-quick down wg0 <span class=\"comment\">#停止服务</span></span><br><span class=\"line\">wg-quick strip wg0 <span class=\"comment\">#查看配置</span></span><br><span class=\"line\">wg-quick <span class=\"comment\">#查看所有支持的命令</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<ol start=\"2\">\n<li>使用美区ID登录App Store，搜索 <code>Wireguard</code>,使用方式如<code>Windows</code><img src=\"/post/2025/wireguard/wireguard/image-20250105165412539.png\" alt=\"image-20250105165412539\"></li>\n</ol>\n","cover_type":"img","excerpt":"","more":"<h2 id=\"前提\"><a href=\"#前提\" class=\"headerlink\" title=\"前提\"></a>前提</h2><p>需要公网服务器做中转。</p>\n<h2 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h2><blockquote>\n<p>使用Docker部署</p>\n</blockquote>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\">  <span class=\"attr\">wireguard:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">linuxserver/wireguard:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">cap_add:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NET_ADMIN</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./config:/config</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;5000:5000&quot;</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;51820:51820/udp&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">wireguard-ui:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">ngoduykhanh/wireguard-ui:latest</span></span><br><span class=\"line\">    <span class=\"attr\">container_name:</span> <span class=\"string\">wireguard-ui</span></span><br><span class=\"line\">    <span class=\"attr\">depends_on:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">cap_add:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">NET_ADMIN</span></span><br><span class=\"line\">    <span class=\"comment\"># use the network of the &#x27;wireguard&#x27; service. this enables to show active clients in the status page</span></span><br><span class=\"line\">    <span class=\"attr\">network_mode:</span> <span class=\"string\">service:wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SENDGRID_API_KEY</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">EMAIL_FROM_ADDRESS</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">EMAIL_FROM_NAME</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SESSION_SECRET</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_USERNAME=admin</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_PASSWORD=admin</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WG_CONF_TEMPLATE</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_MANAGE_START=true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">WGUI_MANAGE_RESTART=true</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">SUBNET_RANGES=SR2:8.8.0.0/24</span></span><br><span class=\"line\">    <span class=\"attr\">logging:</span></span><br><span class=\"line\">      <span class=\"attr\">driver:</span> <span class=\"string\">json-file</span></span><br><span class=\"line\">      <span class=\"attr\">options:</span></span><br><span class=\"line\">        <span class=\"attr\">max-size:</span> <span class=\"string\">50m</span></span><br><span class=\"line\">    <span class=\"attr\">volumes:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./db:/app/db</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">./config:/etc/wireguard</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">unless-stopped</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"wireguard-ui\"><a href=\"#wireguard-ui\" class=\"headerlink\" title=\"wireguard-ui\"></a>wireguard-ui</h3><p><a href=\"http://ip:5000/\">http://ip:5000/</a></p>\n<h3 id=\"服务端配置\"><a href=\"#服务端配置\" class=\"headerlink\" title=\"服务端配置\"></a>服务端配置</h3><p><code>MAIN</code> -&gt; <code>Wireguard Server</code> </p>\n<p><strong>Server Interface Addresses</strong>:  服务接口地址，一般是组网的访问</p>\n<blockquote>\n<p>默认是<code>10.252.1.0/25</code>,可根据实际情况进行修改。</p>\n</blockquote>\n<p><strong>Listen Port</strong> ： 监听端口</p>\n<blockquote>\n<p>默认是<code>51820</code>，UDP协议</p>\n</blockquote>\n<p><strong>Post Up Script</strong> : 启动后执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -A FORWARD -i %1 -j ACCEPT; iptables -A FORWARD -o wg0 -j ACCEPT; iptables -t nat -A POSTROUTING -o eth+ -j MASQUERADE</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>Pre Down Script</strong>： 关闭前执行的脚本</p>\n<blockquote>\n<p>不填写</p>\n</blockquote>\n<p><strong>Post Down Script</strong>： 关闭后执行的脚本</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D FORWARD -i %1 -j ACCEPT; iptables -D FORWARD -o wg0 -j ACCEPT; iptables -t nat -D POSTROUTING -o eth+ -j MASQUERADE</span><br></pre></td></tr></table></figure>\n\n\n\n<p>修改完成后点击保存✅</p>\n<h3 id=\"创建客户端\"><a href=\"#创建客户端\" class=\"headerlink\" title=\"创建客户端\"></a>创建客户端</h3><p><code>MAIN</code> -&gt; <code>Wireguard Clients</code> -&gt; <code>New Client</code> -&gt; <code>Save</code> -&gt; <code>Apply Config</code></p>\n<p> <img src=\"/post/2025/wireguard/wireguard/image-20250105164352429.png\" alt=\"image-20250105164352429\"></p>\n<p><img src=\"/post/2025/wireguard/wireguard/image-20250105164822526.png\" alt=\"image-20250105164822526\"></p>\n<h2 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h2><p><a href=\"https://www.wireguard.com/install/\">https://www.wireguard.com/install/</a></p>\n<p><img src=\"/post/2025/wireguard/wireguard/image-20250105170821376.png\" alt=\"image-20250105170821376\"></p>\n<p><a href=\"https://github.com/WireGuard\">https://github.com/WireGuard</a></p>\n<p><img src=\"/post/2025/wireguard/wireguard/image-20250105170115079.png\" alt=\"image-20250105170115079\"></p>\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p><a href=\"https://download.wireguard.com/windows-client/wireguard-installer.exe\">https://download.wireguard.com/windows-client/wireguard-installer.exe</a></p>\n<h3 id=\"Linux\"><a href=\"#Linux\" class=\"headerlink\" title=\"Linux\"></a>Linux</h3><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># wg-quick命令</span></span><br><span class=\"line\">wg-quick up wg0  <span class=\"comment\">#启动服务</span></span><br><span class=\"line\">wg-quick down wg0 <span class=\"comment\">#停止服务</span></span><br><span class=\"line\">wg-quick strip wg0 <span class=\"comment\">#查看配置</span></span><br><span class=\"line\">wg-quick <span class=\"comment\">#查看所有支持的命令</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Ubuntu\"><a href=\"#Ubuntu\" class=\"headerlink\" title=\"Ubuntu\"></a>Ubuntu</h4><figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 更新软件包</span></span><br><span class=\"line\">apt update </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 安装依赖</span></span><br><span class=\"line\">apt install wireguard resolvconf -y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 进入配置目录</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑配置文件，内容为实际客户端配置</span></span><br><span class=\"line\">vim wg0.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 文件夹给予权限</span></span><br><span class=\"line\"><span class=\"built_in\">chmod</span> 0777 /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置开机启动</span></span><br><span class=\"line\">systemctl <span class=\"built_in\">enable</span> wg-quick@wg0</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 启动服务</span></span><br><span class=\"line\">systemctl start wg-quick@wg0</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"MacOS\"><a href=\"#MacOS\" class=\"headerlink\" title=\"MacOS\"></a>MacOS</h3><ol>\n<li>无美区ID</li>\n</ol>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 在线安装wireguard软，提前要安装：brew</span></span><br><span class=\"line\">sudo brew install wireguard-tools</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建文件夹 (以管理员身份)</span></span><br><span class=\"line\">sudo <span class=\"built_in\">mkdir</span> /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 设置文件夹权限 (以管理员身份)</span></span><br><span class=\"line\">sudo <span class=\"built_in\">chmod</span> 777  /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 切入到创建的目录下</span></span><br><span class=\"line\"><span class=\"built_in\">cd</span> /etc/wireguard</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 创建虚拟网卡配置文件</span></span><br><span class=\"line\"><span class=\"built_in\">touch</span> wg0.conf</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 编辑虚拟网卡配置文件内容</span></span><br><span class=\"line\">vim wg0.conf</span><br></pre></td></tr></table></figure>\n\n<p>在wg0.conf文件中写入如下内容，需要注意的是，需要自己修改文件内容，保持可用。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Interface]</span><br><span class=\"line\">Address = 10.10.10.8/32</span><br><span class=\"line\">PrivateKey = 客户端的私钥（刚刚生成的privatekey文件的内容）</span><br><span class=\"line\">DNS = 114.114.114.114</span><br><span class=\"line\"></span><br><span class=\"line\">[Peer]</span><br><span class=\"line\">PublicKey = 服务器的公钥(需要去服务器查看服务器的公钥)</span><br><span class=\"line\">Endpoint = 服务器的物理ip地址:51820</span><br><span class=\"line\">AllowedIPs = 10.10.10.0/24</span><br><span class=\"line\">PersistentKeepalive = 21</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>启动客户端的网卡</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 启动网卡</span></span><br><span class=\"line\">wg-quick up wg0</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># wg-quick命令</span></span><br><span class=\"line\">wg-quick up wg0  <span class=\"comment\">#启动服务</span></span><br><span class=\"line\">wg-quick down wg0 <span class=\"comment\">#停止服务</span></span><br><span class=\"line\">wg-quick strip wg0 <span class=\"comment\">#查看配置</span></span><br><span class=\"line\">wg-quick <span class=\"comment\">#查看所有支持的命令</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<ol start=\"2\">\n<li>使用美区ID登录App Store，搜索 <code>Wireguard</code>,使用方式如<code>Windows</code><img src=\"/post/2025/wireguard/wireguard/image-20250105165412539.png\" alt=\"image-20250105165412539\"></li>\n</ol>\n"}],"PostAsset":[{"_id":"source/_posts/2023/Hadoop/image-20200820213620752.png","slug":"image-20200820213620752.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200820224123902.png","slug":"image-20200820224123902.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822090658863.png","slug":"image-20200822090658863.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822090905199.png","slug":"image-20200822090905199.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822091216510.png","slug":"image-20200822091216510.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822091335115.png","slug":"image-20200822091335115.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822091809558.png","slug":"image-20200822091809558.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822092048172.png","slug":"image-20200822092048172.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822093255847.png","slug":"image-20200822093255847.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822094801817.png","slug":"image-20200822094801817.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822100056038.png","slug":"image-20200822100056038.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822102024933.png","slug":"image-20200822102024933.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822102108817.png","slug":"image-20200822102108817.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822111645219.png","slug":"image-20200822111645219.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822140728454.png","slug":"image-20200822140728454.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822140954237.png","slug":"image-20200822140954237.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822141013068.png","slug":"image-20200822141013068.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200822141028970.png","slug":"image-20200822141028970.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200823180537869.png","slug":"image-20200823180537869.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200827081213048.png","slug":"image-20200827081213048.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200827081247672.png","slug":"image-20200827081247672.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200829223326519.png","slug":"image-20200829223326519.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/Hadoop/image-20200830083752748.png","slug":"image-20200830083752748.png","post":"clzxxiuxr00010aibav5g5m1e","modified":0,"renderable":0},{"_id":"source/_posts/2023/docker/img.png","slug":"img.png","post":"clzxxiuy000090aib0pf83034","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_10.png","slug":"img_10.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_11.png","slug":"img_11.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_12.png","slug":"img_12.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_5.png","slug":"img_5.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_6.png","slug":"img_6.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_7.png","slug":"img_7.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_8.png","slug":"img_8.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab-ci-springboot/img_9.png","slug":"img_9.png","post":"clzxxiuy3000g0aib76176qc1","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab/img_0.png","slug":"img_0.png","post":"clzxxiuy4000h0aib71plggj4","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab/img_1.png","slug":"img_1.png","post":"clzxxiuy4000h0aib71plggj4","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab/img_2.png","slug":"img_2.png","post":"clzxxiuy4000h0aib71plggj4","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab/img_3.png","slug":"img_3.png","post":"clzxxiuy4000h0aib71plggj4","modified":0,"renderable":0},{"_id":"source/_posts/2023/gitlab/img_4.png","slug":"img_4.png","post":"clzxxiuy4000h0aib71plggj4","modified":0,"renderable":0},{"_id":"source/_posts/2023/https/https.png","slug":"https.png","post":"clzxxiuy5000l0aibabkm0zkk","modified":0,"renderable":0},{"_id":"source/_posts/2023/kotlin-springboot/kotlin.png","slug":"kotlin.png","post":"clzxxiuy6000m0aibexq38shb","modified":0,"renderable":0},{"_id":"source/_posts/2023/localdate-springboot/kotlin.jpg","slug":"kotlin.jpg","post":"clzxxiuy9000r0aib1lgk1xhq","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png","slug":"0c1c2fd0-acb6-4197-801f-a9ff12f5ced4.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png","slug":"3bfa032a-2a4e-4f01-b03d-90c4c39df0aa.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png","slug":"3cd7e3a5-2b1d-4eb6-83c9-fedc27a2bfc1.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png","slug":"3d67796c-0dc7-4f12-9af0-39b20fab7cbf.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/3e60331e-2742-4047-8383-e107945f85c4.png","slug":"3e60331e-2742-4047-8383-e107945f85c4.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png","slug":"4f6873cb-c0f9-4955-8600-bf37e24f4fbf.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/5066a220-0f28-4b94-8934-f54c722697a9.png","slug":"5066a220-0f28-4b94-8934-f54c722697a9.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/5f12c1e3-2e47-4997-a887-b395b511490b.png","slug":"5f12c1e3-2e47-4997-a887-b395b511490b.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/5fb46273-081b-4271-b94c-e2ba6eea5f69.png","slug":"5fb46273-081b-4271-b94c-e2ba6eea5f69.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/626353d2-1f73-46e9-858d-732ed7bee94a.png","slug":"626353d2-1f73-46e9-858d-732ed7bee94a.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png","slug":"6bcb9fd5-1105-4a75-b6c5-55dc08af5c50.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/745b992d-fcff-46df-8a33-150b65bf47ca.png","slug":"745b992d-fcff-46df-8a33-150b65bf47ca.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png","slug":"787d871b-0d4c-403a-ae3f-cbc6ea587dc1.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png","slug":"8b2d9ee5-a0da-460c-9296-71cd9bae71cb.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/90434413-5431-408e-878f-3b76d5118d64.png","slug":"90434413-5431-408e-878f-3b76d5118d64.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/9111c342-79fb-4def-aef6-d266daea6078.png","slug":"9111c342-79fb-4def-aef6-d266daea6078.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/95c89389-d9e7-42e1-9d80-4886d458a48b.png","slug":"95c89389-d9e7-42e1-9d80-4886d458a48b.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/a670f078-2260-4276-8db9-79112eb9e979.png","slug":"a670f078-2260-4276-8db9-79112eb9e979.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/bece6bf1-f9a8-475d-9911-6293e225d84e.png","slug":"bece6bf1-f9a8-475d-9911-6293e225d84e.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/bedb0d3f-90d8-4867-84c2-cea52a58412f.png","slug":"bedb0d3f-90d8-4867-84c2-cea52a58412f.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/befee5fe-233e-4ca1-8a63-1b8908311845.png","slug":"befee5fe-233e-4ca1-8a63-1b8908311845.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/d215e636-ea46-4b84-a861-4aff3dbdbf0e.png","slug":"d215e636-ea46-4b84-a861-4aff3dbdbf0e.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/d404438c-1def-4366-90a5-3f304dd1ddf2.png","slug":"d404438c-1def-4366-90a5-3f304dd1ddf2.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/d5649d47-ed1b-4797-8a8f-73634873cd9d.png","slug":"d5649d47-ed1b-4797-8a8f-73634873cd9d.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/d9b58c91-421c-4afe-b359-2cde68c12eca.png","slug":"d9b58c91-421c-4afe-b359-2cde68c12eca.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/db1f5266-c920-4379-a82d-f0dadbe1a1c3.png","slug":"db1f5266-c920-4379-a82d-f0dadbe1a1c3.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png","slug":"ecac62a6-7c65-4df3-ba5e-19c0630fb78f.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/jvm/f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png","slug":"f0d5cf63-e51f-4309-b8ff-448f90ca78fb.png","post":"clzxxiuy8000p0aib3bxi0007","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread-pool/e0733727-92bd-4438-a628-3b3989d8e838.png","slug":"e0733727-92bd-4438-a628-3b3989d8e838.png","post":"clzxxiuyb000w0aibdapb1vug","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240808144747026.png","slug":"image-20240808144747026.png","post":"clzxxiuyc000x0aib2l7uewof","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240808144842305.png","slug":"image-20240808144842305.png","post":"clzxxiuyc000x0aib2l7uewof","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091353090.png","slug":"image-20240809091353090.png","post":"clzxxiuyc000x0aib2l7uewof","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091451537.png","slug":"image-20240809091451537.png","post":"clzxxiuyc000x0aib2l7uewof","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091554465.png","slug":"image-20240809091554465.png","post":"clzxxiuyc000x0aib2l7uewof","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ceph-osd-type/image-20240809091717603.png","slug":"image-20240809091717603.png","post":"clzxxiuyc000x0aib2l7uewof","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810104915542.png","slug":"image-20240810104915542.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105023675.png","slug":"image-20240810105023675.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105145553(1).png","slug":"image-20240810105145553(1).png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105145553.png","slug":"image-20240810105145553.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105552583.png","slug":"image-20240810105552583.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810105703217.png","slug":"image-20240810105703217.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110014734.png","slug":"image-20240810110014734.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110058958.png","slug":"image-20240810110058958.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110226945.png","slug":"image-20240810110226945.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2024/ceph/ubuntu-export-offline-packages/image-20240810110427960.png","slug":"image-20240810110427960.png","post":"clzxxiuyd00140aibfj10693j","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/0827c261-3195-4bdc-9b78-e0c664037749.png","slug":"0827c261-3195-4bdc-9b78-e0c664037749.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png","slug":"0e59c147-a499-4226-bf3b-d6f0a4cabd5a.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/210feb5c-150a-43c3-8b3d-440f53e343d1.png","slug":"210feb5c-150a-43c3-8b3d-440f53e343d1.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/2ed065be-3fb7-4e67-b04e-b8e08980405d.png","slug":"2ed065be-3fb7-4e67-b04e-b8e08980405d.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/2feee3db-6b39-4e1a-9098-1a5f966742f7.png","slug":"2feee3db-6b39-4e1a-9098-1a5f966742f7.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/3a071edf-6ded-487b-abbb-d016a9fe6864.png","slug":"3a071edf-6ded-487b-abbb-d016a9fe6864.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/3ce55a24-aeb0-4055-9925-c69a63ec9053.png","slug":"3ce55a24-aeb0-4055-9925-c69a63ec9053.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/44fc6f61-2e64-414e-be76-0486d270b52b.png","slug":"44fc6f61-2e64-414e-be76-0486d270b52b.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/453affe8-17db-40b3-940f-162e7597336e.png","slug":"453affe8-17db-40b3-940f-162e7597336e.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/4b22adcb-879c-493e-a6dc-7a50426a6db7.png","slug":"4b22adcb-879c-493e-a6dc-7a50426a6db7.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/4f22eeff-a017-46f6-bf49-5359e570fe22.png","slug":"4f22eeff-a017-46f6-bf49-5359e570fe22.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/51e456b2-69ca-4039-8ec3-137a74a3e57d.png","slug":"51e456b2-69ca-4039-8ec3-137a74a3e57d.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/52ebada9-ad0c-45fc-9482-40b961c20bbf.png","slug":"52ebada9-ad0c-45fc-9482-40b961c20bbf.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/5cce206b-f24c-4489-afda-57b5a3102172.png","slug":"5cce206b-f24c-4489-afda-57b5a3102172.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/683dd209-d862-46f9-878f-b9e8f4c2db3b.png","slug":"683dd209-d862-46f9-878f-b9e8f4c2db3b.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/6d0f8427-4068-4a15-a933-cd3f74e28dbf.png","slug":"6d0f8427-4068-4a15-a933-cd3f74e28dbf.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/70691192-ef7e-43b6-b365-d139f036e188.png","slug":"70691192-ef7e-43b6-b365-d139f036e188.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/75442144-d101-4e7a-97ca-c833a2b827fe.png","slug":"75442144-d101-4e7a-97ca-c833a2b827fe.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/7bf73e18-7259-45da-93c5-a4183062572e.png","slug":"7bf73e18-7259-45da-93c5-a4183062572e.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png","slug":"7d8e2e3b-8f62-4e97-86d1-d8ab88b83ca1.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/815e324a-777f-4b34-b590-acbb4c624cb0.png","slug":"815e324a-777f-4b34-b590-acbb4c624cb0.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/81a4db1a-c8d1-47f7-a955-39db726f5173.png","slug":"81a4db1a-c8d1-47f7-a955-39db726f5173.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/86d6badd-f76b-4152-8044-bef85f333017.png","slug":"86d6badd-f76b-4152-8044-bef85f333017.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/9372a527-1cf5-4699-9271-f9724c815f24.png","slug":"9372a527-1cf5-4699-9271-f9724c815f24.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png","slug":"a6cd39b0-e6e9-4b6f-88ea-3cfb0d899b83.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/b94de8b0-5933-49dc-b0ff-a29a03280074.png","slug":"b94de8b0-5933-49dc-b0ff-a29a03280074.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png","slug":"bc0f03b1-c84a-45af-879e-4bdc0f0ff35e.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/c2203c1e-3091-4832-8061-8ba8bc3b24d1.png","slug":"c2203c1e-3091-4832-8061-8ba8bc3b24d1.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/ca324ec8-b1a0-419a-a962-640dae424e10.png","slug":"ca324ec8-b1a0-419a-a962-640dae424e10.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/cb65fed7-57dd-404b-b4f1-e365dbe83379.png","slug":"cb65fed7-57dd-404b-b4f1-e365dbe83379.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/d05f71ef-bbbb-4b19-a804-6444a74de835.png","slug":"d05f71ef-bbbb-4b19-a804-6444a74de835.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png","slug":"d1df5ae9-03d4-4960-a460-86c4eb4f13d9.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png","slug":"d1f13ce8-f7cb-4cf1-b2aa-6e8d7204a459.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/d37e0c1b-1e69-4360-937a-edf5296f47ce.png","slug":"d37e0c1b-1e69-4360-937a-edf5296f47ce.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png","slug":"d3f13fb8-e2e2-4692-8b27-2ca13a87ec1a.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/d9550ede-fad3-4675-8791-3a1237fab0de.png","slug":"d9550ede-fad3-4675-8791-3a1237fab0de.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/e1c2fc78-6f75-4049-8631-1e2bf400e92b.png","slug":"e1c2fc78-6f75-4049-8631-1e2bf400e92b.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/e5b813b7-361c-42ec-9326-53b01a2872da.png","slug":"e5b813b7-361c-42ec-9326-53b01a2872da.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png","slug":"ea4c56c3-75b1-48fa-a40e-dcb6dd63823f.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/f5e5190c-2ca0-4467-8618-c9084b18b26f.png","slug":"f5e5190c-2ca0-4467-8618-c9084b18b26f.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/f78c9ec4-6379-48de-b2e6-f529bb063540.png","slug":"f78c9ec4-6379-48de-b2e6-f529bb063540.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/feed6992-8dff-450c-9010-e2f46caf6243.png","slug":"feed6992-8dff-450c-9010-e2f46caf6243.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806070304756.png","slug":"image-20200806070304756.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806070323056.png","slug":"image-20200806070323056.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806072602725.png","slug":"image-20200806072602725.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806080136510.png","slug":"image-20200806080136510.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806080218070.png","slug":"image-20200806080218070.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806080338819.png","slug":"image-20200806080338819.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806080425078.png","slug":"image-20200806080425078.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806081215362.png","slug":"image-20200806081215362.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806081309415.png","slug":"image-20200806081309415.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806081339039.png","slug":"image-20200806081339039.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806081409317.png","slug":"image-20200806081409317.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806093605366.png","slug":"image-20200806093605366.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806093649652.png","slug":"image-20200806093649652.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806112353892.png","slug":"image-20200806112353892.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806113017975.png","slug":"image-20200806113017975.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806113212737.png","slug":"image-20200806113212737.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806113622053.png","slug":"image-20200806113622053.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200806115634318.png","slug":"image-20200806115634318.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200818213438504.png","slug":"image-20200818213438504.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819064936628.png","slug":"image-20200819064936628.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819065515918.png","slug":"image-20200819065515918.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819065601188.png","slug":"image-20200819065601188.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819065708766.png","slug":"image-20200819065708766.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819065820151.png","slug":"image-20200819065820151.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819065835524.png","slug":"image-20200819065835524.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819065931928.png","slug":"image-20200819065931928.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819071006301.png","slug":"image-20200819071006301.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819071139042.png","slug":"image-20200819071139042.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819072452480.png","slug":"image-20200819072452480.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200819072504262.png","slug":"image-20200819072504262.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2023/thread/image-20200822234416578.png","slug":"image-20200822234416578.png","post":"clzxxiuyn002e0aiban7j8sxh","modified":0,"renderable":0},{"_id":"source/_posts/2024/docker/nginx/logo.jpg","slug":"logo.jpg","post":"cm5na1mz700017zpna8hh4q7g","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicCompressionPage.png","slug":"CubicCompressionPage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicExtractPage.png","slug":"CubicExtractPage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicFinishPage.png","slug":"CubicFinishPage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicGeneratePage.png","slug":"CubicGeneratePage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicOptionsPageBootTab2.png","slug":"CubicOptionsPageBootTab2.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicOptionsPageKernelTab.png","slug":"CubicOptionsPageKernelTab.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicOptionsPagePreseedTab.png","slug":"CubicOptionsPagePreseedTab.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicPreparePage.png","slug":"CubicPreparePage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicProjectPage.png","slug":"CubicProjectPage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicProjectPageExistingProject.png","slug":"CubicProjectPageExistingProject.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicTerminalPage.png","slug":"CubicTerminalPage.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/CubicTerminalPageNano.png","slug":"CubicTerminalPageNano.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/Home.png","slug":"Home.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/iso/Cubic/logo.png","slug":"logo.png","post":"cm5na1mz800027zpnc0dwdn4c","modified":0,"renderable":0},{"_id":"source/_posts/2024/linux/make-linux-service/logo.jpg","slug":"logo.jpg","post":"cm5na1mze00067zpnb76386tu","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155227838.png","slug":"image-20240823155227838.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155703014.png","slug":"image-20240823155703014.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155901773.png","slug":"image-20240823155901773.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823155905892.png","slug":"image-20240823155905892.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823160000756.png","slug":"image-20240823160000756.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823160035448.png","slug":"image-20240823160035448.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/image-20240823160633739.png","slug":"image-20240823160633739.png","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/linux-setting-proxy/logo.jpg","slug":"logo.jpg","post":"cm5na1mzf00077zpn170dcr4y","modified":0,"renderable":0},{"_id":"source/_posts/2024/network/tap-windows/logo.png","slug":"logo.png","post":"cm5na1mzh000b7zpn1spr9btp","modified":0,"renderable":0},{"_id":"source/_posts/2025/golang/go-serialize/logo.png","slug":"logo.png","post":"cm5na1mzi000d7zpn9uliaaw4","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105164352429.png","slug":"image-20250105164352429.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105164800108.png","slug":"image-20250105164800108.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105164822526.png","slug":"image-20250105164822526.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105165412539.png","slug":"image-20250105165412539.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105170115079.png","slug":"image-20250105170115079.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/image-20250105170821376.png","slug":"image-20250105170821376.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0},{"_id":"source/_posts/2025/wireguard/wireguard/logo.png","slug":"logo.png","post":"cm5na1mzt00137zpncafpc3n6","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clzxxiuxr00010aibav5g5m1e","category_id":"clzxxiuxw00040aib27ee230s","_id":"clzxxiuy5000i0aibhcvg8md5"},{"post_id":"clzxxiuy000090aib0pf83034","category_id":"clzxxiuy5000j0aib19fv6i5t","_id":"clzxxiuya000u0aib60pi992h"},{"post_id":"clzxxiuy8000p0aib3bxi0007","category_id":"clzxxiuy2000c0aib2iinavca","_id":"clzxxiuyc000y0aib1x5u4sqr"},{"post_id":"clzxxiuy1000b0aib0mkcbwcv","category_id":"clzxxiuy5000j0aib19fv6i5t","_id":"clzxxiuyd00120aibh9v3hlcn"},{"post_id":"clzxxiuyb000w0aibdapb1vug","category_id":"clzxxiuy2000c0aib2iinavca","_id":"clzxxiuye00150aib9bkwek29"},{"post_id":"clzxxiuy3000g0aib76176qc1","category_id":"clzxxiuy5000j0aib19fv6i5t","_id":"clzxxiuyf001a0aib15z6dz7j"},{"post_id":"clzxxiuy4000h0aib71plggj4","category_id":"clzxxiuy5000j0aib19fv6i5t","_id":"clzxxiuyh001j0aib7uvk9v7u"},{"post_id":"clzxxiuy6000m0aibexq38shb","category_id":"clzxxiuyg001e0aib9uhr8t8k","_id":"clzxxiuyi001p0aib11mo1363"},{"post_id":"clzxxiuy9000r0aib1lgk1xhq","category_id":"clzxxiuyg001e0aib9uhr8t8k","_id":"clzxxiuyj001s0aibf6gxdaar"},{"post_id":"clzxxiuyc000x0aib2l7uewof","category_id":"clzxxiuyi001o0aib4jmefb5t","_id":"clzxxiuyj001x0aib41cjaghj"},{"post_id":"clzxxiuyd00110aib3jiffjvj","category_id":"clzxxiuyi001o0aib4jmefb5t","_id":"clzxxiuyk00200aib9pkudz0h"},{"post_id":"clzxxiuyd00140aibfj10693j","category_id":"clzxxiuyi001o0aib4jmefb5t","_id":"clzxxiuyk00230aib7cg2awci"},{"post_id":"clzxxiuyf00190aib4e8c0f86","category_id":"clzxxiuyi001o0aib4jmefb5t","_id":"clzxxiuyk00260aibheqy5hyw"},{"post_id":"clzxxiuyn002e0aiban7j8sxh","category_id":"clzxxiuy2000c0aib2iinavca","_id":"clzxxiuyo002g0aib1y481au1"},{"post_id":"clzxxiuxz00070aib7yqpfahk","category_id":"clzxxiuy5000j0aib19fv6i5t","_id":"cm5na1mz600007zpndgkg2wkl"},{"post_id":"cm5na1mz700017zpna8hh4q7g","category_id":"cm5na1mz900037zpn38wzad0m","_id":"cm5na1mzi000e7zpnh70k7sx1"},{"post_id":"cm5na1mz800027zpnc0dwdn4c","category_id":"cm5na1mzg00087zpnawi7c90c","_id":"cm5na1mzl000j7zpnedqr62qd"},{"post_id":"cm5na1mzd00057zpn467m6cdi","category_id":"cm5na1mzg00087zpnawi7c90c","_id":"cm5na1mzl000m7zpn0w0q3971"},{"post_id":"cm5na1mze00067zpnb76386tu","category_id":"cm5na1mzk000i7zpn1l7q7x0o","_id":"cm5na1mzm000q7zpn5nztgiv3"},{"post_id":"cm5na1mzf00077zpn170dcr4y","category_id":"cm5na1mzl000n7zpn9f8k5c1e","_id":"cm5na1mzn000u7zpn2e4h14ta"},{"post_id":"cm5na1mzh000b7zpn1spr9btp","category_id":"cm5na1mzl000n7zpn9f8k5c1e","_id":"cm5na1mzn000x7zpn449hhby9"},{"post_id":"cm5na1mzi000d7zpn9uliaaw4","category_id":"cm5na1mzm000t7zpn71qq07vq","_id":"cm5na1mzo00117zpn3css0fdd"},{"post_id":"cm5na1mzt00137zpncafpc3n6","category_id":"cm5na1mzt00147zpnbwlb7kpu","_id":"cm5na1mzu00177zpn6djp8st1"}],"PostTag":[{"post_id":"clzxxiuxr00010aibav5g5m1e","tag_id":"clzxxiuxy00050aibakh7a82o","_id":"clzxxiuy3000e0aibajq112t7"},{"post_id":"clzxxiuxv00030aibc92y0mcn","tag_id":"clzxxiuy2000d0aib6jnpbzap","_id":"clzxxiuy9000q0aib1qrbcvs0"},{"post_id":"clzxxiuxv00030aibc92y0mcn","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"clzxxiuya000s0aibfbj0d92m"},{"post_id":"clzxxiuxz00070aib7yqpfahk","tag_id":"clzxxiuy2000d0aib6jnpbzap","_id":"clzxxiuyd00130aibexvnepw7"},{"post_id":"clzxxiuxz00070aib7yqpfahk","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"clzxxiuye00160aibc170chox"},{"post_id":"clzxxiuy000090aib0pf83034","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"clzxxiuyf001b0aib0gia8yl9"},{"post_id":"clzxxiuy1000b0aib0mkcbwcv","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"clzxxiuyh001g0aibf8gq3i6w"},{"post_id":"clzxxiuy3000g0aib76176qc1","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"clzxxiuyh001l0aibhvjx3hs0"},{"post_id":"clzxxiuy4000h0aib71plggj4","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"clzxxiuyi001q0aibgxaje570"},{"post_id":"clzxxiuy8000p0aib3bxi0007","tag_id":"clzxxiuyi001n0aib7ixu52cr","_id":"clzxxiuyj001u0aib1ef87zkm"},{"post_id":"clzxxiuyb000w0aibdapb1vug","tag_id":"clzxxiuyi001r0aib8a4s2z0d","_id":"clzxxiuyj001y0aib9izuhagy"},{"post_id":"clzxxiuyc000x0aib2l7uewof","tag_id":"clzxxiuyj001v0aib6f3td1tn","_id":"clzxxiuyk00220aibaxly6g9z"},{"post_id":"clzxxiuyd00110aib3jiffjvj","tag_id":"clzxxiuyj001v0aib6f3td1tn","_id":"clzxxiuyk00250aib7grdehe7"},{"post_id":"clzxxiuyd00140aibfj10693j","tag_id":"clzxxiuyj001v0aib6f3td1tn","_id":"clzxxiuyl00280aib9ybjgn2m"},{"post_id":"clzxxiuyf00190aib4e8c0f86","tag_id":"clzxxiuyj001v0aib6f3td1tn","_id":"clzxxiuyl002a0aib5tn7e0ve"},{"post_id":"clzxxiuyn002e0aiban7j8sxh","tag_id":"clzxxiuyi001r0aib8a4s2z0d","_id":"clzxxiuyo002f0aib3fphfv12"},{"post_id":"cm5na1mz700017zpna8hh4q7g","tag_id":"cm5na1mzd00047zpn5shvdqpl","_id":"cm5na1mzh000a7zpnhcapbl6b"},{"post_id":"cm5na1mz700017zpna8hh4q7g","tag_id":"clzxxiuy5000k0aibfd8jajr0","_id":"cm5na1mzi000c7zpn51tq2vgt"},{"post_id":"cm5na1mz800027zpnc0dwdn4c","tag_id":"cm5na1mzg00097zpn9wk51pru","_id":"cm5na1mzk000h7zpnhmf69m9t"},{"post_id":"cm5na1mzd00057zpn467m6cdi","tag_id":"cm5na1mzg00097zpn9wk51pru","_id":"cm5na1mzl000l7zpn57ue9n17"},{"post_id":"cm5na1mze00067zpnb76386tu","tag_id":"cm5na1mzl000k7zpn38tne4gg","_id":"cm5na1mzm000p7zpnfkzufh5i"},{"post_id":"cm5na1mzf00077zpn170dcr4y","tag_id":"cm5na1mzl000o7zpnfrowbms0","_id":"cm5na1mzn000w7zpn5rkw1y3s"},{"post_id":"cm5na1mzf00077zpn170dcr4y","tag_id":"cm5na1mzm000s7zpn8sf33nl6","_id":"cm5na1mzn000y7zpn7ll64e0n"},{"post_id":"cm5na1mzh000b7zpn1spr9btp","tag_id":"cm5na1mzn000v7zpn1bwihfsv","_id":"cm5na1mzo00107zpn11sx1nda"},{"post_id":"cm5na1mzi000d7zpn9uliaaw4","tag_id":"cm5na1mzn000z7zpneqpkdojv","_id":"cm5na1mzo00127zpnhht548gl"},{"post_id":"cm5na1mzt00137zpncafpc3n6","tag_id":"cm5na1mzt00157zpnhzjpa5cr","_id":"cm5na1mzu00167zpnctqrhv47"}],"Tag":[{"name":"Hadoop","_id":"clzxxiuxy00050aibakh7a82o"},{"name":"springboot","_id":"clzxxiuy2000d0aib6jnpbzap"},{"name":"docker","_id":"clzxxiuy5000k0aibfd8jajr0"},{"name":"jvm","_id":"clzxxiuyi001n0aib7ixu52cr"},{"name":"thread","_id":"clzxxiuyi001r0aib8a4s2z0d"},{"name":"Ceph","_id":"clzxxiuyj001v0aib6f3td1tn"},{"name":"ssh","_id":"clzxxiuyl00290aib9eaqanck"},{"name":"java","_id":"clzxxiuyl002b0aib5xpi2azz"},{"name":"nginx","_id":"cm5na1mzd00047zpn5shvdqpl"},{"name":"ISO","_id":"cm5na1mzg00097zpn9wk51pru"},{"name":"SpringBoot","_id":"cm5na1mzl000k7zpn38tne4gg"},{"name":"proxy","_id":"cm5na1mzl000o7zpnfrowbms0"},{"name":"linux","_id":"cm5na1mzm000s7zpn8sf33nl6"},{"name":"windows","_id":"cm5na1mzn000v7zpn1bwihfsv"},{"name":"golang","_id":"cm5na1mzn000z7zpneqpkdojv"},{"name":"wireguard","_id":"cm5na1mzt00157zpnhzjpa5cr"}]}}